
































































































































































































































































PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.









PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Mon Feb 17 09:23:27 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Mon Feb 17 09:23:27 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Mon Feb 17 2020 09:23:23 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Mon Feb 17 2020 09:23:27 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 1451622190 P30SDB		2 p30sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 1451622190 P30SDB		2 p30sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report


Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: text



Type Specified: html


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex

Using 1451622190 for database Id
Using	       2 for instance number
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex

Using 1451622190 for database Id
Using	       2 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p30sdb2      P30SDB		 30  17 Feb 2020 07:54	  1
				 31  17 Feb 2020 08:10	  1
				 32  17 Feb 2020 08:16	  1
				 33  17 Feb 2020 08:20	  1
				 34  17 Feb 2020 08:25	  1
				 35  17 Feb 2020 08:27	  1
				 36  17 Feb 2020 08:33	  1
				 37  17 Feb 2020 08:37	  1
				 38  17 Feb 2020 08:43	  1
				 39  17 Feb 2020 08:47	  1
				 40  17 Feb 2020 08:52	  1
				 41  17 Feb 2020 08:55	  1
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p30sdb2      P30SDB		 30  17 Feb 2020 07:54	  1
				 31  17 Feb 2020 08:10	  1
				 32  17 Feb 2020 08:16	  1
				 33  17 Feb 2020 08:20	  1
				 34  17 Feb 2020 08:25	  1
				 35  17 Feb 2020 08:27	  1
				 36  17 Feb 2020 08:33	  1
				 37  17 Feb 2020 08:37	  1
				 38  17 Feb 2020 08:43	  1
				 39  17 Feb 2020 08:47	  1
				 40  17 Feb 2020 08:52	  1
				 41  17 Feb 2020 08:55	  1
				 42  17 Feb 2020 09:00	  1
				 43  17 Feb 2020 09:09	  1
				 44  17 Feb 2020 09:14	  1
				 45  17 Feb 2020 09:17	  1
				 46  17 Feb 2020 09:23	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 45

End   Snapshot Id specified: 46

				 42  17 Feb 2020 09:00	  1
				 43  17 Feb 2020 09:09	  1
				 44  17 Feb 2020 09:14	  1
				 45  17 Feb 2020 09:17	  1
				 46  17 Feb 2020 09:23	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 45

End   Snapshot Id specified: 46




Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_45_46.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_45_46.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.txt

Using the report name awr.html

<html lang="en"><head><title>AWR Report for DB: P30SDB, Inst: p30sdb2, Snaps: 45-46</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P30SDB</td><td align="right" class='awrnc'>1451622190</td><td class='awrnc'>p30sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p30sdb2</td><td align="right" class='awrnc'>2</td><td class='awrnc'>17-Feb-20 07:43</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  64</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>	2</td><td align="right" class='awrnc'> 1007.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>45</td><td align="center" class='awrnc'>17-Feb-20 09:17:49</td><td align="right" class='awrnc'>243</td><td align="right" class='awrnc'>      2.6</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>46</td><td align="center" class='awrc'>17-Feb-20 09:23:23</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>	 .8</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		    5.58 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	       466.35 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>83.77</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:1451622190_2_46</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>83.77</td><td align="right" class='awrnc'>97.33</td><td scope="row" class='awrnc'>ADDM:1451622190_2_46</td><td class='awrnc'>17-Feb-20 09:17</td><td class='awrnc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>83.77</td><td align="right" class='awrc'>50.83</td><td scope="row" class='awrc'>ADDM:1451622190_2_46</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>83.77</td><td align="right" class='awrnc'>36.03</td><td scope="row" class='awrnc'>ADDM:1451622190_2_46</td><td class='awrnc'>17-Feb-20 09:17</td><td class='awrnc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>83.77</td><td align="right" class='awrc'>29.55</td><td scope="row" class='awrc'>ADDM:1451622190_2_46</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	      83.6</td><td align="right" class='awrc'>		     0.1</td><td align="right" class='awrc'>	  0.00</td><td align="right" class='awrc'>     38.44</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>	       16.3</td><td align="right" class='awrnc'>	       0.0</td><td align="right" class='awrnc'>      0.00</td><td align="right" class='awrnc'>	    7.49</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      2.2</td><td align="right" class='awrc'>		    0.0</td><td align="right" class='awrc'>	 0.00</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	1,737,692.8</td><td align="right" class='awrnc'>	   2,871.3</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	    102,617.9</td><td align="right" class='awrc'>	      169.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		4,944.4</td><td align="right" class='awrnc'>		   8.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      60,711.0</td><td align="right" class='awrc'>	       100.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  2,146.1</td><td align="right" class='awrnc'>		     3.6</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		60,709.6</td><td align="right" class='awrc'>		 100.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    2,073.1</td><td align="right" class='awrnc'>	       3.4</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       474.3</td><td align="right" class='awrc'>	       0.8</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   16.8</td><td align="right" class='awrnc'>		   0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		19.9</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		13.1</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       2.2</td><td align="right" class='awrc'>		     0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		   4.9</td><td align="right" class='awrnc'>		  0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      0.2</td><td align="right" class='awrc'>		    0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.8</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.1</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>	      20,162.3</td><td align="right" class='awrc'>		33.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>	       605.2</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		100.00</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	   40.83</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		100.17</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 95.08</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      99.98</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.98</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     96.67</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>	       100.00</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>20,149,357</td><td align="right" class='awrc'>14.2K</td><td align="right" class='awrc'>705.79us</td><td align="right" class='awrc'>50.8</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>896,835</td><td align="right" class='awrnc'>8087.4</td><td align="right" class='awrnc'>9.02ms</td><td align="right" class='awrnc'>28.9</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5454.6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.5</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>133,497</td><td align="right" class='awrnc'>1536.8</td><td align="right" class='awrnc'>11.51ms</td><td align="right" class='awrnc'>5.5</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>138,177</td><td align="right" class='awrc'>593.3</td><td align="right" class='awrc'>4.29ms</td><td align="right" class='awrc'>2.1</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>2,283</td><td align="right" class='awrnc'>417.4</td><td align="right" class='awrnc'>182.81ms</td><td align="right" class='awrnc'>1.5</td><td class='awrnc'>Other</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>11,441</td><td align="right" class='awrc'>131.7</td><td align="right" class='awrc'>11.51ms</td><td align="right" class='awrc'>.5</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>18,048</td><td align="right" class='awrnc'>123.2</td><td align="right" class='awrnc'>6.83ms</td><td align="right" class='awrnc'>.4</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>92.5</td><td align="right" class='awrc'>557.27ms</td><td align="right" class='awrc'>.3</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1,232</td><td align="right" class='awrnc'>33.3</td><td align="right" class='awrnc'>27.02ms</td><td align="right" class='awrnc'>.1</td><td class='awrnc'>Cluster</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>20,238,831</td><td align="right" class='awrc'>14,241</td><td align="right" class='awrc'>703.66us</td><td align="right" class='awrc'>50.9</td><td align="right" class='awrc'>42.6</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>1,206,635</td><td align="right" class='awrnc'>10,688</td><td align="right" class='awrnc'>8.86ms</td><td align="right" class='awrnc'>38.2</td><td align="right" class='awrnc'>31.9</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5,455</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.5</td><td align="right" class='awrc'>16.3</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>129,902</td><td align="right" class='awrnc'>1,737</td><td align="right" class='awrnc'>13.37ms</td><td align="right" class='awrnc'>6.2</td><td align="right" class='awrnc'>5.2</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>86,550</td><td align="right" class='awrc'>558</td><td align="right" class='awrc'>6.44ms</td><td align="right" class='awrc'>2.0</td><td align="right" class='awrc'>1.7</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>349.43ms</td><td align="right" class='awrnc'>.1</td><td align="right" class='awrnc'>0.1</td></tr>
<tr><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>4,031</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>4.69ms</td><td align="right" class='awrc'>.1</td><td align="right" class='awrc'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>106.85ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10.12ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>597</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>34.12us</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   64</td><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>	 2</td><td align="right" class='awrc'>	35.04</td><td align="right" class='awrc'>  22.37</td><td align="right" class='awrc'>  10.0</td><td align="right" class='awrc'>	13.6</td><td align="right" class='awrc'>  27.6</td><td align="right" class='awrc'>  70.8</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 30.8</td><td align="right" class='awrc'>     105.5</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      62,863.2</td><td align="right" class='awrc'>	    60,720.1</td><td align="right" class='awrc'>	   2,143.1</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   62,782.7</td><td align="right" class='awrnc'>	  60,709.6</td><td align="right" class='awrnc'> 	  2,073.1</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		   69.4</td><td align="right" class='awrnc'>		   2.4</td><td align="right" class='awrnc'>		 67.0</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     495.1</td><td align="right" class='awrc'>		   476.6</td><td align="right" class='awrc'>		  18.5</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  491.1</td><td align="right" class='awrnc'>		 474.3</td><td align="right" class='awrnc'>		 16.8</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		3.9</td><td align="right" class='awrnc'>	       2.2</td><td align="right" class='awrnc'> 	      1.7</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 62,857.0</td><td align="right" class='awrc'>	       60,711.0</td><td align="right" class='awrc'>	      2,146.1</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   62,855.7</td><td align="right" class='awrnc'>	  60,711.0</td><td align="right" class='awrnc'> 	  2,144.7</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    1.3</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		1.3</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'> 1,032,089.4</td><td align="right" class='awrc'> 1,032,089.4</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	 3,072.0</td><td align="right" class='awrnc'>	  3,072.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     2,774.2</td><td align="right" class='awrc'>     2,095.2</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    0.57</td><td align="right" class='awrc'>	 0.50</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	 1,056M</td><td align="right" class='awrnc'>	 1,056M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   1,207M</td><td align="right" class='awrc'>	  1,220M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	 40,404K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		96.39</td><td align="right" class='awrc'>	     92.94</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      83.69</td><td align="right" class='awrnc'>	    78.53</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      85.59</td><td align="right" class='awrc'> 	   83.73</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>27,972.70</td><td align="right" class='awrc'>99.97</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>5,454.59</td><td align="right" class='awrnc'>19.49</td><td align="right" class='awrnc'>88.35</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>203.07</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse elapsed time</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL compilation elapsed time</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence load elapsed time</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>connection management call elapsed time</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>repeated bind elapsed time</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>27,980.80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background elapsed time</td><td align="right" class='awrc'>2,402.82</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background cpu time</td><td align="right" class='awrnc'>719.28</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>11.65</td></tr>
<tr><td scope="row" class='awrc'>total CPU time</td><td align="right" class='awrc'>6,173.87</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>543,641,837,568</td><td align="right" class='awrc'>544,605,003,776</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,640,071,168</td><td align="right" class='awrnc'>1,650,434,048</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>585,232</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>1,417,918</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>552,730</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NICE_TIME</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SYS_TIME</td><td align="right" class='awrc'>271,771</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>USER_TIME</td><td align="right" class='awrnc'>201,248</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LOAD</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>22</td></tr>
<tr><td scope="row" class='awrnc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrnc'>1,082,224,197,632</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPUS</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_CORES</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_SOCKETS</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrnc'>87,380</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>6,291,456</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrc'>16,384</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>17-Feb 09:17:49</td><td align="right" class='awrc'>35.04</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>17-Feb 09:23:23</td><td align="right" class='awrnc'>22.37</td><td align="right" class='awrnc'>29.22</td><td align="right" class='awrnc'>10.05</td><td align="right" class='awrnc'>13.57</td><td align="right" class='awrnc'>70.78</td><td align="right" class='awrnc'>27.59</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  110.2%  of Total DB time	27,980.80 (s)</li>
<li class="awr">Total FG Wait Time:	       25,383.90 (s)  DB CPU time:	 5,454.59 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>20,149,606</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14,222</td><td align="right" class='awrc'>705.81us</td><td align="right" class='awrc'>50.83</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>1,206,278</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10,685</td><td align="right" class='awrnc'>8.86ms</td><td align="right" class='awrnc'>38.19</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5,455</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.49</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>6,074</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>429</td><td align="right" class='awrnc'>70.64ms</td><td align="right" class='awrnc'>1.53</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>443.52ms</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>3,056</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>6.00ms</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>106.85ms</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>653.66us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Network</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.38us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>20,149,357</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>14,221</td><td align="right" class='awrc'>705.79us</td><td align="right" class='awrc'>99.50</td><td align="right" class='awrc'>50.82</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>896,835</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>8,087</td><td align="right" class='awrnc'>9.02ms</td><td align="right" class='awrnc'>4.43</td><td align="right" class='awrnc'>28.90</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>133,497</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,537</td><td align="right" class='awrc'>11.51ms</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>5.49</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>138,177</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>593</td><td align="right" class='awrnc'>4.29ms</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>2.12</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>2,283</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>417</td><td align="right" class='awrc'>182.81ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.49</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>11,441</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>11.51ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.47</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>18,048</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>6.83ms</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>557.27ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1,232</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>27.02ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>4,284</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>7.25ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>443.52ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>577.63ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>634.86ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>2,163</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>6.46ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>356.88ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4279.42ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>2000.48ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>101.00ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>643</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2.74ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14.06ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>106.85ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>29.28ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18.16ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>2,971</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>353.88us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>59.74ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>160.21ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>1,066</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>703.55us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>339</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2.14ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.72ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.40ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.27ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.01ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>653.66us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>29.95ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.47ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.36ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>235</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>133.17us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current split</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17.03ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.09ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>214.66us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>216.05us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.20ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc index operation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11.47ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>193.77us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.68ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>387.62us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>324</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>20.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>34.84us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges enter server mode</td><td align="right" class='awrnc'>677</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.97us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.78ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42.89us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>115.50us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.31us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.33ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>92.75us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>672</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,013</td><td align="right" class='awrc'>2995.53ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL lock timer</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9000.30ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>44.89ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.22ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.22ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>87,242</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,460</td><td align="right" class='awrc'>16.73ms</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>60.75</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>14,300</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>265</td><td align="right" class='awrnc'>18.56ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>11.05</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>1,273</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>62.85ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>3.33</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>431</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>40.21ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.72</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>388</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>43.71ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.71</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>1,005</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13.28ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.56</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>68.21ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.43</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>16,075</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>281.60us</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.19</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>550</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>7.13ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>304</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>8.10ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>1,468</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>916.44us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>87,829</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.16us</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>551</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.12ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>66.96ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>34.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>1,816</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>543.88us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>43,894</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>21.85us</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>226</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.89ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>39.62ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>225</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2.34ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9.85ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1,417</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>331.61us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12.24ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23.85ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.15ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>679</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>469.96us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>485</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>618.99us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>63.39ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.32ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.81ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>817</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>249.75us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>26,029</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.47us</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>5,077</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17.74us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ: RAC AQ Network</td><td align="right" class='awrnc'>3,335</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23.98us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>359</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>209.55us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>2,341</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25.86us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.07ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>693.77us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>229</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>179.02us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.58ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>267.40us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.78ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24.46ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.67ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23.05ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>342.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>225.46us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>195</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>99.77us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.69ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>72.11us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.48ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.24ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12.96ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>179.54us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>342</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36.18us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>731.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>686.41us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>485.54us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.87ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.02ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>229.92us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>198.44us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>517.83us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>199.33us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>160.38us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>181.92us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.16ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>389</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.69us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>57.04us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.40ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>74.71us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>127.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.01ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>43,109</td><td align="right" class='awrnc'>2535.84 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Space Manager: slave idle wait</td><td align="right" class='awrc'>3,552</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15,294</td><td align="right" class='awrc'>4305.66ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>24,389</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>8,031</td><td align="right" class='awrnc'>329.30ms</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>4,108</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>2,316</td><td align="right" class='awrc'>563.84ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>133,443</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,334</td><td align="right" class='awrnc'>10.00ms</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>47,311</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>1,330</td><td align="right" class='awrc'>28.11ms</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>2,624,724</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,038</td><td align="right" class='awrnc'>395.36us</td><td align="right" class='awrnc'>12.96</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>512</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,002</td><td align="right" class='awrc'>1957.66ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>21,720</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,001</td><td align="right" class='awrnc'>46.11ms</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>2,220</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>667</td><td align="right" class='awrc'>300.40ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>222</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>666</td><td align="right" class='awrnc'>2999.84ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>7,487</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>659</td><td align="right" class='awrc'>88.06ms</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>300.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>360</td><td align="right" class='awrc'>60.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>336</td><td align="right" class='awrnc'>28.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>336</td><td align="right" class='awrc'>14.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>336</td><td align="right" class='awrnc'>2999.99ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>336</td><td align="right" class='awrc'>2999.68ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM background timer</td><td align="right" class='awrnc'>1,130</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>335</td><td align="right" class='awrnc'>296.49ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>334</td><td align="right" class='awrc'>55.69 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>334</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>334</td><td align="right" class='awrnc'>1000.14ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>333</td><td align="right" class='awrc'>3002.86ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>87</td><td align="right" class='awrnc'>333</td><td align="right" class='awrnc'>1743.88ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>3,395</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>332</td><td align="right" class='awrc'>97.72ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>301</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>330</td><td align="right" class='awrnc'>1096.84ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>30.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>300</td><td align="right" class='awrnc'>60.01 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>169</td><td align="right" class='awrc'>4031.82ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>48.24ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>43.41ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.67ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.19ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19.13us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>3297</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>86.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>23.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>59.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>1452</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>13.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>12.1</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>5039</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>55.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.9</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>226</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>81.0</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>19.4</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>465</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.0</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>287</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>2.8</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>72.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>18.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>995</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>31.2</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>269</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>44.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>368</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>54.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>5.4</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>2263</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>71.0</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>545</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>28.8</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>196</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>43.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>4.1</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>262</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>19.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>20.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>28.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>43.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>58.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>326</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>92.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>106</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>92.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>70.5</td></tr>
<tr><td scope="row" class='awrnc'>buffer deadlock</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>154</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>1959</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>31.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>17.6</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>25.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>85.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>85.4</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>109</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>44.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>30.3</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>19.9M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>60.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>33.6</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>30</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>83.3</td></tr>
<tr><td scope="row" class='awrc'>enq: CO - master slave det</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>1262</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.8</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>65</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.9</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>79.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>57.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>42.3</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>78.9</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>58.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>147</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>83.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>166</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>11.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>24.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>72.2</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>883.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>103</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>67</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>2161</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>4242</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.4</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>43</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>131.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>17.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.3</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1207</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>135.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.0</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current split</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>gc index operation</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>60.0</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>13.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>14.1</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>68.2</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>745</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>91.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>546</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.2</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>152</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>41</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.6</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>71</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>5.6</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>2321</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>60.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>2464</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>28.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>15.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>15.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>97</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>28.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>9.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>73</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>60.3</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>3307</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>6.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>1036</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>9.1</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>61</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>9.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>427</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>11.9</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>1108</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>13.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>3.1</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>71</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>26.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>12.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>65</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>32.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.7</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>92</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>7.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>18.8</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>10.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>42.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>387</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>30.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>39.1</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>42</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>76.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>14.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>225</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>52.0</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>386</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM background timer</td><td align="right" class='awrnc'>1114</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>88.2</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>188</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>7469</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.4</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>GCR sleep</td><td align="right" class='awrnc'>2209</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>132.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>111</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>309</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>41.7</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL lock timer</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>68.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>22.9</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>51</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>150</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>6.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>51.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.3</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>73.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>364</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>6.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>56.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>3377</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.7</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>327</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.5</td></tr>
<tr><td scope="row" class='awrc'>Space Manager: slave idle wait</td><td align="right" class='awrc'>3499</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.1</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>4089</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>88.8</td></tr>
<tr><td scope="row" class='awrc'>dispatcher timer</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>2.6M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>15.7</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>47.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.5</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>22K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>86.0</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>331</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>110</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>111</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>221</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>24.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>68.9</td></tr>
<tr><td scope="row" class='awrnc'>smon timer</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.2</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>510</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>watchdog main loop</td><td align="right" class='awrnc'>666</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>3183</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>3.5</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>84.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>59.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>2.4</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>740</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>49.0</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>4924</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>55.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>38.9</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>56.4</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>72.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>9.1</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>255</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>74.4</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>127</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>52.8</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>322</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>54.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>12.5</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>146</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>93.5</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>222</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>59.3</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>36.2</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>143</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>45.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>46.7</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>90.6</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>42.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>58.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>2.7</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>326</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>70.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>105</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>90.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.9</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>95.5</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>459</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>76.6</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>25.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>61.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>3088</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>96.4</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>66.7</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc index operation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>80.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>3406</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>74.3</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>90.9</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>733</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>81.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>ges ipc enter server mode</td><td align="right" class='awrnc'>151</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>65.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>67.6</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2198</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>60.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>5.3</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>386</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>84.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>34.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>80.4</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>91.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>1472</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>55.5</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>344</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>66.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>57.1</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>62.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>78.7</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>114</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>73.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>318</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>71.3</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>62.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>85.9</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>73.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>66.3</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>42.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>21.1</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>385</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>51.4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>39.1</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>41</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>76.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>2.4</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>64</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>71.6</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>73</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>173</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>58.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>181</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>19.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>56.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.9</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>381</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>15.1</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>259</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>68.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.1</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>94.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>294</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>29.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>58.0</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>156</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>71.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>95.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>6.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>71.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>29</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.3</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>29.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>56.8</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>116</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>24.7</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>344</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>82.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>66.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>14.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>8.3</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>69.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>6.7M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>66.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>52.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>8.3</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>13.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>919</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>24.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>89.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>57.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.8</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>21.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>41.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>33.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>123</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>16.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>83.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>8146</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>27.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>32.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>821.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>102</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>46.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>64</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>1935</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>3885</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>6.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.8</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>42</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>126.8K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.3</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>16.5K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.9</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1040</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>13.8</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>131.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>24.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>39.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>40.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>1866</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>85.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>31.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>40.9</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>490</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>8.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>24.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>94.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>371</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>84.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>90.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>39.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>202</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>93.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>94</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>90.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>90.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>88.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.0</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>121</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>86.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>96.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>92.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>81.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>60.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>13.5K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>39.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.5</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>117</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>48.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>71.4</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>351</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>9.1</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>32.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>48.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>84.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>51</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>1313</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>42.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>57.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>93.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>43.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>2.3</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>75.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>7100</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>91.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>947</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>91.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>86.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>303</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>76.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>58</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>10.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>166</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>42.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>57.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>113</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>12.8K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>75</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>42</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>64.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>4329</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>165</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>167</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>86.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>3345</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>59.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>632</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>90.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.3</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p30sdb.example.com</td><td align="right" class='awrc'>27,550</td><td align="right" class='awrc'>5,372</td><td align="right" class='awrc'>19,872</td><td align="right" class='awrc'>33,570</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>22</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>p30sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p30sdb.example.com</td>
<td align="right" class='awrc'>19869441</td><td align="right" class='awrc'>14029</td><td align="right" class='awrc'>2992</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>231</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>87147</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>768</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>255</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>850.75us</td></tr>
<tr><td scope="row" class='awrnc'>obj broadcast channel</td>
<td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.76ms</td></tr>
<tr><td scope="row" class='awrc'>MMON remote action broadcast channel</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>4279.42ms</td></tr>
<tr><td scope="row" class='awrnc'>RBR channel</td>
<td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>46.27ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>14,129.05</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>10,523.07</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>413.82</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>259.54</td></tr>
<tr><td scope="row" class='awrc'>DBW2</td><td scope="row" class='awrc'>db writer process 2</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>180.69</td></tr>
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>180.44</td></tr>
<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>178.53</td></tr>
<tr><td scope="row" class='awrnc'>DBW4</td><td scope="row" class='awrnc'>db writer process 4</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>178.48</td></tr>
<tr><td scope="row" class='awrc'>DBW6</td><td scope="row" class='awrc'>db writer process 6</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>177.28</td></tr>
<tr><td scope="row" class='awrnc'>DBW7</td><td scope="row" class='awrnc'>db writer process 7</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>177.15</td></tr>
<tr><td scope="row" class='awrc'>DBW5</td><td scope="row" class='awrc'>db writer process 5</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>176.75</td></tr>
<tr><td scope="row" class='awrnc'>DBW0</td><td scope="row" class='awrnc'>db writer process 0</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>176.14</td></tr>
<tr><td scope="row" class='awrc'>SMON</td><td scope="row" class='awrc'>System Monitor Process</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>92.06</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>27.94</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>17.32</td></tr>
<tr><td scope="row" class='awrnc'>LMON</td><td scope="row" class='awrnc'>global enqueue service monitor</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>13.56</td></tr>
<tr><td scope="row" class='awrc'>IMR</td><td scope="row" class='awrc'>CGS IMR Slave</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>13.03</td></tr>
<tr><td scope="row" class='awrnc'>CKPT</td><td scope="row" class='awrnc'>checkpoint</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>10.37</td></tr>
<tr><td scope="row" class='awrc'>CKPT</td><td scope="row" class='awrc'>checkpoint</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>5.70</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>5.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>5,372.56</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>560.08</td></tr>
<tr><td scope="row" class='awrc'>VKTM</td><td scope="row" class='awrc'>Virtual Keeper of TiMe process</td><td align="right" class='awrc'>17.65</td></tr>
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td align="right" class='awrnc'>12.03</td></tr>
<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td align="right" class='awrc'>12.01</td></tr>
<tr><td scope="row" class='awrnc'>DBW7</td><td scope="row" class='awrnc'>db writer process 7</td><td align="right" class='awrnc'>11.88</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td align="right" class='awrc'>11.86</td></tr>
<tr><td scope="row" class='awrnc'>DBW4</td><td scope="row" class='awrnc'>db writer process 4</td><td align="right" class='awrnc'>11.81</td></tr>
<tr><td scope="row" class='awrc'>DBW5</td><td scope="row" class='awrc'>db writer process 5</td><td align="right" class='awrc'>11.79</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td align="right" class='awrnc'>11.77</td></tr>
<tr><td scope="row" class='awrc'>DBW6</td><td scope="row" class='awrc'>db writer process 6</td><td align="right" class='awrc'>11.77</td></tr>
<tr><td scope="row" class='awrnc'>DIA0</td><td scope="row" class='awrnc'>diagnosibility process 0</td><td align="right" class='awrnc'>9.33</td></tr>
<tr><td scope="row" class='awrc'>RS*</td><td scope="row" class='awrc'>GCS RM Slave</td><td align="right" class='awrc'>8.62</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td align="right" class='awrnc'>7.34</td></tr>
<tr><td scope="row" class='awrc'>CR*</td><td scope="row" class='awrc'>GCS CR Slave</td><td align="right" class='awrc'>7.30</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td align="right" class='awrnc'>6.73</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td align="right" class='awrc'>5.44</td></tr>
<tr><td scope="row" class='awrnc'>SCM</td><td scope="row" class='awrnc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrnc'>2.68</td></tr>
<tr><td scope="row" class='awrc'>GCR</td><td scope="row" class='awrc'>GCR Slaves (LMHB)</td><td align="right" class='awrc'>2.21</td></tr>
<tr><td scope="row" class='awrnc'>LMD0</td><td scope="row" class='awrnc'>global enqueue service daemon 0</td><td align="right" class='awrnc'>1.79</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   91.9% of Total DB Time (s):		27,981</li>
<li class="awr">Captured PL/SQL account for   43.4% of Total DB Time (s):	   27,981</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>22,502.69</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>80.42</td><td align="right" class='awrc'>18.62</td><td align="right" class='awrc'>58.42</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>3,215.79</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>11.49</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>16.67</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>260.57</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>260.57</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>6.59</td><td align="right" class='awrc'>19.23</td><td scope="row" class='awrc'><a class="awr" href="#bhydnmhhkhhdy">bhydnmhhkhhdy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>259.87</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>259.87</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>18.07</td><td align="right" class='awrnc'>48.04</td><td scope="row" class='awrnc'><a class="awr" href="#fcfy9turtx376">fcfy9turtx376</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>259.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>259.27</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>16.22</td><td align="right" class='awrc'>43.64</td><td scope="row" class='awrc'><a class="awr" href="#f7s68cgfrpfx5">f7s68cgfrpfx5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>259.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>259.25</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>5.76</td><td align="right" class='awrnc'>17.19</td><td scope="row" class='awrnc'><a class="awr" href="#c45q6fupzf7tg">c45q6fupzf7tg</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>259.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>259.25</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>7.19</td><td align="right" class='awrc'>14.50</td><td scope="row" class='awrc'><a class="awr" href="#5m9kb3cpp792u">5m9kb3cpp792u</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>259.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>259.25</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>7.35</td><td align="right" class='awrnc'>14.72</td><td scope="row" class='awrnc'><a class="awr" href="#0u5gbpqpjtcbb">0u5gbpqpjtcbb</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>258.93</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>258.93</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>13.08</td><td scope="row" class='awrc'><a class="awr" href="#0fxpq9z2j2zyu">0fxpq9z2j2zyu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>258.92</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>258.92</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>13.76</td><td align="right" class='awrnc'>37.13</td><td scope="row" class='awrnc'><a class="awr" href="#5t5va0wzy46cz">5t5va0wzy46cz</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   81.1% of Total CPU Time (s): 	  5,455</li>
<li class="awr">Captured PL/SQL account for   53.4% of Total CPU Time (s):	     5,455</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>4,190.10</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>76.82</td><td align="right" class='awrc'>22,502.69</td><td align="right" class='awrc'>18.62</td><td align="right" class='awrc'>58.42</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>232.40</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.26</td><td align="right" class='awrnc'>3,215.79</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>16.67</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>85.35</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>85.35</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>258.88</td><td align="right" class='awrc'>32.97</td><td align="right" class='awrc'>84.51</td><td scope="row" class='awrc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>85.21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>85.21</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>33.17</td><td align="right" class='awrnc'>83.59</td><td scope="row" class='awrnc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>85.20</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>85.20</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>256.79</td><td align="right" class='awrc'>33.18</td><td align="right" class='awrc'>84.21</td><td scope="row" class='awrc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>85.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>85.11</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>32.88</td><td align="right" class='awrnc'>84.32</td><td scope="row" class='awrnc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>84.80</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84.80</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>256.81</td><td align="right" class='awrc'>33.02</td><td align="right" class='awrc'>84.37</td><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>84.72</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>84.72</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>256.91</td><td align="right" class='awrnc'>32.98</td><td align="right" class='awrnc'>83.11</td><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>84.54</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84.54</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>256.86</td><td align="right" class='awrc'>32.91</td><td align="right" class='awrc'>84.51</td><td scope="row" class='awrc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>84.50</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>84.50</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>32.64</td><td align="right" class='awrnc'>84.51</td><td scope="row" class='awrnc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>84.28</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84.28</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>256.84</td><td align="right" class='awrc'>32.82</td><td align="right" class='awrc'>84.82</td><td scope="row" class='awrc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>84.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>84.22</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>32.53</td><td align="right" class='awrnc'>84.18</td><td scope="row" class='awrnc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>84.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84.13</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>258.87</td><td align="right" class='awrc'>32.50</td><td align="right" class='awrc'>83.86</td><td scope="row" class='awrc'><a class="awr" href="#6z2cq7r4rtuz6">6z2cq7r4rtuz6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>84.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>84.09</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>256.90</td><td align="right" class='awrnc'>32.73</td><td align="right" class='awrnc'>84.27</td><td scope="row" class='awrnc'><a class="awr" href="#2t98zru3nqhar">2t98zru3nqhar</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>83.91</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>83.91</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>256.82</td><td align="right" class='awrc'>32.67</td><td align="right" class='awrc'>84.63</td><td scope="row" class='awrc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>83.84</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>83.84</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>256.80</td><td align="right" class='awrnc'>32.65</td><td align="right" class='awrnc'>84.23</td><td scope="row" class='awrnc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>83.80</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>83.80</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>256.88</td><td align="right" class='awrc'>32.62</td><td align="right" class='awrc'>84.26</td><td scope="row" class='awrc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>83.57</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>83.57</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>32.28</td><td align="right" class='awrnc'>83.37</td><td scope="row" class='awrnc'><a class="awr" href="#cw70q4hn80hyn">cw70q4hn80hyn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>83.39</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>83.39</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>256.92</td><td align="right" class='awrc'>32.46</td><td align="right" class='awrc'>83.46</td><td scope="row" class='awrc'><a class="awr" href="#1wts9khnkkvhw">1wts9khnkkvhw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>83.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>83.28</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>256.81</td><td align="right" class='awrnc'>32.43</td><td align="right" class='awrnc'>84.08</td><td scope="row" class='awrnc'><a class="awr" href="#45vm32p2sn1md">45vm32p2sn1md</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>82.88</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>82.88</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>256.85</td><td align="right" class='awrc'>32.27</td><td align="right" class='awrc'>83.37</td><td scope="row" class='awrc'><a class="awr" href="#7v30dvkrm7b1v">7v30dvkrm7b1v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>82.52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>82.52</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>256.86</td><td align="right" class='awrnc'>32.13</td><td align="right" class='awrnc'>83.06</td><td scope="row" class='awrnc'><a class="awr" href="#fr7qdwubf5vg8">fr7qdwubf5vg8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>69.31</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>69.31</td><td align="right" class='awrc'>1.27</td><td align="right" class='awrc'>258.89</td><td align="right" class='awrc'>26.77</td><td align="right" class='awrc'>69.94</td><td scope="row" class='awrc'><a class="awr" href="#2h44xdn8mgfr1">2h44xdn8mgfr1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>64.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>64.63</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>24.97</td><td align="right" class='awrnc'>66.82</td><td scope="row" class='awrnc'><a class="awr" href="#6kmjaydb8dsqs">6kmjaydb8dsqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>64.20</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>64.20</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>256.89</td><td align="right" class='awrc'>24.99</td><td align="right" class='awrc'>66.02</td><td scope="row" class='awrc'><a class="awr" href="#fckscu903tf4w">fckscu903tf4w</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>63.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>63.96</td><td align="right" class='awrnc'>1.17</td><td align="right" class='awrnc'>257.01</td><td align="right" class='awrnc'>24.89</td><td align="right" class='awrnc'>66.25</td><td scope="row" class='awrnc'><a class="awr" href="#0fb14y10vjhsr">0fb14y10vjhsr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63.76</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>256.81</td><td align="right" class='awrc'>24.83</td><td align="right" class='awrc'>65.29</td><td scope="row" class='awrc'><a class="awr" href="#00057r4zrytpk">00057r4zrytpk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>63.59</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>63.59</td><td align="right" class='awrnc'>1.17</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>24.76</td><td align="right" class='awrnc'>66.15</td><td scope="row" class='awrnc'><a class="awr" href="#fkuvv1yajzw3f">fkuvv1yajzw3f</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63.00</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>258.85</td><td align="right" class='awrc'>24.34</td><td align="right" class='awrc'>65.13</td><td scope="row" class='awrc'><a class="awr" href="#2mvw58awb6cyc">2mvw58awb6cyc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>62.85</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>62.85</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>256.82</td><td align="right" class='awrnc'>24.47</td><td align="right" class='awrnc'>65.38</td><td scope="row" class='awrnc'><a class="awr" href="#3dk52894pmqfv">3dk52894pmqfv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>61.86</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>61.86</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>23.90</td><td align="right" class='awrc'>64.09</td><td scope="row" class='awrc'><a class="awr" href="#92xgsuancvhq2">92xgsuancvhq2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>58.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>58.01</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>258.88</td><td align="right" class='awrnc'>22.41</td><td align="right" class='awrnc'>59.90</td><td scope="row" class='awrnc'><a class="awr" href="#c0pd7mpw5mucc">c0pd7mpw5mucc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>57.99</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>57.99</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>258.86</td><td align="right" class='awrc'>22.40</td><td align="right" class='awrc'>60.08</td><td scope="row" class='awrc'><a class="awr" href="#bgkfz06rghsby">bgkfz06rghsby</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   96.1% of Total User I/O Wait Time (s):	   14,241</li>
<li class="awr">Captured PL/SQL account for   53.1% of Total User I/O Wait Time (s):	      14,241</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,145.30</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>92.30</td><td align="right" class='awrc'>22,502.69</td><td align="right" class='awrc'>18.62</td><td align="right" class='awrc'>58.42</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>536.16</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.76</td><td align="right" class='awrnc'>3,215.79</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>16.67</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>218.80</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>218.80</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>258.90</td><td align="right" class='awrc'>32.64</td><td align="right" class='awrc'>84.51</td><td scope="row" class='awrc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>218.77</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>218.77</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>258.88</td><td align="right" class='awrnc'>32.97</td><td align="right" class='awrnc'>84.51</td><td scope="row" class='awrnc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>218.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>218.26</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>258.85</td><td align="right" class='awrc'>32.88</td><td align="right" class='awrc'>84.32</td><td scope="row" class='awrc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>217.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>217.96</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>32.53</td><td align="right" class='awrnc'>84.18</td><td scope="row" class='awrnc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>217.86</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>217.86</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>256.84</td><td align="right" class='awrc'>32.82</td><td align="right" class='awrc'>84.82</td><td scope="row" class='awrc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>217.35</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>217.35</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>256.82</td><td align="right" class='awrnc'>32.67</td><td align="right" class='awrnc'>84.63</td><td scope="row" class='awrnc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>217.10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>217.10</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>258.87</td><td align="right" class='awrc'>32.50</td><td align="right" class='awrc'>83.86</td><td scope="row" class='awrc'><a class="awr" href="#6z2cq7r4rtuz6">6z2cq7r4rtuz6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>217.06</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>217.06</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>256.86</td><td align="right" class='awrnc'>32.91</td><td align="right" class='awrnc'>84.51</td><td scope="row" class='awrnc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>216.68</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>216.68</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>256.81</td><td align="right" class='awrc'>33.02</td><td align="right" class='awrc'>84.37</td><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>216.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>216.49</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>256.90</td><td align="right" class='awrnc'>32.73</td><td align="right" class='awrnc'>84.27</td><td scope="row" class='awrnc'><a class="awr" href="#2t98zru3nqhar">2t98zru3nqhar</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>216.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>216.45</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>256.88</td><td align="right" class='awrc'>32.62</td><td align="right" class='awrc'>84.26</td><td scope="row" class='awrc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>216.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>216.30</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>256.80</td><td align="right" class='awrnc'>32.65</td><td align="right" class='awrnc'>84.23</td><td scope="row" class='awrnc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>216.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>216.24</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>256.79</td><td align="right" class='awrc'>33.18</td><td align="right" class='awrc'>84.21</td><td scope="row" class='awrc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>215.92</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>215.92</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>256.81</td><td align="right" class='awrnc'>32.43</td><td align="right" class='awrnc'>84.08</td><td scope="row" class='awrnc'><a class="awr" href="#45vm32p2sn1md">45vm32p2sn1md</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>215.85</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>215.85</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>258.90</td><td align="right" class='awrc'>32.28</td><td align="right" class='awrc'>83.37</td><td scope="row" class='awrc'><a class="awr" href="#cw70q4hn80hyn">cw70q4hn80hyn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>214.70</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>214.70</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>33.17</td><td align="right" class='awrnc'>83.59</td><td scope="row" class='awrnc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>214.42</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>214.42</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>256.92</td><td align="right" class='awrc'>32.46</td><td align="right" class='awrc'>83.46</td><td scope="row" class='awrc'><a class="awr" href="#1wts9khnkkvhw">1wts9khnkkvhw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>214.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>214.13</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>32.27</td><td align="right" class='awrnc'>83.37</td><td scope="row" class='awrnc'><a class="awr" href="#7v30dvkrm7b1v">7v30dvkrm7b1v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>213.51</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>213.51</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>256.91</td><td align="right" class='awrc'>32.98</td><td align="right" class='awrc'>83.11</td><td scope="row" class='awrc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>213.34</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>213.34</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>256.86</td><td align="right" class='awrnc'>32.13</td><td align="right" class='awrnc'>83.06</td><td scope="row" class='awrnc'><a class="awr" href="#fr7qdwubf5vg8">fr7qdwubf5vg8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>181.06</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>181.06</td><td align="right" class='awrc'>1.27</td><td align="right" class='awrc'>258.89</td><td align="right" class='awrc'>26.77</td><td align="right" class='awrc'>69.94</td><td scope="row" class='awrc'><a class="awr" href="#2h44xdn8mgfr1">2h44xdn8mgfr1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>172.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>172.96</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>24.97</td><td align="right" class='awrnc'>66.82</td><td scope="row" class='awrnc'><a class="awr" href="#6kmjaydb8dsqs">6kmjaydb8dsqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>170.28</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>170.28</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>257.01</td><td align="right" class='awrc'>24.89</td><td align="right" class='awrc'>66.25</td><td scope="row" class='awrc'><a class="awr" href="#0fb14y10vjhsr">0fb14y10vjhsr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>169.90</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>169.90</td><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>24.76</td><td align="right" class='awrnc'>66.15</td><td scope="row" class='awrnc'><a class="awr" href="#fkuvv1yajzw3f">fkuvv1yajzw3f</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>169.59</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>169.59</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>256.89</td><td align="right" class='awrc'>24.99</td><td align="right" class='awrc'>66.02</td><td scope="row" class='awrc'><a class="awr" href="#fckscu903tf4w">fckscu903tf4w</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>168.59</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>168.59</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>24.34</td><td align="right" class='awrnc'>65.13</td><td scope="row" class='awrnc'><a class="awr" href="#2mvw58awb6cyc">2mvw58awb6cyc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>167.91</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>167.91</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>256.82</td><td align="right" class='awrc'>24.47</td><td align="right" class='awrc'>65.38</td><td scope="row" class='awrc'><a class="awr" href="#3dk52894pmqfv">3dk52894pmqfv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>167.68</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>167.68</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>256.81</td><td align="right" class='awrnc'>24.83</td><td align="right" class='awrnc'>65.29</td><td scope="row" class='awrnc'><a class="awr" href="#00057r4zrytpk">00057r4zrytpk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>165.89</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>165.89</td><td align="right" class='awrc'>1.16</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>23.90</td><td align="right" class='awrc'>64.09</td><td scope="row" class='awrc'><a class="awr" href="#92xgsuancvhq2">92xgsuancvhq2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>155.53</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>155.53</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>258.86</td><td align="right" class='awrnc'>22.40</td><td align="right" class='awrnc'>60.08</td><td scope="row" class='awrnc'><a class="awr" href="#bgkfz06rghsby">bgkfz06rghsby</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>155.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>155.07</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>258.88</td><td align="right" class='awrc'>22.41</td><td align="right" class='awrc'>59.90</td><td scope="row" class='awrc'><a class="awr" href="#c0pd7mpw5mucc">c0pd7mpw5mucc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:	34,337,885</li>
<li class="awr">Captured SQL account for   94.9% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>31,317,073</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>5.01</td><td align="right" class='awrc'>91.20</td><td align="right" class='awrc'>22,502.69</td><td class='awrc'>18.6</td><td class='awrc'>58.4</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,236,876</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>6.39</td><td align="right" class='awrnc'>3.60</td><td align="right" class='awrnc'>3,215.79</td><td class='awrnc'>7.2</td><td class='awrnc'>16.7</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>626,097</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>626,097.00</td><td align="right" class='awrc'>1.82</td><td align="right" class='awrc'>256.91</td><td class='awrc'>33</td><td class='awrc'>83.1</td><td scope="row" class='awrc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>622,597</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>622,597.00</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>256.85</td><td class='awrnc'>33.2</td><td class='awrnc'>83.6</td><td scope="row" class='awrnc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>606,220</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>606,220.00</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>256.79</td><td class='awrc'>33.2</td><td class='awrc'>84.2</td><td scope="row" class='awrc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>601,996</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>601,996.00</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>258.88</td><td class='awrnc'>33</td><td class='awrnc'>84.5</td><td scope="row" class='awrnc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>597,231</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>597,231.00</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>256.86</td><td class='awrc'>32.9</td><td class='awrc'>84.5</td><td scope="row" class='awrc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>592,033</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>592,033.00</td><td align="right" class='awrnc'>1.72</td><td align="right" class='awrnc'>258.85</td><td class='awrnc'>32.9</td><td class='awrnc'>84.3</td><td scope="row" class='awrnc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>589,997</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>589,997.00</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>256.81</td><td class='awrc'>33</td><td class='awrc'>84.4</td><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>588,609</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>588,609.00</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>256.90</td><td class='awrnc'>32.7</td><td class='awrnc'>84.3</td><td scope="row" class='awrnc'><a class="awr" href="#2t98zru3nqhar">2t98zru3nqhar</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>577,629</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>577,629.00</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>258.90</td><td class='awrc'>32.6</td><td class='awrc'>84.5</td><td scope="row" class='awrc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>576,318</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>576,318.00</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>256.92</td><td class='awrnc'>32.5</td><td class='awrnc'>83.5</td><td scope="row" class='awrnc'><a class="awr" href="#1wts9khnkkvhw">1wts9khnkkvhw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>569,755</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>569,755.00</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>256.88</td><td class='awrc'>32.6</td><td class='awrc'>84.3</td><td scope="row" class='awrc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>568,366</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>568,366.00</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>258.87</td><td class='awrnc'>32.5</td><td class='awrnc'>83.9</td><td scope="row" class='awrnc'><a class="awr" href="#6z2cq7r4rtuz6">6z2cq7r4rtuz6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>568,040</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>568,040.00</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>256.84</td><td class='awrc'>32.8</td><td class='awrc'>84.8</td><td scope="row" class='awrc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>565,825</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>565,825.00</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>256.85</td><td class='awrnc'>32.3</td><td class='awrnc'>83.4</td><td scope="row" class='awrnc'><a class="awr" href="#7v30dvkrm7b1v">7v30dvkrm7b1v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563,537</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563,537.00</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>256.82</td><td class='awrc'>32.7</td><td class='awrc'>84.6</td><td scope="row" class='awrc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563,472</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563,472.00</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>258.90</td><td class='awrnc'>32.5</td><td class='awrnc'>84.2</td><td scope="row" class='awrnc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562,385</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562,385.00</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>256.80</td><td class='awrc'>32.6</td><td class='awrc'>84.2</td><td scope="row" class='awrc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>559,504</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>559,504.00</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>256.81</td><td class='awrnc'>32.4</td><td class='awrnc'>84.1</td><td scope="row" class='awrnc'><a class="awr" href="#45vm32p2sn1md">45vm32p2sn1md</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>556,289</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>556,289.00</td><td align="right" class='awrc'>1.62</td><td align="right" class='awrc'>258.90</td><td class='awrc'>32.3</td><td class='awrc'>83.4</td><td scope="row" class='awrc'><a class="awr" href="#cw70q4hn80hyn">cw70q4hn80hyn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>556,106</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>556,106.00</td><td align="right" class='awrnc'>1.62</td><td align="right" class='awrnc'>256.86</td><td class='awrnc'>32.1</td><td class='awrnc'>83.1</td><td scope="row" class='awrnc'><a class="awr" href="#fr7qdwubf5vg8">fr7qdwubf5vg8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>478,730</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>478,730.00</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>258.89</td><td class='awrc'>26.8</td><td class='awrc'>69.9</td><td scope="row" class='awrc'><a class="awr" href="#2h44xdn8mgfr1">2h44xdn8mgfr1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>438,050</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>438,050.00</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>256.81</td><td class='awrnc'>24.8</td><td class='awrnc'>65.3</td><td scope="row" class='awrnc'><a class="awr" href="#00057r4zrytpk">00057r4zrytpk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>424,601</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>424,601.00</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>256.89</td><td class='awrc'>25</td><td class='awrc'>66</td><td scope="row" class='awrc'><a class="awr" href="#fckscu903tf4w">fckscu903tf4w</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>420,333</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>420,333.00</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>258.85</td><td class='awrnc'>25</td><td class='awrnc'>66.8</td><td scope="row" class='awrnc'><a class="awr" href="#6kmjaydb8dsqs">6kmjaydb8dsqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>419,266</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>419,266.00</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>257.01</td><td class='awrc'>24.9</td><td class='awrc'>66.3</td><td scope="row" class='awrc'><a class="awr" href="#0fb14y10vjhsr">0fb14y10vjhsr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>417,566</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>417,566.00</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>256.85</td><td class='awrnc'>24.8</td><td class='awrnc'>66.1</td><td scope="row" class='awrnc'><a class="awr" href="#fkuvv1yajzw3f">fkuvv1yajzw3f</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>404,094</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>404,094.00</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>258.84</td><td class='awrc'>23.9</td><td class='awrc'>64.1</td><td scope="row" class='awrc'><a class="awr" href="#92xgsuancvhq2">92xgsuancvhq2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>403,582</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>403,582.00</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>258.85</td><td class='awrnc'>24.3</td><td class='awrnc'>65.1</td><td scope="row" class='awrnc'><a class="awr" href="#2mvw58awb6cyc">2mvw58awb6cyc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>397,736</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>397,736.00</td><td align="right" class='awrc'>1.16</td><td align="right" class='awrc'>256.82</td><td class='awrc'>24.5</td><td class='awrc'>65.4</td><td scope="row" class='awrc'><a class="awr" href="#3dk52894pmqfv">3dk52894pmqfv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>381,534</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>381,534.00</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>258.88</td><td class='awrnc'>22.4</td><td class='awrnc'>59.9</td><td scope="row" class='awrnc'><a class="awr" href="#c0pd7mpw5mucc">c0pd7mpw5mucc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>377,947</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>377,947.00</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>258.86</td><td class='awrc'>22.4</td><td class='awrc'>60.1</td><td scope="row" class='awrc'><a class="awr" href="#bgkfz06rghsby">bgkfz06rghsby</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:      20,315,043</li>
<li class="awr">Captured SQL account for   95.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>18,816,309</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>3.01</td><td align="right" class='awrc'>92.62</td><td align="right" class='awrc'>22,502.69</td><td align="right" class='awrc'>18.62</td><td align="right" class='awrc'>58.42</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>583,514</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>3.02</td><td align="right" class='awrnc'>2.87</td><td align="right" class='awrnc'>3,215.79</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>16.67</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>339,387</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>339,387.00</td><td align="right" class='awrc'>1.67</td><td align="right" class='awrc'>256.84</td><td align="right" class='awrc'>32.82</td><td align="right" class='awrc'>84.82</td><td scope="row" class='awrc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>338,401</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>338,401.00</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>256.82</td><td align="right" class='awrnc'>32.67</td><td align="right" class='awrnc'>84.63</td><td scope="row" class='awrnc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>338,370</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>338,370.00</td><td align="right" class='awrc'>1.67</td><td align="right" class='awrc'>258.88</td><td align="right" class='awrc'>32.97</td><td align="right" class='awrc'>84.51</td><td scope="row" class='awrc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>338,185</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>338,185.00</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>32.53</td><td align="right" class='awrnc'>84.18</td><td scope="row" class='awrnc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>338,107</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>338,107.00</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>256.80</td><td align="right" class='awrc'>32.65</td><td align="right" class='awrc'>84.23</td><td scope="row" class='awrc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>337,950</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>337,950.00</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>32.64</td><td align="right" class='awrnc'>84.51</td><td scope="row" class='awrnc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>337,620</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>337,620.00</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>258.85</td><td align="right" class='awrc'>32.88</td><td align="right" class='awrc'>84.32</td><td scope="row" class='awrc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>336,444</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>336,444.00</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>256.88</td><td align="right" class='awrnc'>32.62</td><td align="right" class='awrnc'>84.26</td><td scope="row" class='awrnc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>335,385</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>335,385.00</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>256.81</td><td align="right" class='awrc'>33.02</td><td align="right" class='awrc'>84.37</td><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>334,882</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>334,882.00</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>256.86</td><td align="right" class='awrnc'>32.91</td><td align="right" class='awrnc'>84.51</td><td scope="row" class='awrnc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>334,817</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>334,817.00</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>256.79</td><td align="right" class='awrc'>33.18</td><td align="right" class='awrc'>84.21</td><td scope="row" class='awrc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>334,695</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>334,695.00</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>258.87</td><td align="right" class='awrnc'>32.50</td><td align="right" class='awrnc'>83.86</td><td scope="row" class='awrnc'><a class="awr" href="#6z2cq7r4rtuz6">6z2cq7r4rtuz6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>334,574</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>334,574.00</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>258.90</td><td align="right" class='awrc'>32.28</td><td align="right" class='awrc'>83.37</td><td scope="row" class='awrc'><a class="awr" href="#cw70q4hn80hyn">cw70q4hn80hyn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>333,384</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>333,384.00</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>256.81</td><td align="right" class='awrnc'>32.43</td><td align="right" class='awrnc'>84.08</td><td scope="row" class='awrnc'><a class="awr" href="#45vm32p2sn1md">45vm32p2sn1md</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>333,333</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>333,333.00</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>256.90</td><td align="right" class='awrc'>32.73</td><td align="right" class='awrc'>84.27</td><td scope="row" class='awrc'><a class="awr" href="#2t98zru3nqhar">2t98zru3nqhar</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>331,264</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>331,264.00</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>256.92</td><td align="right" class='awrnc'>32.46</td><td align="right" class='awrnc'>83.46</td><td scope="row" class='awrnc'><a class="awr" href="#1wts9khnkkvhw">1wts9khnkkvhw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>331,133</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>331,133.00</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>256.85</td><td align="right" class='awrc'>33.17</td><td align="right" class='awrc'>83.59</td><td scope="row" class='awrc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>330,764</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>330,764.00</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>32.27</td><td align="right" class='awrnc'>83.37</td><td scope="row" class='awrnc'><a class="awr" href="#7v30dvkrm7b1v">7v30dvkrm7b1v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>330,668</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>330,668.00</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>256.86</td><td align="right" class='awrc'>32.13</td><td align="right" class='awrc'>83.06</td><td scope="row" class='awrc'><a class="awr" href="#fr7qdwubf5vg8">fr7qdwubf5vg8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>328,107</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>328,107.00</td><td align="right" class='awrnc'>1.62</td><td align="right" class='awrnc'>256.91</td><td align="right" class='awrnc'>32.98</td><td align="right" class='awrnc'>83.11</td><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>273,442</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>273,442.00</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>258.89</td><td align="right" class='awrc'>26.77</td><td align="right" class='awrc'>69.94</td><td scope="row" class='awrc'><a class="awr" href="#2h44xdn8mgfr1">2h44xdn8mgfr1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>253,905</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>253,905.00</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>256.89</td><td align="right" class='awrnc'>24.99</td><td align="right" class='awrnc'>66.02</td><td scope="row" class='awrnc'><a class="awr" href="#fckscu903tf4w">fckscu903tf4w</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>251,085</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>251,085.00</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>256.81</td><td align="right" class='awrc'>24.83</td><td align="right" class='awrc'>65.29</td><td scope="row" class='awrc'><a class="awr" href="#00057r4zrytpk">00057r4zrytpk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>250,017</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>250,017.00</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>24.97</td><td align="right" class='awrnc'>66.82</td><td scope="row" class='awrnc'><a class="awr" href="#6kmjaydb8dsqs">6kmjaydb8dsqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>245,100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>245,100.00</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>257.01</td><td align="right" class='awrc'>24.89</td><td align="right" class='awrc'>66.25</td><td scope="row" class='awrc'><a class="awr" href="#0fb14y10vjhsr">0fb14y10vjhsr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>244,682</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>244,682.00</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>24.76</td><td align="right" class='awrnc'>66.15</td><td scope="row" class='awrnc'><a class="awr" href="#fkuvv1yajzw3f">fkuvv1yajzw3f</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>243,683</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>243,683.00</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>256.82</td><td align="right" class='awrc'>24.47</td><td align="right" class='awrc'>65.38</td><td scope="row" class='awrc'><a class="awr" href="#3dk52894pmqfv">3dk52894pmqfv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>243,607</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>243,607.00</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>24.34</td><td align="right" class='awrnc'>65.13</td><td scope="row" class='awrnc'><a class="awr" href="#2mvw58awb6cyc">2mvw58awb6cyc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>237,298</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>237,298.00</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>23.90</td><td align="right" class='awrc'>64.09</td><td scope="row" class='awrc'><a class="awr" href="#92xgsuancvhq2">92xgsuancvhq2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>222,305</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>222,305.00</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>258.86</td><td align="right" class='awrnc'>22.40</td><td align="right" class='awrnc'>60.08</td><td scope="row" class='awrnc'><a class="awr" href="#bgkfz06rghsby">bgkfz06rghsby</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>220,595</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>220,595.00</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>258.88</td><td align="right" class='awrc'>22.41</td><td align="right" class='awrc'>59.90</td><td scope="row" class='awrc'><a class="awr" href="#c0pd7mpw5mucc">c0pd7mpw5mucc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	   20,314,569</li>
<li class="awr">Captured SQL account for    1.1% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      20,314,569</li>
<li class="awr">Captured SQL account for    1.1% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>339,387</td><td align="right" class='awrc'>339,387</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>339,387.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.67</td><td scope="row" class='awrc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>338,401</td><td align="right" class='awrnc'>338,401</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>338,401.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.67</td><td scope="row" class='awrnc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>338,370</td><td align="right" class='awrc'>338,370</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>338,370.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.67</td><td scope="row" class='awrc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>338,185</td><td align="right" class='awrnc'>338,185</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>338,185.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.66</td><td scope="row" class='awrnc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>338,107</td><td align="right" class='awrc'>338,107</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>338,107.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.66</td><td scope="row" class='awrc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>337,950</td><td align="right" class='awrnc'>337,950</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>337,950.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.66</td><td scope="row" class='awrnc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>337,620</td><td align="right" class='awrc'>337,620</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>337,620.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.66</td><td scope="row" class='awrc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>336,444</td><td align="right" class='awrnc'>336,444</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>336,444.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.66</td><td scope="row" class='awrnc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>335,385</td><td align="right" class='awrc'>335,385</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>335,385.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.65</td><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>334,882</td><td align="right" class='awrnc'>334,882</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>334,882.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.65</td><td scope="row" class='awrnc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>334,817</td><td align="right" class='awrc'>334,817</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>334,817.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.65</td><td scope="row" class='awrc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>334,695</td><td align="right" class='awrnc'>334,695</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>334,695.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.65</td><td scope="row" class='awrnc'><a class="awr" href="#6z2cq7r4rtuz6">6z2cq7r4rtuz6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>334,574</td><td align="right" class='awrc'>334,574</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>334,574.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.65</td><td scope="row" class='awrc'><a class="awr" href="#cw70q4hn80hyn">cw70q4hn80hyn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>333,384</td><td align="right" class='awrnc'>333,384</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>333,384.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.64</td><td scope="row" class='awrnc'><a class="awr" href="#45vm32p2sn1md">45vm32p2sn1md</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>333,333</td><td align="right" class='awrc'>333,333</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>333,333.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.64</td><td scope="row" class='awrc'><a class="awr" href="#2t98zru3nqhar">2t98zru3nqhar</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>331,264</td><td align="right" class='awrnc'>331,264</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>331,264.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.63</td><td scope="row" class='awrnc'><a class="awr" href="#1wts9khnkkvhw">1wts9khnkkvhw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>331,133</td><td align="right" class='awrc'>331,133</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>331,133.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.63</td><td scope="row" class='awrc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>330,764</td><td align="right" class='awrnc'>330,764</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>330,764.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.63</td><td scope="row" class='awrnc'><a class="awr" href="#7v30dvkrm7b1v">7v30dvkrm7b1v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>330,668</td><td align="right" class='awrc'>330,668</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>330,668.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.63</td><td scope="row" class='awrc'><a class="awr" href="#fr7qdwubf5vg8">fr7qdwubf5vg8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>328,107</td><td align="right" class='awrnc'>328,107</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>328,107.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.62</td><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>273,442</td><td align="right" class='awrc'>273,442</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>273,442.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.35</td><td scope="row" class='awrc'><a class="awr" href="#2h44xdn8mgfr1">2h44xdn8mgfr1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>253,905</td><td align="right" class='awrnc'>253,905</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>253,905.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.25</td><td scope="row" class='awrnc'><a class="awr" href="#fckscu903tf4w">fckscu903tf4w</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>251,085</td><td align="right" class='awrc'>251,085</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>251,085.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.24</td><td scope="row" class='awrc'><a class="awr" href="#00057r4zrytpk">00057r4zrytpk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>250,017</td><td align="right" class='awrnc'>250,017</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>250,017.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.23</td><td scope="row" class='awrnc'><a class="awr" href="#6kmjaydb8dsqs">6kmjaydb8dsqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>245,100</td><td align="right" class='awrc'>245,100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>245,100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.21</td><td scope="row" class='awrc'><a class="awr" href="#0fb14y10vjhsr">0fb14y10vjhsr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>244,682</td><td align="right" class='awrnc'>244,682</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>244,682.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.20</td><td scope="row" class='awrnc'><a class="awr" href="#fkuvv1yajzw3f">fkuvv1yajzw3f</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>243,683</td><td align="right" class='awrc'>243,683</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>243,683.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.20</td><td scope="row" class='awrc'><a class="awr" href="#3dk52894pmqfv">3dk52894pmqfv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>243,607</td><td align="right" class='awrnc'>243,607</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>243,607.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.20</td><td scope="row" class='awrnc'><a class="awr" href="#2mvw58awb6cyc">2mvw58awb6cyc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>237,298</td><td align="right" class='awrc'>237,298</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>237,298.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.17</td><td scope="row" class='awrc'><a class="awr" href="#92xgsuancvhq2">92xgsuancvhq2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>230,189</td><td align="right" class='awrnc'>230,189</td><td align="right" class='awrnc'>6,253,448</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.13</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>222,305</td><td align="right" class='awrc'>222,305</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>222,305.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.09</td><td scope="row" class='awrc'><a class="awr" href="#bgkfz06rghsby">bgkfz06rghsby</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>220,595</td><td align="right" class='awrnc'>220,595</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>220,595.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.09</td><td scope="row" class='awrnc'><a class="awr" href="#c0pd7mpw5mucc">c0pd7mpw5mucc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:	6,746,682</li>
<li class="awr">Captured SQL account for   95.6% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>6,253,542</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>22,502.69</td><td class='awrc'>18.6</td><td class='awrc'>58.4</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>580,269</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>3,215.79</td><td class='awrnc'>7.2</td><td class='awrnc'>16.7</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>169</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.01</td><td class='awrc'>95.8</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.04</td><td class='awrnc'>74.6</td><td class='awrnc'>13.5</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>116</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.06</td><td class='awrc'>49.4</td><td class='awrc'>2.3</td><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.06</td><td class='awrnc'>75.5</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrc'>92</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.20</td><td class='awrc'>9.9</td><td class='awrc'>.8</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td class='awrnc'>96.4</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrc'>75</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.15</td><td class='awrc'>26.6</td><td class='awrc'>34.8</td><td scope="row" class='awrc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.00</td><td class='awrnc'>89</td><td class='awrnc'>11</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	     1,625</li>
<li class="awr">Captured SQL account for   48.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>136</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>8.37</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>7.14</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrc'>104</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>6.40</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>5.66</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>45</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>2.77</td><td scope="row" class='awrc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>1.91</td><td scope="row" class='awrnc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrc'>29</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>1.78</td><td scope="row" class='awrc'><a class="awr" href="#42mkua34ay6bc">42mkua34ay6bc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_addm_fdg ...</td></tr>
<tr><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#bxpcry2tpc217">bxpcry2tpc217</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ opt_param('parallel...</td></tr>
<tr><td align="right" class='awrc'>24</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>1.35</td><td scope="row" class='awrnc'><a class="awr" href="#6n2qqv1brfhpp">6n2qqv1brfhpp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>select ind.type#, ind.property...</td></tr>
<tr><td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>1.11</td><td scope="row" class='awrc'><a class="awr" href="#94qn6y14kw01g">94qn6y14kw01g</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT NVL(TO_NUMBER(EXTRACT(X...</td></tr>
<tr><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>1.11</td><td scope="row" class='awrnc'><a class="awr" href="#fkc81h2686aqc">fkc81h2686aqc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>select pob.parttype from sys.i...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>17,630,449</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1.38</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>4,176,828</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.33</td><td scope="row" class='awrnc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrc'>4,141,080</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.32</td><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td align="right" class='awrnc'>3,474,640</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>0.27</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>3,057,247</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>0.24</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>256</td><td align="right" class='awrc'>&#160;</td><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>193,423</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>104</td><td align="right" class='awrc'>6,253,448</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	      10,688</li>
<li class="awr">Captured SQL account for   95.4% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>7,860.22</td><td align="right" class='awrc'>6,253,448</td><td align="right" class='awrc'>73.54</td><td align="right" class='awrc'>22,502.69</td><td align="right" class='awrc'>34.93</td><td align="right" class='awrc'>18.62</td><td align="right" class='awrc'>58.42</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,335.25</td><td align="right" class='awrnc'>193,423</td><td align="right" class='awrnc'>21.85</td><td align="right" class='awrnc'>3,215.79</td><td align="right" class='awrnc'>72.62</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>16.67</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>215.80</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.02</td><td align="right" class='awrc'>258.93</td><td align="right" class='awrc'>83.34</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>13.08</td><td scope="row" class='awrc'><a class="awr" href="#0fxpq9z2j2zyu">0fxpq9z2j2zyu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>212.98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.99</td><td align="right" class='awrnc'>259.25</td><td align="right" class='awrnc'>82.15</td><td align="right" class='awrnc'>7.19</td><td align="right" class='awrnc'>14.50</td><td scope="row" class='awrnc'><a class="awr" href="#5m9kb3cpp792u">5m9kb3cpp792u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>212.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>259.25</td><td align="right" class='awrc'>81.82</td><td align="right" class='awrc'>7.35</td><td align="right" class='awrc'>14.72</td><td scope="row" class='awrc'><a class="awr" href="#0u5gbpqpjtcbb">0u5gbpqpjtcbb</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>207.71</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>259.25</td><td align="right" class='awrnc'>80.12</td><td align="right" class='awrnc'>5.76</td><td align="right" class='awrnc'>17.19</td><td scope="row" class='awrnc'><a class="awr" href="#c45q6fupzf7tg">c45q6fupzf7tg</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>203.59</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.90</td><td align="right" class='awrc'>258.91</td><td align="right" class='awrc'>78.63</td><td align="right" class='awrc'>8.22</td><td align="right" class='awrc'>16.53</td><td scope="row" class='awrc'><a class="awr" href="#47rm3ra5qrvzk">47rm3ra5qrvzk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>202.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>260.57</td><td align="right" class='awrnc'>77.58</td><td align="right" class='awrnc'>6.59</td><td align="right" class='awrnc'>19.23</td><td scope="row" class='awrnc'><a class="awr" href="#bhydnmhhkhhdy">bhydnmhhkhhdy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>149.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>57.74</td><td align="right" class='awrc'>12.72</td><td align="right" class='awrc'>33.67</td><td scope="row" class='awrc'><a class="awr" href="#43f1zvzd37f2v">43f1zvzd37f2v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>137.97</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>258.92</td><td align="right" class='awrnc'>53.29</td><td align="right" class='awrnc'>13.76</td><td align="right" class='awrnc'>37.13</td><td scope="row" class='awrnc'><a class="awr" href="#5t5va0wzy46cz">5t5va0wzy46cz</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>126.19</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>48.75</td><td align="right" class='awrc'>15.78</td><td align="right" class='awrc'>41.94</td><td scope="row" class='awrc'><a class="awr" href="#9pak4nk4rzz55">9pak4nk4rzz55</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120.79</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>259.27</td><td align="right" class='awrnc'>46.59</td><td align="right" class='awrnc'>16.22</td><td align="right" class='awrnc'>43.64</td><td scope="row" class='awrnc'><a class="awr" href="#f7s68cgfrpfx5">f7s68cgfrpfx5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>120.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>46.46</td><td align="right" class='awrc'>16.08</td><td align="right" class='awrc'>43.09</td><td scope="row" class='awrc'><a class="awr" href="#2rxaq7b5j8zwr">2rxaq7b5j8zwr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>120.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>46.42</td><td align="right" class='awrnc'>15.94</td><td align="right" class='awrnc'>42.72</td><td scope="row" class='awrnc'><a class="awr" href="#98s057018aabq">98s057018aabq</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>111.20</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>258.86</td><td align="right" class='awrc'>42.96</td><td align="right" class='awrc'>17.05</td><td align="right" class='awrc'>45.94</td><td scope="row" class='awrc'><a class="awr" href="#9r3qzjkmkr5kg">9r3qzjkmkr5kg</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>107.12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>259.87</td><td align="right" class='awrnc'>41.22</td><td align="right" class='awrnc'>18.07</td><td align="right" class='awrnc'>48.04</td><td scope="row" class='awrnc'><a class="awr" href="#fcfy9turtx376">fcfy9turtx376</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>91.49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.86</td><td align="right" class='awrc'>258.88</td><td align="right" class='awrc'>35.34</td><td align="right" class='awrc'>19.69</td><td align="right" class='awrc'>52.94</td><td scope="row" class='awrc'><a class="awr" href="#9qm6ufzjxxpkc">9qm6ufzjxxpkc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>90.78</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>258.91</td><td align="right" class='awrnc'>35.06</td><td align="right" class='awrnc'>20.05</td><td align="right" class='awrnc'>53.41</td><td scope="row" class='awrnc'><a class="awr" href="#6uwhmrt8nr4s9">6uwhmrt8nr4s9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>71.85</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>258.88</td><td align="right" class='awrc'>27.75</td><td align="right" class='awrc'>22.41</td><td align="right" class='awrc'>59.90</td><td scope="row" class='awrc'><a class="awr" href="#c0pd7mpw5mucc">c0pd7mpw5mucc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>71.66</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.67</td><td align="right" class='awrnc'>258.86</td><td align="right" class='awrnc'>27.68</td><td align="right" class='awrnc'>22.40</td><td align="right" class='awrnc'>60.08</td><td scope="row" class='awrnc'><a class="awr" href="#bgkfz06rghsby">bgkfz06rghsby</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>59.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>258.84</td><td align="right" class='awrc'>22.86</td><td align="right" class='awrc'>23.90</td><td align="right" class='awrc'>64.09</td><td scope="row" class='awrc'><a class="awr" href="#92xgsuancvhq2">92xgsuancvhq2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>57.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>258.85</td><td align="right" class='awrnc'>22.06</td><td align="right" class='awrnc'>24.34</td><td align="right" class='awrnc'>65.13</td><td scope="row" class='awrnc'><a class="awr" href="#2mvw58awb6cyc">2mvw58awb6cyc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>54.79</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>256.82</td><td align="right" class='awrc'>21.33</td><td align="right" class='awrc'>24.47</td><td align="right" class='awrc'>65.38</td><td scope="row" class='awrc'><a class="awr" href="#3dk52894pmqfv">3dk52894pmqfv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>54.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>256.81</td><td align="right" class='awrnc'>21.09</td><td align="right" class='awrnc'>24.83</td><td align="right" class='awrnc'>65.29</td><td scope="row" class='awrnc'><a class="awr" href="#00057r4zrytpk">00057r4zrytpk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>53.82</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>256.85</td><td align="right" class='awrc'>20.95</td><td align="right" class='awrc'>24.76</td><td align="right" class='awrc'>66.15</td><td scope="row" class='awrc'><a class="awr" href="#fkuvv1yajzw3f">fkuvv1yajzw3f</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>53.65</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>257.01</td><td align="right" class='awrnc'>20.87</td><td align="right" class='awrnc'>24.89</td><td align="right" class='awrnc'>66.25</td><td scope="row" class='awrnc'><a class="awr" href="#0fb14y10vjhsr">0fb14y10vjhsr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>52.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>258.85</td><td align="right" class='awrc'>20.18</td><td align="right" class='awrc'>24.97</td><td align="right" class='awrc'>66.82</td><td scope="row" class='awrc'><a class="awr" href="#6kmjaydb8dsqs">6kmjaydb8dsqs</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>51.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.48</td><td align="right" class='awrnc'>256.89</td><td align="right" class='awrnc'>20.10</td><td align="right" class='awrnc'>24.99</td><td align="right" class='awrnc'>66.02</td><td scope="row" class='awrnc'><a class="awr" href="#fckscu903tf4w">fckscu903tf4w</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>40.85</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>258.89</td><td align="right" class='awrc'>15.78</td><td align="right" class='awrc'>26.77</td><td align="right" class='awrc'>69.94</td><td scope="row" class='awrc'><a class="awr" href="#2h44xdn8mgfr1">2h44xdn8mgfr1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>5.36</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>256.86</td><td align="right" class='awrnc'>2.09</td><td align="right" class='awrnc'>32.13</td><td align="right" class='awrnc'>83.06</td><td scope="row" class='awrnc'><a class="awr" href="#fr7qdwubf5vg8">fr7qdwubf5vg8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>258.90</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>32.28</td><td align="right" class='awrc'>83.37</td><td scope="row" class='awrc'><a class="awr" href="#cw70q4hn80hyn">cw70q4hn80hyn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2.70</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>256.85</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>32.27</td><td align="right" class='awrnc'>83.37</td><td scope="row" class='awrnc'><a class="awr" href="#7v30dvkrm7b1v">7v30dvkrm7b1v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2.21</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>256.81</td><td align="right" class='awrc'>0.86</td><td align="right" class='awrc'>32.43</td><td align="right" class='awrc'>84.08</td><td scope="row" class='awrc'><a class="awr" href="#45vm32p2sn1md">45vm32p2sn1md</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>2.20</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>258.87</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>32.50</td><td align="right" class='awrnc'>83.86</td><td scope="row" class='awrnc'><a class="awr" href="#6z2cq7r4rtuz6">6z2cq7r4rtuz6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>258.90</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>32.53</td><td align="right" class='awrc'>84.18</td><td scope="row" class='awrc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1.84</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>256.91</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>32.98</td><td align="right" class='awrnc'>83.11</td><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>256.88</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>32.62</td><td align="right" class='awrc'>84.26</td><td scope="row" class='awrc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>256.92</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>32.46</td><td align="right" class='awrnc'>83.46</td><td scope="row" class='awrnc'><a class="awr" href="#1wts9khnkkvhw">1wts9khnkkvhw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>99.37</td><td align="right" class='awrc'>0.57</td><td align="right" class='awrc'>0.13</td><td scope="row" class='awrc'><a class="awr" href="#121ffmrc95v7g">121ffmrc95v7g</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select i.obj#, i.ts#, i.file#,...</td></tr>
<tr><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>258.90</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>32.64</td><td align="right" class='awrnc'>84.51</td><td scope="row" class='awrnc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>81.74</td><td align="right" class='awrc'>11.12</td><td align="right" class='awrc'>11.50</td><td scope="row" class='awrc'><a class="awr" href="#6s1ku6bs9a8xb">6s1ku6bs9a8xb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> WITH ash as (SELECT ash.event...</td></tr>
<tr><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>256.90</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>32.73</td><td align="right" class='awrnc'>84.27</td><td scope="row" class='awrnc'><a class="awr" href="#2t98zru3nqhar">2t98zru3nqhar</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>93.22</td><td align="right" class='awrc'>9.93</td><td align="right" class='awrc'>0.80</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.85</td><td align="right" class='awrnc'>3.11</td><td align="right" class='awrnc'>73.31</td><td align="right" class='awrnc'>12.85</td><td scope="row" class='awrnc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>95.32</td><td align="right" class='awrc'>4.57</td><td align="right" class='awrc'>2.34</td><td scope="row" class='awrc'><a class="awr" href="#61tn3mam0vq0b">61tn3mam0vq0b</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> SELECT source, (case when tim...</td></tr>
<tr><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>94.12</td><td align="right" class='awrnc'>3.40</td><td align="right" class='awrnc'>3.52</td><td scope="row" class='awrnc'><a class="awr" href="#9tt2m0mpc2qqp">9tt2m0mpc2qqp</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_char$ i_i...</td></tr>
<tr><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>50.44</td><td align="right" class='awrc'>26.58</td><td align="right" class='awrc'>34.80</td><td scope="row" class='awrc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>256.82</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>32.67</td><td align="right" class='awrnc'>84.63</td><td scope="row" class='awrnc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>40.26</td><td align="right" class='awrc'>36.62</td><td align="right" class='awrc'>35.82</td><td scope="row" class='awrc'><a class="awr" href="#fxh7dn0mbs5cx">fxh7dn0mbs5cx</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> WITH ash as (SELECT ash.event...</td></tr>
<tr><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>71.20</td><td align="right" class='awrnc'>26.47</td><td align="right" class='awrnc'>20.02</td><td scope="row" class='awrnc'><a class="awr" href="#fh5ufah919kun">fh5ufah919kun</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_sb4$ i_id...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>40.65</td><td align="right" class='awrc'>19.56</td><td align="right" class='awrc'>51.11</td><td scope="row" class='awrc'><a class="awr" href="#a3jpjzh7mtwwp">a3jpjzh7mtwwp</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub2$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>4.46</td><td align="right" class='awrnc'>2.16</td><td align="right" class='awrnc'>1.57</td><td scope="row" class='awrnc'><a class="awr" href="#1myuz4d7pbg2j">1myuz4d7pbg2j</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_recommend...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>38.94</td><td align="right" class='awrc'>27.48</td><td align="right" class='awrc'>43.46</td><td scope="row" class='awrc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>256.80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>32.65</td><td align="right" class='awrnc'>84.23</td><td scope="row" class='awrnc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>63.57</td><td align="right" class='awrc'>35.07</td><td align="right" class='awrc'>6.83</td><td scope="row" class='awrc'><a class="awr" href="#42mkua34ay6bc">42mkua34ay6bc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_addm_fdg ...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>43.11</td><td align="right" class='awrnc'>29.58</td><td align="right" class='awrnc'>39.59</td><td scope="row" class='awrnc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>55.24</td><td align="right" class='awrc'>28.11</td><td align="right" class='awrc'>26.70</td><td scope="row" class='awrc'><a class="awr" href="#ahpwg02s0cb1z">ahpwg02s0cb1z</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_rec_actio...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>17.36</td><td align="right" class='awrnc'>74.58</td><td align="right" class='awrnc'>13.45</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>30.33</td><td align="right" class='awrc'>27.61</td><td align="right" class='awrc'>56.70</td><td scope="row" class='awrc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub1$ i_id...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="00057r4zrytpk"></a>00057r4zrytpk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '16';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0fb14y10vjhsr"></a>0fb14y10vjhsr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0fxpq9z2j2zyu"></a>0fxpq9z2j2zyu</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '191';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0u5gbpqpjtcbb"></a>0u5gbpqpjtcbb</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '182';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="121ffmrc95v7g"></a>121ffmrc95v7g</td><td class='awrc'><pre_sqltext class="awr">select i.obj#, i.ts#, i.file#, i.block#, i.intcols, i.type#, i.flags, i.property, i.pctfree$, i.initrans, i.maxtrans, i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac, i.cols, i.analyzetime, i.samplesize, i.dataobj#, nvl(i.degree, 1), nvl(i.instances, 1), i.rowcnt, mod(i.pctthres$, 256), i.indmethod#, i.trunccnt, nvl(c.unicols, 0), nvl(c.deferrable#+c.valid#, 0), nvl(i.spare1, i.intcols), i.spare4, i.spare2, i.spare6, decode(i.pctthres$, null, null, mod(trunc(i.pctthres$/256), 256)), nvl(i.evaledition#, 1), nvl(i.unusablebefore#, 0), nvl(i.unusablebeginning#, 0),  ist.cachedblk, ist.cachehit, ist.logicalread from ind$ i,  ind_stats$ ist,  (select enabled,  min(intcols) unicols, min(to_number(bitand(defer, 1))) deferrable#, min(to_number(bitand(defer, 4))) valid# from cdef$ where obj#=:1 and enabled &gt; 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1myuz4d7pbg2j"></a>1myuz4d7pbg2j</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_recommendations (id,  task_id,  finding_id,  rank,	benefit_msg_id,  benefit_val,  type, flags,  rec_type_id,  exec_name) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1wts9khnkkvhw"></a>1wts9khnkkvhw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '71';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2h44xdn8mgfr1"></a>2h44xdn8mgfr1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '4';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2mvw58awb6cyc"></a>2mvw58awb6cyc</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '102';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2rxaq7b5j8zwr"></a>2rxaq7b5j8zwr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '106';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;


WORKLOAD REPOSITORY report for

DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---
P30SDB	      1451622190 p30sdb      PRIMARY	      EE      19.0.0.0.0 YES NO

Instance     Inst Num Startup Time
------------ -------- ---------------
p30sdb2 	    2 17-Feb-20 07:43

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
---------------- -------------------------------- ---- ----- ------- ----------
mcracpoc2.exampl Linux x86 64-bit		    64	  32	   2	1007.90

	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
Begin Snap:	   45 17-Feb-20 09:17:49       243	 2.6	     2
  End Snap:	   46 17-Feb-20 09:23:23       139	  .8	     2
   Elapsed:		   5.58 (mins)
   DB Time:		 466.35 (mins)

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
---------------------------------------- ------- ------ ------------------------
Interconnect Latency			   83.77 1.E+02 ADDM:1451622190_2_46
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Top SQL Statements			   83.77  97.33 ADDM:1451622190_2_46
"User I/O" wait Class			   83.77  50.83 ADDM:1451622190_2_46
	ELSE
Global Cache Messaging			   83.77  36.03 ADDM:1451622190_2_46
Buffer Busy - Hot Objects		   83.77  29.55 ADDM:1451622190_2_46
		--
Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
	     DB Time(s):	      83.6		 0.1	  0.00	   38.44
		-- Do an UPDATE statement
	      DB CPU(s):	      16.3		 0.0	  0.00	    7.49
      Background CPU(s):	       2.2		 0.0	  0.00	    0.00
		--
      Redo size (bytes):       1,737,692.8	     2,871.3
  Logical read (blocks):	 102,617.9	       169.6
	  Block changes:	   4,944.4		 8.2

 Physical read (blocks):	  60,711.0	       100.3
Physical write (blocks):	   2,146.1		 3.6
       Read IO requests:	  60,709.6	       100.3
		v_my_serial := v_my_serial + v_loop_cnt ;
      Write IO requests:	   2,073.1		 3.4
	   Read IO (MB):	     474.3		 0.8

	  Write IO (MB):	      16.8		 0.0
	   IM scan rows:	       0.0		 0.0
Session Logical Read IM:	       0.0		 0.0
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
 RAC GC blocks received:	      19.9		 0.0
   RAC GC blocks served:	      13.1		 0.0
	     User calls:	       2.2		 0.0
		--
	   Parses (SQL):	       4.9		 0.0
      Hard parses (SQL):	       0.2		 0.0
     SQL Work Area (MB):	       0.8		 0.0
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		 Logons:	       0.1		 0.0
	    User logons:	       0.0		 0.0
	 Executes (SQL):	  20,162.3		33.3
		--
	      Rollbacks:	       0.0		 0.0
	   Transactions:	     605.2

		v_updates_cnt := v_updates_cnt + 1;
Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    Buffer Nowait %:  100.00	   Redo NoWait %:  100.00

	    Buffer  Hit   %:   40.83	In-memory Sort %:  100.00
	    Library Hit   %:  100.17	    Soft Parse %:   95.08
	 Execute to Parse %:   99.98	     Latch Hit %:   99.98
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
Parse CPU to Parse Elapsd %:   96.67	 % Non-Parse CPU:  100.00
	  Flash Cache Hit %:	0.00

			v_update_quota := TRUE;
Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
		END IF;
Event				     Waits Time (sec)	   Wait   time Class
	END IF ;
------------------------------ ----------- ---------- --------- ------ --------
db file sequential read 	20,149,357	14.2K  705.79us   50.8 User I/O
----------------------------------------------------------------------------------------------------------------------
gc cr grant busy		   896,835     8087.4	 9.02ms   28.9 Cluster
DB CPU					       5454.6		  19.5
gc current grant 2-way		   133,497     1536.8	11.51ms    5.5 Cluster
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
gc current grant read-mostly i	   138,177	593.3	 4.29ms    2.1 Cluster
KJC: Wait for msg sends to com	     2,283	417.4  182.81ms    1.5 Other
gc cr grant 2-way		    11,441	131.7	11.51ms     .5 Cluster
----------------------------------------------------------------------------------------------------------------------
gc current grant busy		    18,048	123.2	 6.83ms     .4 Cluster
gc cr block lost		       166	 92.5  557.27ms     .3 Cluster

gc current grant congested	     1,232	 33.3	27.02ms     .1 Cluster

Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
							  Avg		  Avg
					Total Wait	 Wait	% DB   Active
		--
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------
User I/O	       20,238,831	    14,241   703.66us	50.9	 42.6
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
Cluster 		1,206,635	    10,688     8.86ms	38.2	 31.9
DB CPU					     5,455		19.5	 16.3
System I/O		  129,902	     1,737    13.37ms	 6.2	  5.2
		-- so reset flags and counters before continuing
Other			   86,550	       558     6.44ms	 2.0	  1.7
Configuration		       80		28   349.43ms	  .1	  0.1
		--
Concurrency		    4,031		19     4.69ms	  .1	  0.1
Commit			       13		 1   106.85ms	  .0	  0.0
Application		       53		 1    10.12ms	  .0	  0.0
		v_update_quota := FALSE;
Network 		      597		 0    34.12us	  .0	  0.0

Host CPU
		v_updates_cnt := 0;
~~~~~~~~		  Load Average
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
----- ----- ------- --------- --------- --------- --------- --------- ---------
		v_selects_cnt := 0;
   64	 32	  2	35.04	  22.37      10.0      13.6	 27.6	   70.8

Instance CPU
	END IF;
~~~~~~~~~~~~
	      % of total CPU for Instance:	30.8
	      % of busy  CPU for Instance:     105.5

  %DB time waiting for CPU - Resource Mgr:	 0.0

IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
~~~~~~~~~~		    ----------------- --------------- ---------------
	    Total Requests:	     62,863.2	     60,720.1	      2,143.1
	 Database Requests:	     62,782.7	     60,709.6	      2,073.1
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		 69.4		  2.4		 67.0
		Total (MB):		495.1		476.6		 18.5
		-- so reset flags and counters
	     Database (MB):		491.1		474.3		 16.8
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  3.9		  2.2		  1.7
		v_scan_query_quota := FALSE;
	 Database (blocks):	     62,857.0	     60,711.0	      2,146.1
 Via Buffer Cache (blocks):	     62,855.7	     60,711.0	      2,144.7
	   Direct (blocks):		  1.3		  0.0		  1.3
		v_scan_queries_cnt := 0;

Memory Statistics
~~~~~~~~~~~~~~~~~			Begin	       End
		v_random_access_queries_cnt := 0;
				 ------------ ------------
		  Host Mem (MB):  1,032,089.4  1,032,089.4
		   SGA use (MB):      3,072.0	   3,072.0
	END IF;
		   PGA use (MB):      2,774.2	   2,095.2
    % Host Mem used for SGA+PGA:	 0.57	      0.50


Cache Sizes			  Begin        End
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	 1,056M     1,056M  Std Block Size:	    8K
	v_loop_cnt := v_loop_cnt + 1 ;
	   Shared Pool Size:	 1,207M     1,220M	Log Buffer:    40,404K
	     In-Memory Area:	     0M 	0M
	v_now := DBMS_UTILITY.GET_TIME();

 Shared Pool Statistics        Begin	End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------

	     Memory Usage %:   96.39   92.94
    % SQL with executions>1:   83.69   78.53
  % Memory for SQL w/exec>1:   85.59   83.73
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN


Time Model Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> DB Time represents total time in user calls
		-- If this is a fixed-iteration count test cycle and we've hit the number of
-> DB CPU represents CPU time of foreground processes
-> Total CPU Time represents foreground and background processes
		-- iterations then set exit flag
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
-> Ordered by % of DB time in descending order, followed by Statistic Name
		v_stop_immediate := TRUE ;

								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time
	END IF;
------------------------------------------ ------------------ ------- ----------
sql execute elapsed time			     27,972.7	100.0
DB CPU						      5,454.6	 19.5	    88.3
END LOOP;
PL/SQL execution elapsed time				203.1	   .7
parse time elapsed					  1.3	   .0
hard parse elapsed time 				  1.2	   .0

PL/SQL compilation elapsed time 			  0.1	   .0
sequence load elapsed time				  0.0	   .0
connection management call elapsed time 		  0.0	   .0
v_end_time := v_now ;
hard parse (sharing criteria) elapsed time		  0.0	   .0
hard parse (bind mismatch) elapsed time 		  0.0	   .0
repeated bind elapsed time				  0.0	   .0
v_now := DBMS_UTILITY.GET_TIME();
DB time 					     27,980.8
background elapsed time 			      2,402.8
background cpu time					719.3		    11.7
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
total CPU time					      6,173.9
			  ------------------------------------------------------


Operating System Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> *TIME statistic values are diffed.
v_total_time := v_end_time - v_begin_time ;
   All others display actual values.  End Value is displayed if different
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name

v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
Statistic				   Value	End Value
------------------------- ---------------------- ----------------
FREE_MEMORY_BYTES		 543,641,837,568  544,605,003,776
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
INACTIVE_MEMORY_BYTES		   1,640,071,168    1,650,434,048
BUSY_TIME				 585,232
IDLE_TIME			       1,417,918
IOWAIT_TIME				 552,730
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
NICE_TIME				       0
SYS_TIME				 271,771
USER_TIME				 201,248

LOAD					      35	       22
PHYSICAL_MEMORY_BYTES	       1,082,224,197,632
NUM_CPUS				      64
NUM_CPU_CORES				      32
END;</pre_sqltext></td></tr>
NUM_CPU_SOCKETS 			       2
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
<tr><td scope="row" class='awrc'><a class="awr" name="2t98zru3nqhar"></a>2t98zru3nqhar</td><td class='awrc'><pre_sqltext class="awr">DECLARE
TCP_RECEIVE_SIZE_MAX		       6,291,456
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384
v_default_schema_number PLS_INTEGER := '78';
TCP_SEND_SIZE_MAX		       4,194,304
TCP_SEND_SIZE_MIN			   4,096
			  ------------------------------------------------------

v_update_pct PLS_INTEGER := '3';
Operating System Statistics - Detail	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
v_max_loop_iterations PLS_INTEGER := '0';
--------------- -------- -------- -------- -------- -------- --------
17-Feb 09:17:49     35.0      N/A      N/A	N/A	 N/A	  N/A
17-Feb 09:23:23     22.4     29.2     10.0     13.6	70.8	 27.6
v_seconds_to_run PLS_INTEGER := '300';
			  ------------------------------------------------------

v_scale PLS_INTEGER := '32768';
Foreground Wait Class			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> ordered by wait time desc, waits desc
v_work_unit PLS_INTEGER := '4' ;
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
-> Captured Time accounts for	     110.2%  of Total DB time	   27,980.80 (s)
-> Total FG Wait Time:		  25,383.90 (s)  DB CPU time:	    5,454.59 (s)
v_redo_stress  VARCHAR2(12) := 'LITE';

				     %Time	Total Wait
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
v_hot_schema_modulus PLS_INTEGER := '0';
-------------------- --------------- ----- --------------- ---------- ---------
User I/O		  20,149,606	 0	    14,222   705.81us	   50.8
Cluster 		   1,206,278	 0	    10,685     8.86ms	   38.2
v_do_hotspot   VARCHAR(7) := 'FALSE';
DB CPU						     5,455		   19.5
Other			       6,074	 6	       429    70.64ms	    1.5
Configuration			  63	 0		28   443.52ms	    0.1
v_hotspot_mb  NUMBER := '10';
Concurrency		       3,056	 1		18     6.00ms	    0.1
Commit				  13	 0		 1   106.85ms	    0.0
System I/O			 140	 0		 0   653.66us	    0.0
v_hotspot_offset_mb NUMBER := '0';
Network 			 234	 0		 0     6.38us	    0.0
Application			   0			 0		    0.0
			  ------------------------------------------------------

v_hotspot_modulus  PLS_INTEGER := '0';

Foreground Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond

-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
v_sleep_modulus PLS_INTEGER := '0';

						Total
				       %Time	 Wait		   Waits   % DB
v_sleep_min NUMBER := '.1';
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
db file sequential read     20,149,357	       14,221  705.79us     99.5   50.8
v_sleep_max NUMBER := '.5';
gc cr grant busy	       896,835		8,087	 9.02ms      4.4   28.9
gc current grant 2-way	       133,497		1,537	11.51ms      0.7    5.5
gc current grant read-most     138,177		  593	 4.29ms      0.7    2.1
v_scan_query_pct PLS_INTEGER := '0';
KJC: Wait for msg sends to	 2,283		  417  182.81ms      0.0    1.5
gc cr grant 2-way		11,441		  132	11.51ms      0.1     .5
gc current grant busy		18,048		  123	 6.83ms      0.1     .4
v_obfuscate VARCHAR(5)	:= 'FALSE';
gc cr block lost		   166		   93  557.27ms      0.0     .3
gc current grant congested	 1,232		   33	27.02ms      0.0     .1
gc current block busy		 4,284		   31	 7.25ms      0.0     .1

enq: HW - contention		    63		   28  443.52ms      0.0     .1
gc current block lost		    44		   25  577.63ms      0.0     .1
buffer busy waits		    27		   17  634.86ms      0.0     .1
gc current block 2-way		 2,163		   14	 6.46ms      0.0     .0
gc buffer busy release		    21		    7  356.88ms      0.0     .0

reliable message		     1		    4 4279.42ms      0.0     .0
gc remaster			     2	 100	    4 2000.48ms      0.0     .0
IPC send completion sync	    30		    3  101.00ms      0.0     .0
latch: gcs resource hash	   643		    2	 2.74ms      0.0     .0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
gc cr grant congested		   103		    1	14.06ms      0.0     .0
log file sync			    13		    1  106.85ms      0.0     .0
gc current block congested	    44		    1	29.28ms      0.0     .0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
gc cr multi block grant 	    67		    1	18.16ms      0.0     .0
latch: cache buffers chain	 2,971		    1  353.88us      0.0     .0

PX Deq: Slave Session Stat	    17		    1	59.74ms      0.0     .0
gc cr block busy		     6		    1  160.21ms      0.0     .0
latch free			 1,066		    1  703.55us      0.0     .0
v_num_tmp NUMBER := 0;
latch: gc element		   339		    1	 2.14ms      0.0     .0
Disk file Mirror Read		    35		    0	10.72ms      0.0     .0
gc cr block 2-way		   138		    0	 1.40ms      0.0     .0

library cache: mutex X		    23		    0	 4.27ms      0.0     .0
db file scattered read		    93		    0	 1.01ms      0.0     .0
control file sequential re	   140		    0  653.66us      0.0     .0
v_loop_cnt PLS_INTEGER := 0;
gc current retry		     2		    0	29.95ms      0.0     .0
direct path write		    11		    0	 4.47ms      0.0     .0
row cache lock			    16	 100	    0	 2.36ms      0.0     .0
v_rowcnt PLS_INTEGER := 0;
latch: cache buffers lru c	   235		    0  133.17us      0.0     .0
enq: WF - contention		    18		    0	 1.00ms      0.0     .0
gc current split		     1		    0	17.03ms      0.0     .0
v_updates_cnt PLS_INTEGER := 0;
gc cr multi block mixed 	     5		    0	 3.09ms      0.0     .0
latch: redo allocation		    68		    0  214.66us      0.0     .0
latch: enqueue hash chains	    60		    0  216.05us      0.0     .0
v_selects_cnt PLS_INTEGER := 0;
enq: PS - contention		    10		    0	 1.20ms      0.0     .0
gc index operation		     1		    0	11.47ms      0.0     .0
latch: object queue header	    52		    0  193.77us      0.0     .0

db file parallel read		     6		    0	 1.68ms      0.0     .0
DLM cross inst call comple	    21		    0  387.62us      0.0     .0
PX Deq: reap credit		   324	 100	    0	20.00us      0.0     .0
v_random_access_queries_cnt PLS_INTEGER := 0;
PGA memory operation		   140		    0	34.84us      0.0     .0
ges enter server mode		   677		    0	 6.97us      0.0     .0
gc current multi block req	     1		    0	 3.78ms      0.0     .0
v_scan_queries_cnt PLS_INTEGER := 0;
Disk file operations I/O	    56		    0	42.89us      0.0     .0
latch: ges resource hash l	    16		    0  115.50us      0.0     .0
SQL*Net message to client	   219		    0	 6.31us      0.0     .0

enq: FB - contention		     1		    0	 1.33ms      0.0     .0
latch: call allocation		    12		    0	92.75us      0.0     .0
watchdog main loop		   672		2,013 2995.53ms      0.0
v_do_scan_query BOOLEAN :=FALSE;
PL/SQL lock timer		     1	 100	    9 9000.30ms      0.0
PX Deq: Execution Msg		    51		    2	44.89ms      0.0
SQL*Net message from clien	   219		    0	 2.22ms      0.0
v_scan_query_quota  BOOLEAN := FALSE;

Foreground Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
v_scan_workload_only BOOLEAN := FALSE;
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

v_random_workload_only BOOLEAN := FALSE;
						Total
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time

-------------------------- ----------- ----- -------- --------- -------- ------
PX Deq: Msg Fragment		   150		    0	 1.22ms      0.0
			  ------------------------------------------------------



Background Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by wait time desc, waits desc (idle events last)
v_random_block PLS_INTEGER := 1;
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
v_tmp PLS_INTEGER;
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
v_now PLS_INTEGER;
-------------------------- ----------- ----- -------- --------- -------- ------
db file parallel write		87,242	   0	1,460	16.73ms      0.4   60.7
log file parallel write 	14,300	   0	  265	18.56ms      0.1   11.0
v_brick_wall PLS_INTEGER;
enq: CR - block range reus	 1,273	   0	   80	62.85ms      0.0    3.3
Disk file Mirror Read		   431	   0	   17	40.21ms      0.0     .7
reliable message		   388	   0	   17	43.71ms      0.0     .7

IMR slave acknowledgement	 1,005	   0	   13	13.28ms      0.0     .6
control file parallel writ	   150	   0	   10	68.21ms      0.0     .4
gcs log flush sync		16,075	   0	    5  281.60us      0.1     .2
v_begin_time PLS_INTEGER;
ges inquiry response		   550	   0	    4	 7.13ms      0.0     .2
gc cr grant busy		   304	   0	    2	 8.10ms      0.0     .1
ASM file metadata operatio	 1,468	   0	    1  916.44us      0.0     .1
v_end_time PLS_INTEGER;
ASM IO for non-blocking po	87,829	   0	    1	15.16us      0.4     .1
KSV master wait 		   551	  46	    1	 2.12ms      0.0     .0
PX Deq: Signal ACK EXT		    15	   0	    1	66.96ms      0.0     .0
v_total_time PLS_INTEGER;
enq: CF - contention		    29	  52	    1	34.11ms      0.0     .0
control file sequential re	 1,816	   0	    1  543.88us      0.0     .0
PX Deq: reap credit		43,894	 100	    1	21.85us      0.2     .0
v_begin_cpu_tm PLS_INTEGER;
DFS lock handle 		   226	 100	    1	 3.89ms      0.0     .0
gcs remastering wait for r	    22	   0	    1	39.62ms      0.0     .0
log file sequential read	   225	   0	    1	 2.34ms      0.0     .0
v_end_cpu_tm PLS_INTEGER;
enq: RO - fast object reus	    52	   0	    1	 9.85ms      0.0     .0
latch free			 1,417	   0	    0  331.61us      0.0     .0
direct path write temp		    36	   0	    0	12.24ms      0.0     .0
buffer busy waits		    17	   0	    0	23.85ms      0.0     .0
v_total_cpu_tm PLS_INTEGER;
latch: gc element		    97	   0	    0	 4.15ms      0.0     .0
db file sequential read 	   679	   0	    0  469.96us      0.0     .0
latch: gcs resource hash	   485	   0	    0  618.99us      0.0     .0

gcs drm freeze in enter se	     4	   0	    0	63.39ms      0.0     .0
ges lms sync during dynami	    41	  22	    0	 5.32ms      0.0     .0
Sync ASM rebalance		    30	   0	    0	 6.81ms      0.0     .0
v_do_sleeps BOOLEAN := FALSE;
latch: cache buffers lru c	   817	   0	    0  249.75us      0.0     .0
db file async I/O submit	26,029	   0	    0	 5.47us      0.1     .0
CGS wait for IPC msg		 5,077	 100	    0	17.74us      0.0     .0
v_loop_control BOOLEAN := FALSE;
AQ: RAC AQ Network		 3,335	 100	    0	23.98us      0.0     .0
latch: cache buffers chain	   359	   0	    0  209.55us      0.0     .0
ksxr poll remote instances	 2,341	 100	    0	25.86us      0.0     .0
v_update_quota BOOLEAN := FALSE;
gc current grant busy		    25	   0	    0	 2.07ms      0.0     .0
latch: MGA shared context	    73	   0	    0  693.77us      0.0     .0
v_select_only_workload BOOLEAN := FALSE;
Disk file operations I/O	   229	   0	    0  179.02us      0.0     .0
direct path write		     5	   0	    0	 6.58ms      0.0     .0
PGA memory operation		   118	   0	    0  267.40us      0.0     .0
PX Deq: Join ACK		    15	   0	    0	 1.78ms      0.0     .0
v_update_only_workload BOOLEAN := FALSE;
enq: TM - contention		     1	   0	    0	24.46ms      0.0     .0
row cache lock			    14	 100	    0	 1.67ms      0.0     .0
oracle thread bootstrap 	     1	   0	    0	23.05ms      0.0     .0
v_do_update BOOLEAN := FALSE;
latch: messages 		    67	   0	    0  342.00us      0.0     .0
latch: MGA shared context	    97	   0	    0  225.46us      0.0     .0
LGWR wait for redo copy 	   195	   0	    0	99.77us      0.0     .0
v_do_hot_schema BOOLEAN := FALSE;
CSS operation: data query	    11	   0	    0	 1.69ms      0.0     .0
IPC group service call		   256	   0	    0	72.11us      0.0     .0
v_stop_immediate BOOLEAN := FALSE;
CSS operation: data update	    12	   0	    0	 1.48ms      0.0     .0
enq: PS - contention		    14	  43	    0	 1.24ms      0.0     .0
kfk: async disk IO		     1	   0	    0	12.96ms      0.0     .0
ges2 LMON to wake up LMD -	    71	   0	    0  179.54us      0.0     .0
v_sharing_schema BOOLEAN := FALSE;
IPC send completion sync	   342	  98	    0	36.18us      0.0     .0
latch: redo writing		    16	   0	    0  731.00us      0.0     .0
gc current block busy		    17	   0	    0  686.41us      0.0     .0
v_seed VARCHAR2(128);
KJC: Wait for msg sends to	    24	  46	    0  485.54us      0.0     .0
enq: US - contention		     6	   0	    0	 1.87ms      0.0     .0
enq: CO - master slave det	     6	 100	    0	 1.02ms      0.0     .0

v_home_schema_str VARCHAR2(80);
Background Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
v_scratch VARCHAR2(200) ;
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg

Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
latch: redo allocation		    24	   0	    0  229.92us      0.0     .0
v_cpu_pct NUMBER(6, 3);
latch: ges resource hash l	    16	   0	    0  198.44us      0.0     .0
gc cr block 2-way		     6	   0	    0  517.83us      0.0     .0
PX Deq: Slave Session Stat	    15	   0	    0  199.33us      0.0     .0
db file scattered read		    16	   0	    0  160.38us      0.0     .0
latch: object queue header	    13	   0	    0  181.92us      0.0     .0
v_my_serial NUMBER(16);
wait list latch free		     2	   0	    0	 1.16ms      0.0     .0
libcache interrupt action	   389	   0	    0	 4.69us      0.0     .0
latch: MGA heap latch		    26	   0	    0	57.04us      0.0     .0
os thread creation		     1	   0	    0	 1.40ms      0.0     .0

DLM cross inst call comple	    14	   0	    0	74.71us      0.0     .0
latch: checkpoint queue la	     8	   0	    0  127.00us      0.0     .0
gc cr disk read 		     1	   0	    0	 1.01ms      0.0     .0
BEGIN
PX Idle Wait			    17	   0   43,109 2535.84 s      0.0
Space Manager: slave idle	 3,552	   0   15,294 4305.66ms      0.0
rdbms ipc message		24,389	  26	8,031  329.30ms      0.1

class slave wait		 4,108	  78	2,316  563.84ms      0.0
LMS CR slave timer	       133,443	   0	1,334	10.00ms      0.7
gcs yield cpu			47,311	  96	1,330	28.11ms      0.2
gcs remote message	     2,624,724	   0	1,038  395.36us     13.0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
wait for unread message on	   512	 100	1,002 1957.66ms      0.0
ges remote message		21,720	   0	1,001	46.11ms      0.1
GCR sleep			 2,220	   0	  667  300.40ms      0.0
pmon timer			   222	 100	  666 2999.84ms      0.0
EXECUTE IMMEDIATE v_home_schema_str;
DIAG idle wait			 7,487	  61	  659	88.06ms      0.0
LGWR worker group idle		     2	   0	  600  300.00 s      0.0
Data Guard: Gap Manager 	     6	   0	  360	60.00 s      0.0

Streams AQ: qmn slave idle	    12	   0	  336	28.00 s      0.0
Streams AQ: qmn coordinato	    24	   0	  336	14.00 s      0.0
OFS idle			   112	 100	  336 2999.99ms      0.0

pman timer			   112	 100	  336 2999.68ms      0.0
ASM background timer		 1,130	   0	  335  296.49ms      0.0
REPL Capture/Apply: RAC AQ	     6	 100	  334	55.69 s      0.0
heartbeat redo informer 	   334	   0	  334 1000.14ms      0.0
IF ( v_hot_schema_modulus != 0 ) THEN
lreg timer			   111	 100	  333 3002.86ms      0.0
ASM cluster membership cha	   191	  87	  333 1743.88ms      0.0
	v_do_hot_schema := TRUE;
SCM slave idle			 3,395	   0	  332	97.72ms      0.0
PING				   301	  18	  330 1096.84ms      0.0
AQPC idle			    11	 100	  330	30.00 s      0.0
dispatcher timer		     5	 100	  300	60.01 s      0.0
END IF;
smon timer			    42	   0	  169 4031.82ms      0.0
PX Deq: Parse Reply		    15	   0	    1	48.24ms      0.0
PX Deq: Execute Reply		    15	   0	    1	43.41ms      0.0

SQL*Net message from clien	   108	   0	    0	 1.67ms      0.0
PX Deq Credit: send blkd	    70	   0	    0	 2.19ms      0.0
RMA: IPC0 completion sync	   365	   0	    0	19.13us      0.0
			  ------------------------------------------------------
IF ( v_sleep_modulus != 0 )	  THEN


Wait Event Histogram			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
	v_do_sleeps := TRUE;
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
END IF;
-> Ordered by Event (idle events last)

						 % of Total Waits
				 -----------------------------------------------

			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    3297	22.9  70.0   3.6   2.3	  .8	.2    .1
IF ( v_max_loop_iterations &gt; 0 )  THEN
ASM IO for non-blocking p  86.4K  23.5	59.8  11.6   2.7   1.6	  .6	.2    .1
ASM file metadata operati   1452  13.9	 3.8  12.4  20.9  13.2	11.4  12.4  12.1
AWR Flush		       5 100.0
	v_loop_control := TRUE ;
CGS wait for IPC msg	    5039   4.6	55.8  34.6   2.7   1.8	  .3	.1    .1
CSS operation: action	       2	50.0				    50.0
CSS operation: data query     11				       9.1  90.9
CSS operation: data updat     12					   100.0
END IF;
DFS lock handle 	     226				      19.0  81.0
DLM cross inst call compl     36	13.9  44.4   2.8   2.8	 5.6  11.1  19.4
Disk file Mirror Read	     465				       3.0  97.0

Disk file operations I/O     287   1.0	10.1  24.4   8.0   9.4	27.5  16.7   2.8
GCR CSS group query	      11	72.7  27.3
GCR CSS group update	      11  18.2	63.6   9.1	   9.1
IMR slave acknowledgement    995   4.0	11.5   6.2   3.9  22.8	15.0   5.4  31.2
IF ( v_update_pct = 0 ) 	  THEN
IPC group service call	     269   3.0	 2.6  20.1  21.6  44.2	 8.2	.4
IPC send completion sync     368	29.3  54.6   3.5   1.4	 3.5   2.2   5.4
KJC: Wait for msg sends t   2263		.1   6.3  17.0	 3.4   2.2  71.0
	v_select_only_workload := TRUE;
KSV master wait 	     545   4.2	14.1  19.4   2.9   6.1	17.6   6.8  28.8
LGWR wait for redo copy      196  43.9	 5.1   1.0  13.8  18.4	 9.7   4.1   4.1
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
PGA memory operation	     262  19.1	20.2  12.2   3.1   1.5	20.6  21.0   2.3
		v_update_quota := TRUE ;
PX Deq: Join ACK	      15					   100.0
PX Deq: Signal ACK EXT	      15	13.3  33.3   6.7	13.3  13.3  20.0
	ELSE
PX Deq: Slave Session Sta     32	       3.1   6.3  43.8	12.5   6.3  28.1
PX Deq: reap credit	   43.7K    .1	36.8  58.0   2.4   1.9	  .6	.2    .1
		IF ( v_update_only_workload = TRUE ) THEN
SQL*Net message to client    326  92.6	 4.6	.9   1.8
Sync ASM rebalance	      30	26.7  16.7   6.7		    50.0
asynch descriptor resize     106  92.5	 5.7	      .9	  .9
			-- handle case where user specified 100% updates
buffer busy waits	      44	 2.3	     2.3   4.5	11.4   9.1  70.5
buffer deadlock 	       1	     100.0
			v_do_update := TRUE;
control file parallel wri    154					   100.0
control file sequential r   1959    .6	12.9   9.5    .4   7.6	20.3  31.1  17.6
db file async I/O submit   25.6K  96.7	 1.7	.5    .7    .3	  .1	.1    .0
			v_update_quota := FALSE;
		ELSE
db file parallel read	       6				      33.3  66.7
db file parallel write	   85.7K	  .0	.5   3.1   2.6	 3.4   5.1  85.4
db file scattered read	     109				25.7  44.0  30.3
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
db file sequential read    19.9M			    .0	 6.4  60.0  33.6
direct path write	      16					   100.0
direct path write temp	      36					   100.0
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
enq: CF - contention	      30				      16.7  83.3
enq: CO - master slave de      5				      20.0  80.0
			IF ( v_update_quota = FALSE ) THEN
enq: CR - block range reu   1262			    .1	       3.1  96.8
enq: FB - contention	       2				      50.0  50.0
enq: HW - contention	      65				       3.1  96.9
				-- Handle case where user has set UPDATE_PCT to a valid value
enq: PS - contention	      24				      20.8  79.2
enq: RO - fast object reu     52				      57.7  42.3
enq: TA - contention	       1					   100.0
				--
enq: TM - contention	       1					   100.0
enq: US - contention	       6					   100.0
				-- We are doing updates during this run and quota has not been met yet
enq: WF - contention	      19				      21.1  78.9
gc buffer busy release	      24	20.8  12.5		 4.2   4.2  58.3
gc cr block 2-way	     147				 2.7  13.6  83.7
				-- We still vacillate until update quota has been met
gc cr block busy	       6					   100.0
gc cr block lost	     166					   100.0

gc cr disk read 	       1					   100.0
gc cr grant 2-way	   11.4K		      .1    .1	 2.7  24.8  72.2
gc cr grant busy	  883.6K	  .0	.0    .0    .0	  .1   5.5  94.4
				IF ( MOD(v_random_block,  2) = 0 ) THEN
gc cr grant congested	     103					   100.0
gc cr multi block grant       67				       1.5  98.5
gc cr multi block mixed        5					   100.0
					v_do_update := TRUE;

Wait Event Histogram			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
				ELSE
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
					v_do_update := FALSE;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
				END IF;

						 % of Total Waits
				 -----------------------------------------------
			ELSE
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
gc current block 2-way	    2161		      .0    .0	  .1   9.8  90.1
				-- UPDATE quota has been filled,  force drain some SELECTs
gc current block busy	    4242				  .1   6.5  93.4
gc current block congeste     43					   100.0
				v_do_update := FALSE;
gc current block lost	      42					   100.0
gc current grant 2-way	  131.2K	  .0		    .0	  .0	.1  99.9
			END IF;
gc current grant busy	   17.8K		.0	    .0	  .1   6.6  93.3
gc current grant congeste   1207					   100.0
		END IF;
gc current grant read-mos 135.8K	  .0	.0	    .0	  .0   1.0  99.0
gc current multi block re      2				      50.0  50.0
gc current retry	       2					   100.0
	END IF;
gc current split	       4				      25.0  75.0
gc index operation	       5	20.0			      20.0  60.0
gc remaster		       2					   100.0

gcs drm freeze in enter s      4					   100.0
gcs log flush sync	   13.3K    .1	 5.2   5.6  14.9  21.4	20.5  18.3  14.1
gcs remastering wait for      22	 4.5   4.5		 9.1  13.6  68.2
----------------------------------------------------------------------------------------------------------------------
ges enter server mode	     745  91.4	 4.6	.5   1.9   1.3	  .3
-- The type of SQL is now determined...execute it in the following section
ges inquiry response	     546			    .2	  .4   8.2  91.2
ges ipc enter server mode    152  96.7	 2.0	      .7    .7
ges lms sync during dynam     41			   2.4	12.2   9.8  75.6
----------------------------------------------------------------------------------------------------------------------
ges resource directory to      3 100.0
ges2 LMON to wake up LMD      71	15.5  11.3   5.6  18.3	28.2  15.5   5.6

kfk: async disk IO	       1					   100.0
ksxr poll remote instance   2321	30.1  60.5   4.0   4.1	  .9	.2    .1
latch free		    2464    .3	 8.6   4.0   2.8  14.3	26.3  28.7  15.1
	IF ( v_do_update != TRUE ) THEN
latch: MGA heap latch	      26  15.4	 7.7  11.5  30.8  26.9	 7.7
latch: MGA shared context     97   4.1	11.3   1.0   3.1  18.6	23.7  28.9   9.3
		--
latch: MGA shared context     73   1.4	       1.4   5.5   6.8	 8.2  16.4  60.3
latch: cache buffers chai   3307   1.2	33.7   5.3   4.3  19.4	20.3   9.4   6.4
latch: cache buffers lru    1036   1.2	23.6   3.7   4.8  24.1	21.0  12.5   9.1
		-- Do a SELECT statement
latch: call allocation	      14   7.1	21.4	    14.3  35.7	14.3   7.1
latch: checkpoint queue l      8	25.0	    12.5  25.0	25.0  12.5
		-- Work out scan or random
latch: enqueue hash chain     61	 9.8   4.9   6.6  31.1	27.9   9.8   9.8
latch: gc element	     427    .5	16.2   5.4   4.7  20.8	24.4  16.2  11.9
latch: gcs resource hash    1108    .5	18.2   5.1   4.8  21.9	24.5  11.6  13.3
		IF  ( v_random_workload_only = TRUE ) THEN
latch: ges resource hash      32  12.5	15.6   3.1   6.3  28.1	15.6  15.6   3.1
latch: messages 	      71   1.4	 9.9   1.4   1.4  15.5	31.0  26.8  12.7
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
latch: object queue heade     65   1.5	20.0   3.1   1.5  21.5	32.3  12.3   7.7
latch: redo allocation	      92   1.1	16.3   8.7   7.6  21.7	23.9  13.0   7.6
latch: redo writing	      16	25.0  18.8   6.3   6.3	18.8   6.3  18.8
			v_do_scan_query := FALSE;
latch: shared pool	      19  10.5	21.1  42.1   5.3  10.5	10.5
latch: undo global data        6  16.7	16.7	    16.7  33.3	      16.7
			v_scan_query_quota := TRUE ;
libcache interrupt action    387  97.2	 1.3	.8    .3    .3	  .3
library cache: mutex X	      23  30.4	26.1   4.3			    39.1
lock deadlock retry	      42	19.0  76.2   2.4	 2.4
		ELSE
log file parallel write    14.1K					   100.0
log file sequential read     225		    28.4   4.0	 7.1   8.4  52.0
log file sync		      14					   100.0
			IF ( v_scan_workload_only = TRUE ) THEN
oracle thread bootstrap        1					   100.0
os thread creation	       1					   100.0
reliable message	     386					   100.0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
row cache lock		      31					   100.0
undo_retention publish re      1 100.0
				v_do_scan_query := TRUE;
wait list latch free	       2					   100.0
AQPC idle		      11					   100.0
ASM background timer	    1114			   1.7	 5.3   4.8  88.2
				v_scan_query_quota := FALSE;
ASM cluster membership ch    188					   100.0
DIAG idle wait		    7469		.0    .1    .8	 1.0   8.7  89.4
Data Guard: Gap Manager        6					   100.0
			ELSE
GCR sleep		    2209					   100.0

Wait Event Histogram			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
				IF ( v_scan_query_quota = FALSE ) THEN
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)

					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
						 % of Total Waits
				 -----------------------------------------------
			   Total
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
						v_do_scan_query := TRUE;
LMS CR slave timer	  132.7K			    .0		   100.0
OFS idle		     111					   100.0
					ELSE
PING			     309		.6  15.9  22.0	14.2   5.5  41.7
PL/SQL lock timer	       1					   100.0
PX Deq Credit: send blkd      70				 8.6  68.6  22.9
						v_do_scan_query := FALSE;
PX Deq: Execute Reply	      15					   100.0
PX Deq: Execution Msg	      51				      19.6  80.4
PX Deq: Msg Fragment	     150   6.0	 3.3	    10.7   1.3	 2.0  51.3  25.3
					END IF;
PX Deq: Parse Reply	      15	13.3			 6.7   6.7  73.3
PX Idle Wait		      17					   100.0
REPL Capture/Apply: RAC A      6					   100.0
				ELSE
RMA: IPC0 completion sync    364   6.0	56.9  33.8   1.4   1.4		.3    .3
SCM slave idle		    3377    .0		      .0	  .1	.1  99.7
SQL*Net message from clie    327				 1.5  11.0  87.5
					-- Scan quota has been filled,	force drain some random access SELECTS
Space Manager: slave idle   3499    .1	  .6	.1    .9   2.6	 1.3	.3  94.1
Streams AQ: qmn coordinat     24				25.0  25.0  50.0
Streams AQ: qmn slave idl     12					   100.0
					v_do_scan_query := FALSE;
class slave wait	    4089   2.2	 1.5	.3   2.8   2.2	 1.4	.6  88.8
dispatcher timer	       5					   100.0
				END IF;
gcs remote message	    2.6M    .0	 5.8   5.5  14.2  19.5	20.3  19.1  15.7
gcs yield cpu		   47.1K    .7	 1.5	.5    .3    .2	  .4	.9  95.5
ges remote message	     22K    .0	 2.3   1.2    .5   1.0	 3.9   5.0  86.0
			END IF;
heartbeat redo informer      331					   100.0
lreg timer		     110					   100.0
pman timer		     111					   100.0
		END IF;
pmon timer		     221					   100.0
rdbms ipc message	   24.5K   5.9	10.3   1.3   2.1   3.9	 4.1   3.5  68.9
smon timer		      42	 2.4   2.4			    95.2

wait for unread message o    510					   100.0
watchdog main loop	     666					   100.0

			  ------------------------------------------------------


Wait Event Histogram (up to 64 us)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		IF ( v_do_scan_query != TRUE ) THEN
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
			SELECT COUNT(c2) INTO v_rowcnt
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
			FROM cf1
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
				 -----------------------------------------------
			   Waits
			    1us

Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    3183			  22.9	70.0   3.6   3.5
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
ASM IO for non-blocking p  84.3K		.0  23.5  59.8	11.6   2.7   2.4
ASM file metadata operati    740	       5.1   8.8   3.8	12.4  20.9  49.0
AWR Flush		       5	      20.0  80.0
		ELSE
CGS wait for IPC msg	    4924		     4.6  55.8	34.6   2.7   2.3
CSS operation: action	       1			  50.0		    50.0
DLM cross inst call compl     22			  13.9	44.4   2.8  38.9
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
Disk file operations I/O     125		.3    .7  10.1	24.4   8.0  56.4
GCR CSS group query	      11			  72.7	27.3

GCR CSS group update	      10		    18.2  63.6	 9.1	     9.1
IMR slave acknowledgement    255		     4.0  11.5	 6.2   3.9  74.4
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
IPC group service call	     127		     3.0   2.6	20.1  21.6  52.8
IPC send completion sync     322			  29.3	54.6   3.5  12.5
KJC: Wait for msg sends t    146				  .1   6.3  93.5

KSV master wait 	     222		     4.2  14.1	19.4   2.9  59.3
LGWR wait for redo copy      125	      14.3  29.6   5.1	 1.0  13.8  36.2
PGA memory operation	     143	       1.5  17.6  20.2	12.2   3.1  45.4
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
PX Deq: Signal ACK EXT	       8			  13.3	33.3   6.7  46.7
PX Deq: Slave Session Sta      3				 3.1   6.3  90.6
PX Deq: reap credit	   42.5K		      .1  36.8	58.0   2.4   2.7
				v_scan_query_quota := TRUE;
SQL*Net message to client    326	      22.4  70.2   4.6	  .9   1.8
Sync ASM rebalance	      15			  26.7	16.7   6.7  50.0
asynch descriptor resize     105	       1.9  90.6   5.7		.9    .9
			END IF;
buffer busy waits	       2			   2.3	       2.3  95.5
buffer deadlock 	       1			       100.0
control file sequential r    459		      .6  12.9	 9.5	.4  76.6
		END IF;
db file async I/O submit   25.4K	      35.3  61.4   1.7	  .5	.7    .5
db file parallel write	    3088			    .0	  .5   3.1  96.4

gc buffer busy release	       8			  20.8	12.5	    66.7
gc cr grant 2-way	      11					.1  99.9
gc cr grant busy	     125			    .0	  .0	.0 100.0
gc current block 2-way	       1					.0 100.0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
gc current grant 2-way	       1			    .0		   100.0
gc current grant busy	       2				  .0	   100.0
gc current grant read-mos      9			    .0	  .0	   100.0
	ELSE
gc index operation	       1			  20.0		    80.0
gcs log flush sync	    3406		      .1   5.2	 5.6  14.9  74.3
gcs remastering wait for       2			   4.5	 4.5	    90.9
		--
ges enter server mode	     733	      10.2  81.2   4.6	  .5   1.9   1.6
ges ipc enter server mode    151	      31.6  65.1   2.0		.7    .7
ges resource directory to      3	      66.7  33.3
		-- Do an UPDATE statement
ges2 LMON to wake up LMD      23			  15.5	11.3   5.6  67.6
ksxr poll remote instance   2198			  30.1	60.5   4.0   5.3
latch free		     386		      .3   8.6	 4.0   2.8  84.3
		--
latch: MGA heap latch	      17		    15.4   7.7	11.5  30.8  34.6
latch: MGA shared context     19		     4.1  11.3	 1.0   3.1  80.4

latch: MGA shared context      6		     1.4	 1.4   5.5  91.8
latch: cache buffers chai   1472		     1.2  33.7	 5.3   4.3  55.5
		v_my_serial := v_my_serial + v_loop_cnt ;
latch: cache buffers lru     344		     1.2  23.6	 3.7   4.8  66.8
latch: call allocation	       6		     7.1  21.4	      14.3  57.1
latch: checkpoint queue l      3			  25.0	      12.5  62.5

latch: enqueue hash chain     13			   9.8	 4.9   6.6  78.7
latch: gc element	     114		      .5  16.2	 5.4   4.7  73.3
latch: gcs resource hash     318		      .5  18.2	 5.1   4.8  71.3
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
latch: ges resource hash      12		    12.5  15.6	 3.1   6.3  62.5
latch: messages 	      10		     1.4   9.9	 1.4   1.4  85.9
latch: object queue heade     17		     1.5  20.0	 3.1   1.5  73.8
		--
latch: redo allocation	      31		     1.1  16.3	 8.7   7.6  66.3
latch: redo writing	       8			  25.0	18.8   6.3  50.0
latch: shared pool	      15		    10.5  21.1	42.1   5.3  21.1

		-- Increment count of UPDATES and set UPDATE quota flag if needed
Wait Event Histogram (up to 64 us)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		--
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: total waits for all wait classes, including Idle
		v_updates_cnt := v_updates_cnt + 1;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)


						 % of Total Waits
				 -----------------------------------------------
			   Waits
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
			v_update_quota := TRUE;
latch: undo global data        3		    16.7  16.7	      16.7  50.0
libcache interrupt action    385	  .3  51.4  45.5   1.3	  .8	.3    .5
library cache: mutex X	      14		    30.4  26.1	 4.3	    39.1
		END IF;
lock deadlock retry	      41			  19.0	76.2   2.4   2.4
log file sequential read      64				      28.4  71.6
undo_retention publish re      1		   100.0
	END IF ;
			  ------------------------------------------------------


Wait Event Histogram (up to 32 ms)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
----------------------------------------------------------------------------------------------------------------------
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
----------------------------------------------------------------------------------------------------------------------
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------

			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
AQ: RAC AQ Network	       3  99.9	  .1	.0
ASM IO for non-blocking p     73  99.9	  .1	.0    .0	  .0
ASM file metadata operati    173  87.9	 1.3   1.6   2.7   2.3	 3.8	.2    .2
		--
CGS wait for IPC msg	       3  99.9	  .1
CSS operation: action	       1  50.0	50.0
CSS operation: data query     10   9.1	18.2  45.5  18.2   9.1
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
CSS operation: data updat     12	58.3  16.7  16.7   8.3
DFS lock handle 	     181  19.0	56.6  15.9   6.6    .9		      .9
DLM cross inst call compl      7  80.6	11.1   8.3
		-- so reset flags and counters before continuing
Disk file Mirror Read	     381   3.0	19.4   4.1  20.9  13.3	15.5   8.8  15.1
Disk file operations I/O       8  97.2	 2.4	.3
		--
IMR slave acknowledgement    259  68.8	 7.1   1.7   5.8   4.1	 4.9   2.3   5.1
IPC send completion sync      19  94.6	 3.0   1.1    .8    .3		      .3
KJC: Wait for msg sends t    294  29.0	 5.0   5.3   2.3    .4	  .0	    58.0
		v_update_quota := FALSE;
KSV master wait 	     156  71.2	  .9   3.1   7.3   6.4	10.3	.6    .2
LGWR wait for redo copy        8  95.9	 3.6	.5
PGA memory operation	       6  97.7	 2.3
		v_updates_cnt := 0;
PX Deq: Join ACK	      15	40.0  40.0   6.7  13.3
PX Deq: Signal ACK EXT	       2  80.0	 6.7	     6.7		     6.7
PX Deq: Slave Session Sta      8  71.9	21.9	     3.1		     3.1
		v_selects_cnt := 0;
PX Deq: reap credit	      29  99.9	  .0	.0    .0
Sync ASM rebalance	      14  50.0	10.0   6.7	   3.3	13.3  13.3   3.3
buffer busy waits	       6  29.5	 9.1		   4.5		    56.8
	END IF;
control file parallel wri    116		    10.4  37.0	17.5  10.4  24.7
control file sequential r    344  82.4	10.5   2.9   1.3   1.8	 1.0	.1
db file async I/O submit       7 100.0	  .0	.0    .0

db file parallel read	       4  33.3	33.3  16.7	  16.7
db file parallel write	   66.1K  14.6	 9.1  14.8  19.3  15.6	12.8   5.5   8.3
db file scattered read	      33  69.7	21.1   3.7	    .9	 4.6
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
db file sequential read     6.7M  66.4	25.4   5.1   1.2    .6	 1.4	.0    .0
direct path write	      16	      25.0  50.0   6.3	12.5   6.3
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
direct path write temp	      33		    52.8  30.6	 5.6   2.8   8.3
enq: CF - contention	      21  16.7	33.3  16.7  20.0		    13.3
enq: CO - master slave de      4  20.0	60.0	    20.0
		-- so reset flags and counters
enq: CR - block range reu    919   3.2	20.0  28.0  17.0   3.9	 1.8   2.1  24.0
enq: FB - contention	       1  50.0	      50.0
enq: HW - contention	       5   3.1			   3.1	 1.5   3.1  89.2
		v_scan_query_quota := FALSE;
enq: PS - contention	      19  20.8	37.5  29.2   8.3   4.2
enq: RO - fast object reu     19  57.7	 1.9   7.7  26.9		     5.8
enq: TA - contention	       1       100.0
enq: TM - contention	       1				     100.0
		v_scan_queries_cnt := 0;
enq: US - contention	       6	16.7  50.0  33.3
enq: WF - contention	      15  21.1	36.8  31.6  10.5
gc buffer busy release	       6  41.7	 4.2   4.2   4.2   8.3	 4.2	    33.3
		v_random_access_queries_cnt := 0;
gc cr block 2-way	     123  16.3	29.9  36.1  14.3   3.4
gc cr block busy	       1				      16.7  83.3
gc cr disk read 	       1       100.0
	END IF;
gc cr grant 2-way	    8146  27.8	32.3  23.6  11.8   3.1	  .4	.0   1.0
gc cr grant busy	  821.2K   5.6	31.4  35.0  18.6   6.1	 1.6	.3   1.4
gc cr grant congested	     102	       9.7  46.6  35.0	 7.8	     1.0

gc cr multi block grant       64   1.5	29.9  34.3  28.4   1.5	 1.5	     3.0
gc cr multi block mixed        5		   100.0
gc current block 2-way	    1935   9.9	42.7  30.9  12.5   3.1	  .2	.0    .5
	v_loop_cnt := v_loop_cnt + 1 ;
gc current block busy	    3885   6.6	26.8  33.0  20.7   7.9	 2.5	.7   1.8
gc current block congeste     42	       2.3  37.2  37.2	14.0   7.0   2.3
gc current grant 2-way	  126.8K    .1	 3.5  30.1  36.8  18.6	 6.1   1.7   3.3
	v_now := DBMS_UTILITY.GET_TIME();
gc current grant busy	   16.5K   6.7	33.6  35.5  16.5   5.1	 1.3	.2    .9
gc current grant congeste   1040		     9.4  31.8	33.7  11.3  13.8
gc current grant read-mos 131.2K   1.0	24.8  39.3  21.2   7.6	 2.8	.9   2.5

gc current multi block re      1  50.0		    50.0

Wait Event Histogram (up to 32 ms)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
		-- If this is a fixed-iteration count test cycle and we've hit the number of
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
		-- iterations then set exit flag
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
		v_stop_immediate := TRUE ;
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
	END IF;
gc current retry	       1	50.0				    50.0
gc current split	       3  25.0		    25.0  25.0	      25.0
gc index operation	       3  40.0	      20.0	  20.0	20.0
gcs drm freeze in enter s      1				      25.0  75.0
gcs log flush sync	    1866  85.9	 9.5   3.3   1.0    .2	  .0
END LOOP;
gcs remastering wait for       6  31.8	 4.5		  22.7		    40.9
ges inquiry response	     490   8.8	29.9  37.9  18.9   2.7	  .4	     1.5
ges lms sync during dynam     31  24.4	 7.3  34.1   9.8	 7.3  17.1

ges2 LMON to wake up LMD       4  94.4	 5.6
kfk: async disk IO	       1			       100.0
ksxr poll remote instance      2  99.9		.0    .0
v_end_time := v_now ;
latch free		     371  84.9	10.3   1.8    .6    .5	 1.8
latch: MGA shared context      9  90.7	 9.3
latch: MGA shared context     44  39.7	31.5  28.8
latch: cache buffers chai    202  93.6	 4.0   1.5    .6    .0	  .0	      .3
v_now := DBMS_UTILITY.GET_TIME();
latch: cache buffers lru      94  90.9	 5.9   2.2    .7    .3
latch: enqueue hash chain      6  90.2	 8.2   1.6
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
latch: gc element	      38  88.1	 4.4   2.8   1.4	  .2	     3.0
latch: gcs resource hash     121  86.7	 6.8   2.8   1.1    .2		.1   2.3
latch: ges resource hash       1  96.9	       3.1

latch: messages 	       9  87.3	 9.9	     2.8
latch: object queue heade      5  92.3	 6.2   1.5
latch: redo allocation	       7  92.4	 4.3   1.1   2.2
latch: redo writing	       3  81.3		    12.5   6.3
v_total_time := v_end_time - v_begin_time ;
library cache: mutex X	       9  60.9				34.8   4.3
log file parallel write    13.5K		     6.5  38.6	39.8  10.6   4.5
log file sequential read     117  48.0	 8.0   8.4   9.8  19.6	 6.2
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
log file sync		       4	       7.1   7.1   7.1	 7.1	    71.4
oracle thread bootstrap        1				     100.0
os thread creation	       1	     100.0
reliable message	     351	 1.3   2.8   9.3  38.6	35.8   3.1   9.1
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
row cache lock		      31	32.3  48.4   9.7   6.5	 3.2
wait list latch free	       2	     100.0
			  ------------------------------------------------------


v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
Wait Event Histogram (up to 2 sec)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:

   ms is milliseconds
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
END;</pre_sqltext></td></tr>
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
<tr><td scope="row" class='awrnc'><a class="awr" name="311ar1kvtsj1u"></a>311ar1kvtsj1u</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
			   Waits
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_default_schema_number PLS_INTEGER := '190';
ASM file metadata operati      3  99.8	  .2
DFS lock handle 	       2  99.1		      .4    .4
Disk file Mirror Read	      70  84.9	 2.4   2.4   5.8   3.9	  .6
v_update_pct PLS_INTEGER := '3';
IMR slave acknowledgement     51  94.9	  .7	.8   1.8   1.5	  .3
KJC: Wait for msg sends t   1313  42.0			  57.2	  .8
KSV master wait 	       1  99.8	  .2
PX Deq: Signal ACK EXT	       1  93.3				 6.7
v_max_loop_iterations PLS_INTEGER := '0';
PX Deq: Slave Session Sta      1  96.9				 3.1
Sync ASM rebalance	       1  96.7	 3.3
buffer busy waits	      24  43.2	 4.5   4.5   4.5  11.4	15.9  13.6   2.3
v_seconds_to_run PLS_INTEGER := '300';
control file parallel wri     38  75.3	 3.9   5.8   7.1   4.5	 3.2
db file parallel write	    7100  91.7	 1.0   1.7   5.3    .2	  .1
db file sequential read      947 100.0	  .0	.0    .0
direct path write temp	       3  91.7	 5.6	     2.8
v_scale PLS_INTEGER := '32768';
enq: CF - contention	       4  86.7		     6.7   6.7
enq: CR - block range reu    303  76.0	 3.2   2.8  12.2   4.0	 1.4	.3
enq: HW - contention	      58  10.8	 4.6   4.6  15.4  33.8	23.1   7.7
v_work_unit PLS_INTEGER := '4' ;
enq: RO - fast object reu      3  94.2	       1.9   3.8
gc buffer busy release	       8  66.7	 4.2			29.2
gc cr block busy	       5  16.7	      33.3  33.3  16.7
gc cr block lost	     166			  42.2	57.2	.6
v_redo_stress  VARCHAR2(12) := 'LITE';
gc cr grant 2-way	     113  99.0		.0		  .9	.0
gc cr grant busy	   12.8K  98.6	  .2	.7    .0	  .6	.0    .0
gc cr grant congested	       1  99.0				 1.0
gc cr multi block grant        2  97.0	       1.5		 1.5
v_hot_schema_modulus PLS_INTEGER := '0';
gc current block 2-way	      11  99.5				  .5
gc current block busy	      75  98.2	  .5	.8    .0    .0	  .4
gc current block congeste      1  97.7				 2.3
gc current block lost	      42			  33.3	64.3   2.4
v_do_hotspot   VARCHAR(7) := 'FALSE';
gc current grant 2-way	    4329  96.7	  .9   1.8    .1	  .5	.0    .0
gc current grant busy	     165  99.1	  .0	.5		  .4	.0
v_hotspot_mb  NUMBER := '10';
gc current grant congeste    167  86.2	 4.6   8.2    .2	  .7	.2
gc current grant read-mos   3345  97.5	  .8   1.7    .0	  .0	.0
gc current retry	       1  50.0	50.0
gc remaster		       2				     100.0
v_hotspot_offset_mb NUMBER := '0';
gcs drm freeze in enter s      3  25.0	50.0	    25.0
gcs remastering wait for       9  59.1	 4.5  36.4
ges inquiry response	       8  98.5		      .5    .7	  .2
latch: cache buffers chai     11  99.7	  .3	.1
v_hotspot_modulus  PLS_INTEGER := '0';
latch: gc element	      13  97.0	  .5   2.6

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
latch: gcs resource hash      26  97.7	 1.1   1.3
log file parallel write      632  95.5	 1.3	.4   1.9    .6	  .2	.0
	v_do_sleeps := TRUE;
log file sync		      10  28.6	      35.7  35.7
reliable message	      34  90.9	  .5	.5   3.4   3.1	  .5	.8    .3
END IF;
			  ------------------------------------------------------



Wait Event Histogram (up to 2 min)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
IF ( v_max_loop_iterations &gt; 0 )  THEN
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
	v_loop_control := TRUE ;
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
-> % of Total Waits: total waits for all wait classes, including Idle
END IF;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0

-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
IF ( v_update_pct = 0 ) 	  THEN
				 -----------------------------------------------
			   Waits
			    4s
	v_select_only_workload := TRUE;
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
IPC send completion sync       1  99.7	  .3
END IF;
buffer busy waits	       1  97.7	 2.3
gc cr grant busy	       8 100.0	  .0	.0

gc current grant 2-way	       2 100.0	  .0	.0
reliable message	       1  99.7		.3
			  ------------------------------------------------------
IF ( v_update_pct = 100 )	  THEN


Wait Event Histogram (up to 1 hr)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	v_update_only_workload := TRUE;

		  No data exists for this section of the report.
END IF;
			  ------------------------------------------------------



Service Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by DB Time

IF ( v_scan_query_pct = 0 ) 	THEN
							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
---------------------------- ------------ ------------ ------------ ------------
	v_random_workload_only := TRUE;
p30sdb.example.com		   27,550	 5,372	     19,872	  33,570
SYS$BACKGROUND				6	     2		  1	      22
END IF;
SYS$USERS				0	     0		  0	       0
p30sdbXDB				0	     0		  0	       0
			  ------------------------------------------------------


Service Wait Class Stats		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
IF ( v_scan_query_pct = 100 ) 	THEN
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
   classes:  User I/O, Concurrency, Administrative, Network
	v_scan_workload_only := TRUE;
-> Time Waited (Wt Time) in seconds

Service Name
END IF;
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network

Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------
p30sdb.example.com
v_seconds_to_run := v_seconds_to_run * 100 ;
 19869441     14029	 2992	     16 	0	  0	  231	      0
SYS$BACKGROUND

    87147	 19	  768	      1 	0	  0	  255	      0
SYS$USERS
	0	  0	    0	      0 	0	  0	    0	      0
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
			  ------------------------------------------------------


Top 10 Channel Waits			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Top 10 Channel Waits by wait time
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');

Channel
----------------------------------------------------------------
-- DBMS_RANDOM.seed (val =&gt; v_seed);
	       Total
		Wait
      Waits Time (s)  Avg Wait

----------- -------- ---------
kxfp control signal channel
	  8	   0  850.75us
v_begin_time := DBMS_UTILITY.GET_TIME();
obj broadcast channel
	 12	   0	2.76ms
MMON remote action broadcast channel
v_now := v_begin_time ;
	  1	   4 4279.42ms
RBR channel
	365	  17   46.27ms
v_brick_wall := v_now + v_seconds_to_run ;
			  ------------------------------------------------------


v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Top Process Types by Wait Class 	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> This table displays top process types ordered by wait class


Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
----------------------------------------------------------------------------------------------------------------------
      Others (foregrounds + unclassi User I/O		    14,129.1
      Others (foregrounds + unclassi Cluster		    10,523.1
      Others (foregrounds + unclassi Other		       413.8
-- The following WHILE loop is the master work loop control
LGWR  Redo etc. 		     System I/O 	       259.5
DBW2  db writer process 2	     System I/O 	       180.7
DBW1  db writer process 1	     System I/O 	       180.4
----------------------------------------------------------------------------------------------------------------------
DBW3  db writer process 3	     System I/O 	       178.5
DBW4  db writer process 4	     System I/O 	       178.5
DBW6  db writer process 6	     System I/O 	       177.3
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
DBW7  db writer process 7	     System I/O 	       177.1
DBW5  db writer process 5	     System I/O 	       176.7

DBW0  db writer process 0	     System I/O 	       176.1
SMON  System Monitor Process	     Other			92.1
      Others (foregrounds + unclassi Configuration		27.9
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
      Others (foregrounds + unclassi Concurrency		17.3
LMON  global enqueue service monitor Other			13.6
IMR   CGS IMR Slave		     User I/O			13.0
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
CKPT  checkpoint		     System I/O 		10.4
CKPT  checkpoint		     Other			 5.7
P     Parallel query slave	     Other			 5.0
			  ------------------------------------------------------

			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );

Top Process Types by CPU Used		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> This table displays top process types ordered by CPU time
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );

Proces Description		      CPU Time (sec)
------ ------------------------------ --------------
			DBMS_LOCK.SLEEP(v_num_tmp);
       Others (foregrounds + unclassi	     5,372.6
LM     global cache service process	       560.1
		END IF;
VKTM   Virtual Keeper of TiMe process		17.7
DBW1   db writer process 1			12.0
	END IF;
DBW3   db writer process 3			12.0
DBW7   db writer process 7			11.9

DBW0   db writer process 0			11.9
DBW4   db writer process 4			11.8
DBW5   db writer process 5			11.8
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
DBW2   db writer process 2			11.8
DBW6   db writer process 6			11.8
DIA0   diagnosibility process 0 		 9.3
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
RS*    GCS RM Slave				 8.6
P      Parallel query slave			 7.3
CR*    GCS CR Slave				 7.3
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
LGWR   Redo etc.				 6.7
M      MMON slave class 1			 5.4
SCM    DLM Statistics Collection and		 2.7
			v_sharing_schema := TRUE ;
GCR    GCR Slaves (LMHB)			 2.2
LMD0   global enqueue service daemon		 1.8
			  ------------------------------------------------------
		ELSE


SQL ordered by Elapsed Time		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
			IF ( v_sharing_schema = TRUE ) THEN
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
				EXECUTE IMMEDIATE v_home_schema_str;
   into the Total Database Time multiplied by 100
				v_sharing_schema := FALSE;
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
			END IF;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   91.9% of Total DB Time (s):	   27,981
-> Captured PL/SQL account for	 43.4% of Total DB Time (s):	      27,981
		END IF;

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
	END IF;
---------------- -------------- ------------- ------ ------ ------ -------------
	22,502.7      6,253,448 	 0.00	80.4   18.6   58.4 bhdvtsvjhgvrh

Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
	-- Choose the random block. The v_do_hotspot handler that follows can override.

	 3,215.8	193,423 	 0.02	11.5	7.2   16.7 35dumc2tpr9dv
Module: SQL*Plus
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


	   260.6	      1        260.57	  .9	6.6   19.2 bhydnmhhkhhdy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;

	   259.9	      1        259.87	  .9   18.1   48.0 fcfy9turtx376
Module: SQL*Plus
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	   259.3	      1        259.27	  .9   16.2   43.6 f7s68cgfrpfx5
	END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
----------------------------------------------------------------------------------------------------------------------

	   259.3	      1        259.25	  .9	5.8   17.2 c45q6fupzf7tg
Module: SQL*Plus
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
----------------------------------------------------------------------------------------------------------------------
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   259.2	      1        259.25	  .9	7.2   14.5 5m9kb3cpp792u

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF  ( v_select_only_workload = TRUE ) THEN
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		-- handle case where user specified zero pct updates (a SELECT-only workload)
	   259.2	      1        259.25	  .9	7.4   14.7 0u5gbpqpjtcbb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
		v_do_update := FALSE;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
		v_update_quota := TRUE ;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   258.9	      1        258.93	  .9	6.8   13.1 0fxpq9z2j2zyu
	ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '191'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_update_only_workload = TRUE ) THEN
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			-- handle case where user specified 100% updates
	   258.9	      1        258.92	  .9   13.8   37.1 5t5va0wzy46cz
Module: SQL*Plus

			v_do_update := TRUE;
SQL ordered by Elapsed Time		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
			v_update_quota := FALSE;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
		ELSE
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   91.9% of Total DB Time (s):	   27,981
-> Captured PL/SQL account for	 43.4% of Total DB Time (s):	      27,981
			-- Work out whether this loop iteration is a SELECT or UPDATE here:

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
			IF ( v_update_quota = FALSE ) THEN
---------------- -------------- ------------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				-- Handle case where user has set UPDATE_PCT to a valid value
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

				--
			  ------------------------------------------------------


				-- We are doing updates during this run and quota has not been met yet
SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
				-- We still vacillate until update quota has been met
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Captured SQL account for   81.1% of Total CPU Time (s):	     5,455
-> Captured PL/SQL account for	 53.4% of Total CPU Time (s):		5,455

				IF ( MOD(v_random_block,  2) = 0 ) THEN
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
					v_do_update := TRUE;
   4,190.1    6,253,448       0.00   76.8   22,502.7   18.6   58.4 bhdvtsvjhgvrh
Module: SQL*Plus
				ELSE
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     232.4	193,423       0.00    4.3    3,215.8	7.2   16.7 35dumc2tpr9dv
Module: SQL*Plus
					v_do_update := FALSE;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

				END IF;
      85.4	      1      85.35    1.6      258.9   33.0   84.5 7s9avvsud7a92
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
			ELSE
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
				-- UPDATE quota has been filled,  force drain some SELECTs
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      85.2	      1      85.21    1.6      256.9   33.2   83.6 fgw43xkd3k8vd
Module: SQL*Plus
				v_do_update := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		END IF;
      85.2	      1      85.20    1.6      256.8   33.2   84.2 djbfhkquyuyab
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      85.1	      1      85.11    1.6      258.8   32.9   84.3 b2rbrgpu3jxh1
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
-- The type of SQL is now determined...execute it in the following section
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

      84.8	      1      84.80    1.6      256.8   33.0   84.4 f90ww8cyy5gy0
----------------------------------------------------------------------------------------------------------------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
	IF ( v_do_update != TRUE ) THEN

      84.7	      1      84.72    1.6      256.9   33.0   83.1 fpt7knftv3a5x
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
		-- Do a SELECT statement
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      84.5	      1      84.54    1.5      256.9   32.9   84.5 4c3z7x1gkcdup
		-- Work out scan or random
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
		IF  ( v_random_workload_only = TRUE ) THEN
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
      84.5	      1      84.50    1.5      258.9   32.6   84.5 7a4r7h7dtp9uk
Module: SQL*Plus

SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
			v_do_scan_query := FALSE;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
			v_scan_query_quota := TRUE ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		ELSE
-> Captured SQL account for   81.1% of Total CPU Time (s):	     5,455
-> Captured PL/SQL account for	 53.4% of Total CPU Time (s):		5,455

    CPU 		  CPU per	    Elapsed
			IF ( v_scan_workload_only = TRUE ) THEN
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
				v_do_scan_query := TRUE;

      84.3	      1      84.28    1.5      256.8   32.8   84.8 8td9ta6n97dbm
Module: SQL*Plus
				v_scan_query_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			ELSE
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

				IF ( v_scan_query_quota = FALSE ) THEN
      84.2	      1      84.22    1.5      258.9   32.5   84.2 6thask7s4zxhn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
      84.1	      1      84.13    1.5      258.9   32.5   83.9 6z2cq7r4rtuz6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
						v_do_scan_query := TRUE;

      84.1	      1      84.09    1.5      256.9   32.7   84.3 2t98zru3nqhar
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					ELSE
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

						v_do_scan_query := FALSE;
      83.9	      1      83.91    1.5      256.8   32.7   84.6 311ar1kvtsj1u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
					END IF;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
				ELSE
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      83.8	      1      83.84    1.5      256.8   32.6   84.2 8wqq6m9va6xs1
Module: SQL*Plus
					-- Scan quota has been filled,	force drain some random access SELECTS
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

					v_do_scan_query := FALSE;
      83.8	      1      83.80    1.5      256.9   32.6   84.3 b86uad51uut0p
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
				END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
			END IF;

      83.6	      1      83.57    1.5      258.9   32.3   83.4 cw70q4hn80hyn
Module: SQL*Plus
		END IF;
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
		IF ( v_do_scan_query != TRUE ) THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   81.1% of Total CPU Time (s):	     5,455
			SELECT COUNT(c2) INTO v_rowcnt
-> Captured PL/SQL account for	 53.4% of Total CPU Time (s):		5,455

    CPU 		  CPU per	    Elapsed
			FROM cf1
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------

			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
      83.4	      1      83.39    1.5      256.9   32.5   83.5 1wts9khnkkvhw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
      83.3	      1      83.28    1.5      256.8   32.4   84.1 45vm32p2sn1md
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
		ELSE
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

      82.9	      1      82.88    1.5      256.9   32.3   83.4 7v30dvkrm7b1v
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      82.5	      1      82.52    1.5      256.9   32.1   83.1 fr7qdwubf5vg8
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      69.3	      1      69.31    1.3      258.9   26.8   69.9 2h44xdn8mgfr1
				v_scan_query_quota := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
			END IF;
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots
		END IF;

      64.6	      1      64.63    1.2      258.8   25.0   66.8 6kmjaydb8dsqs
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      64.2	      1      64.20    1.2      256.9   25.0   66.0 fckscu903tf4w
Module: SQL*Plus
	ELSE
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
		--
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      64.0	      1      63.96    1.2      257.0   24.9   66.3 0fb14y10vjhsr
		-- Do an UPDATE statement
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


      63.8	      1      63.76    1.2      256.8   24.8   65.3 00057r4zrytpk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
		v_my_serial := v_my_serial + v_loop_cnt ;

SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL

   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
-> Captured SQL account for   81.1% of Total CPU Time (s):	     5,455
-> Captured PL/SQL account for	 53.4% of Total CPU Time (s):		5,455

		--
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
		-- Increment count of UPDATES and set UPDATE quota flag if needed
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		--
      63.6	      1      63.59    1.2      256.8   24.8   66.1 fkuvv1yajzw3f
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
		v_updates_cnt := v_updates_cnt + 1;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


      63.0	      1      63.00    1.2      258.8   24.3   65.1 2mvw58awb6cyc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
			v_update_quota := TRUE;

      62.8	      1      62.85    1.2      256.8   24.5   65.4 3dk52894pmqfv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
		END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
	END IF ;

      61.9	      1      61.86    1.1      258.8   23.9   64.1 92xgsuancvhq2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
----------------------------------------------------------------------------------------------------------------------
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      58.0	      1      58.01    1.1      258.9   22.4   59.9 c0pd7mpw5mucc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


      58.0	      1      57.99    1.1      258.9   22.4   60.1 bgkfz06rghsby
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		--
			  ------------------------------------------------------


SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
		-- so reset flags and counters before continuing
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   96.1% of Total User I/O Wait Time (s):	      14
-> Captured PL/SQL account for	 53.1% of Total User I/O Wait Time (s):
		--

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		v_update_quota := FALSE;
---------- ------------ ---------- ------ ---------- ------ ------ -------------
  13,145.3    6,253,448       0.00   92.3   22,502.7   18.6   58.4 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
		v_updates_cnt := 0;

     536.2	193,423       0.00    3.8    3,215.8	7.2   16.7 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
		v_selects_cnt := 0;
< :B1 )

     218.8	      1     218.80    1.5      258.9   32.6   84.5 7a4r7h7dtp9uk
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     218.8	      1     218.77    1.5      258.9   33.0   84.5 7s9avvsud7a92
Module: SQL*Plus
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,

     218.3	      1     218.26    1.5      258.8   32.9   84.3 b2rbrgpu3jxh1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
		-- so reset flags and counters
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots
		v_scan_query_quota := FALSE;

     218.0	      1     217.96    1.5      258.9   32.5   84.2 6thask7s4zxhn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
		v_scan_queries_cnt := 0;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,	C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3dk52894pmqfv"></a>3dk52894pmqfv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '56';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


     217.9	      1     217.86    1.5      256.8   32.8   84.8 8td9ta6n97dbm
v_begin_time PLS_INTEGER;
Module: SQL*Plus
v_end_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_time PLS_INTEGER;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
v_begin_cpu_tm PLS_INTEGER;

     217.4	      1     217.35    1.5      256.8   32.7   84.6 311ar1kvtsj1u
Module: SQL*Plus
v_end_cpu_tm PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_cpu_tm PLS_INTEGER;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


     217.1	      1     217.10    1.5      258.9   32.5   83.9 6z2cq7r4rtuz6
Module: SQL*Plus
v_do_sleeps BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_loop_control BOOLEAN := FALSE;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_update_quota BOOLEAN := FALSE;
     217.1	      1     217.06    1.5      256.9   32.9   84.5 4c3z7x1gkcdup
Module: SQL*Plus
v_select_only_workload BOOLEAN := FALSE;

SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_update_only_workload BOOLEAN := FALSE;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
v_do_update BOOLEAN := FALSE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_do_hot_schema BOOLEAN := FALSE;
-> Captured SQL account for   96.1% of Total User I/O Wait Time (s):	      14
-> Captured PL/SQL account for	 53.1% of Total User I/O Wait Time (s):
v_stop_immediate BOOLEAN := FALSE;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
v_sharing_schema BOOLEAN := FALSE;
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
v_seed VARCHAR2(128);
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
v_home_schema_str VARCHAR2(80);
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

     216.7	      1     216.68    1.5      256.8   33.0   84.4 f90ww8cyy5gy0
v_scratch VARCHAR2(200) ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_cpu_pct NUMBER(6, 3);
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     216.5	      1     216.49    1.5      256.9   32.7   84.3 2t98zru3nqhar
v_my_serial NUMBER(16);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
BEGIN
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     216.5	      1     216.45    1.5      256.9   32.6   84.3 b86uad51uut0p

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
EXECUTE IMMEDIATE v_home_schema_str;

     216.3	      1     216.30    1.5      256.8   32.6   84.2 8wqq6m9va6xs1

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
IF ( v_hot_schema_modulus != 0 ) THEN

     216.2	      1     216.24    1.5      256.8   33.2   84.2 djbfhkquyuyab
Module: SQL*Plus
	v_do_hot_schema := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

IF ( v_sleep_modulus != 0 )	  THEN
     215.9	      1     215.92    1.5      256.8   32.4   84.1 45vm32p2sn1md
	v_do_sleeps := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     215.9	      1     215.85    1.5      258.9   32.3   83.4 cw70q4hn80hyn
IF ( v_max_loop_iterations &gt; 0 )  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_loop_control := TRUE ;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
END IF;

     214.7	      1     214.70    1.5      256.9   33.2   83.6 fgw43xkd3k8vd
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
IF ( v_update_pct = 0 ) 	  THEN
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
	v_select_only_workload := TRUE;

SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
END IF;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
IF ( v_update_pct = 100 )	  THEN
-> Captured SQL account for   96.1% of Total User I/O Wait Time (s):	      14
-> Captured PL/SQL account for	 53.1% of Total User I/O Wait Time (s):

	v_update_only_workload := TRUE;
  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
END IF;
---------- ------------ ---------- ------ ---------- ------ ------ -------------

     214.4	      1     214.42    1.5      256.9   32.5   83.5 1wts9khnkkvhw

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
IF ( v_scan_query_pct = 0 ) 	THEN
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
	v_random_workload_only := TRUE;

     214.1	      1     214.13    1.5      256.9   32.3   83.4 7v30dvkrm7b1v
END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
IF ( v_scan_query_pct = 100 ) 	THEN

     213.5	      1     213.51    1.5      256.9   33.0   83.1 fpt7knftv3a5x
Module: SQL*Plus
	v_scan_workload_only := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


     213.3	      1     213.34    1.5      256.9   32.1   83.1 fr7qdwubf5vg8
Module: SQL*Plus
v_seconds_to_run := v_seconds_to_run * 100 ;
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

     181.1	      1     181.06    1.3      258.9   26.8   69.9 2h44xdn8mgfr1
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

-- DBMS_RANDOM.seed (val =&gt; v_seed);
     173.0	      1     172.96    1.2      258.8   25.0   66.8 6kmjaydb8dsqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_begin_time := DBMS_UTILITY.GET_TIME();
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

     170.3	      1     170.28    1.2      257.0   24.9   66.3 0fb14y10vjhsr
v_now := v_begin_time ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_brick_wall := v_now + v_seconds_to_run ;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
     169.9	      1     169.90    1.2      256.8   24.8   66.1 fkuvv1yajzw3f
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
----------------------------------------------------------------------------------------------------------------------
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     169.6	      1     169.59    1.2      256.9   25.0   66.0 fckscu903tf4w
-- The following WHILE loop is the master work loop control
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=

----------------------------------------------------------------------------------------------------------------------
SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Captured SQL account for   96.1% of Total User I/O Wait Time (s):	      14
-> Captured PL/SQL account for	 53.1% of Total User I/O Wait Time (s):

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     168.6	      1     168.59    1.2      258.8   24.3   65.1 2mvw58awb6cyc
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			DBMS_LOCK.SLEEP(v_num_tmp);
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		END IF;
     167.9	      1     167.91    1.2      256.8   24.5   65.4 3dk52894pmqfv
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     167.7	      1     167.68    1.2      256.8   24.8   65.3 00057r4zrytpk
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';

     165.9	      1     165.89    1.2      258.8   23.9   64.1 92xgsuancvhq2
			v_sharing_schema := TRUE ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
		ELSE
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
			IF ( v_sharing_schema = TRUE ) THEN

     155.5	      1     155.53    1.1      258.9   22.4   60.1 bgkfz06rghsby
Module: SQL*Plus
				EXECUTE IMMEDIATE v_home_schema_str;
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
				v_sharing_schema := FALSE;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     155.1	      1     155.07    1.1      258.9   22.4   59.9 c0pd7mpw5mucc
			END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
		END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
	END IF;

			  ------------------------------------------------------



SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL
	-- Choose the random block. The v_do_hotspot handler that follows can override.
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   34,337,885
-> Captured SQL account for   94.9% of Total


     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
----------- ----------- ------------ ------ ---------- ----- ----- -------------
 31,317,073   6,253,448 	 5.0   91.2   22,502.7	18.6  58.4 bhdvtsvjhgvrh
Module: SQL*Plus
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  1,236,876	193,423 	 6.4	3.6    3,215.8	 7.2  16.7 35dumc2tpr9dv
Module: SQL*Plus
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

    626,097	      1    626,097.0	1.8	 256.9	  33  83.1 fpt7knftv3a5x
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
	END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    622,597	      1    622,597.0	1.8	 256.9	33.2  83.6 fgw43xkd3k8vd
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    606,220	      1    606,220.0	1.8	 256.8	33.2  84.2 djbfhkquyuyab
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    601,996	      1    601,996.0	1.8	 258.9	  33  84.5 7s9avvsud7a92
	IF  ( v_select_only_workload = TRUE ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- handle case where user specified zero pct updates (a SELECT-only workload)
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		v_do_update := FALSE;
    597,231	      1    597,231.0	1.7	 256.9	32.9  84.5 4c3z7x1gkcdup
Module: SQL*Plus
		v_update_quota := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
	ELSE
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

		IF ( v_update_only_workload = TRUE ) THEN
    592,033	      1    592,033.0	1.7	 258.8	32.9  84.3 b2rbrgpu3jxh1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
			-- handle case where user specified 100% updates
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots
			v_do_update := TRUE;

    589,997	      1    589,997.0	1.7	 256.8	  33  84.4 f90ww8cyy5gy0
Module: SQL*Plus
			v_update_quota := FALSE;
		ELSE
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			-- Work out whether this loop iteration is a SELECT or UPDATE here:
    588,609	      1    588,609.0	1.7	 256.9	32.7  84.3 2t98zru3nqhar
Module: SQL*Plus

			IF ( v_update_quota = FALSE ) THEN
SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
				-- Handle case where user has set UPDATE_PCT to a valid value
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
				--
-> Total Buffer Gets:	   34,337,885
-> Captured SQL account for   94.9% of Total

     Buffer		    Gets	      Elapsed
				-- We are doing updates during this run and quota has not been met yet
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
				-- We still vacillate until update quota has been met
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    577,629	      1    577,629.0	1.7	 258.9	32.6  84.5 7a4r7h7dtp9uk
				IF ( MOD(v_random_block,  2) = 0 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_update := TRUE;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

				ELSE
    576,318	      1    576,318.0	1.7	 256.9	32.5  83.5 1wts9khnkkvhw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
					v_do_update := FALSE;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
				END IF;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    569,755	      1    569,755.0	1.7	 256.9	32.6  84.3 b86uad51uut0p
Module: SQL*Plus
			ELSE
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
				-- UPDATE quota has been filled,  force drain some SELECTs
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    568,366	      1    568,366.0	1.7	 258.9	32.5  83.9 6z2cq7r4rtuz6
				v_do_update := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		END IF;
    568,040	      1    568,040.0	1.7	 256.8	32.8  84.8 8td9ta6n97dbm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
	END IF;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

----------------------------------------------------------------------------------------------------------------------
    565,825	      1    565,825.0	1.6	 256.9	32.3  83.4 7v30dvkrm7b1v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
-- The type of SQL is now determined...execute it in the following section
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

----------------------------------------------------------------------------------------------------------------------
    563,537	      1    563,537.0	1.6	 256.8	32.7  84.6 311ar1kvtsj1u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
	IF ( v_do_update != TRUE ) THEN
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    563,472	      1    563,472.0	1.6	 258.9	32.5  84.2 6thask7s4zxhn
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Do a SELECT statement
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		-- Work out scan or random
SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		IF  ( v_random_workload_only = TRUE ) THEN
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
-> Total Buffer Gets:	   34,337,885
-> Captured SQL account for   94.9% of Total

     Buffer		    Gets	      Elapsed
			v_do_scan_query := FALSE;
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------

			v_scan_query_quota := TRUE ;
    562,385	      1    562,385.0	1.6	 256.8	32.6  84.2 8wqq6m9va6xs1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
		ELSE
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
			IF ( v_scan_workload_only = TRUE ) THEN

    559,504	      1    559,504.0	1.6	 256.8	32.4  84.1 45vm32p2sn1md
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
				v_do_scan_query := TRUE;

    556,289	      1    556,289.0	1.6	 258.9	32.3  83.4 cw70q4hn80hyn
Module: SQL*Plus
				v_scan_query_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
			ELSE
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    556,106	      1    556,106.0	1.6	 256.9	32.1  83.1 fr7qdwubf5vg8
Module: SQL*Plus
				IF ( v_scan_query_quota = FALSE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    478,730	      1    478,730.0	1.4	 258.9	26.8  69.9 2h44xdn8mgfr1
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

						v_do_scan_query := TRUE;
    438,050	      1    438,050.0	1.3	 256.8	24.8  65.3 00057r4zrytpk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
					ELSE
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
						v_do_scan_query := FALSE;

    424,601	      1    424,601.0	1.2	 256.9	  25	66 fckscu903tf4w
Module: SQL*Plus
					END IF;
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
				ELSE
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    420,333	      1    420,333.0	1.2	 258.8	  25  66.8 6kmjaydb8dsqs
					-- Scan quota has been filled,	force drain some random access SELECTS
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_scan_query := FALSE;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

				END IF;
    419,266	      1    419,266.0	1.2	 257.0	24.9  66.3 0fb14y10vjhsr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=

			END IF;
SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		END IF;
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Total Buffer Gets:	   34,337,885
-> Captured SQL account for   94.9% of Total


     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
		IF ( v_do_scan_query != TRUE ) THEN
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			SELECT COUNT(c2) INTO v_rowcnt
    417,566	      1    417,566.0	1.2	 256.8	24.8  66.1 fkuvv1yajzw3f
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
			FROM cf1
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
    404,094	      1    404,094.0	1.2	 258.8	23.9  64.1 92xgsuancvhq2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;

    403,582	      1    403,582.0	1.2	 258.8	24.3  65.1 2mvw58awb6cyc
Module: SQL*Plus
		ELSE
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    397,736	      1    397,736.0	1.2	 256.8	24.5  65.4 3dk52894pmqfv
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    381,534	      1    381,534.0	1.1	 258.9	22.4  59.9 c0pd7mpw5mucc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

				v_scan_query_quota := TRUE;
    377,947	      1    377,947.0	1.1	 258.9	22.4  60.1 bgkfz06rghsby
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
			END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
		END IF;

			  ------------------------------------------------------



SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  20,315,043
-> Captured SQL account for   95.5% of Total

	ELSE
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
		--
 18,816,309   6,253,448        3.0   92.6   22,502.7   18.6   58.4 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

		-- Do an UPDATE statement
    583,514	193,423        3.0    2.9    3,215.8	7.2   16.7 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
		--
< :B1 )

    339,387	      1  339,387.0    1.7      256.8   32.8   84.8 8td9ta6n97dbm
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
		v_my_serial := v_my_serial + v_loop_cnt ;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    338,401	      1  338,401.0    1.7      256.8   32.7   84.6 311ar1kvtsj1u

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    338,370	      1  338,370.0    1.7      258.9   33.0   84.5 7s9avvsud7a92
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
		-- Increment count of UPDATES and set UPDATE quota flag if needed
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    338,185	      1  338,185.0    1.7      258.9   32.5   84.2 6thask7s4zxhn
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_updates_cnt := v_updates_cnt + 1;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    338,107	      1  338,107.0    1.7      256.8   32.6   84.2 8wqq6m9va6xs1

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		--
    337,950	      1  337,950.0    1.7      258.9   32.6   84.5 7a4r7h7dtp9uk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
		-- so reset flags and counters before continuing

    337,620	      1  337,620.0    1.7      258.8   32.9   84.3 b2rbrgpu3jxh1
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
		v_update_quota := FALSE;
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

		v_updates_cnt := 0;
    336,444	      1  336,444.0    1.7      256.9   32.6   84.3 b86uad51uut0p
Module: SQL*Plus

		v_selects_cnt := 0;
SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> %Total - Physical Reads as a percentage of Total Disk Reads
	END IF;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  20,315,043

-> Captured SQL account for   95.5% of Total

   Physical		 Reads		    Elapsed
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
		-- so reset flags and counters
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    335,385	      1  335,385.0    1.7      256.8   33.0   84.4 f90ww8cyy5gy0
		v_scan_query_quota := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_scan_queries_cnt := 0;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		v_random_access_queries_cnt := 0;
    334,882	      1  334,882.0    1.6      256.9   32.9   84.5 4c3z7x1gkcdup
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st

ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

    334,817	      1  334,817.0    1.6      256.8   33.2   84.2 djbfhkquyuyab
	v_loop_cnt := v_loop_cnt + 1 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
	v_now := DBMS_UTILITY.GET_TIME();
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    334,695	      1  334,695.0    1.6      258.9   32.5   83.9 6z2cq7r4rtuz6
Module: SQL*Plus
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- If this is a fixed-iteration count test cycle and we've hit the number of
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

		-- iterations then set exit flag
    334,574	      1  334,574.0    1.6      258.9   32.3   83.4 cw70q4hn80hyn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
		v_stop_immediate := TRUE ;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
	END IF;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    333,384	      1  333,384.0    1.6      256.8   32.4   84.1 45vm32p2sn1md
END LOOP;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_end_time := v_now ;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    333,333	      1  333,333.0    1.6      256.9   32.7   84.3 2t98zru3nqhar
v_now := DBMS_UTILITY.GET_TIME();
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    331,264	      1  331,264.0    1.6      256.9   32.5   83.5 1wts9khnkkvhw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
v_total_time := v_end_time - v_begin_time ;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
-> Total Disk Reads:	  20,315,043
-> Captured SQL account for   95.5% of Total


   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
END;</pre_sqltext></td></tr>

    331,133	      1  331,133.0    1.6      256.9   33.2   83.6 fgw43xkd3k8vd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
<tr><td scope="row" class='awrc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,	obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    330,764	      1  330,764.0    1.6      256.9   32.3   83.4 7v30dvkrm7b1v
Module: SQL*Plus
<tr><td scope="row" class='awrnc'><a class="awr" name="42mkua34ay6bc"></a>42mkua34ay6bc</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_addm_fdg ( TASK_ID,  FINDING_ID,  RULE_ID,	ADDM_FDG_ID,  ADDM_SEQ,    DATABASE_TIME,  ACTIVE_SESSIONS,  PERC_ACTIVE_SESS,	  IS_AGGREGATE,  METER_LEVEL,	 QUERY_TYPE,  QUERY_IS_APPROX,	QUERY_ARGS) VALUES ( :tid,  :kea_id,  :rid,  :fdg_id,  :keh_id,  :dbt,		 round(:dbt / (1000000 * :sint) ,  2),		 round(((:dbt * 100) / :total_dbt) ,  2),	    'N',  NULL, 	  :aqt,  decode(:aqa,  0,  'N',  'Y'),		 decode(:aqargs,  ' ',	NULL,  :aqargs)) </pre_sqltext></td></tr>
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
<tr><td scope="row" class='awrc'><a class="awr" name="43f1zvzd37f2v"></a>43f1zvzd37f2v</td><td class='awrc'><pre_sqltext class="awr">DECLARE
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    330,668	      1  330,668.0    1.6      256.9   32.1   83.1 fr7qdwubf5vg8
Module: SQL*Plus
v_default_schema_number PLS_INTEGER := '101';
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_pct PLS_INTEGER := '3';
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

v_max_loop_iterations PLS_INTEGER := '0';
    328,107	      1  328,107.0    1.6      256.9   33.0   83.1 fpt7knftv3a5x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
v_seconds_to_run PLS_INTEGER := '300';
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_scale PLS_INTEGER := '32768';

    273,442	      1  273,442.0    1.3      258.9   26.8   69.9 2h44xdn8mgfr1
Module: SQL*Plus
v_work_unit PLS_INTEGER := '4' ;
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
v_redo_stress  VARCHAR2(12) := 'LITE';
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

    253,905	      1  253,905.0    1.2      256.9   25.0   66.0 fckscu903tf4w
v_hot_schema_modulus PLS_INTEGER := '0';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_do_hotspot   VARCHAR(7) := 'FALSE';
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_hotspot_mb  NUMBER := '10';
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    251,085	      1  251,085.0    1.2      256.8   24.8   65.3 00057r4zrytpk
Module: SQL*Plus
v_hotspot_offset_mb NUMBER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_modulus  PLS_INTEGER := '0';
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    250,017	      1  250,017.0    1.2      258.8   25.0   66.8 6kmjaydb8dsqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
v_sleep_modulus PLS_INTEGER := '0';
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
v_sleep_min NUMBER := '.1';

    245,100	      1  245,100.0    1.2      257.0   24.9   66.3 0fb14y10vjhsr
Module: SQL*Plus
v_sleep_max NUMBER := '.5';
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=

SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_scan_query_pct PLS_INTEGER := '0';
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_obfuscate VARCHAR(5)	:= 'FALSE';
-> Total Disk Reads:	  20,315,043
-> Captured SQL account for   95.5% of Total


   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id

----------- ----------- ---------- ------ ---------- ------ ------ -------------
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
    244,682	      1  244,682.0    1.2      256.8   24.8   66.1 fkuvv1yajzw3f
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_num_tmp NUMBER := 0;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    243,683	      1  243,683.0    1.2      256.8   24.5   65.4 3dk52894pmqfv

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_loop_cnt PLS_INTEGER := 0;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_rowcnt PLS_INTEGER := 0;
    243,607	      1  243,607.0    1.2      258.8   24.3   65.1 2mvw58awb6cyc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
v_updates_cnt PLS_INTEGER := 0;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
v_selects_cnt PLS_INTEGER := 0;

    237,298	      1  237,298.0    1.2      258.8   23.9   64.1 92xgsuancvhq2
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_random_access_queries_cnt PLS_INTEGER := 0;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    222,305	      1  222,305.0    1.1      258.9   22.4   60.1 bgkfz06rghsby
v_scan_queries_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_do_scan_query BOOLEAN :=FALSE;
    220,595	      1  220,595.0    1.1      258.9   22.4   59.9 c0pd7mpw5mucc
Module: SQL*Plus
v_scan_query_quota  BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_workload_only BOOLEAN := FALSE;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_random_workload_only BOOLEAN := FALSE;
			  ------------------------------------------------------



SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 45-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)

-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
v_random_block PLS_INTEGER := 1;
-> Total Physical Read Requests:      20,314,569
-> Captured SQL account for    1.1% of Total
-> Total UnOptimized Read Requests:	 20,314,569
v_tmp PLS_INTEGER;
-> Captured SQL account for    1.1% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

v_now PLS_INTEGER;
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
v_brick_wall PLS_INTEGER;
----------- ----------- ---------- ------------ ------ ------ -------------
    339,387	339,387 	 1    339,387.0    0.0	  1.7 8td9ta6n97dbm
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_begin_time PLS_INTEGER;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    338,401	338,401 	 1    338,401.0    0.0	  1.7 311ar1kvtsj1u
v_end_time PLS_INTEGER;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_time PLS_INTEGER;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

v_begin_cpu_tm PLS_INTEGER;
    338,370	338,370 	 1    338,370.0    0.0	  1.7 7s9avvsud7a92
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
v_end_cpu_tm PLS_INTEGER;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_total_cpu_tm PLS_INTEGER;

    338,185	338,185 	 1    338,185.0    0.0	  1.7 6thask7s4zxhn
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_do_sleeps BOOLEAN := FALSE;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    338,107	338,107 	 1    338,107.0    0.0	  1.7 8wqq6m9va6xs1
Module: SQL*Plus
v_loop_control BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_update_quota BOOLEAN := FALSE;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    337,950	337,950 	 1    337,950.0    0.0	  1.7 7a4r7h7dtp9uk
v_select_only_workload BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_only_workload BOOLEAN := FALSE;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    337,620	337,620 	 1    337,620.0    0.0	  1.7 b2rbrgpu3jxh1
v_do_update BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
v_do_hot_schema BOOLEAN := FALSE;
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

v_stop_immediate BOOLEAN := FALSE;
    336,444	336,444 	 1    336,444.0    0.0	  1.7 b86uad51uut0p
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
v_sharing_schema BOOLEAN := FALSE;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_seed VARCHAR2(128);

    335,385	335,385 	 1    335,385.0    0.0	  1.7 f90ww8cyy5gy0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
v_home_schema_str VARCHAR2(80);
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 45-
v_scratch VARCHAR2(200) ;
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests

-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      20,314,569
-> Captured SQL account for    1.1% of Total
v_cpu_pct NUMBER(6, 3);
-> Total UnOptimized Read Requests:	 20,314,569
-> Captured SQL account for    1.1% of Total
-> Total Optimized Read Requests:		1
v_my_serial NUMBER(16);
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id

----------- ----------- ---------- ------------ ------ ------ -------------
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
BEGIN
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    334,882	334,882 	 1    334,882.0    0.0	  1.6 4c3z7x1gkcdup
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

    334,817	334,817 	 1    334,817.0    0.0	  1.6 djbfhkquyuyab
Module: SQL*Plus
EXECUTE IMMEDIATE v_home_schema_str;
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    334,695	334,695 	 1    334,695.0    0.0	  1.6 6z2cq7r4rtuz6

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_hot_schema_modulus != 0 ) THEN
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    334,574	334,574 	 1    334,574.0    0.0	  1.6 cw70q4hn80hyn
	v_do_hot_schema := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    333,384	333,384 	 1    333,384.0    0.0	  1.6 45vm32p2sn1md
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
IF ( v_sleep_modulus != 0 )	  THEN
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	v_do_sleeps := TRUE;
    333,333	333,333 	 1    333,333.0    0.0	  1.6 2t98zru3nqhar
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
END IF;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    331,264	331,264 	 1    331,264.0    0.0	  1.6 1wts9khnkkvhw
Module: SQL*Plus
IF ( v_max_loop_iterations &gt; 0 )  THEN
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
	v_loop_control := TRUE ;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    331,133	331,133 	 1    331,133.0    0.0	  1.6 fgw43xkd3k8vd
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    330,764	330,764 	 1    330,764.0    0.0	  1.6 7v30dvkrm7b1v

IF ( v_update_pct = 0 ) 	  THEN
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 45-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
	v_select_only_workload := TRUE;
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      20,314,569
END IF;
-> Captured SQL account for    1.1% of Total
-> Total UnOptimized Read Requests:	 20,314,569
-> Captured SQL account for    1.1% of Total
-> Total Optimized Read Requests:		1

-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
IF ( v_update_pct = 100 )	  THEN
----------- ----------- ---------- ------------ ------ ------ -------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
	v_update_only_workload := TRUE;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

END IF;
    330,668	330,668 	 1    330,668.0    0.0	  1.6 fr7qdwubf5vg8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
IF ( v_scan_query_pct = 0 ) 	THEN

    328,107	328,107 	 1    328,107.0    0.0	  1.6 fpt7knftv3a5x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
	v_random_workload_only := TRUE;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
END IF;

    273,442	273,442 	 1    273,442.0    0.0	  1.3 2h44xdn8mgfr1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=

'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots
IF ( v_scan_query_pct = 100 ) 	THEN

    253,905	253,905 	 1    253,905.0    0.0	  1.2 fckscu903tf4w
Module: SQL*Plus
	v_scan_workload_only := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
END IF;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    251,085	251,085 	 1    251,085.0    0.0	  1.2 00057r4zrytpk

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_seconds_to_run := v_seconds_to_run * 100 ;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


    250,017	250,017 	 1    250,017.0    0.0	  1.2 6kmjaydb8dsqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


    245,100	245,100 	 1    245,100.0    0.0	  1.2 0fb14y10vjhsr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

-- DBMS_RANDOM.seed (val =&gt; v_seed);
    244,682	244,682 	 1    244,682.0    0.0	  1.2 fkuvv1yajzw3f
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 45-
v_begin_time := DBMS_UTILITY.GET_TIME();
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
v_now := v_begin_time ;
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      20,314,569
-> Captured SQL account for    1.1% of Total
-> Total UnOptimized Read Requests:	 20,314,569
v_brick_wall := v_now + v_seconds_to_run ;
-> Captured SQL account for    1.1% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    243,683	243,683 	 1    243,683.0    0.0	  1.2 3dk52894pmqfv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

-- The following WHILE loop is the master work loop control
    243,607	243,607 	 1    243,607.0    0.0	  1.2 2mvw58awb6cyc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
    237,298	237,298 	 1    237,298.0    0.0	  1.2 92xgsuancvhq2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :

= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
    230,189	230,189  6,253,448	    0.0    0.0	  1.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

    222,305	222,305 	 1    222,305.0    0.0	  1.1 bgkfz06rghsby
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    220,595	220,595 	 1    220,595.0    0.0	  1.1 c0pd7mpw5mucc
Module: SQL*Plus
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
			DBMS_LOCK.SLEEP(v_num_tmp);
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  ------------------------------------------------------


		END IF;
SQL ordered by Executions		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	END IF;
-> Total Executions:	   6,746,682
-> Captured SQL account for   95.6% of Total

					      Elapsed

 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
   6,253,448	   6,253,542		1.0   22,502.7	18.6  58.4 bhdvtsvjhgvrh
Module: SQL*Plus
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     193,423	     580,269		3.0    3,215.8	 7.2  16.7 35dumc2tpr9dv
Module: SQL*Plus
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	 169		  12		0.1	   0.0	95.8	 0 87gaftwrm2h68
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
o where o.obj#=:1

	 136		 136		1.0	   0.0	74.6  13.5 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
			v_sharing_schema := TRUE ;
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	 116		 116		1.0	   0.1	49.4   2.3 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual
		ELSE

	 104		 104		1.0	   0.1	75.5	 0 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

			IF ( v_sharing_schema = TRUE ) THEN
	  92		  92		1.0	   0.2	 9.9	.8 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)
				EXECUTE IMMEDIATE v_home_schema_str;

	  75		   0		0.0	   0.0	96.4	 0 0gx3b09qrx9f5
select obj#,index# from oid$ where user#=:1 and oid$=:2

				v_sharing_schema := FALSE;
	  75		  75		1.0	   0.1	26.6  34.8 9tgj4g8y4rwy8
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
			END IF;
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

	  53		  12		0.2	   0.0	  89	11 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
		END IF;
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub
	END IF;

			  ------------------------------------------------------



SQL ordered by Parse Calls		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Parse Calls:		1,625
-> Captured SQL account for   48.1% of Total

			    % Total
	-- Choose the random block. The v_do_hotspot handler that follows can override.
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
	 136	      136      8.37 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	 116	      116      7.14 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual


	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
	 104	      104      6.40 9babjv8yq8ru3
			END IF;
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

		END IF;
	  92	       92      5.66 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin


_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

		IF ( v_do_scan_query != TRUE ) THEN
	  45	       75      2.77 9tgj4g8y4rwy8
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
			SELECT COUNT(c2) INTO v_rowcnt
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

			FROM cf1
	  31	       31      1.91 6wvzvgvg6qsyb
INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)

	  29	       29      1.78 42mkua34ay6bc

INSERT INTO wri$_adv_addm_fdg ( TASK_ID, FINDING_ID, RULE_ID, ADDM_FDG_ID, ADDM_
SEQ, DATABASE_TIME, ACTIVE_SESSIONS, PERC_ACTIVE_SESS, IS_AGGREGATE, METER_L
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
EVEL, QUERY_TYPE, QUERY_IS_APPROX, QUERY_ARGS) VALUES ( :tid, :kea_id, :rid, :
fdg_id, :keh_id, :dbt, round(:dbt / (1000000 * :sint) , 2), ro

		ELSE
	  24	       24      1.48 bxpcry2tpc217
select /*+ opt_param('parallel_execution_enabled',
 'false') EXEC_FROM_DBMS_XPLAN */ * from gv$all_sql_plan where 1=0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

	  24	       24      1.48 grwydz59pu6mc

select text from view$ where rowid=:1

	  22	       22      1.35 6n2qqv1brfhpp
Module: SQL*Plus
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
select ind.type#, ind.property, base_obj.obj#, base_owner.name, base_obj.name
 from sys.ind$ ind, sys.user$ base_owner, sys.obj$ base_obj where ind.obj#

 = :oid and ind.dataobj# = :doid and ind.bo# = base_obj
.obj# and base_obj.owner# = base_owner.user#

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
	  18	       18      1.11 94qn6y14kw01g
SELECT NVL(TO_NUMBER(EXTRACT(XMLTYPE(:B2 ), :B1 )), 0) FROM DUAL

				v_scan_query_quota := TRUE;
	  18	       18      1.11 fkc81h2686aqc
Module: SQL*Plus
			END IF;
select pob.parttype from sys.indpart$ ip, sys.partobj$ pob where ip.bo# = pob.o
bj# and ip.obj# = :oid

		END IF;
			  ------------------------------------------------------



SQL ordered by Sharable Memory		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Only Statements with Sharable Memory greater than 1048576 are displayed

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Sharable Mem (b)  Executions   % Total	  SQL Id
---------------- ------------ -------- -------------
      17,630,449	    6	  1.38 9yv5dwv8k0awg
	ELSE
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
		--
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

		-- Do an UPDATE statement
       4,176,828	    6	  0.33 atwuyuvqkf27w
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
		--
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD

LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

       4,141,080	  N/A	  0.32 akay050h1s6c4
		v_my_serial := v_my_serial + v_loop_cnt ;
SELECT MAX(CUSTID) FROM CF1

       3,474,640      193,423	  0.27 35dumc2tpr9dv

Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
       3,057,247    6,253,448	  0.24 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
		--

			  ------------------------------------------------------

		-- Increment count of UPDATES and set UPDATE quota flag if needed

SQL ordered by Version Count		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Only Statements with Version Count greater than 20 are displayed
		--

 Version
  Count   Executions	 SQL Id
		v_updates_cnt := v_updates_cnt + 1;
-------- ------------ -------------
     256	  N/A akay050h1s6c4
SELECT MAX(CUSTID) FROM CF1


     104      193,423 35dumc2tpr9dv
Module: SQL*Plus
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

			v_update_quota := TRUE;
     104    6,253,448 bhdvtsvjhgvrh
Module: SQL*Plus
		END IF;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  ------------------------------------------------------
	END IF ;


SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
----------------------------------------------------------------------------------------------------------------------
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
----------------------------------------------------------------------------------------------------------------------
-> Total Cluster Wait Time (s): 	 10,688
-> Captured SQL account for   95.4% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
       7,860.2	  6,253,448   73.5   22,502.7	34.9   18.6   58.4 bhdvtsvjhgvrh
Module: SQL*Plus
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

       2,335.3	    193,423   21.8    3,215.8	72.6	7.2   16.7 35dumc2tpr9dv
		-- so reset flags and counters before continuing
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
		--

	 215.8		  1    2.0	258.9	83.3	6.8   13.1 0fxpq9z2j2zyu
Module: SQL*Plus
		v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '191'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_updates_cnt := 0;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		v_selects_cnt := 0;
	 213.0		  1    2.0	259.2	82.2	7.2   14.5 5m9kb3cpp792u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
	END IF;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 212.1		  1    2.0	259.2	81.8	7.4   14.7 0u5gbpqpjtcbb
Module: SQL*Plus
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		-- so reset flags and counters
	 207.7		  1    1.9	259.3	80.1	5.8   17.2 c45q6fupzf7tg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
		v_scan_query_quota := FALSE;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
		v_scan_queries_cnt := 0;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 203.6		  1    1.9	258.9	78.6	8.2   16.5 47rm3ra5qrvzk
		v_random_access_queries_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '256'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


	 202.2		  1    1.9	260.6	77.6	6.6   19.2 bhydnmhhkhhdy
Module: SQL*Plus
	v_loop_cnt := v_loop_cnt + 1 ;
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
	v_now := DBMS_UTILITY.GET_TIME();
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 149.4		  1    1.4	258.8	57.7   12.7   33.7 43f1zvzd37f2v

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 138.0		  1    1.3	258.9	53.3   13.8   37.1 5t5va0wzy46cz
		-- If this is a fixed-iteration count test cycle and we've hit the number of
Module: SQL*Plus

		-- iterations then set exit flag
SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
		v_stop_immediate := TRUE ;
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	END IF;
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 10,688
-> Captured SQL account for   95.4% of Total
END LOOP;

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id

-------------- ------------ ------ ---------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
v_end_time := v_now ;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_now := DBMS_UTILITY.GET_TIME();

	 126.2		  1    1.2	258.8	48.7   15.8   41.9 9pak4nk4rzz55
Module: SQL*Plus
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_total_time := v_end_time - v_begin_time ;
	 120.8		  1    1.1	259.3	46.6   16.2   43.6 f7s68cgfrpfx5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;

	 120.3		  1    1.1	258.8	46.5   16.1   43.1 2rxaq7b5j8zwr
Module: SQL*Plus
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 120.2		  1    1.1	258.8	46.4   15.9   42.7 98s057018aabq
END;</pre_sqltext></td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td scope="row" class='awrnc'><a class="awr" name="45vm32p2sn1md"></a>45vm32p2sn1md</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

v_default_schema_number PLS_INTEGER := '91';
	 111.2		  1    1.0	258.9	43.0   17.1   45.9 9r3qzjkmkr5kg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
v_update_pct PLS_INTEGER := '3';
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_max_loop_iterations PLS_INTEGER := '0';

	 107.1		  1    1.0	259.9	41.2   18.1   48.0 fcfy9turtx376
Module: SQL*Plus
v_seconds_to_run PLS_INTEGER := '300';
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_scale PLS_INTEGER := '32768';
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  91.5		  1    0.9	258.9	35.3   19.7   52.9 9qm6ufzjxxpkc
v_work_unit PLS_INTEGER := '4' ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_redo_stress  VARCHAR2(12) := 'LITE';
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

v_hot_schema_modulus PLS_INTEGER := '0';
	  90.8		  1    0.8	258.9	35.1   20.0   53.4 6uwhmrt8nr4s9
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
v_do_hotspot   VARCHAR(7) := 'FALSE';
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_mb  NUMBER := '10';
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_hotspot_offset_mb NUMBER := '0';
SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
v_hotspot_modulus  PLS_INTEGER := '0';
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported

-> Total Cluster Wait Time (s): 	 10,688
-> Captured SQL account for   95.4% of Total

v_sleep_modulus PLS_INTEGER := '0';
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
v_sleep_min NUMBER := '.1';

	  71.9		  1    0.7	258.9	27.8   22.4   59.9 c0pd7mpw5mucc
Module: SQL*Plus
v_sleep_max NUMBER := '.5';
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_query_pct PLS_INTEGER := '0';
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_obfuscate VARCHAR(5)	:= 'FALSE';
	  71.7		  1    0.7	258.9	27.7   22.4   60.1 bgkfz06rghsby
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot


	  59.2		  1    0.6	258.8	22.9   23.9   64.1 92xgsuancvhq2
Module: SQL*Plus
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
DECLARE v_default_schema_number PLS_INTEGER := '110'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	  57.1		  1    0.5	258.8	22.1   24.3   65.1 2mvw58awb6cyc

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_num_tmp NUMBER := 0;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


	  54.8		  1    0.5	256.8	21.3   24.5   65.4 3dk52894pmqfv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
v_loop_cnt PLS_INTEGER := 0;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_rowcnt PLS_INTEGER := 0;

	  54.2		  1    0.5	256.8	21.1   24.8   65.3 00057r4zrytpk
Module: SQL*Plus
v_updates_cnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_selects_cnt PLS_INTEGER := 0;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  53.8		  1    0.5	256.8	21.0   24.8   66.1 fkuvv1yajzw3f

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_random_access_queries_cnt PLS_INTEGER := 0;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_scan_queries_cnt PLS_INTEGER := 0;
	  53.6		  1    0.5	257.0	20.9   24.9   66.3 0fb14y10vjhsr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_do_scan_query BOOLEAN :=FALSE;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  52.2		  1    0.5	258.8	20.2   25.0   66.8 6kmjaydb8dsqs
Module: SQL*Plus
v_scan_query_quota  BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_scan_workload_only BOOLEAN := FALSE;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_random_workload_only BOOLEAN := FALSE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported

-> Total Cluster Wait Time (s): 	 10,688
-> Captured SQL account for   95.4% of Total

       Cluster			      Elapsed

 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
v_random_block PLS_INTEGER := 1;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
v_tmp PLS_INTEGER;

	  51.6		  1    0.5	256.9	20.1   25.0   66.0 fckscu903tf4w
Module: SQL*Plus
v_now PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_brick_wall PLS_INTEGER;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  40.9		  1    0.4	258.9	15.8   26.8   69.9 2h44xdn8mgfr1
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
v_begin_time PLS_INTEGER;
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

	   5.4		  1    0.1	256.9	 2.1   32.1   83.1 fr7qdwubf5vg8
v_end_time PLS_INTEGER;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_time PLS_INTEGER;
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

v_begin_cpu_tm PLS_INTEGER;
	   4.5		  1    0.0	258.9	 1.7   32.3   83.4 cw70q4hn80hyn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
v_end_cpu_tm PLS_INTEGER;
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_total_cpu_tm PLS_INTEGER;
	   2.7		  1    0.0	256.9	 1.1   32.3   83.4 7v30dvkrm7b1v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=

 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_do_sleeps BOOLEAN := FALSE;

	   2.2		  1    0.0	256.8	 0.9   32.4   84.1 45vm32p2sn1md
Module: SQL*Plus
v_loop_control BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_update_quota BOOLEAN := FALSE;
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	   2.2		  1    0.0	258.9	 0.9   32.5   83.9 6z2cq7r4rtuz6
Module: SQL*Plus
v_select_only_workload BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_only_workload BOOLEAN := FALSE;
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

v_do_update BOOLEAN := FALSE;
	   2.0		  1    0.0	258.9	 0.8   32.5   84.2 6thask7s4zxhn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
v_do_hot_schema BOOLEAN := FALSE;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
v_stop_immediate BOOLEAN := FALSE;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_sharing_schema BOOLEAN := FALSE;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_seed VARCHAR2(128);
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 10,688
v_home_schema_str VARCHAR2(80);
-> Captured SQL account for   95.4% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
v_scratch VARCHAR2(200) ;
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	   1.8		  1    0.0	256.9	 0.7   33.0   83.1 fpt7knftv3a5x
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
v_cpu_pct NUMBER(6, 3);
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	   1.4		  1    0.0	256.9	 0.6   32.6   84.3 b86uad51uut0p
Module: SQL*Plus
v_my_serial NUMBER(16);
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	   1.2		  1    0.0	256.9	 0.4   32.5   83.5 1wts9khnkkvhw
BEGIN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	   1.0		  5    0.0	  1.0	99.4	 .6	.1 121ffmrc95v7g
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctf
ree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.cl
ufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instance
EXECUTE IMMEDIATE v_home_schema_str;
s,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(

	    .6		  1    0.0	258.9	 0.2   32.6   84.5 7a4r7h7dtp9uk

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	    .3		  1    0.0	  0.4	81.7   11.1   11.5 6s1ku6bs9a8xb
IF ( v_hot_schema_modulus != 0 ) THEN
 WITH ash as (SELECT ash.event_id, sum(decode(ash.session_type, 1, 1, 0)) as c
nt_fg, count(*) as cnt_total FROM WRH$_ACTIVE_SESSION_HISTORY ash WHERE ash
.dbid = :dbid AND ash.instance_number = :inst AND ash.snap_id > :bid AND ash.s
	v_do_hot_schema := TRUE;
nap_id <= :eid AND ash.wait_time = 0 GROUP BY ash.event_id ), evts as (SEL

	    .2		  1    0.0	256.9	 0.1   32.7   84.3 2t98zru3nqhar
END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
IF ( v_sleep_modulus != 0 )	  THEN

	    .2		 92    0.0	  0.2	93.2	9.9	.8 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
	v_do_sleeps := TRUE;
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

END IF;
	    .1		  6    0.0	  3.8	 3.1   73.3   12.8 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,

 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

	    .1		  1    0.0	  0.1	95.3	4.6    2.3 61tn3mam0vq0b
IF ( v_max_loop_iterations &gt; 0 )  THEN
 SELECT source, (case when time_secs < 1 then 1 else time_secs end) as ti

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	v_loop_control := TRUE ;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
END IF;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 10,688

-> Captured SQL account for   95.4% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
IF ( v_update_pct = 0 ) 	  THEN
-------------- ------------ ------ ---------- ------ ------ ------ -------------
me_secs, operation FROM ( SELECT 1 as source, trunc(
(sysdate - cast(ll.log_date as date)) * 86400) as time_secs,
	v_select_only_workload := TRUE;
 decode(ll.operation, 'OPEN', 0

	    .1		 10    0.0	  0.1	94.1	3.4    3.5 9tt2m0mpc2qqp
select /*+ index(idl_char$ i_idl_char1) */ piece#,length,piece from idl_char$ wh
END IF;
ere obj#=:1 and part=:2 and version=:3 order by piece#

	    .1		 75    0.0	  0.1	50.4   26.6   34.8 9tgj4g8y4rwy8

select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

IF ( v_update_pct = 100 )	  THEN
	    .1		  1    0.0	256.8	 0.0   32.7   84.6 311ar1kvtsj1u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
	v_update_only_workload := TRUE;
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

END IF;
	    .1		  1    0.0	  0.1	40.3   36.6   35.8 fxh7dn0mbs5cx
 WITH ash as (SELECT ash.event_id, sum(decode(ash.session_type, 1, 1, 0)) as c
nt_fg, count(*) as cnt_total FROM WRH$_ACTIVE_SESSION_HISTORY ash WHERE ash

.dbid = :dbid AND ash.snap_id > :bid AND ash.snap_id <= :eid AND ash.wait_tim
e = 0 GROUP BY ash.event_id ), evts as (SELECT event_id, sum(w_cnt) as w_cnt

IF ( v_scan_query_pct = 0 ) 	THEN
	    .0		 10    0.0	  0.0	71.2   26.5   20.0 fh5ufah919kun
select /*+ index(idl_sb4$ i_idl_sb41) */ piece#,length,piece from idl_sb4$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

	v_random_workload_only := TRUE;
	    .0		 10    0.0	  0.0	40.6   19.6   51.1 a3jpjzh7mtwwp
select /*+ index(idl_ub2$ i_idl_ub21) */ piece#,length,piece from idl_ub2$ where
 obj#=:1 and part=:2 and version=:3 order by piece#
END IF;

	    .0		 13    0.0	  0.3	 4.5	2.2    1.6 1myuz4d7pbg2j
INSERT INTO wri$_adv_recommendations (id, task_id, finding_id, rank, benefit_msg

_id, benefit_val, type,flags, rec_type_id, exec_name) VALUES (:1,:2,:3,:4,:5,:6,
:7,:8,:9,:10)

	    .0		 31    0.0	  0.0	38.9   27.5   43.5 6wvzvgvg6qsyb
IF ( v_scan_query_pct = 100 ) 	THEN
INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)

	v_scan_workload_only := TRUE;
	    .0		  1    0.0	256.8	 0.0   32.6   84.2 8wqq6m9va6xs1
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	    .0		 29    0.0	  0.0	63.6   35.1    6.8 42mkua34ay6bc
v_seconds_to_run := v_seconds_to_run * 100 ;
INSERT INTO wri$_adv_addm_fdg ( TASK_ID, FINDING_ID, RULE_ID, ADDM_FDG_ID, ADDM_
SEQ, DATABASE_TIME, ACTIVE_SESSIONS, PERC_ACTIVE_SESS, IS_AGGREGATE, METER_L
EVEL, QUERY_TYPE, QUERY_IS_APPROX, QUERY_ARGS) VALUES ( :tid, :kea_id, :rid, :

fdg_id, :keh_id, :dbt, round(:dbt / (1000000 * :sint) , 2), ro

	    .0		  4    0.0	  0.0	43.1   29.6   39.6 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time

-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-> Total Cluster Wait Time (s): 	 10,688
-> Captured SQL account for   95.4% of Total

       Cluster			      Elapsed
-- DBMS_RANDOM.seed (val =&gt; v_seed);
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
 p_obj#=obj#(+) order by order#


	    .0		 15    0.0	  0.0	55.2   28.1   26.7 ahpwg02s0cb1z
INSERT INTO wri$_adv_rec_actions (task_id, rec_id, act_id) VALUES (:1,:2,:3)

	    .0		136    0.0	  0.0	17.4   74.6   13.5 fn5s5p6hr6702
v_begin_time := DBMS_UTILITY.GET_TIME();
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	    .0		 10    0.0	  0.0	30.3   27.6   56.7 03guhbfpak0w7
v_now := v_begin_time ;
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

			  ------------------------------------------------------
v_brick_wall := v_now + v_seconds_to_run ;


Key Instance Activity Stats		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Ordered by statistic name

v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block changes			  1,654,473	   4,944.4	     8.2

execute count				  6,746,682	  20,162.3	    33.3
gc cr block receive time			115	       0.3	     0.0
gc cr blocks received				157	       0.5	     0.0
gc current block receive time		      4,633	      13.9	     0.0
----------------------------------------------------------------------------------------------------------------------
gc current blocks received		      6,498	      19.4	     0.0
logons cumulative				 19	       0.1	     0.0
opened cursors cumulative		  6,955,110	  20,785.2	    34.3
parse count (total)			      1,625	       4.9	     0.0
-- The following WHILE loop is the master work loop control
parse time elapsed				 30	       0.1	     0.0
physical reads				 20,315,043	  60,711.0	   100.3
physical writes 			    718,112	   2,146.1	     3.6
redo size				581,465,012    1,737,692.8	 2,871.3
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------
session cursor cache hits		  6,948,420	  20,765.2	    34.3

session logical reads			 34,337,885	 102,617.9	   169.6
user calls					728	       2.2	     0.0
user commits				    202,509	     605.2	     1.0
	IF ( v_do_update != TRUE ) THEN
workarea executions - optimal			706	       2.1	     0.0
		--
			  ------------------------------------------------------

		-- Do a SELECT statement

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		-- Work out scan or random
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
		IF  ( v_random_workload_only = TRUE ) THEN
-------------------------------- ------------------ -------------- -------------
ASSM bg: segment fix monitor			  0	       0.0	     0.0
ASSM cbk:blocks examined			814	       2.4	     0.0
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
ASSM cbk:blocks marked full			173	       0.5	     0.0
ASSM gsp:L1 bitmaps examined			668	       2.0	     0.0
			v_do_scan_query := FALSE;
ASSM gsp:L2 bitmap full 			 15	       0.0	     0.0
ASSM gsp:L2 bitmaps examined			178	       0.5	     0.0
ASSM gsp:Search all				 18	       0.1	     0.0
			v_scan_query_quota := TRUE ;
ASSM gsp:Search hint				  6	       0.0	     0.0
ASSM gsp:Search steal				  4	       0.0	     0.0
		ELSE
ASSM gsp:bump HWM				  4	       0.0	     0.0
ASSM gsp:get free block 			641	       1.9	     0.0
			IF ( v_scan_workload_only = TRUE ) THEN
ASSM gsp:get free data block			536	       1.6	     0.0
ASSM gsp:get free index block			105	       0.3	     0.0
ASSM gsp:good hint				527	       1.6	     0.0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
ASSM rsv:fill reserve				  2	       0.0	     0.0
ASSM wasted db state change			  0	       0.0	     0.0
Batched IO (bound) vector count 		477	       1.4	     0.0
				v_do_scan_query := TRUE;
Batched IO block miss count		  6,232,218	  18,624.8	    30.8
Batched IO buffer defrag count			  0	       0.0	     0.0
				v_scan_query_quota := FALSE;
Batched IO double miss count		  6,232,103	  18,624.5	    30.8
Batched IO same unit count			 76	       0.2	     0.0
Batched IO single block count		  6,232,582	  18,625.9	    30.8
			ELSE
Batched IO vector block count			  2	       0.0	     0.0
Batched IO vector read count			  1	       0.0	     0.0
				IF ( v_scan_query_quota = FALSE ) THEN
Block Cleanout Optim referenced 		 24	       0.1	     0.0
CCursor + sql area evicted			 25	       0.1	     0.0
CPU used by this session		    606,522	   1,812.6	     3.0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
CPU used when call started		    604,396	   1,806.2	     3.0
CR blocks created				 20	       0.1	     0.0
Cached Commit SCN referenced		  5,212,271	  15,576.7	    25.7
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
Client Advertised Receive Window		735	       2.2	     0.0
Client Advertised Send Window			735	       2.2	     0.0
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
Client Path Maximum Transmission	    152,250	     455.0	     0.8
Client Send Congestion Window		      1,050	       3.1	     0.0
Client Time (usec) Last Ack Rece		 44	       0.1	     0.0
						v_do_scan_query := TRUE;
Client Time (usec) Last Data Rec		 44	       0.1	     0.0
Client Time (usec) Last Data Sen		325	       1.0	     0.0
					ELSE
Client Time (usec) Round Trip Ti	    228,174	     681.9	     1.1
						v_do_scan_query := FALSE;
Client Time (usec) Round Trip Ti	    232,684	     695.4	     1.2
Client Total Bytes Acked		  1,650,097	   4,931.3	     8.2
Client Total Bytes Received		    641,172	   1,916.1	     3.2
					END IF;
Client Total Number of Retransmi		  0	       0.0	     0.0
Commit SCN cached				  2	       0.0	     0.0
DBWR checkpoint buffers written 		784	       2.3	     0.0
				ELSE
DBWR checkpoints				929	       2.8	     0.0
DBWR fusion writes				 24	       0.1	     0.0
					-- Scan quota has been filled,	force drain some random access SELECTS
DBWR object drop buffers written		 24	       0.1	     0.0
DBWR thread checkpoint buffers w		  0	       0.0	     0.0
					v_do_scan_query := FALSE;
DBWR transaction table writes			573	       1.7	     0.0
DBWR undo block writes			    110,444	     330.1	     0.6
				END IF;
DFO trees parallelized				  8	       0.0	     0.0
Effective IO time				  0	       0.0	     0.0
HSC Heap Segment Block Changes		    608,498	   1,818.5	     3.0
			END IF;
Heap Segment Array Inserts			189	       0.6	     0.0
Heap Segment Array Updates			  5	       0.0	     0.0
		END IF;
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
KTFB alloc req					 80	       0.2	     0.0
KTFB alloc space (block)		 81,920,000	 244,815.8	   404.5

KTFB alloc time (ms)			 17,181,800	  51,347.4	    84.8
KTFB apply req					443	       1.3	     0.0


Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Ordered by statistic name
		IF ( v_do_scan_query != TRUE ) THEN

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
			SELECT COUNT(c2) INTO v_rowcnt
KTFB apply time (ms)			     42,891	     128.2	     0.2
KTFB free req					365	       1.1	     0.0
			FROM cf1
KTFB free space (block) 		     12,880	      38.5	     0.1
KTFB free time (ms)			      7,177	      21.5	     0.0
LOB table id lookup cache misses		  0	       0.0	     0.0
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
PX local messages recv'd			 98	       0.3	     0.0
PX local messages sent				 98	       0.3	     0.0
PX remote messages recv'd			116	       0.4	     0.0

PX remote messages sent 			106	       0.3	     0.0
Parallel operations not downgrad		  8	       0.0	     0.0
Requests to/from client 			323	       1.0	     0.0
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
SMON posted for undo segment shr		 39	       0.1	     0.0
SQL*Net roundtrips to/from clien		219	       0.7	     0.0
		ELSE
active txn count during cleanout		233	       0.7	     0.0
background checkpoints completed		  1	       0.0	     0.0
background checkpoints started			  0	       0.0	     0.0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
background timeouts			      3,717	      11.1	     0.0
blocks cleaned out using minact 	    520,343	   1,555.0	     2.6

branch node splits				  1	       0.0	     0.0
buffer is not pinned count		 45,379,290	 135,614.8	   224.1
buffer is pinned count			 13,744,895	  41,076.3	    67.9
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
bytes received via SQL*Net from 	    106,115	     317.1	     0.5
bytes sent via SQL*Net to client	     59,113	     176.7	     0.3

calls to get snapshot scn: kcmgs	  6,961,794	  20,805.1	    34.4
calls to kcmgas 			    278,580	     832.5	     1.4
calls to kcmgcs 			      3,421	      10.2	     0.0
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
cell physical IO interconnect by    180,231,961,088  538,618,432.0     889,994.8
change write time			      1,587	       4.7	     0.0
cleanout - number of ktugct call		946	       2.8	     0.0
				v_scan_query_quota := TRUE;
cleanouts and rollbacks - consis		  1	       0.0	     0.0
cleanouts only - consistent read		678	       2.0	     0.0
			END IF;
cluster key scan block gets			202	       0.6	     0.0
cluster key scans				168	       0.5	     0.0
		END IF;
commit batch/immediate performed		  0	       0.0	     0.0
commit batch/immediate requested		  0	       0.0	     0.0

commit cleanout failures: block 		654	       2.0	     0.0
commit cleanout failures: buffer		 74	       0.2	     0.0
commit cleanout failures: callba		 11	       0.0	     0.0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
commit cleanout failures: cannot		  0	       0.0	     0.0
commit cleanouts			    608,017	   1,817.0	     3.0
	ELSE
commit cleanouts successfully co	    607,278	   1,814.8	     3.0
commit immediate performed			  0	       0.0	     0.0
commit immediate requested			  0	       0.0	     0.0
		--
commit txn count during cleanout		816	       2.4	     0.0
consistent changes			      4,312	      12.9	     0.0
consistent gets 			 33,216,285	  99,266.0	   164.0
		-- Do an UPDATE statement
consistent gets examination		  6,755,004	  20,187.2	    33.4
consistent gets examination (fas	  6,754,469	  20,185.6	    33.4
		--
consistent gets from cache		 33,216,275	  99,266.0	   164.0
consistent gets pin			 26,461,261	  79,078.8	   130.7
consistent gets pin (fastpath)		  6,732,624	  20,120.3	    33.3

cursor authentications				 33	       0.1	     0.0
cursor reload failures				  0	       0.0	     0.0
		v_my_serial := v_my_serial + v_loop_cnt ;
data blocks consistent reads - u		 18	       0.1	     0.0
db block changes			  1,654,473	   4,944.4	     8.2
db block gets				  1,119,933	   3,346.9	     5.5

db block gets direct				255	       0.8	     0.0
db block gets from cache		  1,119,677	   3,346.1	     5.5
db block gets from cache (fastpa	    439,727	   1,314.1	     2.2
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
deferred (CURRENT) block cleanou	    556,474	   1,663.0	     2.8

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		--
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-------------------------------- ------------------ -------------- -------------
dirty buffers inspected 		    694,023	   2,074.1	     3.4
		--
enqueue conversions			      3,524	      10.5	     0.0
enqueue releases			    414,911	   1,240.0	     2.1
		v_updates_cnt := v_updates_cnt + 1;
enqueue requests			    414,793	   1,239.6	     2.1
enqueue timeouts				  9	       0.0	     0.0
enqueue waits				      1,475	       4.4	     0.0

exchange deadlocks				  1	       0.0	     0.0
execute count				  6,746,682	  20,162.3	    33.3
fastpath consistent get quota li		  0	       0.0	     0.0
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
file io service time			397,849,830    1,188,963.7	 1,964.6
free buffer inspected			 20,533,789	  61,364.7	   101.4
			v_update_quota := TRUE;
free buffer requested			 20,379,198	  60,902.7	   100.6
gc blocks compressed			      3,366	      10.1	     0.0
gc blocks lost					210	       0.6	     0.0
		END IF;
gc cleanout applied				  0	       0.0	     0.0
gc cleanout saved				  5	       0.0	     0.0
gc cr anti locks created		    174,960	     522.9	     0.9
	END IF ;
gc cr anti locks expanded			141	       0.4	     0.0
gc cr anti locks shrunk 			973	       2.9	     0.0
gc cr block build time				  0	       0.0	     0.0
----------------------------------------------------------------------------------------------------------------------
gc cr block flush time				536	       1.6	     0.0
gc cr block receive time			115	       0.3	     0.0
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
gc cr blocks built				213	       0.6	     0.0
gc cr blocks flushed				 88	       0.3	     0.0
gc cr blocks received				157	       0.5	     0.0
----------------------------------------------------------------------------------------------------------------------
gc cr blocks served			      1,440	       4.3	     0.0
gc cr bypass requests				  0	       0.0	     0.0
gc cr multiblock grant time			885	       2.6	     0.0

gc cr multiblock grants received		344	       1.0	     0.0
gc current block flush time			132	       0.4	     0.0
gc current block pin time			  0	       0.0	     0.0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
gc current block receive time		      4,633	      13.9	     0.0
gc current blocks flushed			 24	       0.1	     0.0
gc current blocks pinned			  1	       0.0	     0.0
		--
gc current blocks received		      6,498	      19.4	     0.0
gc current blocks served		      2,946	       8.8	     0.0
gc force cr read cr				  4	       0.0	     0.0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
gc force cr read current			  0	       0.0	     0.0
gc kbytes saved 			     18,502	      55.3	     0.1
gc kbytes sent				     16,586	      49.6	     0.1
		-- so reset flags and counters before continuing
gc local grants 			 19,114,919	  57,124.4	    94.4
gc merge pi bg					  0	       0.0	     0.0
gc merge pi fg					 19	       0.1	     0.0
		--
gc no change made				  2	       0.0	     0.0
gc read time waited				  0	       0.0	     0.0
gc read wait timeouts				  0	       0.0	     0.0
		v_update_quota := FALSE;
gc read waits					  0	       0.0	     0.0
gc reader bypass grants 			 57	       0.2	     0.0
gc reader bypass waits				 30	       0.1	     0.0
		v_updates_cnt := 0;
gc remote grants			  1,204,560	   3,599.8	     6.0
gc status messages received		     13,498	      40.3	     0.1
		v_selects_cnt := 0;
gc status messages sent 		      7,859	      23.5	     0.0
gcs affinity lock failures		     54,757	     163.6	     0.3
gcs affinity lock grants		 10,025,031	  29,959.5	    49.5
	END IF;
gcs anti-locks created			    174,674	     522.0	     0.9
gcs data block access records		 20,274,440	  60,589.6	   100.1
gcs messages sent			  4,041,352	  12,077.5	    20.0

gcs read-mostly lock failures		    310,818	     928.9	     1.5
gcs read-mostly lock grants		  8,586,807	  25,661.4	    42.4
ges messages sent			      9,043	      27.0	     0.0
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Ordered by statistic name

		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
global enqueue get time 		     31,981	      95.6	     0.2
		-- so reset flags and counters
global enqueue gets async			  0	       0.0	     0.0
global enqueue gets sync		    224,403	     670.6	     1.1
global enqueue releases 		    222,627	     665.3	     1.1
		v_scan_query_quota := FALSE;
heap block compress				  1	       0.0	     0.0
hot buffers moved to head of LRU	      2,428	       7.3	     0.0
immediate (CR) block cleanout ap		679	       2.0	     0.0
		v_scan_queries_cnt := 0;
immediate (CURRENT) block cleano		280	       0.8	     0.0
index crx state invalidation			  0	       0.0	     0.0
		v_random_access_queries_cnt := 0;
index crx upgrade (positioned)			  0	       0.0	     0.0
index fast full scans (full)			  2	       0.0	     0.0
index fetch by key			      1,790	       5.4	     0.0
	END IF;
index range scans			  6,749,390	  20,170.4	    33.3
leaf node 90-10 splits				 21	       0.1	     0.0
leaf node splits				101	       0.3	     0.0

lob reads					191	       0.6	     0.0
lob writes				      3,390	      10.1	     0.0
lob writes unaligned			      3,390	      10.1	     0.0
	v_loop_cnt := v_loop_cnt + 1 ;
logical read bytes from cache	    281,279,635,456  840,596,724.8   1,388,973.5
logons cumulative				 19	       0.1	     0.0
max cf enq hold time				480	       1.4	     0.0
	v_now := DBMS_UTILITY.GET_TIME();
messages received			    115,422	     344.9	     0.6
messages sent				    115,413	     344.9	     0.6
min active SCN optimization appl		  0	       0.0	     0.0

no buffer to keep pinned count			  0	       0.0	     0.0
no work - consistent read gets		 26,446,953	  79,036.0	   130.6
non-idle wait count			 23,033,947	  68,836.3	   113.7
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
opened cursors cumulative		  6,955,110	  20,785.2	    34.3
parse count (describe)				  1	       0.0	     0.0
parse count (failures)				  0	       0.0	     0.0
parse count (hard)				 80	       0.2	     0.0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
parse count (total)			      1,625	       4.9	     0.0
parse time cpu					 29	       0.1	     0.0
parse time elapsed				 30	       0.1	     0.0
		-- iterations then set exit flag
physical read IO requests		 20,314,569	  60,709.6	   100.3
physical read bytes		    166,420,619,264  497,343,603.5     821,793.7
physical read total IO requests 	 20,318,110	  60,720.1	   100.3
		v_stop_immediate := TRUE ;
physical read total bytes	    167,234,745,856  499,776,599.2     825,813.9
physical read total multi block 		741	       2.2	     0.0
physical reads				 20,315,043	  60,711.0	   100.3
	END IF;
physical reads cache			 20,315,040	  60,711.0	   100.3
physical reads cache prefetch			478	       1.4	     0.0
physical reads direct				  0	       0.0	     0.0
END LOOP;
physical reads direct (lob)			  0	       0.0	     0.0
physical reads direct temporary 		  0	       0.0	     0.0

physical reads prefetch warmup			  0	       0.0	     0.0
physical write IO requests		    693,702	   2,073.1	     3.4
physical write bytes		      5,882,773,504   17,580,512.5	29,049.4
v_end_time := v_now ;
physical write total IO requests	    717,114	   2,143.1	     3.5
physical write total bytes	      6,496,383,488   19,414,269.6	32,079.5
physical write total multi block		832	       2.5	     0.0
v_now := DBMS_UTILITY.GET_TIME();
physical writes 			    718,112	   2,146.1	     3.6
physical writes direct				443	       1.3	     0.0
physical writes direct (lob)			188	       0.6	     0.0
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
physical writes direct temporary		 94	       0.3	     0.0
physical writes from cache		    717,669	   2,144.7	     3.5
physical writes non checkpoint		    639,138	   1,910.1	     3.2

pinned buffers inspected		     37,846	     113.1	     0.2
prefetch warmup blocks aged out 		  0	       0.0	     0.0
v_total_time := v_end_time - v_begin_time ;
prefetched blocks aged out befor		  0	       0.0	     0.0

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
-------------------------------- ------------------ -------------- -------------
process last non-idle time			335	       1.0	     0.0
recursive calls 			  7,164,955	  21,412.3	    35.4
recursive cpu usage			    553,112	   1,653.0	     2.7
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
redo KB read				    450,560	   1,346.5	     2.2
redo blocks checksummed by FG (e	    470,983	   1,407.5	     2.3
redo blocks written			  1,190,013	   3,556.3	     5.9

redo blocks written (group 0)			  0	       0.0	     0.0
redo blocks written (group 1)			  0	       0.0	     0.0
redo buffer allocation retries			  0	       0.0	     0.0
END;</pre_sqltext></td></tr>
redo entries				    910,901	   2,722.2	     4.5
redo log space requests 			  0	       0.0	     0.0
redo size				581,465,012    1,737,692.8	 2,871.3
redo size for direct writes			120	       0.4	     0.0
<tr><td scope="row" class='awrc'><a class="awr" name="47rm3ra5qrvzk"></a>47rm3ra5qrvzk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
redo subscn max counts			      1,186	       3.5	     0.0
redo synch time 				144	       0.4	     0.0
redo synch time (usec)			  1,389,689	   4,153.1	     6.9
v_default_schema_number PLS_INTEGER := '256';
redo synch time overhead (usec) 	      1,515	       4.5	     0.0
redo synch time overhead count (		 14	       0.0	     0.0
redo synch writes				106	       0.3	     0.0
v_update_pct PLS_INTEGER := '3';
redo wastage				  5,545,072	  16,571.3	    27.4
redo write active strands		     22,836	      68.2	     0.1
redo write broadcast ack count			  2	       0.0	     0.0
v_max_loop_iterations PLS_INTEGER := '0';
redo write broadcast ack time		      1,857	       5.6	     0.0
redo write finish time			266,237,571	 795,643.9	 1,314.7
redo write gather time			    816,949	   2,441.4	     4.0
v_seconds_to_run PLS_INTEGER := '300';
redo write info find				 14	       0.0	     0.0
redo write schedule time		    962,622	   2,876.8	     4.8
redo write size count (   4KB)			650	       1.9	     0.0
v_scale PLS_INTEGER := '32768';
redo write size count (   8KB)		      1,882	       5.6	     0.0
redo write size count (  16KB)		      3,679	      11.0	     0.0
redo write size count (  32KB)		      4,323	      12.9	     0.0
v_work_unit PLS_INTEGER := '4' ;
redo write size count ( 128KB)		      3,278	       9.8	     0.0
redo write size count ( 256KB)			103	       0.3	     0.0
redo write size count ( 512KB)			166	       0.5	     0.0
v_redo_stress  VARCHAR2(12) := 'LITE';
redo write size count (1024KB)			193	       0.6	     0.0
redo write size count (inf)			 44	       0.1	     0.0
redo write time 			     26,632	      79.6	     0.1
redo write time (usec)			266,317,468	 795,882.7	 1,315.1
v_hot_schema_modulus PLS_INTEGER := '0';
redo write total time			266,806,202	 797,343.3	 1,317.5
redo write worker delay (usec)			  0	       0.0	     0.0
redo write worker delay count			  0	       0.0	     0.0
v_do_hotspot   VARCHAR(7) := 'FALSE';
redo writes				     14,318	      42.8	     0.1
redo writes (group 0)				  0	       0.0	     0.0
redo writes (group 1)				  0	       0.0	     0.0
v_hotspot_mb  NUMBER := '10';
redo writes adaptive all		     14,317	      42.8	     0.1
redo writes adaptive worker			  0	       0.0	     0.0
v_hotspot_offset_mb NUMBER := '0';
rollback changes - undo records 		  0	       0.0	     0.0
rollbacks only - consistent read		 17	       0.1	     0.0
rows fetched via callback		      1,378	       4.1	     0.0
v_hotspot_modulus  PLS_INTEGER := '0';
saved cleanouts 				  0	       0.0	     0.0
saved cleanouts successfully com		  0	       0.0	     0.0
securefile allocation bytes		  1,540,096	   4,602.5	     7.6

securefile allocation chunks			 62	       0.2	     0.0
securefile bytes non-transformed	  1,315,528	   3,931.4	     6.5
securefile direct read bytes			  0	       0.0	     0.0
v_sleep_modulus PLS_INTEGER := '0';
securefile direct read ops			  0	       0.0	     0.0
securefile direct write bytes		  1,540,096	   4,602.5	     7.6
securefile direct write ops			 61	       0.2	     0.0
v_sleep_min NUMBER := '.1';
securefile number of non-transfo		 61	       0.2	     0.0
segment cfs allocations 			  0	       0.0	     0.0

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_sleep_max NUMBER := '.5';
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
v_scan_query_pct PLS_INTEGER := '0';
-------------------------------- ------------------ -------------- -------------
segment chunks allocation from d		 62	       0.2	     0.0
segment dispenser allocations			 60	       0.2	     0.0
segment dispenser load empty			  0	       0.0	     0.0
v_obfuscate VARCHAR(5)	:= 'FALSE';
segment dispenser load tasks			  0	       0.0	     0.0
segment prealloc bytes				  0	       0.0	     0.0
segment prealloc ops				  0	       0.0	     0.0

segment prealloc tasks				  0	       0.0	     0.0
segment prealloc time (ms)			  0	       0.0	     0.0
segment prealloc ufs2cfs bytes			  0	       0.0	     0.0

segment total chunk allocation			  0	       0.0	     0.0
session connect time				377	       1.1	     0.0
session cursor cache hits		  6,948,420	  20,765.2	    34.3
session logical reads			 34,337,885	 102,617.9	   169.6
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
shared hash latch upgrades - no 	  2,883,439	   8,617.1	    14.2
shared hash latch upgrades - wai		 23	       0.1	     0.0
shared io pool buffer get failur		  0	       0.0	     0.0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
shared io pool buffer get succes		 60	       0.2	     0.0
sorts (memory)					427	       1.3	     0.0
sorts (rows)				     58,416	     174.6	     0.3
sql area evicted				 29	       0.1	     0.0

sql area purged 				  6	       0.0	     0.0
summed dirty queue length		  5,987,393	  17,893.2	    29.6
switch current caused by our pin		 12	       0.0	     0.0
v_num_tmp NUMBER := 0;
switch current to new buffer			 37	       0.1	     0.0
table fetch by rowid			 25,890,311	  77,372.5	   127.9
table fetch continued row			 22	       0.1	     0.0

table scan blocks gotten		      4,922	      14.7	     0.0
table scan disk non-IMC rows got	    661,819	   1,977.8	     3.3
table scan rows gotten			    661,819	   1,977.8	     3.3
table scans (short tables)			188	       0.6	     0.0
v_loop_cnt PLS_INTEGER := 0;
temp space allocated (bytes)			  0	       0.0	     0.0
total cf enq hold time			      5,156	      15.4	     0.0
v_rowcnt PLS_INTEGER := 0;
total number of cf enq holders			121	       0.4	     0.0
total number of times SMON poste		 42	       0.1	     0.0
transaction lock background get 		  0	       0.0	     0.0
transaction lock background gets		  0	       0.0	     0.0
v_updates_cnt PLS_INTEGER := 0;
transaction lock foreground requ		  0	       0.0	     0.0
transaction rollbacks				  0	       0.0	     0.0
transaction tables consistent re		  0	       0.0	     0.0
v_selects_cnt PLS_INTEGER := 0;
undo change vector size 		229,576,052	 686,081.9	 1,133.7
user calls					728	       2.2	     0.0
user commits				    202,509	     605.2	     1.0
user logons cumulative				  1	       0.0	     0.0

user logouts cumulative 			105	       0.3	     0.0
workarea executions - optimal			706	       2.1	     0.0
write clones created in backgrou		  0	       0.0	     0.0
v_random_access_queries_cnt PLS_INTEGER := 0;
write clones created in foregrou	     30,402	      90.9	     0.2
			  ------------------------------------------------------


v_scan_queries_cnt PLS_INTEGER := 0;
Instance Activity Stats - Absolute ValuesDB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Statistics with absolute values (should not be diffed)

Statistic			     Begin Value       End Value

-------------------------------- --------------- ---------------
logons current				     243	     139
opened cursors current			     634	     112
session cursor cache count		  30,871	  31,025
session pga memory		   1,522,718,040     905,687,192
session pga memory max		   1,741,234,808   1,114,176,952
session uga memory		     884,718,176     583,564,152
v_do_scan_query BOOLEAN :=FALSE;
session uga memory max		   7,683,445,304   7,941,513,488
			  ------------------------------------------------------

Instance Activity Stats - Thread ActivityDB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_scan_query_quota  BOOLEAN := FALSE;
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour
-------------------------------- ------------------ ---------
v_scan_workload_only BOOLEAN := FALSE;
log switches (derived)				  0	  .00
			  ------------------------------------------------------

IOStat by Function summary		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_random_workload_only BOOLEAN := FALSE;
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc


		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time

--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re  150.7G 5.9E+04 461.172      0M     0.0      0M   19.7M 721.77us
DBWR		     0M     0.0      0M    5.3G  2024.1 16.353M       0
v_random_block PLS_INTEGER := 1;
Others		   759M     8.2  2.268M      7M     1.0   .021M    1711   6.55ms
LGWR		     0M     0.0      0M    566M    67.0  1.691M     14K  18.46ms
Direct Writes	     0M     0.0      0M      1M     0.2   .003M       0
v_tmp PLS_INTEGER;
TOTAL:		 151.4G 5.9E+04 463.441    5.9G  2092.4 18.068M   19.7M 734.88us
			  ------------------------------------------------------

IOStat by Filetype summary		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_now PLS_INTEGER;
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc
v_brick_wall PLS_INTEGER;

		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read

-------------- ------- ------- ------- ------- ------- ------- -------- --------
v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
Data File	150.7G 5.9E+04 461.271	  5.3G	2023.6 16.359M 269.73us    .00ns
Log File	  728M	   2.4	2.176M	  566M	  67.0	1.691M	 1.80ms 1786.74m
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Control File	   30M	   5.8	  .09M	    4M	   0.9	 .012M 248.71us
Temp File	    1M	   0.2	 .003M	    1M	   0.2	 .003M	  .00ns
			v_sharing_schema := TRUE ;
TOTAL:		151.5G 5.9E+04 463.539	  5.9G	2091.7 18.065M 269.73us 1784.29m
			  ------------------------------------------------------
		ELSE

IOStat by Function/Filetype summary	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
			IF ( v_sharing_schema = TRUE ) THEN
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Ordered by (Data Read + Write) desc for each function
				EXECUTE IMMEDIATE v_home_schema_str;

  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
				v_sharing_schema := FALSE;
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
			END IF;
  150.6G 5.9E+04 460.969      0M     0.0      0M   19.7M   721.65us
 Buffer Cache Reads (Data File)
		END IF;
  150.6G 5.9E+04 460.966      0M     0.0      0M   19.7M   721.65us
 Buffer Cache Reads (Temp File)
      1M     0.2   .003M      0M     0.0      0M      62   161.29us
	END IF;
 DBWR (Data File)
      0M     0.0      0M    5.3G  2023.0 16.347M       0

DBWR
      0M     0.0      0M    5.3G  2023.1 16.347M       0
 DBWR (Temp File)
	-- Choose the random block. The v_do_hotspot handler that follows can override.
      0M     0.0      0M      0M     0.1      0M       0
Others
    758M     8.2  2.265M      7M     1.0   .021M    1558   741.89us
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
 Others (Log File)
    728M     2.4  2.176M      0M     0.0      0M      74     2.20ms

 Others (Control File)
     30M     5.8    .09M      5M     0.9   .015M    1476   671.50us
 Others (Data File)
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
      0M     0.0      0M      1M     0.0   .003M       8   213.50us
 Others (Temp File)
      0M     0.0      0M      1M     0.1   .003M       0
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
 LGWR (Log File)
      0M     0.0      0M    566M    67.0  1.691M       0
LGWR
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
      0M     0.0      0M    566M    67.0  1.691M       0
 Direct Writes (Data File)
      0M     0.0      0M      1M     0.2   .003M       0
Direct Writes
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
      0M     0.0      0M      1M     0.2   .003M       0
TOTAL:
	END IF;
  151.4G 5.9E+04 463.234    5.9G  2091.3 18.062M   19.7M   721.65us
			  ------------------------------------------------------



Tablespace IO Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

----------------------------------------------------------------------------------------------------------------------
		  No data exists for this section of the report.
			  ------------------------------------------------------


-- The following section governs what the SQL execution will be (UPDATE or SELECT)
File IO Stats				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
----------------------------------------------------------------------------------------------------------------------
			  ------------------------------------------------------



Buffer Pool Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Standard block size Pools  D: default,  K: keep,  R: recycle
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k
	IF  ( v_select_only_workload = TRUE ) THEN

							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
		-- handle case where user specified zero pct updates (a SELECT-only workload)
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
		v_do_update := FALSE;
D      122,958	 41   34,371,702   20,338,034	  718,025      0      0       93
			  ------------------------------------------------------
		v_update_quota := TRUE ;

Checkpoint Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Physical Writes:		       718,112
	ELSE

					  Other    Autotune	 Thread
		IF ( v_update_only_workload = TRUE ) THEN
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
     Writes	 Writes      Writes	 Writes      Writes	 Writes
----------- ----------- ----------- ----------- ----------- -----------
			-- handle case where user specified 100% updates
	  0	      0 	  0	      0 	784	      0
			  ------------------------------------------------------

			v_do_update := TRUE;
Instance Recovery Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
			v_update_quota := FALSE;
-> B: Begin Snapshot,  E: End Snapshot

									    Estd
		ELSE
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
B     0     4	  3326	 123527 8.49E+07 8.49E+07      N/A	N/A    N/A     2
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
E     0    52	  4459	1118032 8.49E+07 8.49E+07      N/A	N/A    N/A    26
			  ------------------------------------------------------
			IF ( v_update_quota = FALSE ) THEN

MTTR Advisory				     DB/Inst: P30SDB/p30sdb2  Snap: 46

				-- Handle case where user has set UPDATE_PCT to a valid value
		  No data exists for this section of the report.
			  ------------------------------------------------------
				--

Buffer Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 46
-> Only rows with estimated physical reads >0 are displayed
				-- We are doing updates during this run and quota has not been met yet
-> ordered by Block Size, Buffers For Estimate

				    Est
				-- We still vacillate until update quota has been met
				   Phys      Estimated			Est
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime

P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
--- -------- ------ ------------ ------ -------------- ------------ -------
				IF ( MOD(v_random_block,  2) = 0 ) THEN
D	  96	 .1	      11    1.1        174,988		  1 9.2E+04
D	 192	 .2	      22    1.1        167,684		  1 8.8E+04
D	 288	 .3	      34    1.1        163,467		  1 8.6E+04
					v_do_update := TRUE;
D	 384	 .4	      45    1.1        160,903		  1 8.5E+04
D	 480	 .5	      56    1.0        159,153		  1 8.4E+04
				ELSE
D	 576	 .5	      67    1.0        157,815		  1 8.3E+04
D	 672	 .6	      78    1.0        156,679		  1 8.2E+04
D	 768	 .7	      89    1.0        155,625		  1 8.2E+04
					v_do_update := FALSE;
D	 864	 .8	     101    1.0        154,577		  1 8.1E+04
				END IF;
D	 960	 .9	     112    1.0        153,550		  1 8.1E+04
D      1,056	1.0	     123    1.0        152,553		  1 8.0E+04
D      1,152	1.1	     134    1.0        151,587		  1 8.0E+04
			ELSE
D      1,248	1.2	     145    1.0        150,660		  1 7.9E+04
D      1,344	1.3	     156    1.0        149,759		  1 7.9E+04
				-- UPDATE quota has been filled,  force drain some SELECTs
D      1,440	1.4	     168    1.0        148,870		  1 7.8E+04
D      1,536	1.5	     179    1.0        147,995		  1 7.8E+04
D      1,632	1.5	     190    1.0        147,127		  1 7.7E+04
				v_do_update := FALSE;
D      1,728	1.6	     201    1.0        146,272		  1 7.7E+04
D      1,824	1.7	     212    1.0        145,418		  1 7.7E+04
			END IF;
D      1,920	1.8	     224    0.9        144,571		  1 7.6E+04
			  ------------------------------------------------------

		END IF;

PGA Aggr Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	END IF;
-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written

--------------- ------------------ --------------------------
	  100.0 	       251			    0
			  ------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

PGA Aggr Target Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
-- The type of SQL is now determined...execute it in the following section
   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
----------------------------------------------------------------------------------------------------------------------
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt

-> %Man W/A Mem    - percentage of workarea memory under manual control

						%PGA  %Auto   %Man
	IF ( v_do_update != TRUE ) THEN
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
		--
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
		-- Do a SELECT statement
B      4,174	  1,697    2,774.2	  0.0	  .0	 .0	.0    427,410
E      4,174	  2,201    2,095.2	  0.0	  .0	 .0	.0    427,410
		-- Work out scan or random
			  ------------------------------------------------------

PGA Aggr Target Histogram		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		IF  ( v_random_workload_only = TRUE ) THEN
-> Optimal Executions are purely in-memory operations

  Low	  High
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
------- ------- -------------- -------------- ------------ ------------
     2K      4K 	   370		  370		 0	      0
			v_do_scan_query := FALSE;
    64K    128K 	    59		   59		 0	      0
   128K    256K 	    26		   26		 0	      0
			v_scan_query_quota := TRUE ;
   256K    512K 	    16		   16		 0	      0
   512K   1024K 	   125		  125		 0	      0
     1M      2M 	   107		  107		 0	      0
		ELSE
     2M      4M 	     3		    3		 0	      0
			  ------------------------------------------------------

			IF ( v_scan_workload_only = TRUE ) THEN
PGA Memory Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 46
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

				       Estd Extra    Estd P Estd PGA
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
				v_do_scan_query := TRUE;
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
				v_scan_query_quota := FALSE;
---------- ------- ---------------- ---------------- ------ -------- -------
       522     0.1	   13,779.2	       516.5   96.0	  67 1.3E+08
			ELSE
     1,044     0.3	   13,779.2	       516.5   96.0	  67 1.3E+08
     2,087     0.5	   13,779.2	       210.0   98.0	  25 1.3E+08
				IF ( v_scan_query_quota = FALSE ) THEN
     3,131     0.8	   13,779.2		 0.0  100.0	   0 1.3E+08
     4,174     1.0	   13,779.2		 0.0  100.0	   0 1.3E+08
     5,009     1.2	   13,779.2		 0.0  100.0	   0 1.3E+08
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
     5,844     1.4	   13,779.2		 0.0  100.0	   0 1.3E+08
     6,678     1.6	   13,779.2		 0.0  100.0	   0 1.3E+08
     7,513     1.8	   13,779.2		 0.0  100.0	   0 1.3E+08
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
     8,348     2.0	   13,779.2		 0.0  100.0	   0 1.3E+08
    12,522     3.0	   13,779.2		 0.0  100.0	   0 1.3E+08
    16,696     4.0	   13,779.2		 0.0  100.0	   0 1.3E+08
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
    25,044     6.0	   13,779.2		 0.0  100.0	   0 1.3E+08
    33,392     8.0	   13,779.2		 0.0  100.0	   0 1.3E+08
						v_do_scan_query := TRUE;
			  ------------------------------------------------------


					ELSE
Shared Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 46
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
						v_do_scan_query := FALSE;
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
					END IF;
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

				       Est LC Est LC  Est LC Est LC
				ELSE
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
					-- Scan quota has been filled,	force drain some random access SELECTS
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
   1,792   1.0	    127        4,806  224,003	 1.0   2,439	1.0	  15,497
					v_do_scan_query := FALSE;
   1,808   1.0	    143        5,317  224,006	 1.0   2,436	1.0	  15,498
   1,824   1.0	    158        5,976  224,010	 1.0   2,432	1.0	  15,499
				END IF;
   1,840   1.0	    174        7,321  224,015	 1.0   2,427	1.0	  15,500
			END IF;
   1,856   1.0	    190        7,796  224,028	 1.0   2,414	1.0	  15,502
   1,872   1.0	    206        7,938  224,030	 1.0   2,412	1.0	  15,503
		END IF;
   1,888   1.1	    222        8,297  224,033	 1.0   2,409	1.0	  15,503
   1,904   1.1	    238        8,614  224,036	 1.0   2,406	1.0	  15,503
   1,920   1.1	    254        9,121  224,040	 1.0   2,402	1.0	  15,504

   1,936   1.1	    269        9,719  224,045	 1.0   2,397	1.0	  15,505
   1,984   1.1	    317       11,324  224,063	 1.0   2,379	1.0	  15,506

   2,176   1.2	    509       17,941  224,087	 1.0   2,355	1.0	  15,508
   2,368   1.3	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
   2,560   1.4	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
		IF ( v_do_scan_query != TRUE ) THEN
   2,752   1.5	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
   2,944   1.6	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
			SELECT COUNT(c2) INTO v_rowcnt
   3,136   1.8	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
   3,328   1.9	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
   3,520   2.0	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
			FROM cf1
   3,712   2.1	    525       18,688  224,087	 1.0   2,355	1.0	  15,508
			  ------------------------------------------------------

			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
SGA Target Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 46

SGA Target   SGA Size	    Est DB     Est Physical

  Size (M)     Factor	  Time (s)	      Reads
---------- ---------- ------------ ----------------
     2,304	  0.8	   237,523	163,460,413
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
     3,072	  1.0	   231,752	152,552,882
     3,840	  1.3	   227,557	144,574,366
		ELSE
     4,608	  1.5	   227,488	144,574,366
     5,376	  1.8	   227,488	144,574,366
     6,144	  2.0	   227,488	144,574,366
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
			  ------------------------------------------------------

Streams Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 46


		  No data exists for this section of the report.
			  ------------------------------------------------------
			v_scan_queries_cnt := v_scan_queries_cnt + 1;

Java Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 46


		  No data exists for this section of the report.
			  ------------------------------------------------------

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
Buffer Wait Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by wait time desc, waits desc

				v_scan_query_quota := TRUE;
Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
file header block	    87			15	      178
			END IF;
undo header		     3			 0		0
			  ------------------------------------------------------

		END IF;

Enqueue Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> only enqueues with requests are shown

-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
	ELSE
------------ ------------ ----------- ----------- ------------ --------------
CR-Reuse Block Range (block range reuse ckpt)
		--
       5,762	    5,762	    0	    1,258	    76		60.03
HW-Segment High Water Mark
	 555	      555	    0	       65	    28	       429.95
		-- Do an UPDATE statement
CF-Controlfile Transaction
	 834	      832	    2	       30	     1		33.13
RO-Multiple Object Reuse (fast object reuse)
		--
	 176	      176	    0	       52	     1		 9.87
PS-PX Process Reservation
	  62	       62	    0	       24	     0		 1.38

TM-DML
     198,265	  198,262	    0		1	     0		25.00
		v_my_serial := v_my_serial + v_loop_cnt ;
WF-AWR Flush
	  27	       26	    1	       19	     0		 1.05
US-Undo Segment

	  52	       52	    0		6	     0		 2.17
CO-KTUCLO Master Slave enq (master slave det)
	   5		0	    5		5	     0		 1.20
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
FB-Format Block
	  13	       13	    0		2	     0		 1.50
TA-Instance Undo
		--
	   1		1	    0		1	     0		 1.00
TX-Transaction
     198,503	  198,491	    0		0	     0		  N/A
JG-Job Scheduler1
		-- Increment count of UPDATES and set UPDATE quota flag if needed
       1,386	    1,386	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)
       1,386	    1,386	    0		0	     0		  N/A
		--
IS-Instance State
	 920	      920	    0		0	     0		  N/A
TT-Tablespace
		v_updates_cnt := v_updates_cnt + 1;
	 272	      272	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 258	      258	    0		0	     0		  N/A

SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
	 229	      230	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
	 132	      132	    0		0	     0		  N/A
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
BU-Buddy Instance Context (recovery set construct)
	 108	      108	    0		0	     0		  N/A
FP-File Object (global fob contention)
			v_update_quota := TRUE;
	  74	       74	    0		0	     0		  N/A
CU-Cursor
	  67	       67	    0		0	     0		  N/A
		END IF;
TO-Temp Object
	  34	       34	    0		0	     0		  N/A
MR-Media Recovery
	END IF ;
	  32	       32	    0		0	     0		  N/A
WT-AWR CDB-Wide Table Lock
	  22	       22	    0		0	     0		  N/A
SE-Session Migration
----------------------------------------------------------------------------------------------------------------------
	  20	       20	    0		0	     0		  N/A
AF-Advisor Framework (task serialization)
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
	  13	       13	    0		0	     0		  N/A
SQ-Sequence Cache
	  12	       12	    0		0	     0		  N/A
----------------------------------------------------------------------------------------------------------------------
IT-In-Mem Temp Table Meta Creation
	   8		8	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)

	   7		7	    0		0	     0		  N/A

Enqueue Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc
		--

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
TH-Threshold Chain (metric threshold evaluation)
	   5		5	    0		0	     0		  N/A
AE-Edition Lock (lock)
	   2		2	    0		0	     0		  N/A
SH-Active Session History Flushing
	   2		2	    0		0	     0		  N/A
PR-Process Startup
	   1		1	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
	   1		1	    0		0	     0		  N/A
PW-Buffer Cache PreWarm (flush prewarm buffers)
	   1		1	    0		0	     0		  N/A
XR-Quiesce / Force Logging (database force logging)
	   1		1	    0		0	     0		  N/A
			  ------------------------------------------------------


Undo Segment Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
			  ------------------------------------------------------

Undo Segment Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
			  ------------------------------------------------------


Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
AQ Background: interrupt	      1    0.0		   0	       12    0.0
AQ Coord jobx_kwsbgsgn l	     11    0.0		   0		0    N/A
AQ Message drive state o	      1    0.0		   0		0    N/A
AQ Sharded master pool l	     11    0.0		   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
ASM Keyed state latch		    108    1.9	  0.0	   0		0    N/A
ASM allocation			 19,928    0.0		   0		0    N/A
ASM connection state lat	  2,725    0.0		   0		0    N/A
ASM db client latch		  2,368    0.0		   0		0    N/A
ASM map headers 		    750    0.0		   0		0    N/A
ASM map load waiting lis	    375    0.0		   0		0    N/A
ASM map operation freeli	    248    0.0		   0		0    N/A
ASM map operation hash t     42,843,482    0.0	  0.1	   0		0    N/A
ASM network background l	  2,583    0.0		   0		0    N/A
ASM network state latch 	    156    0.0		   0		0    N/A
ASM remote client latch 	      6    0.0		   0		0    N/A
AWR Alerted Metric Eleme	  4,374    0.0		   0		0    N/A
Autotask management		      6    0.0		   0		0    N/A
Change Notification Hash	    148    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
Consistent RBA			 14,305    0.0	  0.0	   0		0    N/A
DML lock allocation		406,235    0.0	  0.2	   0		0    N/A
Event Group Locks		     22    0.0		   0		0    N/A
FIB s.o chain latch		    150    0.0		   0		0    N/A
FOB consolidated s.o lis	    150    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
Hang Manager wait event 	     21    0.0		   0	    3,931    0.0
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	    216    0.0		   0		0    N/A
ILM access tracking exte	      1    0.0		   0		0    N/A
ILM activity tracking la	      1    0.0		   0		0    N/A
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A
IM area sb latch		      1    0.0		   0		0    N/A
IM area scb latch		      1    0.0		   0		0    N/A
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
IMFS defer write list		      1    0.0		   0		0    N/A
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      5    0.0		   0		0    N/A
IPC stats buffer allocat	      1    0.0		   0		0    N/A
In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		     68    0.0		   0		0    N/A
JS broadcast add buf lat	     76    0.0		   0		0    N/A
JS broadcast drop buf la	     76    0.0		   0		0    N/A
JS broadcast load blnc l	     76    0.0		   0		0    N/A
JS queue access latch		      1    0.0		   0		0    N/A
JS queue state obj latch	  2,814    0.0		   0		0    N/A
JS slv state obj latch		      1    0.0		   0		0    N/A
KCNIBR - invalid block r	      1    0.0		   0		0    N/A
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A
KDMADO bll latch		      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
KFC Hash Latch			      1    0.0		   0		0    N/A
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
KFIAS cluster latch		      1    0.0		   0		0    N/A
KFIAS endpoint latch		      1    0.0		   0		0    N/A
KFIAS node latch		      1    0.0		   0		0    N/A
KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A
KFK SGA Libload latch		 11,932    0.0		   0		0    N/A
KFMD SGA			    190    0.0		   0		0    N/A
KGNFS-NFS:SHM structure 	      1    0.0		   0		0    N/A
KGNFS-NFS:SVR LIST		    113    0.0		   0		0    N/A
KJC message pool KGH cal	      1    0.0		   0		0    N/A
KJC message pool free li	194,734    0.2	  0.4	   0	  156,427    1.0
KJC message pool pending	      1    0.0		   0		0    N/A
KJCT flow control latch       5,685,378    0.1	  0.1	   0		0    N/A
KMG MMAN ready and start	    112    0.0		   0		0    N/A
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
KSFS id table parent lat	      1    0.0		   0		0    N/A
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
KSGL LS Segment latch		      1    0.0		   0		0    N/A
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
KSIPC SGA allocation par	    436    0.7	  0.0	   0		0    N/A
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A
KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A
KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	    781    0.0		   0	       46    0.0
KSXR hang analysis phase	  1,225    0.0		   0		0    N/A
KSXR large replies		      4    0.0		   0		0    N/A
KTF sga latch			      0    N/A		   0	      109    0.0
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
KWQMN job cache list lat	     48    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4c3z7x1gkcdup"></a>4c3z7x1gkcdup</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
Locator state objects po	      1    0.0		   0		0    N/A
v_hotspot_mb  NUMBER := '10';
Lost write change tracki	      1    0.0		   0		0    N/A
Lsod array latch		    139    0.0		   0		0    N/A
v_hotspot_offset_mb NUMBER := '0';
MGA asr alloc latch		      5    0.0		   0		0    N/A
MGA heap latch			    217   23.0	  0.6	   0		0    N/A
MGA shared context latch	  1,500    7.1	  1.2	   0		0    N/A
v_hotspot_modulus  PLS_INTEGER := '0';
MGA shared context root 	    221   34.8	  1.1	   0		0    N/A
MQL Tracking Latch		      0    N/A		   0		7    0.0

Memory Management Latch 	      0    N/A		   0	      112    0.0
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
v_sleep_modulus PLS_INTEGER := '0';
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
v_sleep_min NUMBER := '.1';

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_sleep_max NUMBER := '.5';
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
v_scan_query_pct PLS_INTEGER := '0';
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
v_obfuscate VARCHAR(5)	:= 'FALSE';
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss

------------------------ -------------- ------ ------ ------ ------------ ------
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A

MinActiveScn Latch		     15    0.0		   0		0    N/A
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
Mutex				      1    0.0		   0		0    N/A
Mutex Stats			      1    0.0		   0		0    N/A
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
Nologging Standby SCN Ti	    109    0.0		   0		0    N/A
OS process			    662    0.0		   0		0    N/A
OS process allocation		    778    0.0		   0		0    N/A

OS process: request allo	    108    1.9	  0.0	   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A
v_num_tmp NUMBER := 0;
PDB LRU structure		      1    0.0		   0		0    N/A
PL/SQL warning settings 	     19    0.0		   0		0    N/A
PX hash array latch		      1    0.0		   0		0    N/A

Parent latch for depende	      1    0.0		   0		0    N/A
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
v_loop_cnt PLS_INTEGER := 0;
QMT				      1    0.0		   0		0    N/A
Real-time descriptor lat	 24,758    0.0		   0		0    N/A
v_rowcnt PLS_INTEGER := 0;
Report Request stats lat	     30    0.0		   0		0    N/A
Report Request struct la	     17    0.0		   0		0    N/A
Request holder compeltio	      3    0.0		   0		0    N/A
v_updates_cnt PLS_INTEGER := 0;
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
SGA IO buffer pool latch	     36    0.0		   0	       36    0.0
v_selects_cnt PLS_INTEGER := 0;
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
SGA Logging Log Latch		 11,075    0.0		   0		0    N/A

SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
SGA heap locks			      1    0.0		   0		0    N/A
v_random_access_queries_cnt PLS_INTEGER := 0;
SGA pool locks			      1    0.0		   0		0    N/A
SO private so latch		    343    0.0		   0	       16    0.0
SQL memory manager latch	      1    0.0		   0	      111    0.0
v_scan_queries_cnt PLS_INTEGER := 0;
SQL memory manager worka	  9,111    0.0		   0		0    N/A
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		      7    0.0		   0		0    N/A

Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     13    0.0		   0		0    N/A
Streams Generic 		      1    0.0		   0		0    N/A
v_do_scan_query BOOLEAN :=FALSE;
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
Token Manager			      1    0.0		   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
UM object latch 		      1    0.0		   0		0    N/A
v_scan_workload_only BOOLEAN := FALSE;
WCR: sync			      1    0.0		   0		0    N/A
Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
v_random_workload_only BOOLEAN := FALSE;
XDB NFS Security Latch		      1    0.0		   0		0    N/A

XDB unused session pool 	      1    0.0		   0		0    N/A

XDB used session pool		      1    0.0		   0		0    N/A
active checkpoint queue 	106,028    1.8	  0.4	   0		0    N/A
v_random_block PLS_INTEGER := 1;
active service list		  1,861    0.2	  0.0	   0	      649    0.0
archive destination		     12    0.0		   0		0    N/A
begin backup scn array		     63    0.0		   0		0    N/A
v_tmp PLS_INTEGER;
buffer pool			      1    0.0		   0		0    N/A
v_now PLS_INTEGER;
business card			     17    0.0		   0		0    N/A
cache buffer handles		     88    0.0		   0		0    N/A
cache buffers chains	    120,952,114    0.0	  0.2	   1   20,783,291    0.1
v_brick_wall PLS_INTEGER;
cache buffers lru chain       2,995,436    0.4	  0.1	   0   21,104,226    0.8
cache table scan latch		    109    0.0		   0	      109    0.0


Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_begin_time PLS_INTEGER;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_end_time PLS_INTEGER;
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
v_total_time PLS_INTEGER;
------------------------ -------------- ------ ------ ------ ------------ ------
call allocation 		    631    4.3	  0.6	   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
change notification clie	      1    0.0		   0		0    N/A
channel handle pool latc	    220    1.4	  1.0	   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
channel operations paren	  8,630    0.2	  0.0	   0	       48    0.0
checkpoint queue latch	      4,175,627    0.0	  0.1	   0	  718,443    0.0
client/application info 	    140    0.0		   0		0    N/A
v_total_cpu_tm PLS_INTEGER;
compile environment latc	     25    0.0		   0		0    N/A
cp handoff latch		      1    0.0		   0		0    N/A
cp pool latch			      1    0.0		   0		0    N/A

cp server hash latch		      1    0.0		   0		0    N/A
cp sga latch			      6    0.0		   0		0    N/A
cp srv type state latch 	    337    0.0		   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		      1    0.0		   0		0    N/A
cvmap freelist lock		      1    0.0		   0		0    N/A
v_loop_control BOOLEAN := FALSE;
deferred cleanup latch		      6    0.0		   0		0    N/A
dispatcher info 		      2    0.0		   0		0    N/A
dml lock allocation		      6    0.0		   0		0    N/A
v_update_quota BOOLEAN := FALSE;
done queue latch		      1    0.0		   0		0    N/A
dtp latch			    107    0.0		   0		0    N/A
dummy allocation		    143    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
eighth spare latch - X p	      1    0.0		   0		0    N/A
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	   18,327    0.0
v_update_only_workload BOOLEAN := FALSE;
enqueue hash chains	      1,252,403    0.0	  0.2	   0	      312    0.0
enqueues			    610    0.0		   0		0    N/A
error message lists		     38    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
fast space usage latch		     60    0.0		   0		0    N/A
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		    485    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
first Audit Vault latch 	      1    0.0		   0		0    N/A
flash file access latch 	      1    0.0		   0		0    N/A
flashback copy			      1    0.0		   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
fourteenth spare latch -	      1    0.0		   0		0    N/A
fourth Audit Vault latch	      1    0.0		   0		0    N/A
gc element		     10,462,212    0.0	  0.2	   1	  846,417    0.0
v_sharing_schema BOOLEAN := FALSE;
gc imc list			  3,263    0.2	  0.0	   0		0    N/A
gc xid list			    109    0.0		   0		0    N/A
v_seed VARCHAR2(128);
gcs affinity object free	    100    0.0		   0		0    N/A
gcs commit scn state		      1    0.0		   0		0    N/A
gcs nodemap pool		347,637    0.0	  0.1	   0		0    N/A
v_home_schema_str VARCHAR2(80);
gcs opaque info freelist	348,612    0.0	  0.1	   0		0    N/A
gcs partitioned table ha     24,005,562    0.0	  0.0	   0   19,023,635    0.0
gcs pcm hashed value buc	      1    0.0		   0		0    N/A
v_scratch VARCHAR2(200) ;
gcs remaster request que	      1    0.0		   0		0    N/A
gcs remastering latch		 82,883    0.5	  0.3	   1	    5,185    5.6

gcs resource freelist	      1,507,676    0.1	  0.0	   0	  387,857    0.1
gcs resource hash	     27,122,525    0.0	  0.2	   2	      334    0.0
gcs resource scan list		      1    0.0		   0		0    N/A
v_cpu_pct NUMBER(6, 3);
gcs resource timerq list	      1    0.0		   0		0    N/A
gcs resource validate li	      1    0.0		   0		0    N/A
gcs shadows freelist	      1,156,030    0.0	  0.0	   0		0    N/A
v_my_serial NUMBER(16);
ges cached resource list	132,129    0.0	  0.0	   0	   21,807    0.0
ges deadlock list		      2    0.0		   0		0    N/A
ges domain table		444,187    0.0		   0		0    N/A

ges enqueue table freeli	414,313    0.0	  0.1	   0		0    N/A
ges group table 		451,055    0.0		   0		0    N/A
ges process hash list		716,843    0.0	  0.8	   0		0    N/A
BEGIN
ges process parent latch	896,937    0.0		   0		0    N/A
ges process table freeli	    108    0.0		   0		0    N/A


Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
EXECUTE IMMEDIATE v_home_schema_str;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss

------------------------ -------------- ------ ------ ------ ------------ ------
ges remote lock freelist	     34    0.0		   0		0    N/A
ges resource hash list		472,966    0.0	  0.2	   0	       74    1.4

ges resource scan list		     84    0.0		   0		0    N/A
ges resource table freel	    310    0.0		   0		0    N/A
ges s-lock bitvec freeli	    568    0.0		   0		0    N/A
IF ( v_hot_schema_modulus != 0 ) THEN
ges timeout list		     49    0.0		   0	       31    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global KZLD latch for au	      1    0.0		   0		0    N/A
	v_do_hot_schema := TRUE;
global tx hash mapping		      1    0.0		   0		0    N/A
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     22    0.0		   0		0    N/A
END IF;
hash table Sql Plan Find	      0    N/A		   0	       42    0.0
hash table column usage 	      0    N/A		   0	   14,175    0.0
hash table expression us	      1    0.0		   0		0    N/A

hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      238    0.0
heartbeat structure mana	      0    N/A		   0	      167    0.0
IF ( v_sleep_modulus != 0 )	  THEN
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
	v_do_sleeps := TRUE;
imc hash lat			      1    0.0		   0		0    N/A
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A
END IF;
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A
in-memory columnar segme	      1    0.0		   0		0    N/A

in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
internal temp table obje	     16    0.0		   0		0    N/A
IF ( v_max_loop_iterations &gt; 0 )  THEN
interrupt manipulation		     76    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
io pool granule list		    120    0.0		   0		0    N/A
	v_loop_control := TRUE ;
io pool granule metadata	    242    0.0		   0		0    N/A
job workq parent latch		      1    0.0		   0		0    N/A
job_queue_processes para	      6    0.0		   0		0    N/A
END IF;
k2q global data latch		    222    0.0		   0		0    N/A
k2q lock allocation		      1    0.0		   0		0    N/A
kKCN Cqn SGA			      1    0.0		   0		0    N/A

kcb DW scan objtemp hash	      1    0.0		   0		0    N/A
kcn buffer chains		      1    0.0		   0		0    N/A
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
IF ( v_update_pct = 0 ) 	  THEN
kgnfs mount latch		      1    0.0		   0		0    N/A
kjbr roi instance map		      1    0.0		   0		0    N/A
kjci objects freelist la	    381    0.0		   0		0    N/A
	v_select_only_workload := TRUE;
kjci process context lat	    430    0.5	  0.0	   0	   19,966    0.0
kjci process list latch 	    261    0.0		   0		0    N/A
kjci request sequence la	     35    0.0		   0		0    N/A
END IF;
kjcipctx state object fr	    106    0.9	  0.0	   0		0    N/A
kjoedcso state object fr	      6    0.0		   0		0    N/A
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A

kjoer owner hash bucket 	      1    0.0		   0		0    N/A
kjpm my inst data		     12    0.0		   0		0    N/A
kjsc Request obj freelis	    212    0.5	  0.0	   0		0    N/A
IF ( v_update_pct = 100 )	  THEN
kjsc Ring Buffer obj fre	    106    0.0		   0		0    N/A
kjsc protect control req	    106    0.0		   0	    3,394    0.0
kjsc protect warm up con	  1,873    0.0		   0		0    N/A
	v_update_only_workload := TRUE;
kjsca protect pkey hash 	  3,395    0.0		   0		0    N/A
kjsca protect service ha	      1    0.0		   0		0    N/A
kjscpss state object fre	    106    0.0		   0		0    N/A
END IF;
kokc descriptor allocati	     36    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
IF ( v_scan_query_pct = 0 ) 	THEN
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
	v_random_workload_only := TRUE;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
END IF;
kpoxft latch			      0    N/A		   0	      100    5.0
krso process			     11    0.0		   0		0    N/A

ksevn object root latch 	    112    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
ksi resource reuse count	      1    0.0		   0		0    N/A
IF ( v_scan_query_pct = 100 ) 	THEN
ksim group membership ca	    337    0.0		   0		0    N/A
ksim membership request 	      0    N/A		   0	      266    0.0
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			      3    0.0		   0		0    N/A
	v_scan_workload_only := TRUE;
ksuosstats global area		     30    0.0		   0	      128    0.0
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		     10    0.0		   0		0    N/A
END IF;
ksv class latch 		  8,400    0.1	  0.2	   0		0    N/A
ksv msg queue latch		    180    0.0		   0	      179    0.0
ksxp shared latch		    108    0.0		   0		0    N/A

ksxp so latch			    108    1.9	  0.0	   0		0    N/A
ksz_so allocation latch 	    108    0.0		   0		0    N/A
ktfbn latch			    131    0.0		   0		0    N/A
v_seconds_to_run := v_seconds_to_run * 100 ;
ktm adg jrnls			      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A

ktm adg space			      1    0.0		   0		0    N/A
ktm adg stages			      1    0.0		   0		0    N/A
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		    216    0.0		   0		0    N/A
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
kwqbsn:qsga			     12    0.0		   0		0    N/A

kwslbmdl: metadata latch	     12    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	      8    0.0		   0		0    N/A
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
kxfxscanrate_latch		      1    0.0		   0		0    N/A
lgwr LWN SCN			 14,332    0.1	  0.1	   0		0    N/A
-- DBMS_RANDOM.seed (val =&gt; v_seed);
list of block allocation	    136    0.0		   0		0    N/A
loader state object free	     74    0.0		   0		0    N/A
lob segment dispenser la	    154    0.0		   0		0    N/A

lob segment hash table l	    181    0.0		   0		0    N/A
lob segment query latch 	      1    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
log write info			      0    N/A		   0	   15,050    3.4
v_begin_time := DBMS_UTILITY.GET_TIME();
log write worker phase		      1    0.0		   0		0    N/A
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
v_now := v_begin_time ;
logminer local			      1    0.0		   0		0    N/A
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
managed standby 		     11    0.0		   0		0    N/A
v_brick_wall := v_now + v_seconds_to_run ;
message bitmap latch		      1    0.0		   0		0    N/A
message pool operations 	  3,119    0.0		   0		0    N/A
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
messages			271,463    1.0	  0.0	   0		0    N/A
msg queue latch 		      1    0.0		   0		0    N/A
multiblock read objects 	    294    0.0		   0		0    N/A

name-service memory obje	     92    0.0		   0		0    N/A
name-service namespace b	  1,801    0.0		   0		0    N/A
name-service pending que	     42    0.0		   0		0    N/A
name-service request que	  3,390    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
-- The following WHILE loop is the master work loop control

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
----------------------------------------------------------------------------------------------------------------------
------------------------ -------------- ------ ------ ------ ------------ ------
ncodef allocation latch 	      6    0.0		   0		0    N/A
ninth spare latch - X pa	      1    0.0		   0		0    N/A
object queue header free      1,256,935    0.0	  0.8	   0		0    N/A
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
object queue header oper     43,025,828    0.0	  0.1	   0	  311,401    0.0
object queue memory		      1    0.0		   0		0    N/A
object stats modificatio	     20    0.0		   0		0    N/A

parallel query alloc buf	    179    0.0		   0	      400    0.0
parallel query stats		     42    0.0		   0		0    N/A
parallel txn reco latch 	    507    0.0		   0		0    N/A
parameter table manageme	    337    0.0		   0		0    N/A
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
pesom_free_list 		      1    0.0		   0		0    N/A
pesom_hash_node 		      1    0.0		   0		0    N/A
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		      5    0.0		   0		0    N/A
post/wait queue 		134,036    0.4	  0.0	   0	  121,455    1.0
process allocation		  1,713    0.0		   0		0    N/A
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
process group creation		    108    0.0		   0		0    N/A
process memory detail		      1    0.0		   0		0    N/A
process pkey statistics 	      1    0.0		   0		0    N/A
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
process queue			     83    0.0		   0		0    N/A
process queue reference 	  3,073    0.0		   0	      373    0.0
qmn task queue latch		     48    0.0		   0		0    N/A
quarantine object		      6    0.0		   0		0    N/A
			DBMS_LOCK.SLEEP(v_num_tmp);
query server freelists		     89    0.0		   0		0    N/A
query server process		    240    0.0		   0		0    N/A
queued dump request		      1    0.0		   0		0    N/A
		END IF;
queuing load statistics 	      1    0.0		   0		0    N/A
read-moslty lock queue u	      1    0.0		   0		0    N/A
recovery domain hash buc	  4,212    0.0	  0.0	   0		0    N/A
redo allocation 		 81,294    0.8	  0.2	   0	  911,306    0.7
	END IF;
redo copy			      1    0.0		   0	  912,495    0.0
redo writing			152,803    0.3	  0.0	   0		0    N/A
remote tool request latc	    123    0.0		   0		0    N/A

resmgr group change latc	     18    0.0		   0		0    N/A
resmgr:active threads		    146    0.0		   0		6    0.0
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
resmgr:actses change gro	     20    0.0		   0		0    N/A
resmgr:actses change sta	      1    0.0		   0		0    N/A
resmgr:free threads list	    142    0.7	  0.0	   0		0    N/A
resmgr:plan CPU method		      1    0.0		   0		0    N/A
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
resmgr:plan change alloc	      1    0.0		   0		0    N/A
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A
resmgr:schema config		      6    0.0		   0		6    0.0
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
resmgr:session queuing		      1    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
rt rmv count latch		      0    N/A		   0	      167    0.0
second Audit Vault latch	      1    0.0		   0		0    N/A
			v_sharing_schema := TRUE ;
segmented array pool		    150    0.0		   0		0    N/A
sequence cache			    411    0.0		   0		0    N/A
service drain list		    334    0.0		   0		0    N/A
		ELSE
session allocation		 55,639    0.0		   0	   55,313    0.0
session idle bit		112,434    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
session state list latch	    148    0.0		   0		0    N/A
			IF ( v_sharing_schema = TRUE ) THEN
session statistics		    143    0.0		   0		0    N/A
session switching		    112    5.4	  0.2	   0		0    N/A
session timer			    112    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
				EXECUTE IMMEDIATE v_home_schema_str;

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
				v_sharing_schema := FALSE;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
			END IF;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
		END IF;
sga hash table parent la	      1    0.0		   0		0    N/A
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		     73    0.0		   0		0    N/A
shared pool			 25,835    2.7	  0.0	   0		0    N/A
	END IF;
shared pool sim alloc		      3    0.0		   0		0    N/A
shared pool simulator		    156    0.0		   0		0    N/A
shared server configurat	    111    0.0		   0		0    N/A

sim partition latch		      1    0.0		   0		0    N/A
simulator hash latch	      5,841,706    0.0	  0.0	   0		0    N/A
simulator lru latch		      1    0.0		   0	3,511,153    0.0
sixth spare latch - X pa	      1    0.0		   0		0    N/A
	-- Choose the random block. The v_do_hotspot handler that follows can override.
sort extent pool		    457    0.0		   0		0    N/A
space background task la	    945   60.5	  1.0	   0	      203   10.3
state object free list		      2    0.0		   0		0    N/A
statistics aggregation		    145    0.0		   0		0    N/A
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	     74    0.0		   0		0    N/A

temporary table state ob	      6    0.0		   0		0    N/A
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
test excl. parent2 lmid 	      1    0.0		   0		0    N/A
test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
test shared parent2 lmid	      1    0.0		   0		0    N/A
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     15    0.0		   0		0    N/A
transaction allocation		    284    0.0		   0		0    N/A
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
twenty-second spare latc	      1    0.0		   0		0    N/A
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
twenty-third spare latch	      1    0.0		   0		0    N/A
undo global data		641,980    0.0	  0.2	   0		0    N/A
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A
	END IF;
virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------



Latch Sleep Breakdown			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by misses desc

				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
----------------------------------------------------------------------------------------------------------------------
-------------------------- --------------- ------------ ----------- -----------
cache buffers chains	       120,952,114	 22,019       3,849	 18,698
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
cache buffers lru chain 	 2,995,436	 11,760       1,128	 10,708
			END IF;
gcs resource hash		27,122,525	  8,456       1,296	  7,328
ASM map operation hash tab	42,843,482	  6,906 	887	  6,140
gc element			10,462,212	  3,405 	517	  2,969
		END IF;
KJCT flow control latch 	 5,685,378	  3,110 	188	  2,946
messages			   271,463	  2,682 	 77	  2,611

active checkpoint queue la	   106,028	  1,895 	822	  1,081
gcs resource freelist		 1,507,676	    796 	 29	    771
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
shared pool			    25,835	    705 	 19	    690
redo allocation 		    81,294	    690 	105	    598
post/wait queue 		   134,036	    596 	  9	    587
	ELSE
space background task latc	       945	    572 	561	    102
object queue header operat	43,025,828	    496 	 74	    431
		--
enqueue hash chains		 1,252,403	    452 	 76	    390
KJC message pool free list	   194,734	    420 	149	    311
gcs remastering latch		    82,883	    419 	106	    336
		-- Do an UPDATE statement
redo writing			   152,803	    408 	 16	    392
ges resource hash list		   472,966	    188 	 34	    156
		--
MGA shared context latch	     1,500	    106 	123	      9
MGA shared context root la	       221	     77 	 85	      6
ges enqueue table freelist	   414,313	     73 	  7	     66

checkpoint queue latch		 4,175,627	     71 	  8	     63
		v_my_serial := v_my_serial + v_loop_cnt ;
MGA heap latch			       217	     50 	 28	     30
gcs opaque info freelist	   348,612	     48 	  5	     44

gcs nodemap pool		   347,637	     45 	  5	     40
undo global data		   641,980	     42 	  8	     36
call allocation 		       631	     27 	 16	     15
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
DML lock allocation		   406,235	     15 	  3	     13
ges process hash list		   716,843	     10 	  8	      2
lgwr LWN SCN			    14,332	     10 	  1	      9
		--
ksv class latch 		     8,400	      6 	  1	      5
session switching		       112	      6 	  1	      5
		-- Increment count of UPDATES and set UPDATE quota flag if needed
object queue header freeli	 1,256,935	      5 	  4	      2
channel handle pool latch	       220	      3 	  3	      1
			  ------------------------------------------------------
		--


Latch Miss Sources			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		v_updates_cnt := v_updates_cnt + 1;
-> only latches with sleeps are shown
-> ordered by name, sleeps desc


						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
------------------------ -------------------------- ------- ---------- --------
ASM map operation hash t kffmTranslate			  0	   466	    436
ASM map operation hash t kffmDoDone_1			  0	   421	    446
			v_update_quota := TRUE;
DML lock allocation	 ktaiam 			  0	     3	      2
KJC message pool free li kjcspfmbq: free vector of	  0	    80	      0
		END IF;
KJC message pool free li kjcsmpav: allocate a msg b	  0	    69	    149
KJCT flow control latch  kjctcsnd: send normal mess	  0	    72	    114
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	    41	      7
	END IF ;
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	    34	     19
KJCT flow control latch  kjctr_updatetkt: update ti	  0	    23	     19
----------------------------------------------------------------------------------------------------------------------
KJCT flow control latch  kjctr_releasetkt: change t	  0	     8	      7
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	     8	     20
KJCT flow control latch  kjcts_adjtkt: adjust send	  0	     2	      2
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
MGA pid alloc latch	 ksm_mga_sctx_rtrcv_do_whr2	  0	     4	     55
MGA shared context latch ksm_mga_detach_whr2		  0	    83	     38
MGA shared context latch ksm_mga_sync_whr1		  0	    36	     30
----------------------------------------------------------------------------------------------------------------------
MGA shared context root  ksm_mga_detach_whr1		  0	    85	     85
active checkpoint queue  kcbbacq: scan active check	  0	   786	    818

active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	    18	      0
active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	     7	      0
active checkpoint queue  kcbkcpa: Checkpoint post-p	  0	     7	      0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
active checkpoint queue  kcbkcpa: Checkpoint post-p	  0	     1	      1
cache buffers chains	 kcbgtcr: slow path excl	  0	 2,418	    723
		--
cache buffers chains	 kclcls_3			  0	   794	    106
cache buffers chains	 kcbzgb: scan from tail now	  0	   385	      0
cache buffers chains	 kcbgtcr: convert latch 	  0	   263	      0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
cache buffers chains	 kcbbic2			  0	   172	    168
cache buffers chains	 kcbzib: finish processing	  0	   157	    753
cache buffers chains	 kclpdcl			  0	   144	      0
		-- so reset flags and counters before continuing
cache buffers chains	 kcbgcur: slow path		  0	    59	     16
cache buffers chains	 kcbgtcr: fast path pin 	  0	    50	    724
		--
cache buffers chains	 kcbrls: fast pin release	  0	    44	  1,291
cache buffers chains	 kcbgtcr: fast path exam	  0	    42	    491
		v_update_quota := FALSE;
cache buffers chains	 kcbbic1			  0	    23	     19
cache buffers chains	 kcbgcur: fast path excl	  0	    18	     24
cache buffers chains	 kclrlstp			  0	    13	     18
		v_updates_cnt := 0;
cache buffers chains	 kcbbxsv			  0	     9	     25
cache buffers chains	 kcbchg: aux pin		  0	     8	     13
		v_selects_cnt := 0;
cache buffers chains	 kcbchg: change buffer		  0	     4	      0
cache buffers chains	 kcbchg: change complete	  0	     4	     20
cache buffers chains	 kcbchg: cur pin change 	  0	     3	      7
	END IF;
cache buffers chains	 kclrwrite_3			  0	     3	      1
cache buffers chains	 kcbnew: new latch again	  0	     2	      1

cache buffers chains	 kcbnlc 			  0	     2	     17
cache buffers chains	 kclexpandlock			  0	     2	     16
cache buffers chains	 kcbgcur: convert latch 	  0	     1	      0
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
cache buffers chains	 kcbgtcr: retry after read	  0	     1	      0
cache buffers chains	 kcbzcg 			  0	     1	      2
cache buffers chains	 kclbla 			  0	     1	      0
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
cache buffers lru chain  kcbzgws			  0	 1,031	      0
cache buffers lru chain  kcbzgb_2			  0	    86	    228
cache buffers lru chain  kcbbic2			  0	     5	    489
		-- so reset flags and counters
cache buffers lru chain  kcbzgb 			  0	     4	     39
cache buffers lru chain  kcbbxsv: move to being wri	  0	     1	      0
call allocation 	 ksuxds 			  0	    15	     14
		v_scan_query_quota := FALSE;
call allocation 	 ksudlp: top call		  0	     1	      2
channel handle pool latc ksrchdelete()			  0	     3	      3
		v_scan_queries_cnt := 0;
checkpoint queue latch	 kcbklbc_cql			  0	     7	      0
checkpoint queue latch	 kcbkubc_4			  0	     1	      2
gc element		 kclnfndnewm			  0	   199	    137
		v_random_access_queries_cnt := 0;
gc element		 kclnfndx			  0	    67	    117

Latch Miss Sources			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	END IF;
-> only latches with sleeps are shown
-> ordered by name, sleeps desc


						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
	v_loop_cnt := v_loop_cnt + 1 ;
------------------------ -------------------------- ------- ---------- --------
gc element		 kclulb 			  0	    60	     96
	v_now := DBMS_UTILITY.GET_TIME();
gc element		 kclpdcl			  0	    50	     21
gc element		 kclfwrite1			  0	    41	     30
gc element		 kclplz_1			  0	    32	      3

gc element		 kclplz 			  0	    24	      0
gc element		 kclnfnds			  0	    18	     16
gc element		 KCLUNLNK			  0	    15	     83
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
gc element		 kclrwrite			  0	    15	     19
gc element		 kclantilock_1			  0	     8	      0
gc element		 kclexpand_2			  0	     3	      1
		-- If this is a fixed-iteration count test cycle and we've hit the number of
gc element		 kclpdc_1			  0	     3	      5
gc element		 kcl_fairness			  0	     1	      0
gc element		 kclnfnd			  0	     1	      0
		-- iterations then set exit flag
gc element		 kclrlstp			  0	     1	      0
gc element		 kclrwrite_1			  0	     1	      1
gcs nodemap pool	 kjbrnmapalloc_2		  0	     4	      1
		v_stop_immediate := TRUE ;
gcs nodemap pool	 kjbrnmapfree_1 		  0	     1	      3
gcs opaque info freelist kjbrinfoalloc			  0	     5	      5
	END IF;
gcs remastering latch	 kjfcdrmrfg end step		  0	    77	      0
gcs remastering latch	 kjfcdrmrfg drmfrz step 	  0	    23	      0
END LOOP;
gcs remastering latch	 kjfcdrmrfg beginning		  0	     8	      0
gcs remastering latch	 kjdrisdrm nowait		  0	     2	    109

gcs resource freelist	 kjbralc: check freelist no	  0	    16	      0
gcs resource freelist	 kjbrralc: reserve allocati	  0	     8	      3
gcs resource freelist	 kjbrfr_bg2			  0	     4	     10
v_end_time := v_now ;
gcs resource freelist	 kjbralc add resource		  0	     1	     16
gcs resource hash	 kclfwrite1			  0	   446	      9
gcs resource hash	 kjblocalobj_nolock		  0	   431	    699
v_now := DBMS_UTILITY.GET_TIME();
gcs resource hash	 kjbcropen			  0	   133	     54
gcs resource hash	 kclpdc 			  0	    64	    414
gcs resource hash	 kjbopen			  0	    52	      0
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
gcs resource hash	 kjbmpopen			  0	    45	     24
gcs resource hash	 kjbclose_remaster		  0	    40	     21
gcs resource hash	 kjbmpclose			  0	    27	     20

gcs resource hash	 kjblpast			  0	    18	     24
gcs resource hash	 kjbrprmexpack			  0	    11	      7
gcs resource hash	 kjbrdowncvt			  0	     7	      0
v_total_time := v_end_time - v_begin_time ;
gcs resource hash	 kclrwrite			  0	     4	     18
gcs resource hash	 kjbconvert			  0	     4	      0
gcs resource hash	 kjbrrcfwst			  0	     4	      0
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
gcs resource hash	 kjbassume			  0	     2	      0
gcs resource hash	 kjbopen:affinity		  0	     2	      0
gcs resource hash	 kjbrrcres_99			  0	     2	      0
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
gcs resource hash	 kclgrantlk_1			  0	     1	      0
gcs resource hash	 kjbcancel			  0	     1	      1
gcs resource hash	 kjblprmexp2			  0	     1	      8
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
gcs resource hash	 kjbmpflushpi			  0	     1	      2
ges enqueue table freeli kjlalc: lock allocation	  0	     6	      1
ges enqueue table freeli kjlfr: remove lock from pa	  0	     1	      8

ges process hash list	 kjakiqa: set inquiry respo	  0	     8	      0
ges resource hash list	 kjlrlr: remove lock from r	  0	    13	     27
END;</pre_sqltext></td></tr>
ges resource hash list	 kjlmfnd: search for lockp	  0	    12	      1
ges resource hash list	 kjrmas1: lookup master nod	  0	     4	      0
ges resource hash list	 kjakcai: search for resp b	  0	     3	      0
<tr><td scope="row" class='awrc'><a class="awr" name="5m9kb3cpp792u"></a>5m9kb3cpp792u</td><td class='awrc'><pre_sqltext class="awr">DECLARE
ges resource hash list	 kjcvscn: remove from scan	  0	     1	      0
ges resource hash list	 kjuinq: inquire resource h	  0	     1	      0
ksv class latch 	 ksvclsl: checkpool		  0	     1	      0
v_default_schema_number PLS_INTEGER := '174';
messages		 ksarcv 			  0	    34	     26
messages		 ksarcv: after wait		  0	    22	     19
messages		 ksaamb: after wakeup		  0	    21	     32

v_update_pct PLS_INTEGER := '3';
Latch Miss Sources			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> only latches with sleeps are shown
-> ordered by name, sleeps desc
v_max_loop_iterations PLS_INTEGER := '0';

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
v_seconds_to_run PLS_INTEGER := '300';
------------------------ -------------------------- ------- ---------- --------
mostly latch-free SCN	 kcs024 			  0	     1	      0
object queue header free kcbo_unlink_q			  0	     3	      3
v_scale PLS_INTEGER := '32768';
object queue header free kcbo_link_q			  0	     1	      6
object queue header oper kcbo_unlink_q			  0	    33	     22
object queue header oper kcbo_link_q			  0	    22	     27
v_work_unit PLS_INTEGER := '4' ;
object queue header oper kcbo_switch_mq_bg		  0	    10	      8
object queue header oper kcbo_switch_cq 		  0	     6	     15
v_redo_stress  VARCHAR2(12) := 'LITE';
object queue header oper kcbo_switch_q_bg		  0	     5	      6
object queue header oper kclbufs			  0	     2	      0
post/wait queue 	 ksliwat:remove 		  0	     6	      0
v_hot_schema_modulus PLS_INTEGER := '0';
post/wait queue 	 kslpstevent:get		  0	     2	      2
post/wait queue 	 ksliwat:add:wait		  0	     1	      7
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	   100	      0
v_do_hotspot   VARCHAR(7) := 'FALSE';
redo allocation 	 kcrfw_redo_write: before w	  0	     3	      9
redo allocation 	 kcrfw_post: more space 	  0	     1	      7
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	     1	      0
v_hotspot_mb  NUMBER := '10';
redo writing		 kcrfwcr			  0	    15	     15
redo writing		 kcrfw_post: rba scn pair	  0	     1	      0
session switching	 kskexeall			  0	     1	      1
space background task la ktsj_grab_task 		  0	   412	    499
space background task la ktsj_smco_purgeexpired 	  0	    87	      0
v_hotspot_offset_mb NUMBER := '0';
space background task la ktsj_detach_task		  0	    60	     62
space background task la ktsj_smco_movetasks		  0	     2	      0
undo global data	 ktufrbs_2			  0	     3	      6
v_hotspot_modulus  PLS_INTEGER := '0';
undo global data	 ktudba: KSLBEGIN		  0	     2	      0
undo global data	 ktusmupst: KSLBEGIN		  0	     2	      2
undo global data	 ktudnx:child			  0	     1	      0

unknown latch		 kghfre 			  0	    46	     41
unknown latch		 ksqgtl3			  0	    43	     31
unknown latch		 ksqcmi: if lk mode not req	  0	    17	      4
v_sleep_modulus PLS_INTEGER := '0';
unknown latch		 ksqcmi: if lk mode request	  0	     8	      4
unknown latch		 ksqrcl 			  0	     8	     37
unknown latch		 kghupr1			  0	     1	      6
v_sleep_min NUMBER := '.1';
			  ------------------------------------------------------

Mutex Sleep Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by number of sleeps desc
v_sleep_max NUMBER := '.5';

									 Wait
Mutex Type	      Location				     Sleeps    Time (ms)
v_scan_query_pct PLS_INTEGER := '0';
--------------------- -------------------------------- ------------ ------------
Library Cache	      kgllkdl1	85				 35	      98
Library Cache	      kglhdgn2 106				  3	       0
v_obfuscate VARCHAR(5)	:= 'FALSE';
Library Cache	      kgllkc1	57				  2	       0
Library Cache	      kglpin1	4				  1	       0
Library Cache	      kglpnal2	91				  1	       0

Library Cache	      kglpndl1	95				  1	       0
			  ------------------------------------------------------



Parent Latch Statistics 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
			  ------------------------------------------------------

Child Latch Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
		  No data exists for this section of the report.
			  ------------------------------------------------------



Segments by Logical Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Logical Reads:      34,337,885
-> Captured Segments account for   32.0% of Total
v_num_tmp NUMBER := 0;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace

Owner			Name
-------------------- ----------
		     Subobject	Obj.				 Logical
v_loop_cnt PLS_INTEGER := 0;
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER73		     IOPS
v_rowcnt PLS_INTEGER := 0;
CF1				TABLE	   73675      73684	 377,632    1.10
USER57		     IOPS
CF1				TABLE	   73591      73595	 375,664    1.09
v_updates_cnt PLS_INTEGER := 0;
USER47		     IOPS
CF1				TABLE	   73538      73564	 366,112    1.07
USER52		     IOPS
CF1				TABLE	   73566      73586	 360,832    1.05
v_selects_cnt PLS_INTEGER := 0;
USER1		     IOPS
CF1				TABLE	   73299      73301	 360,672    1.05
			  ------------------------------------------------------


Segments by Physical Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Physical Reads:      20,315,043
v_random_access_queries_cnt PLS_INTEGER := 0;
-> Captured Segments account for   45.9% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_scan_queries_cnt PLS_INTEGER := 0;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical

Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER78		     IOPS
v_do_scan_query BOOLEAN :=FALSE;
CF1				TABLE	   73698      73719	 339,903    1.67
USER67		     IOPS
CF1				TABLE	   73655      73664	 338,704    1.67
v_scan_query_quota  BOOLEAN := FALSE;
USER52		     IOPS
CF1				TABLE	   73566      73586	 337,660    1.66
USER1		     IOPS
CF1				TABLE	   73299      73301	 336,961    1.66
v_scan_workload_only BOOLEAN := FALSE;
USER7		     IOPS
CF1				TABLE	   73347      73354	 336,523    1.66
			  ------------------------------------------------------

v_random_workload_only BOOLEAN := FALSE;
Segments by Physical Read Requests	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Physical Read Requests:      20,314,569
-> Captured Segments account for   45.9% of Total

-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace

Owner			Name
-------------------- ----------
		     Subobject	Obj.			       Phys Read
v_random_block PLS_INTEGER := 1;
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER78		     IOPS
v_tmp PLS_INTEGER;
CF1				TABLE	   73698      73719	 339,903    1.67
USER67		     IOPS
CF1				TABLE	   73655      73664	 338,704    1.67
USER52		     IOPS
v_now PLS_INTEGER;
CF1				TABLE	   73566      73586	 337,660    1.66
USER1		     IOPS
CF1				TABLE	   73299      73301	 336,961    1.66
USER7		     IOPS
v_brick_wall PLS_INTEGER;
CF1				TABLE	   73347      73354	 336,523    1.66
			  ------------------------------------------------------


Segments by UnOptimized Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total UnOptimized Read Requests:	 20,314,569
-> Captured Segments account for   45.9% of Total
v_begin_time PLS_INTEGER;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
v_end_time PLS_INTEGER;
-------------------- ----------
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
v_total_time PLS_INTEGER;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER78		     IOPS
CF1				TABLE	   73698      73719	 339,903    1.67
USER67		     IOPS
v_begin_cpu_tm PLS_INTEGER;
CF1				TABLE	   73655      73664	 338,704    1.67
USER52		     IOPS
CF1				TABLE	   73566      73586	 337,660    1.66
v_end_cpu_tm PLS_INTEGER;
USER1		     IOPS
CF1				TABLE	   73299      73301	 336,961    1.66
USER7		     IOPS
v_total_cpu_tm PLS_INTEGER;
CF1				TABLE	   73347      73354	 336,523    1.66
			  ------------------------------------------------------


Segments by Optimized Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_do_sleeps BOOLEAN := FALSE;

Segments by Direct Physical Reads	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
v_loop_control BOOLEAN := FALSE;
			  ------------------------------------------------------

Segments by Physical Writes		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Physical Writes:	  718,112
v_update_quota BOOLEAN := FALSE;
-> Captured Segments account for   40.0% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
v_select_only_workload BOOLEAN := FALSE;
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
v_update_only_workload BOOLEAN := FALSE;
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER73		     IOPS
v_do_update BOOLEAN := FALSE;
CF1				TABLE	   73675      73684	  10,743    1.50
USER57		     IOPS
CF1				TABLE	   73591      73595	  10,681    1.49
USER47		     IOPS
v_do_hot_schema BOOLEAN := FALSE;
CF1				TABLE	   73538      73564	  10,631    1.48
USER78		     IOPS
CF1				TABLE	   73698      73719	  10,610    1.48
USER1		     IOPS
CF1				TABLE	   73299      73301	  10,591    1.47
			  ------------------------------------------------------

Segments by Physical Write Requests	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Physical Write Requests:	  693,702
-> Captured Segments account for   41.1% of Total
v_stop_immediate BOOLEAN := FALSE;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
v_sharing_schema BOOLEAN := FALSE;
		     Subobject	Obj.			      Phys Write
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_seed VARCHAR2(128);
USER78		     IOPS
CF1				TABLE	   73698      73719	  10,539    1.52
v_home_schema_str VARCHAR2(80);
USER67		     IOPS
CF1				TABLE	   73655      73664	  10,488    1.51
v_scratch VARCHAR2(200) ;
USER1		     IOPS
CF1				TABLE	   73299      73301	  10,457    1.51

USER52		     IOPS
CF1				TABLE	   73566      73586	  10,452    1.51
USER7		     IOPS
v_cpu_pct NUMBER(6, 3);
CF1				TABLE	   73347      73354	  10,436    1.50
			  ------------------------------------------------------
v_my_serial NUMBER(16);

Segments by Direct Physical Writes	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

-> Total Direct Physical Writes:	     443
-> Captured Segments account for   37.5% of Total
BEGIN
-> When ** MISSING ** occurs, some of the object attributes may not be available


		     Tablespace
Owner			Name
-------------------- ----------
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
EXECUTE IMMEDIATE v_home_schema_str;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 51622190_0 TABLE	   73031      73031	     161   36.34
SYS		     SYSAUX

SYS_LOB0000007451C00 S_LOB_P223 LOB P	   78502      78502	       5    1.13
			  ------------------------------------------------------


Segments by Table Scans 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

IF ( v_hot_schema_modulus != 0 ) THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by DB Blocks Changes		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	v_do_hot_schema := TRUE;
-> % of Capture shows % of DB Block Changes for each top segment compared
-> with total DB Block Changes for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available
END IF;

		     Tablespace
Owner			Name
-------------------- ----------

		     Subobject	Obj.				DB Block    % of
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
IF ( v_sleep_modulus != 0 )	  THEN
USER78		     IOPS
CF1				TABLE	   73698      73719	  12,816    4.31
USER91		     IOPS
CF1				TABLE	   73762      73767	  11,424    3.84
	v_do_sleeps := TRUE;
USER73		     IOPS
CF1				TABLE	   73675      73684	  11,328    3.81
USER57		     IOPS
CF1				TABLE	   73591      73595	  11,184    3.76
END IF;
USER47		     IOPS
CF1				TABLE	   73538      73564	  10,976    3.69
			  ------------------------------------------------------



Segments by Row Lock Waits		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
IF ( v_max_loop_iterations &gt; 0 )  THEN
			  ------------------------------------------------------

Segments by ITL Waits			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

	v_loop_control := TRUE ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

END IF;
Segments by Buffer Busy Waits		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by Global Cache Buffer Busy	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
IF ( v_update_pct = 0 ) 	  THEN
			  ------------------------------------------------------


Segments by CR Blocks Received		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	v_select_only_workload := TRUE;
-> Total CR Blocks Received:		 157
-> Captured Segments account for   68.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

END IF;
		     Tablespace
Owner			Name
-------------------- ----------
								   CR

		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER9		     IOPS
IF ( v_update_pct = 100 )	  THEN
CF1				TABLE	   73356      73372	      48   30.57
USER12		     IOPS
CF1				TABLE	   73370      73392	      32   20.38
SYS		     SYSAUX
	v_update_only_workload := TRUE;
WRH$_PARAMETER	     51622190_0 TABLE	   73015      73015	       4    2.55
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 51622190_0 INDEX	   73034      73034	       3    1.91
SYS		     SYSAUX
END IF;
WRH$_PARAMETER_PK    51622190_0 INDEX	   73018      73018	       3    1.91
			  ------------------------------------------------------

Segments by Current Blocks Received	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

-> Total Current Blocks Received:	    6,498
-> Captured Segments account for   27.3% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

IF ( v_scan_query_pct = 0 ) 	THEN
		     Tablespace
Owner			Name
-------------------- ----------
								 Current
	v_random_workload_only := TRUE;
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
END IF;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER80		     IOPS
CF1				TABLE	   73710      73722	     172    2.65
USER91		     IOPS

CF1				TABLE	   73762      73767	     168    2.59
USER66		     IOPS
CF1				TABLE	   73649      73661	     163    2.51
USER78		     IOPS
IF ( v_scan_query_pct = 100 ) 	THEN
CF1				TABLE	   73698      73719	     152    2.34
USER75		     IOPS
CF1				TABLE	   73687      73694	     136    2.09
			  ------------------------------------------------------

	v_scan_workload_only := TRUE;
Segments by Global Cache Remote Grants	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Total Global Cache Remote Grants:	   1,204,560
-> Captured Segments account for   58.2% of Total
END IF;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------

								      GC
		     Subobject	Obj.				  Remote
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_seconds_to_run := v_seconds_to_run * 100 ;
USER256 	     IOPS
CF1				TABLE	   74580      74596	  35,622    2.96
USER15		     IOPS
CF1				TABLE	   73383      73415	  34,897    2.90

USER175 	     IOPS
CF1				TABLE	   74184      74204	  32,751    2.72
USER169 	     IOPS
CF1				TABLE	   74156      74162	  32,165    2.67
USER182 	     IOPS
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
CF1				TABLE	   74214      74236	  31,482    2.61
			  ------------------------------------------------------



-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------
Dictionary Cache Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used
	IF ( v_do_update != TRUE ) THEN

				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
		--
------------------------- ------------ ------ ------- ----- -------- ----------
dc_awr_control			    20	  0.0	    0	N/A	   4	      1
		-- Do a SELECT statement
dc_global_oids			 2,038	  3.7	    0	N/A	   0	    452
dc_histogram_data		   452	  0.2	    0	N/A	   0	    391
		-- Work out scan or random
dc_histogram_defs		 4,809	  0.7	    0	N/A	 182	  4,101
dc_objects			 3,153	  1.9	    0	N/A	  16	  3,063
dc_profiles			     2	  0.0	    0	N/A	   0	      1
		IF  ( v_random_workload_only = TRUE ) THEN
dc_props			   275	  0.0	    0	N/A	   0	      3
dc_rollback_segments		 1,070	  0.0	    0	N/A	   0	    509
dc_segments			   198	 38.9	    0	N/A	   6	    821
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
dc_sequences			    18	 11.1	    0	N/A	  18	      2
dc_tablespaces			   255	  0.4	    0	N/A	   0	      7
dc_users			   208	  0.0	    4	0.0	   0	    652
			v_do_scan_query := FALSE;
outstanding_alerts		     2	100.0	    0	N/A	   0	      2
			  ------------------------------------------------------
			v_scan_query_quota := TRUE ;

Dictionary Cache Stats (RAC)		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		ELSE
		  No data exists for this section of the report.
			  ------------------------------------------------------

			IF ( v_scan_workload_only = TRUE ) THEN
Library Cache Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> "Pct Misses"  should be very low

				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
			 Get	Pct	       Pin    Pct	      Invali-
				v_do_scan_query := TRUE;
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
--------------- ------------ ------ -------------- ------ ---------- --------
				v_scan_query_quota := FALSE;
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0
			ELSE
BODY			 170	0.0	       479    0.2	   1	    0
CLUSTER 		   9	0.0		 9    0.0	   0	    0
DBLINK			   4	0.0		 0    N/A	   0	    0
				IF ( v_scan_query_quota = FALSE ) THEN
EDITION 		   2	0.0		 4    0.0	   0	    0
INDEX			  14	0.0		14    0.0	   0	    0
OBJECT ID		   4  100.0		 0    N/A	   0	    0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
SCHEMA			  60	0.0		 0    N/A	   0	    0
SQL AREA		 957	6.8	 6,738,982   -0.2	  34	    6
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
SQL AREA BUILD		  67   92.5		 0    N/A	   0	    0
SQL AREA STATS		  57   64.9		57   64.9	   0	    0
TABLE/PROCEDURE 	 363   11.8	     2,993    4.2	  70	    0
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
TRIGGER 		   7   42.9		 7   42.9	   0	    0
			  ------------------------------------------------------

						v_do_scan_query := TRUE;
Library Cache Activity (RAC)		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

					ELSE
		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
						v_do_scan_query := FALSE;
ACCOUNT_STATUS		   4		0	     0		 0	     0
AUDIT POLICY		   2		2	     2		 0	     0
					END IF;
BODY			  42	      454	   454		 0	     0
CLUSTER 		   9		9	     9		 0	     0
DBLINK			   4		0	     0		 0	     0
				ELSE
EDITION 		   2		2	     2		 0	     0
INDEX			  14	       14	    14		 0	     0
SCHEMA			   5		0	     0		 0	     0
					-- Scan quota has been filled,	force drain some random access SELECTS
TABLE/PROCEDURE 	 691	    2,261	 2,261		 0	     0
TRIGGER 		   0		7	     7		 0	     0
			  ------------------------------------------------------
					v_do_scan_query := FALSE;


Memory Dynamic Components		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
				END IF;
-> Min/Max sizes since instance startup
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
			END IF;
-> ordered by Component

		 Begin Snap	Current 	Min	    Max   Oper Last Op
		END IF;
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
--------------- ----------- ----------- ----------- ----------- ------ -------

ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/

DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
		IF ( v_do_scan_query != TRUE ) THEN
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT buffer	   1,056.00    1,056.00    1,056.00    1,568.00      0 SHR/DEF
			SELECT COUNT(c2) INTO v_rowcnt
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/

PGA Target	   4,176.00    4,176.00    4,176.00    4,176.00      0 STA/
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	   3,072.00    3,072.00    3,072.00    3,072.00      0 STA/
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
Shared IO Pool	      96.00	  96.00 	.00	  96.00      0 GRO/IMM
		ELSE
java pool		.00	    .00 	.00	    .00      0 STA/
large pool	      80.00	  80.00       80.00	  80.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
shared pool	   1,792.00    1,792.00      640.00    1,792.00      0 GRO/DEF
streams pool		.00	    .00 	.00	    .00      0 STA/

unified pga poo 	.00	    .00 	.00	    .00      0 STA/
			  ------------------------------------------------------

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
Memory Resize Operations Summary	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.

			  ------------------------------------------------------

Memory Resize Ops			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN

		  No data exists for this section of the report.
			  ------------------------------------------------------
				v_scan_query_quota := TRUE;

Process Memory Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> B: Begin Snap   E: End Snap
			END IF;
-> All rows below contain absolute values (i.e. not diffed over the interval)
-> Max Alloc is Maximum PGA Allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
		END IF;
-> ordered by Begin/End snapshot, Alloc (MB) desc
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed


							     Hist
				     Avg  Std Dev     Max     Max
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
	ELSE
B Freeable     302.1	    .0	    2.0      6.0      44     N/A    151    151
  Other      1,602.0	   N/A	    4.3      6.8      92      92    374    374
		--
  PL/SQL	55.9	  53.9	     .2       .3       1       3    246    244
  SQL		46.3	  35.1	     .3       .4       1      18    176    146
		-- Do an UPDATE statement
  Total      2,006.3	  89.0	    6.8     13.5     138     113    947    915
E Freeable     237.9	    .0	    5.1     10.2      44     N/A     47     47
  Other      1,077.6	   N/A	    4.0      8.1      93      93    270    270
		--
  PL/SQL	 6.8	   5.6	     .0       .2       1       3    142    140
  SQL		 5.1	   2.9	     .1       .2       1      18     72     37

  Total      1,327.3	   8.5	    9.2     18.7     139     114    531    494
			  ------------------------------------------------------

		v_my_serial := v_my_serial + v_loop_cnt ;
SGA Memory Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

						      End Size (Bytes)

SGA regions			Begin Size (Bytes)	(if different)
------------------------------ ------------------- -------------------
Database Buffers		     1,207,959,552
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
Fixed Size				 8,954,056
Redo Buffers				41,373,696
Variable Size			    20,216,545,280
		--
			       -------------------
sum				    21,474,832,584
			  ------------------------------------------------------
		-- Increment count of UPDATES and set UPDATE quota flag if needed

SGA breakdown difference by Pool and NameDB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> ordered by Pool, Name
		--
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

Pool   Name				    Begin MB	     End MB  % Diff
		v_updates_cnt := v_updates_cnt + 1;
------ ------------------------------ -------------- -------------- -------
large  PX msg pool				64.0	       64.0    0.00

large  free memory				15.6	       15.6    0.00
shared ASH buffers				61.4	       61.4    0.00
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
shared KGLH0					46.3	       47.3    2.19
shared KJSC rnb slots				50.7	       22.8  -54.94
shared SO private sga				92.7	       92.7    0.00
			v_update_quota := TRUE;
shared SQLA				       167.6	      165.7   -1.15
shared buffer handle				23.4	       23.4    0.00
shared dbwriter coalesce buffer 		32.0	       32.0    0.00
		END IF;
shared free memory				43.6	       86.1   97.74
shared gcs resources				78.0	       78.0    0.00
	END IF ;
shared gcs resv res hash bucket 		24.0	       24.0    0.00
shared gcs shadows				42.6	       42.6    0.00
shared ges enqueues				91.6	       91.6    0.00
shared ges resource permanent			97.1	       97.1    0.00
----------------------------------------------------------------------------------------------------------------------
shared ksunfy_meta 1			       197.0	      197.0    0.00
shared object queue hash buckets		32.0	       32.0    0.00
shared procs: ksunfy				26.7	       26.7    0.00
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
shared row cache				  .0		 .0    0.00
shared session					75.4	       75.4    0.00
shared transaction				24.3	       24.3    0.00
----------------------------------------------------------------------------------------------------------------------
       buffer_cache			     1,056.0	    1,056.0    0.00
       fixed_sga				 8.5		8.5    0.00
       log_buffer				39.5	       39.5    0.00

       shared_io_pool				96.0	       96.0    0.00
			  ------------------------------------------------------


	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Replication System Resource Usage	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
		--
			  ------------------------------------------------------

Replication SGA Usage			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,

		  No data exists for this section of the report.
			  ------------------------------------------------------
		-- so reset flags and counters before continuing


GoldenGate Capture			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		--
		  No data exists for this section of the report.
			  ------------------------------------------------------

		v_update_quota := FALSE;
GoldenGate Capture Rate 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
		v_updates_cnt := 0;
			  ------------------------------------------------------

GoldenGate Apply Reader 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		v_selects_cnt := 0;

		  No data exists for this section of the report.
			  ------------------------------------------------------
	END IF;

GoldenGate Apply Coordinator		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46


		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Server 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN

		  No data exists for this section of the report.
			  ------------------------------------------------------

		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
GoldenGate Apply Coordinator Rate	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
		-- so reset flags and counters
			  ------------------------------------------------------

GoldenGate Apply Reader and Server Rate  DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		v_scan_query_quota := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------
		v_scan_queries_cnt := 0;


XStream Capture 			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
		v_random_access_queries_cnt := 0;

		  No data exists for this section of the report.
			  ------------------------------------------------------
	END IF;

XStream Capture Rate			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46


		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_loop_cnt := v_loop_cnt + 1 ;
XStream Apply Reader			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
	v_now := DBMS_UTILITY.GET_TIME();
			  ------------------------------------------------------

XStream Apply Coordinator		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46


		  No data exists for this section of the report.
			  ------------------------------------------------------

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
XStream Apply Server			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
		-- If this is a fixed-iteration count test cycle and we've hit the number of
			  ------------------------------------------------------

XStream Apply Coordinator Rate		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		-- iterations then set exit flag
		  No data exists for this section of the report.
			  ------------------------------------------------------

		v_stop_immediate := TRUE ;
XStream Apply Reader and Server Rate	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
	END IF;
			  ------------------------------------------------------


Table Statistics by DML Operations	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
END LOOP;

		  No data exists for this section of the report.
			  ------------------------------------------------------


Table Statistics by Conflict Resolutions DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

v_end_time := v_now ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_now := DBMS_UTILITY.GET_TIME();
Replication Large Transaction Statistics DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

Replication Long Running Transaction StatisticsDB/Inst: P30SDB/p30sdb2	Snaps:


		  No data exists for this section of the report.
			  ------------------------------------------------------


v_total_time := v_end_time - v_begin_time ;
Advanced Queue CPU/IO Usage		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
			  ------------------------------------------------------

Buffered Queues 			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffered Queue Subscribers		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

		  No data exists for this section of the report.
			  ------------------------------------------------------


Rule Set				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
END;</pre_sqltext></td></tr>
			  ------------------------------------------------------

Persistent Queues			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

<tr><td scope="row" class='awrnc'><a class="awr" name="5t5va0wzy46cz"></a>5t5va0wzy46cz</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_default_schema_number PLS_INTEGER := '87';
Persistent Queues Rate			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_update_pct PLS_INTEGER := '3';

Persistent Queue Subscribers		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

v_max_loop_iterations PLS_INTEGER := '0';
		  No data exists for this section of the report.
			  ------------------------------------------------------


v_seconds_to_run PLS_INTEGER := '300';
Resource Limit Stats			     DB/Inst: P30SDB/p30sdb2  Snap: 46
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
v_scale PLS_INTEGER := '32768';
   exceeds 2*Initial Allocation are shown
-> Ordered by Resource Name

v_work_unit PLS_INTEGER := '4' ;
				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
------------------------------ ------------ ------------ ---------- ----------
v_redo_stress  VARCHAR2(12) := 'LITE';
ges_cache_ress			     21,572	  25,701	  0  UNLIMITED
			  ------------------------------------------------------

v_hot_schema_modulus PLS_INTEGER := '0';
Shared Servers Activity 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Values represent averages for all samples

v_do_hotspot   VARCHAR(7) := 'FALSE';
   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active
 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
v_hotspot_mb  NUMBER := '10';
	   0		0	     1		  0	       1	    0
			  ------------------------------------------------------

Shared Servers Rates			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_hotspot_offset_mb NUMBER := '0';

  Common     Disp			 Common       Disp     Server
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
v_hotspot_modulus  PLS_INTEGER := '0';
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0

			  ------------------------------------------------------

Shared Servers Utilization		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_sleep_modulus PLS_INTEGER := '0';
-> Statistics are combined for all servers
-> Incoming and Outgoing Net % are included in %Busy

  Total Server			  Incoming  Outgoing
v_sleep_min NUMBER := '.1';
      Time (s)	  %Busy    %Idle     Net %     Net %
-------------- -------- -------- --------- ---------
	   330	    0.0    100.0       0.0	 0.0
v_sleep_max NUMBER := '.5';
			  ------------------------------------------------------

Shared Servers Common Queue		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

v_scan_query_pct PLS_INTEGER := '0';
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_obfuscate VARCHAR(5)	:= 'FALSE';
Shared Servers Dispatchers		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Ordered by %Busy, descending
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue

-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
     "(R)" - dispatcher re-started between begin and end snapshots


	      Avg Total Disp			    Total Total Queue  Avg Queue
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 330	  0.0	 100.0		0	    0
			  ------------------------------------------------------

v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

Modified Parameters			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> This section shows all the modified initialization parameters that

were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
the snapshot interval
v_num_tmp NUMBER := 0;

								End value
Parameter Name		      Begin value			(if different)

----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
audit_file_dest 	      /u01/app/oracle/admin/p30sdb/adum
audit_trail		      DB
v_loop_cnt PLS_INTEGER := 0;
cluster_database	      TRUE
compatible		      19.0.0
v_rowcnt PLS_INTEGER := 0;
control_files		      +P30S/P30SDB/CONTROLFILE/current.
db_block_size		      8192
db_create_file_dest	      +P30S
v_updates_cnt PLS_INTEGER := 0;
db_domain		      example.com
db_name 		      p30sdb
db_recovery_file_dest	      +FRA
db_recovery_file_dest_size    805306368000
v_selects_cnt PLS_INTEGER := 0;
diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p30sdbXDB
instance_number 	      2

listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
v_random_access_queries_cnt PLS_INTEGER := 0;
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
v_scan_queries_cnt PLS_INTEGER := 0;
pga_aggregate_target	      4376756224
processes		      5120
remote_listener 	       mcracpoc-scan.example.com:1521

remote_login_passwordfile     EXCLUSIVE
sga_max_size		      21474836480
sga_target		      3221225472
thread			      2
v_do_scan_query BOOLEAN :=FALSE;
undo_tablespace 	      UNDOTBS2
			  ------------------------------------------------------


v_scan_query_quota  BOOLEAN := FALSE;
Modified Multi-Valued Parameters	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
v_scan_workload_only BOOLEAN := FALSE;
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot

								End value
Parameter Name		      Begin value			(if different)
v_random_workload_only BOOLEAN := FALSE;
----------------------------- --------------------------------- --------------
control_files		      +FRA/P30SDB/CONTROLFILE/current.2
			      +P30S/P30SDB/CONTROLFILE/current.

			  ------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
v_random_block PLS_INTEGER := 1;
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
v_tmp PLS_INTEGER;
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
v_now PLS_INTEGER;
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
v_brick_wall PLS_INTEGER;
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     2469	   77.95
db file sequential read 	 44.39 TABLE ACCESS - BY INDEX ROWID BAT   42.43

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 27.62 INDEX - RANGE SCAN		   14.63
v_begin_time PLS_INTEGER;


CPU + Wait for CPU		  5.85 TABLE ACCESS - BY INDEX ROWID BAT    3.52

v_end_time PLS_INTEGER;
	  35dumc2tpr9dv 	   203653710		      342	   11.17
gc current grant 2-way		  4.78 UPDATE				    4.78
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
v_total_time PLS_INTEGER;


gc current grant read-mostly i	  2.36 UPDATE				    2.36


v_begin_cpu_tm PLS_INTEGER;
db file sequential read 	  1.64 UPDATE				    1.57

			  ------------------------------------------------------

v_end_cpu_tm PLS_INTEGER;
Top SQL with Top Row Sources		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
v_total_cpu_tm PLS_INTEGER;
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.

-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

v_do_sleeps BOOLEAN := FALSE;
		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
v_loop_control BOOLEAN := FALSE;
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
v_update_quota BOOLEAN := FALSE;
	  bhdvtsvjhgvrh 	  1497866750		     2469	   77.95
TABLE ACCESS - BY INDEX ROWID BATCHED	   59.01 db file sequential read   42.43
v_select_only_workload BOOLEAN := FALSE;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			   17.14 gc cr grant busy	   14.63

v_update_only_workload BOOLEAN := FALSE;

SELECT STATEMENT			    1.57 CPU + Wait for CPU	    1.57

	  35dumc2tpr9dv 	   203653710		      342	   11.17
v_do_update BOOLEAN := FALSE;
UPDATE					   10.00 gc current grant 2-way     4.78
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

v_do_hot_schema BOOLEAN := FALSE;
			  ------------------------------------------------------

Top Sessions				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

v_stop_immediate BOOLEAN := FALSE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
v_sharing_schema BOOLEAN := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_seed VARCHAR2(128);
Top PL/SQL Procedures			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
v_home_schema_str VARCHAR2(80);
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
v_scratch VARCHAR2(200) ;
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram


PL/SQL Entry Subprogram 					  % Activity
v_cpu_pct NUMBER(6, 3);
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
v_my_serial NUMBER(16);
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       11.80

   SQL								       11.73
			  ------------------------------------------------------

BEGIN
Top Events				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Top Events by DB Time

-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
----------------------------------- --------------- ---------------
	   Avg Active
EXECUTE IMMEDIATE v_home_schema_str;
% Activity   Sessions
---------- ----------

db file sequential read 	    User I/O	    FOREGROUND
     46.02	43.80

gc cr grant busy		    Cluster	    FOREGROUND
     27.96	26.62
CPU + Wait for CPU		    CPU 	    FOREGROUND
IF ( v_hot_schema_modulus != 0 ) THEN
      8.30	 7.90
db file parallel write		    System I/O	    BACKGROUND
	v_do_hot_schema := TRUE;
      5.54	 5.27
gc current grant 2-way		    Cluster	    FOREGROUND
      4.81	 4.58
END IF;
			  ------------------------------------------------------


Top Event P1/P2/P3 Values		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
IF ( v_sleep_modulus != 0 )	  THEN
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

	v_do_sleeps := TRUE;
Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
END IF;
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------

db file sequential read 	 46.02		     "5","72049","1"	   0.03
file#			   block#		      blocks
IF ( v_max_loop_iterations &gt; 0 )  THEN

db file parallel write		  5.54		"1","0","2147483647"	   2.42
	v_loop_control := TRUE ;
requests		   interrupt		      timeout

						"2","0","2147483647"	   1.26
END IF;


			  ------------------------------------------------------


Top DB Objects				 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

IF ( v_update_pct = 0 ) 	  THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
Activity Over Time			 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
				--
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
				-- We are doing updates during this run and quota has not been met yet
-> 'Slot Count' shows the number of ASH samples in that slot
				-- We still vacillate until update quota has been met
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot

-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
				IF ( MOD(v_random_block,  2) = 0 ) THEN
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
					v_do_update := TRUE;
09:17:49   (2.2 min)	1,591 db file sequential read		  769	24.19
			      gc cr grant busy			  415	13.05
			      CPU + Wait for CPU		  146	 4.59
				ELSE
09:20:00   (3.4 min)	1,588 db file sequential read		  694	21.83
			      gc cr grant busy			  474	14.91
					v_do_update := FALSE;
			      CPU + Wait for CPU		  158	 4.97
			  ------------------------------------------------------

				END IF;


	  ADDM Report for Task 'ADDM:1451622190_2_46'
			ELSE
	  -------------------------------------------

Analysis Period
				-- UPDATE quota has been filled,  force drain some SELECTs
---------------
AWR snapshot range from 45 to 46.
				v_do_update := FALSE;
Time period starts at 17-FEB-20 09.17.49 AM
Time period ends at 17-FEB-20 09.23.24 AM

			END IF;
Analysis Target
---------------
		END IF;
Database 'P30SDB' with DB ID 1451622190.
Database version 19.0.0.0.0.
	END IF;
ADDM performed an analysis of instance p30sdb2, numbered 2 and hosted at
mcracpoc2.example.com.


Activity During the Analysis Period
-----------------------------------
----------------------------------------------------------------------------------------------------------------------
Total database time was 27981 seconds.
The average number of active sessions was 83.52.

Summary of Findings
-------------------
-- The type of SQL is now determined...execute it in the following section
   Description			 Active Sessions      Recommendations
				 Percent of Activity
   ----------------------------  -------------------  ---------------
----------------------------------------------------------------------------------------------------------------------
1  Interconnect Latency 	 83.52 | 100	      1
2  Top SQL Statements		 81.29 | 97.33	      2

3  "User I/O" wait Class	 42.45 | 50.83	      0
4  Global Cache Messaging	 30.09 | 36.03	      1
	IF ( v_do_update != TRUE ) THEN
5  Buffer Busy - Hot Objects	 24.68 | 29.55	      0
6  Undersized SGA		 2.24 | 2.68	      1
7  Unusual "Cluster" Wait Event  1.77 | 2.12	      3
		--


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		-- Do a SELECT statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


		-- Work out scan or random
	  Findings and Recommendations
	  ----------------------------

		IF  ( v_random_workload_only = TRUE ) THEN
Finding 1: Interconnect Latency
Impact is 83.77 active sessions, 100% of total activity.
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
			v_do_scan_query := FALSE;
The instance was consuming 27527 kilo bits per second of interconnect
bandwidth.
			v_scan_query_quota := TRUE ;
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 94% for database lock management.
		ELSE
The average latency for 8K interconnect messages was 5715 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.26.102 and source "6A?".
			IF ( v_scan_workload_only = TRUE ) THEN

   Recommendation 1: Host Configuration
   Estimated benefit is 83.52 active sessions, 100% of total activity.
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
   -------------------------------------------------------------------
   Action
				v_do_scan_query := TRUE;
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
				v_scan_query_quota := FALSE;
      dedicated network.
   Action
			ELSE
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
				IF ( v_scan_query_quota = FALSE ) THEN
      receive buffers are large enough to store an entire multiblock read. The
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
      instance.
      Impact is 30.09 active sessions, 36.03% of total activity.
						v_do_scan_query := TRUE;
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 31.9 active sessions, 38.19% of total activity.

					ELSE

Finding 2: Top SQL Statements
Impact is 81.53 active sessions, 97.33% of total activity.
						v_do_scan_query := FALSE;
----------------------------------------------------------
SQL statements consuming significant database time were found. These
					END IF;
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
				ELSE
   Estimated benefit is 71.09 active sessions, 85.12% of total activity.
   ---------------------------------------------------------------------
					-- Scan quota has been filled,	force drain some random access SELECTS
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
					v_do_scan_query := FALSE;
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
				END IF;
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
			END IF;
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
		END IF;
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL

      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale

      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 6253448 times and
      had an average elapsed time of 0.0035 seconds.

		IF ( v_do_scan_query != TRUE ) THEN
   Recommendation 2: SQL Tuning
   Estimated benefit is 9.54 active sessions, 11.42% of total activity.
			SELECT COUNT(c2) INTO v_rowcnt
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
			FROM cf1
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )

   Rationale
      The SQL spent 93% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
		ELSE
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 193423 times and
      had an average elapsed time of 0.016 seconds.



Finding 3: "User I/O" wait Class
Impact is 42.58 active sessions, 50.83% of total activity.
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.

Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN

   No recommendations are available.

				v_scan_query_quota := TRUE;

Finding 4: Global Cache Messaging
Impact is 30.18 active sessions, 36.03% of total activity.
			END IF;
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
		END IF;
instance.

   Recommendation 1: Application Analysis

   Estimated benefit is 30.09 active sessions, 36.03% of total activity.
   ---------------------------------------------------------------------
   Action
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
	ELSE
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 83% of Cluster wait
      during the analysis period.

		--
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
		-- Do an UPDATE statement
      Impact is 31.9 active sessions, 38.19% of total activity.


		--
Finding 5: Buffer Busy - Hot Objects
Impact is 24.75 active sessions, 29.55% of total activity.

----------------------------------------------------------
Read and write contention on database blocks was consuming significant
		v_my_serial := v_my_serial + v_loop_cnt ;
database time.

   No recommendations are available.


   Symptoms That Led to the Finding:
   ---------------------------------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 24.68 active sessions, 29.55% of total activity.
		--
	 Inter-instance messaging was consuming significant database time on
	 this instance.
		-- Increment count of UPDATES and set UPDATE quota flag if needed
	 Impact is 30.09 active sessions, 36.03% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 31.9 active sessions, 38.19% of total activity.
		--


Finding 6: Undersized SGA
		v_updates_cnt := v_updates_cnt + 1;
Impact is 2.25 active sessions, 2.68% of total activity.
--------------------------------------------------------

The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter "sga_target" was "3072 M" during the analysis period.

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
   Recommendation 1: Database Configuration
   Estimated benefit is 2.24 active sessions, 2.68% of total activity.
   -------------------------------------------------------------------
			v_update_quota := TRUE;
   Action
      Increase the size of the SGA by setting the parameter "sga_target" to
		END IF;
      3840 M.

   Symptoms That Led to the Finding:
	END IF ;
   ---------------------------------
      Wait class "User I/O" was consuming significant database time.
      Impact is 42.45 active sessions, 50.83% of total activity.
----------------------------------------------------------------------------------------------------------------------


Finding 7: Unusual "Cluster" Wait Event
Impact is 1.78 active sessions, 2.12% of total activity.
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
--------------------------------------------------------
Wait event "gc current grant read-mostly invalidation" in wait class "Cluster"
was consuming significant database time.
----------------------------------------------------------------------------------------------------------------------

   Recommendation 1: Application Analysis

   Estimated benefit is 1.77 active sessions, 2.12% of total activity.
   -------------------------------------------------------------------
   Action
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits. Refer to Oracle's "Database Reference" for the
		--
      description of this wait event.

   Recommendation 2: Application Analysis
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
   Estimated benefit is 1.77 active sessions, 2.12% of total activity.
   -------------------------------------------------------------------
   Action
		-- so reset flags and counters before continuing
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Module "SQL*Plus".

		--
   Recommendation 3: Application Analysis
   Estimated benefit is 1.77 active sessions, 2.12% of total activity.
   -------------------------------------------------------------------
		v_update_quota := FALSE;
   Action
      Investigate the cause for high "gc current grant read-mostly
		v_updates_cnt := 0;
      invalidation" waits in Service "p30sdb.example.com".

   Symptoms That Led to the Finding:
		v_selects_cnt := 0;
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 31.9 active sessions, 38.19% of total activity.


	END IF;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Additional Information
	  ----------------------

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
		-- so reset flags and counters
Wait class "Configuration" was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
		v_scan_query_quota := FALSE;
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.
		v_scan_queries_cnt := 0;

RAC Statistics  DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

		v_random_access_queries_cnt := 0;
				Begin	End
				----- -----
	   Number of Instances:     2	  2
	END IF;
	       Number of LMS's:     4	  4

      Number of realtime LMS's:     4	  4  (0 priority changes)


Global Cache Load Profile
	v_loop_cnt := v_loop_cnt + 1 ;
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
				      ---------------	    ---------------
	v_now := DBMS_UTILITY.GET_TIME();
  Global Cache blocks received: 		19.89		       0.03
    Global Cache blocks served: 		13.11		       0.02
     GCS/GES messages received: 	    11,582.82		      19.14

	 GCS/GES messages sent: 	    12,127.98		      20.04
	    DBWR Fusion writes: 		 0.07		       0.00
 Estd Interconnect traffic (KB) 	     4,894.98
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN


Global Cache Efficiency Percentages (Target local+remote 100%)
		-- If this is a fixed-iteration count test cycle and we've hit the number of
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:   40.82
Buffer access - remote cache %:    0.02
		-- iterations then set exit flag
Buffer access - 	disk %:   59.17
Global Cache Locality	     %:   94.07


		v_stop_immediate := TRUE ;
Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	END IF;
	  Avg global cache cr block receive time (us):		7,324.8
     Avg global cache current block receive time (us):		7,129.9
			       Avg LMS process busy %:		   22.5
END LOOP;

	    Avg global cache cr block build time (us):		    0.0
      Global cache log flushes for cr blocks served %:		    6.4

	    Avg global cache cr block flush time (us):	       58,260.9

	 Avg global cache current block pin time (us):		    0.0
v_end_time := v_now ;
 Global cache log flushes for current blocks served %:		    1.4
       Avg global cache current block flush time (us):	       32,195.1
v_now := DBMS_UTILITY.GET_TIME();

		     Avg global enqueue get time (us):		1,425.2

v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Avg message sent queue time (us):		   91.9

	     Avg message sent queue time on ksxp (us):		6,039.7
	  Avg message received kernel queue time (us):		  213.9
v_total_time := v_end_time - v_begin_time ;
		 Avg message received queue time (us):		   29.7
		    Avg GCS message process time (us):		   30.9
		    Avg GES message process time (us):		   24.0

v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
			    % of direct sent messages:		  35.45
			  % of indirect sent messages:		  62.77
			% of flow controlled messages:		   1.78
	  -------------------------------------------------------------

Cluster Interconnect
-> if Public/Source at End snap is different a '*' is displayed
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End
	     --------------------------------------------------   -------
Interface    IP Address      Pub Source 			  Pub Src
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.26.102  N

Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
Global Enqueue S-optim Broadcasts		26	    0.1 	 0.0
Global Enqueue S-optim S-lock get	    13,824	   41.3 	 0.1
Global Enqueue S-optim anti-locks		58	    0.2 	 0.0
KA local message waits				 0	    0.0 	 0.0
KA local messages received			 0	    0.0 	 0.0
KA messages received actual			 0	    0.0 	 0.0
KA messages received logical			 0	    0.0 	 0.0
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0
Pseudo reconfiguration count			 0	    0.0 	 0.0
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	       711	    2.1 	 0.0
acks for commit broadcast(logical	     6,146	   18.4 	 0.0
broadcast msgs on commit(actual)	     6,884	   20.6 	 0.0
broadcast msgs on commit(logical)	    14,337	   42.8 	 0.1
broadcast msgs on commit(wasted)	     5,494	   16.4 	 0.0
dynamically allocated gcs resourc		 0	    0.0 	 0.0
dynamically allocated gcs shadows		 0	    0.0 	 0.0
flow control messages received			 5	    0.0 	 0.0
flow control messages sent			 5	    0.0 	 0.0
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			       960	    2.9 	 0.0
gcs ast to fg				     7,856	   23.5 	 0.0
gcs ast xid					 1	    0.0 	 0.0
gcs bidless ast to lms				10	    0.0 	 0.0
gcs blocked converts			   176,885	  528.6 	 0.9
gcs blocked cr converts 		       225	    0.7 	 0.0
gcs compatible basts				 4	    0.0 	 0.0
gcs compatible cr basts (global)		27	    0.1 	 0.0
gcs compatible cr basts (local) 	     1,850	    5.5 	 0.0
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 0	    0.0 	 0.0
gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			   155,466	  464.6 	 0.8
gcs dbwr write request msgs			23	    0.1 	 0.0
gcs error msgs					 2	    0.0 	 0.0
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 0	    0.0 	 0.0
gcs force cr grant				 0	    0.0 	 0.0
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				     7,866	   23.5 	 0.0
gcs grant request in partial open		 0	    0.0 	 0.0
gcs immediate (compatible) conver	     3,100	    9.3 	 0.0
gcs immediate (null) converts		    18,587	   55.5 	 0.1
gcs immediate cr (compatible) con	   276,485	  826.3 	 1.4
gcs immediate cr (null) converts	 1,248,525	3,731.2 	 6.2
gcs lms flush pi msgs				 0	    0.0 	 0.0
gcs lms write request msgs		       142	    0.4 	 0.0
gcs msgs process time(ms)		   119,118	  356.0 	 0.6
gcs msgs received			 3,856,415     11,524.8 	19.0
gcs new served by master		       330	    1.0 	 0.0
gcs out-of-order msgs			     2,471	    7.4 	 0.0
gcs pings refused			       270	    0.8 	 0.0
gcs pkey conflicts retry			 0	    0.0 	 0.0
gcs queued converts				 0	    0.0 	 0.0
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
gcs reader bypass grant fg ast			 0	    0.0 	 0.0
gcs reader bypass grant immediate		57	    0.2 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
gcs refuse xid					 2	    0.0 	 0.0
gcs refuse xid to fg				 2	    0.0 	 0.0
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
gcs side channel msgs actual		     2,060	    6.2 	 0.0
gcs side channel msgs logical		    20,355	   60.8 	 0.1
gcs stale cr					14	    0.0 	 0.0
gcs undo cr				     1,144	    3.4 	 0.0
gcs write notification msgs			 0	    0.0 	 0.0
gcs writes refused				 0	    0.0 	 0.0
ges msgs process time(ms)		       142	    0.4 	 0.0
ges msgs received			     5,919	   17.7 	 0.0
ges remote lock allocation			16	    0.0 	 0.0
global posts dropped				 0	    0.0 	 0.0
global posts queue time 			 0	    0.0 	 0.0
global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
implicit batch messages received	    99,849	  298.4 	 0.5
implicit batch messages sent		   138,273	  413.2 	 0.7
lmd msg send time(ms)				 0	    0.0 	 0.0
lms(s) msg send time(ms)			 0	    0.0 	 0.0
messages flow controlled		    53,782	  160.7 	 0.3
messages queue sent actual		 1,499,141	4,480.1 	 7.4
messages queue sent logical		   603,737	1,804.3 	 3.0
messages received actual		 2,463,622	7,362.5 	12.2
messages received logical		 3,862,334     11,542.5 	19.1
messages sent directly			 1,068,471	3,193.1 	 5.3
messages sent indirectly		 1,891,856	5,653.8 	 9.3
messages sent not implicit batche	   141,034	  421.5 	 0.7
messages sent pbatched			 2,456,770	7,342.0 	12.1
msgs causing lmd to send msgs			 0	    0.0 	 0.0
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
msgs received kernel queue time (  826,111,370,052 2.468812E+09  4,079,381.0
msgs received queue time (ms)		   114,661	  342.7 	 0.6
msgs received queued			 3,862,333     11,542.5 	19.1
msgs sent queue time (ms)		   151,359	  452.3 	 0.7
msgs sent queue time on ksxp (ms)	15,526,439     46,400.4 	76.7
msgs sent queued			 1,647,628	4,923.9 	 8.1
msgs sent queued on ksxp		 2,570,738	7,682.6 	12.7
number of broadcasted resources 		 0	    0.0 	 0.0
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0
number of received ODPS messages		 0	    0.0 	 0.0
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
number of sent RBA messages			 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
process batch messages received 	   909,684	2,718.6 	 4.5
process batch messages sent		 1,129,443	3,375.3 	 5.6
receiver cycle time			   569,555	1,702.1 	 2.8
receiver loop count			 2,656,482	7,938.8 	13.1
			  ------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46

Statistic				    Total
------------------------------ ------------------
CR Block Requests			      214
CURRENT Block Requests			    1,250
Data Block Requests			      214
Undo Block Requests				1
TX Block Requests			    1,225
Current Results 			    1,451
Private results 				1
Zero Results					0
Disk Read Results			       11
Fail Results					1
Fairness Down Converts			      149
Light Works					9
Flushes 				       92
Builds					      212
Errors						0
			  ------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations

Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		      2    50.00    50.00
Flushes 	     41 		     87.80    12.20
			  ------------------------------------------------------

Global Cache Transfer Statistics	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc

			       CR			  Current
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   1 data block       144   98.6    1.4     .0	  6,463   33.4	 65.9	  .7
   1 Others		5  100.0     .0     .0	     16   25.0	 75.0	  .0
   1 undo header       10   60.0   40.0     .0	      1     .0	100.0	  .0
			  ------------------------------------------------------

Global Cache Transfer Times (us)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
-> Immed, Busy, Congst -  Average times in us
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
	      --------------------------- ---------------------------
Inst Block
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   1 data blo	3175   1397 1.E+05    N/A   6909   6471   6900	29825
   1 others	 342	342    N/A    N/A    940   1486    758	  N/A
   1 undo hea  71152   1517 2.E+05    N/A    709    N/A    709	  N/A
   1 undo blo	 N/A	N/A    N/A    N/A    N/A    N/A    N/A	  N/A
			  ------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc

				   CR			    Current
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
---- -------- ------- ----------- ------- ------- ----------- ------- -------
   1 data blo		      142   100.0     0.0	2,159	100.0	  0.0
   1 others			5   100.0     0.0	    4	100.0	  0.0
   1 undo hea			6   100.0     0.0	  N/A	  N/A	  N/A
   1 undo blo		      N/A     N/A     N/A	  N/A	  N/A	  N/A
			  ------------------------------------------------------

Global Cache Times (Immediate)		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
-> ordered by CR + Current Blocks Received desc

		       CR Avg Time (us)   Current Avg Time (us)
		     -------------------- --------------------
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
---- -------- ------ ------ ------ ------ ------ ------ ------
   1 data blo	       1397   1397    N/A   6471   6471    N/A
   1 others		342    342    N/A   1486   1486    N/A
   1 undo hea	       1517   1517    N/A    N/A    N/A    N/A
   1 undo blo		N/A    N/A    N/A    N/A    N/A    N/A
			  ------------------------------------------------------

Interconnect Ping Latency Statistics	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Ping latency of the roundtrip of a message from this instance to -> target in
-> The target instance is identified by an instance number.
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
-> Note that latency of a message from the instance to itself is used as
-> control, since message latency can include wait for CPU

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
--------- -------- ------ ----------- -------- ------ -----------
	1	30   1097	  .83	    33	 8953	    43.25
	2	31    401	  .20	    33	  367	      .15
			  ------------------------------------------------------

Interconnect Throughput by Client	 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Throughput of interconnect usage by major consumers
-> All throughput numbers are megabytes per second

v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
---------------- ----------- -----------
Global Cache		 .05	     .08
Parallel Query		 .00	     .00

DB Locks		3.16	    3.07
DB Streams		 N/A	     N/A
Other			 .02	     .02
			  ------------------------------------------------------

END;</pre_sqltext></td></tr>
Interconnect Device Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Throughput and errors of interconnect devices (at OS level)
<tr><td scope="row" class='awrc'><a class="awr" name="61tn3mam0vq0b"></a>61tn3mam0vq0b</td><td class='awrc'><pre_sqltext class="awr"> SELECT source,	     (case when time_secs &lt; 1 then 1 else time_secs end) as time_secs,	  operation  FROM   ( SELECT  1  as source,		     trunc((sysdate - cast(ll.log_date as date)) * 86400)		    as time_secs,		   decode(ll.operation, 			'OPEN',   0			   ,   1 ) as operation,		  ll.log_id as log_id	       FROM  DBA_SCHEDULER_WINDOW_LOG ll ,		    ( SELECT max(l.log_id) as max_log_id		   FROM  DBA_SCHEDULER_WINDOW_LOG l ,			       DBA_SCHEDULER_WINGROUP_MEMBERS m 		  WHERE  l.window_name = m.window_name			   AND	m.window_group_name = 'MAINTENANCE_WINDOW_GROUP'		     AND  l.operation in ('OPEN',  'CLOSE')			AND  CAST(l.log_date AS DATE) &lt; ( SELECT cast(min(end_interval_time) as date) as btime FROM	WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.snap_id = :bid						       )	       ) max_log	  WHERE  ll.log_id = max_log.max_log_id 	 UNION ALL	    SELECT  2  as source,		    trunc((sysdate - cast(l.log_date as date)) * 86400) 		  as time_secs, 		 decode(l.operation,			     'OPEN',   0			,   1 ) as operation,		       l.log_id as log_id	   FROM  DBA_SCHEDULER_WINDOW_LOG l ,		      DBA_SCHEDULER_WINGROUP_MEMBERS m		WHERE  l.window_name = m.window_name		AND  m.window_group_name = 'MAINTENANCE_WINDOW_GROUP'		 AND  l.operation in ('OPEN',  'CLOSE') 	   AND	CAST(l.log_date AS DATE) &lt;= ( SELECT cast(max(end_interval_time) as date) as etime FROM  WRM$_SNAPSHOT esi  WHERE  esi.dbid = :dbid	AND esi.snap_id = :eid						   )	       AND  CAST(l.log_date AS DATE) &gt;= ( SELECT cast(min(end_interval_time) as date) as btime FROM	WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.snap_id = :bid					       )	 UNION ALL	    SELECT  0  as source,		   trunc((sysdate - et.etime) * 86400) as time_secs,		       3  as operation, 		 0 as log_id	      FROM (  SELECT cast(max(end_interval_time) as date) as etime FROM  WRM$_SNAPSHOT esi  WHERE  esi.dbid = :dbid  AND esi.snap_id = :eid		  ) et		UNION ALL	   SELECT  0  as source,		  trunc((sysdate - bt.btime) * 86400) as time_secs,		      2  as operation,			0 as log_id	     FROM (  SELECT cast(min(end_interval_time) as date) as btime FROM	WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.snap_id = :bid		 ) bt	     )	WHERE time_secs &gt;= 0  ORDER BY source ASC,  time_secs DESC,	log_id ASC </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6kmjaydb8dsqs"></a>6kmjaydb8dsqs</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '114';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';
-> All throughput numbers are megabytes per second


Device Name	IP Address	 Public Source

--------------- ---------------- ------ -------------------------------
				  Send	   Send
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
----------- -------- -------- -------- --------
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
			       Receive	Receive
    Receive  Receive  Receive	Buffer	  Frame

 Mbytes/sec   Errors  Dropped  Overrun	 Errors
----------- -------- -------- -------- --------
fg-priv:1	169.254.26.102	 NO
v_num_tmp NUMBER := 0;
	.00	   0	    0	     0	      0
	.00	   0	    0	     0	      0
			  ------------------------------------------------------


Dynamic Remastering Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 45-46
-> Times are in seconds
v_loop_cnt PLS_INTEGER := 0;
-> Affinity objects - Affinity objects mastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot

v_rowcnt PLS_INTEGER := 0;
							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
-------------------------------- ------------ ------------- -------- --------
v_updates_cnt PLS_INTEGER := 0;
remaster ops				    1	       1.00
remastered objects			  100	     100.00
replayed locks received 		    0	       0.00
v_selects_cnt PLS_INTEGER := 0;
replayed locks sent			    0	       0.00
resources cleaned			    0	       0.00

remaster time (s)			  0.9	       0.85
freeze time (s) 			  0.1	       0.09
cleanup time (s)			  0.0	       0.01
v_random_access_queries_cnt PLS_INTEGER := 0;
replay time (s) 			  0.2	       0.19
fixwrite time (s)			  0.0	       0.02
sync time (s)				  0.5	       0.52
v_scan_queries_cnt PLS_INTEGER := 0;
affinity objects					N/A	  63	   63
read-mostly objects					N/A	  65	   65
affinity objects (other inst)				N/A	 235	  135

read-mostly objects (persistent)			N/A	   0	    0
			  ------------------------------------------------------

v_do_scan_query BOOLEAN :=FALSE;
End of Report
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;

Report written to awr.txt

		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
SQL> SQL> 
SQL> SQL> 			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
SQL> 				v_scan_query_quota := TRUE;
SQL> SQL> 			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;




END;</pre_sqltext></td></tr>

<tr><td scope="row" class='awrc'><a class="awr" name="6n2qqv1brfhpp"></a>6n2qqv1brfhpp</td><td class='awrc'><pre_sqltext class="awr">select ind.type#,	ind.property,	 base_obj.obj#,  base_owner.name,   base_obj.name  from sys.ind$ ind,  sys.user$ base_owner,  sys.obj$	base_obj  where ind.obj#	  = :oid    and ind.dataobj#	  = :doid    and ind.bo#	 = base_obj.obj#    and base_obj.owner# = base_owner.user#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6s1ku6bs9a8xb"></a>6s1ku6bs9a8xb</td><td class='awrnc'><pre_sqltext class="awr"> WITH ash as  (SELECT ash.event_id,   sum(decode(ash.session_type,  1,  1,  0)) as cnt_fg,   count(*) as cnt_total  FROM  WRH$_ACTIVE_SESSION_HISTORY ash  WHERE  ash.dbid = :dbid  AND ash.instance_number = :inst  AND ash.snap_id &gt; :bid AND ash.snap_id &lt;= :eid  AND  ash.wait_time = 0  GROUP BY ash.event_id  ),   evts as  (SELECT event_id,  sum(w_cnt) as w_cnt,	sum(to_cnt) as to_cnt,	 sum(w_time) as w_time	, sum(w_cnt_fg) as w_cnt_fg,  sum(to_cnt_fg) as to_cnt_fg,   sum(w_time_fg) as w_time_fg  FROM (SELECT es.event_id as event_id,   es.total_waits - nvl(bs.total_waits, 0) as w_cnt,   es.TOTAL_TIMEOUTS - nvl(bs.TOTAL_TIMEOUTS, 0) as to_cnt,	 es.TIME_WAITED_MICRO - nvl(bs.TIME_WAITED_MICRO, 0)  as w_time  , es.total_waits_fg - nvl(bs.total_waits_fg, 0)  as w_cnt_fg,	 es.TOTAL_TIMEOUTS_FG - nvl(bs.TOTAL_TIMEOUTS_FG, 0)  as to_cnt_fg,   es.TIME_WAITED_MICRO_FG - nvl(bs.TIME_WAITED_MICRO_FG, 0)  as w_time_fg  FROM  WRH$_SYSTEM_EVENT es ,  WRH$_SYSTEM_EVENT bs  WHERE  es.dbid = :dbid  AND es.instance_number = :inst  AND es.snap_id = :eid  AND bs.dbid(+) = :dbid AND bs.instance_number(+) = es.instance_number AND bs.snap_id(+) = :bid  AND  es.instance_number = bs.instance_number(+)  AND	es.event_id = bs.event_id(+)  UNION ALL  SELECT x.event_hash as event_id,   0 as w_cnt,  0 as to_cnt,  0 as w_time  , 0 as w_cnt_fg,  0 as to_cnt_fg,  0 as w_time_fg  FROM  X$KEHEVTMAP x  )  GROUP BY event_id  ),   awr_names as  (SELECT e.event_id,  max(e.event_name) as event_name,	     max(e.wait_class_id) as wait_class_id,	      max(e.wait_class) as wait_class,		 max(e.parameter1) as parameter1,	    max(e.parameter2) as parameter2,	       max(e.parameter3) as parameter3	FROM  WRH$_EVENT_NAME e  WHERE e.dbid = :dbid GROUP BY e.event_id  ),	named_events as  (SELECT names.event_id as event_id,   names.event_name as event_name,	 evts.w_cnt as w_cnt,	evts.to_cnt as to_cnt,	 evts.w_time as w_time,   evts.w_cnt_fg as w_cnt_fg,   evts.to_cnt_fg as to_cnt_fg,   evts.w_time_fg as w_time_fg,   names.wait_class_id as wait_class_id,   names.parameter1 as p1,   names.parameter2 as p2,	 names.parameter3 as p3  FROM	evts,  awr_names names	WHERE  evts.event_id = names.event_id  AND  names.wait_class_id &lt;&gt; 2723168908  ),   data as  (SELECT e.event_id as event_id,   e.event_name as event_name,   e.wait_class_id as wait_class_id,   e.p1 as p1,   e.p2 as p2,   e.p3 as p3,	 e.w_cnt as total_w_cnt,   e.to_cnt as total_to_cnt,   e.w_time as total_w_time,   e.w_cnt_fg as fg_w_cnt,   e.to_cnt_fg as fg_to_cnt,	 e.w_time_fg as fg_w_time,   nvl(a.cnt_total, 0) as total_ash_cnt,   nvl(a.cnt_fg, 0) as fg_ash_cnt  FROM   named_events e,  ash a  WHERE  e.event_id  = a.event_id(+)	),   final_query as  (SELECT d.event_name,   d.event_id,   d.p1 as p1,	 case when (p1 is null OR p1 = '0')  then 0 else 1 end as p1valid,   d.p2 as p2,   case when (p2 is null OR p2 = '0')  then 0 else 1 end as p2valid,   d.p3 as p3,   case when (p3 is null OR p3 = '0')  then 0 else 1 end as p3valid,	 nvl(e.keh_id, 0) as keh_evt_id,   c.class# as class_num,   d.wait_class_id as wait_class_id,	c.keh_id as keh_ecl_id,   round(d.total_ash_cnt, 0) as total_ash_cnt,	round(d.fg_ash_cnt, 0) as fg_ash_cnt,	round(d.fg_w_cnt, 0) as fg_w_cnt,   round(d.fg_to_cnt, 0) as fg_to_cnt,   round(d.fg_w_time, 0) as fg_w_time,	round(d.total_w_cnt, 0) as total_w_cnt,   round(d.total_to_cnt, 0) as total_to_cnt,   round(d.total_w_time, 0) as total_w_time	from data d,   X$KEHEVTMAP e ,	X$KEHECLMAP c  where d.event_id = e.event_hash(+)  and d.wait_class_id = c.class_hash  )  SELECT *  FROM   final_query	WHERE  keh_evt_id &gt; 0 OR total_w_time &gt; 0  ORDER BY wait_class_id,  fg_w_time DESC,  event_id </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6thask7s4zxhn"></a>6thask7s4zxhn</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '186';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;


Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
v_begin_time PLS_INTEGER;
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

v_end_time PLS_INTEGER;
'html'		HTML format (default)
'text'		Text format
v_total_time PLS_INTEGER;
'active-html'	Includes Performance Hub active report

v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;


Type Specified:  text

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6uwhmrt8nr4s9"></a>6uwhmrt8nr4s9</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '98';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6wvzvgvg6qsyb"></a>6wvzvgvg6qsyb</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_findings (id,  task_id,  type,  parent,  obj_id,  impact_msg_id,  impact_val,  msg_id,  more_info_id,  name_msg_code,  flags,  exec_name) VALUES (:1,  :2,  :3,  :4,	:5,  :6,  :7, :8,  :9,	:10,  :11,  :12) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6z2cq7r4rtuz6"></a>6z2cq7r4rtuz6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '97';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------




	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of

		-- iterations then set exit flag


		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7a4r7h7dtp9uk"></a>7a4r7h7dtp9uk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '96';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7s9avvsud7a92"></a>7s9avvsud7a92</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7v30dvkrm7b1v"></a>7v30dvkrm7b1v</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '92';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN
Current Database

~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 1451622190	P30SDB	       p30sdb
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;


EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrnc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8td9ta6n97dbm"></a>8td9ta6n97dbm</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '193';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8wqq6m9va6xs1"></a>8wqq6m9va6xs1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '176';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="92xgsuancvhq2"></a>92xgsuancvhq2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '110';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;

v_scan_query_quota  BOOLEAN := FALSE;

v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;

	END IF;


----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="94qn6y14kw01g"></a>94qn6y14kw01g</td><td class='awrnc'><pre_sqltext class="awr">SELECT NVL(TO_NUMBER(EXTRACT(XMLTYPE(:B2 ),  :B1 )),  0) FROM DUAL</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="98s057018aabq"></a>98s057018aabq</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '108';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9pak4nk4rzz55"></a>9pak4nk4rzz55</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '70';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;


				ELSE

					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt

			FROM cf1

Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9qm6ufzjxxpkc"></a>9qm6ufzjxxpkc</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '112';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
  DB Id      Inst Num	DB Name      Instance	  Host
					v_do_scan_query := FALSE;
------------ ---------- ---------    ----------   ------
				END IF;
* 1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex
			END IF;
		END IF;


Using 1451622190 for database Id
Using instances ALL (default 'ALL')

		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9r3qzjkmkr5kg"></a>9r3qzjkmkr5kg</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '74';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);



Specify the number of days of snapshots to choose from
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
-- DBMS_RANDOM.seed (val =&gt; v_seed);
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
Enter value for num_days: v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:

Listing all Completed Snapshots
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9tgj4g8y4rwy8"></a>9tgj4g8y4rwy8</td><td class='awrnc'><pre_sqltext class="awr">select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr,  NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9tt2m0mpc2qqp"></a>9tt2m0mpc2qqp</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_char$ i_idl_char1) */ piece#, length, piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrnc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,  SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,  DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,	SQL_TEXT,  PX_SERVER#,	PX_SERVER_GROUP,  PX_SERVER_SET,  PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,  USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,	FETCHES,  BUFFER_GETS,	IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,  PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,	PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,	0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,	IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,  IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,  ACTION,  SERVICE_NAME,  CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,	PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,  NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,	NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),  '00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,  TO_CHAR(RM_LAST_ACTION_TIME,	:B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,	CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,	MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,	SUM_SERVERS_REQUESTED,	SUM_SERVERS_ALLOCATED,	DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,	DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,  MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,  MAX_PROGRAM,	MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,  QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,	MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,	MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,	MAX_SQL_EXEC_ID,  MAX_LAST_REFRESH_TIME,  MAX_DBOP_NAME,  MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,  SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,	MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,	SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,	SUM_WRITE_BYTES,  SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,	DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,  1,  'platform_name',	SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,	0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,	MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,  SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,  MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,  MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,  MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,  MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,	MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,	MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,  MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,  MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,	SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,  SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,	SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,  NVL(SUM(READ_BYTES),	0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES)
 SUM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,	MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,	MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),	ASH_DATA AS (SELECT AD0.INST_ID,  AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,	AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,	AD0.DBOP_NAME,	AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,  AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,	AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,	AD0.CPU_COUNT,	AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,  AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,	AD0.DFO_MOST_ACTIVE_SID,  (CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,  AD0.BUCKET_DISTINCT_SAMPLES,	AD0.SQL_BUCKET_DISTINCT_SAMPLES,  CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,  CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,  ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,	ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,  ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,  TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,	ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,	MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,  ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,  MD.SID,  MD.SESSION_SERIAL#,	MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,	GVTF.SESSION_ID,  GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,	GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,  GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,	GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,	MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,	GVTF.PX_STEP_ID,  GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID,	GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,  GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,	CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,	ASH2.IS_MONITORED_SQL,	ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,  ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,	0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,	ASH2.PX_MIN_DOP,  :B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,	:B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,	ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,	SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,	ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,	MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,	MAX(ASH1.PX_DOP) PX_DOP,  MIN(ASH1.PX_DOP) PX_MIN_DOP,	MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,	COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,  ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,  ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,	ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,	ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL U
NION ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,  ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,	DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,  NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,  :B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,	NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,  NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,	ASH.PLSQL_SUBPROGRAM_ID,  ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,	ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,	ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,	TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),	RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,	ADH.SQL,  ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,	NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,  'PX Server(s) - Sampling Child DFO',	4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',  7,  'QC - Initializing Objects',  8,	'QC - Flushing Objects',  9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,  'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,  'PX Server(s) - Preparing Transaction',  14,	'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,	'PX Server(s) - Aborting Transaction',	17,  'QC - Executing Child DFO',  18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,	ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,  ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,	ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),  'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,	ADH.DFO_PAIR_CPU_HEIGHT,  ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,
 (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,  AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,	NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,  (AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,  (AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,	SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,	NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,  AD01.ACTIVITY_COUNT,	NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,	:B27 ,	MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,	AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,  MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,	AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,	SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,	MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,  MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,	AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS &quot;sql_id&quot;,	:B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,  :B52 AS &quot;session_serial&quot;,	TO_CHAR(:B51 ,	:B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',  :B48 ,  NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),	CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,  NULL,  XMLFOREST( DECODE(:B4 ,  1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,  :B2 AS &quot;server_set&quot;,  :B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,  XMLFOREST(:B11 AS &quot;instance_id_low&quot;,  :B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,	(SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,  NULL,  :B9 ) AS &quot;sql_id&quot;,	NVL2(:B6 ,  NULL,  TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,	NVL2(:B6 ,  :B6 ,  NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,	:B5 ,  NULL) AS &quot;dbop_exec_id&quot;,  NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,	MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,  NULL,  SUM_SERVERS_ALLOCATED),  NULL),  NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,	XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,	XMLELEMENT( &quot;con_id&quot;,  NULL,	MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,	MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,	MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,  MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,	NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,	NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,	NULL,  MAX_PL_PROGID),	NULL),	NVL2(MAX_PL_NAME,  XMLELEMENT( &quot;plsql_name&quot;,	NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,	'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,	XMLELEMENT( &quot;status&quot;,  NULL,	MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,	GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,  20))),  CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),	MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),  DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),	DECODE(NVL(SUM_READ_REQS,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,  0),	0,  NULL
,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,  0,  1,  SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),  CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P30SDB		     1	16 Feb 2020 11:00    1
		     2	16 Feb 2020 12:48    1
		     3	16 Feb 2020 13:00    1
		     4	16 Feb 2020 13:13    1
		     5	16 Feb 2020 13:19    1
		     6	16 Feb 2020 13:22    1
		     7	16 Feb 2020 13:30    1
		     8	16 Feb 2020 13:33    1
		     9	16 Feb 2020 13:42    1
		    10	16 Feb 2020 13:49    1
		    11	16 Feb 2020 13:55    1
		    12	16 Feb 2020 14:10    1
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;, 		    13	16 Feb 2020 14:16    1
		    14	16 Feb 2020 14:24    1
		    15	16 Feb 2020 14:33    1
		    16	16 Feb 2020 14:38    1
		    17	16 Feb 2020 14:49    1
		    18	16 Feb 2020 14:56    1
		    19	16 Feb 2020 15:04    1
		    20	16 Feb 2020 16:00    1
		    21	16 Feb 2020 17:23    1
		    22	16 Feb 2020 17:57    1
		    23	16 Feb 2020 18:05    1
 :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
		    24	16 Feb 2020 18:13    1
		    25	16 Feb 2020 18:19    1
		    26	16 Feb 2020 18:22    1
		    27	16 Feb 2020 18:25    1
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_		    28	16 Feb 2020 18:27    1
		    29	16 Feb 2020 18:35    1
		    30	17 Feb 2020 07:54    1
		    31	17 Feb 2020 08:10    1
		    32	17 Feb 2020 08:16    1
		    33	17 Feb 2020 08:20    1
		    34	17 Feb 2020 08:25    1
		    35	17 Feb 2020 08:27    1
		    36	17 Feb 2020 08:33    1
		    37	17 Feb 2020 08:37    1
		    38	17 Feb 2020 08:43    1
		    39	17 Feb 2020 08:47    1
		    40	17 Feb 2020 08:52    1
		    41	17 Feb 2020 08:55    1
		    42	17 Feb 2020 09:00    1
TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
		    43	17 Feb 2020 09:09    1
		    44	17 Feb 2020 09:14    1
		    45	17 Feb 2020 09:17    1
		    46	17 Feb 2020 09:23    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 45

End   Snapshot Id specified: 46

&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="a3jpjzh7mtwwp"></a>a3jpjzh7mtwwp</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub2$ i_idl_ub21) */ piece#, length, piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="ahpwg02s0cb1z"></a>ahpwg02s0cb1z</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_rec_actions (task_id,  rec_id,  act_id) VALUES (:1, :2, :3) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="akay050h1s6c4"></a>akay050h1s6c4</td><td class='awrnc'><pre_sqltext class="awr">SELECT MAX(CUSTID) FROM CF1</pre_sqltext></td></tr>

<tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="b2rbrgpu3jxh1"></a>b2rbrgpu3jxh1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
The default report file name is awrrpt_rac_45_46.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.
		--

		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b86uad51uut0p"></a>b86uad51uut0p</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;


IF ( v_max_loop_iterations &gt; 0 )  THEN
Using the report name awr_rac.txt
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bgkfz06rghsby"></a>bgkfz06rghsby</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '81';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhydnmhhkhhdy"></a>bhydnmhhkhhdy</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '183';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bxpcry2tpc217"></a>bxpcry2tpc217</td><td class='awrc'><pre_sqltext class="awr">select /*+ opt_param('parallel_execution_enabled',
				   'false') EXEC_FROM_DBMS_XPLAN */ * from gv$all_sql_plan where 1=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="c0pd7mpw5mucc"></a>c0pd7mpw5mucc</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '39';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="c45q6fupzf7tg"></a>c45q6fupzf7tg</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '192';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cw70q4hn80hyn"></a>cw70q4hn80hyn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '66';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="djbfhkquyuyab"></a>djbfhkquyuyab</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '47';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f7s68cgfrpfx5"></a>f7s68cgfrpfx5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '79';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)    values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrnc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f90ww8cyy5gy0"></a>f90ww8cyy5gy0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '67';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fcfy9turtx376"></a>fcfy9turtx376</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '58';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fckscu903tf4w"></a>fckscu903tf4w</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fgw43xkd3k8vd"></a>fgw43xkd3k8vd</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fh5ufah919kun"></a>fh5ufah919kun</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_sb4$ i_idl_sb41) */ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fkc81h2686aqc"></a>fkc81h2686aqc</td><td class='awrnc'><pre_sqltext class="awr">select pob.parttype from sys.indpart$ ip,  sys.partobj$ pob  where ip.bo# = pob.obj# and ip.obj# = :oid</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fkuvv1yajzw3f"></a>fkuvv1yajzw3f</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '76';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fpt7knftv3a5x"></a>fpt7knftv3a5x</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '73';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fr7qdwubf5vg8"></a>fr7qdwubf5vg8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '100';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fxh7dn0mbs5cx"></a>fxh7dn0mbs5cx</td><td class='awrc'><pre_sqltext class="awr"> WITH ash as  (SELECT ash.event_id,   sum(decode(ash.session_type,  1,  1,  0)) as cnt_fg,   count(*) as cnt_total  FROM  WRH$_ACTIVE_SESSION_HISTORY ash	WHERE  ash.dbid = :dbid  AND ash.snap_id &gt; :bid AND ash.snap_id &lt;= :eid  AND  ash.wait_time = 0  GROUP BY ash.event_id  ),   evts as  (SELECT event_id,  sum(w_cnt) as w_cnt,  sum(to_cnt) as to_cnt,   sum(w_time) as w_time  , sum(w_cnt_fg) as w_cnt_fg,  sum(to_cnt_fg) as to_cnt_fg,   sum(w_time_fg) as w_time_fg  FROM (SELECT es.event_id as event_id,   es.total_waits - nvl(bs.total_waits, 0) as w_cnt,   es.TOTAL_TIMEOUTS - nvl(bs.TOTAL_TIMEOUTS, 0) as to_cnt,   es.TIME_WAITED_MICRO - nvl(bs.TIME_WAITED_MICRO, 0)  as w_time  , es.total_waits_fg - nvl(bs.total_waits_fg, 0)  as w_cnt_fg,   es.TOTAL_TIMEOUTS_FG - nvl(bs.TOTAL_TIMEOUTS_FG, 0)  as to_cnt_fg,   es.TIME_WAITED_MICRO_FG - nvl(bs.TIME_WAITED_MICRO_FG, 0)  as w_time_fg  FROM  WRH$_SYSTEM_EVENT es ,  WRH$_SYSTEM_EVENT bs	WHERE  es.dbid = :dbid	AND es.snap_id = :eid  AND bs.dbid(+) = :dbid AND bs.instance_number(+) = es.instance_number AND bs.snap_id(+) = :bid  AND  es.instance_number = bs.instance_number(+)	AND  es.event_id = bs.event_id(+)  UNION ALL  SELECT x.event_hash as event_id,	 0 as w_cnt,  0 as to_cnt,  0 as w_time  , 0 as w_cnt_fg,  0 as to_cnt_fg,  0 as w_time_fg  FROM  X$KEHEVTMAP x  )  GROUP BY event_id  ),   awr_names as  (SELECT e.event_id,  max(e.event_name) as event_name, 	  max(e.wait_class_id) as wait_class_id,	   max(e.wait_class) as wait_class,	      max(e.parameter1) as parameter1,		 max(e.parameter2) as parameter2,	    max(e.parameter3) as parameter3  FROM  WRH$_EVENT_NAME e  WHERE e.dbid = :dbid GROUP BY e.event_id	),   named_events as  (SELECT names.event_id as event_id,   names.event_name as event_name,   evts.w_cnt as w_cnt,   evts.to_cnt as to_cnt,   evts.w_time as w_time,   evts.w_cnt_fg as w_cnt_fg,   evts.to_cnt_fg as to_cnt_fg,   evts.w_time_fg as w_time_fg,   names.wait_class_id as wait_class_id,   names.parameter1 as p1,   names.parameter2 as p2,   names.parameter3 as p3  FROM   evts,  awr_names names  WHERE  evts.event_id = names.event_id  AND  names.wait_class_id &lt;&gt; 2723168908  ),   data as	(SELECT e.event_id as event_id,   e.event_name as event_name,	e.wait_class_id as wait_class_id,   e.p1 as p1,   e.p2 as p2,	e.p3 as p3,   e.w_cnt as total_w_cnt,	e.to_cnt as total_to_cnt,   e.w_time as total_w_time,	e.w_cnt_fg as fg_w_cnt,   e.to_cnt_fg as fg_to_cnt,   e.w_time_fg as fg_w_time,   nvl(a.cnt_total, 0) as total_ash_cnt,   nvl(a.cnt_fg, 0) as fg_ash_cnt  FROM	 named_events e,  ash a  WHERE	e.event_id  = a.event_id(+)  ),   final_query as  (SELECT d.event_name,   d.event_id,	d.p1 as p1,   case when (p1 is null OR p1 = '0')  then 0 else 1 end as p1valid,   d.p2 as p2,	case when (p2 is null OR p2 = '0')  then 0 else 1 end as p2valid,   d.p3 as p3,   case when (p3 is null OR p3 = '0')  then 0 else 1 end as p3valid,   nvl(e.keh_id, 0) as keh_evt_id,	c.class# as class_num,	 d.wait_class_id as wait_class_id,   c.keh_id as keh_ecl_id,   round(d.total_ash_cnt, 0) as total_ash_cnt,   round(d.fg_ash_cnt, 0) as fg_ash_cnt,   round(d.fg_w_cnt, 0) as fg_w_cnt,	 round(d.fg_to_cnt, 0) as fg_to_cnt,   round(d.fg_w_time, 0) as fg_w_time,   round(d.total_w_cnt, 0) as total_w_cnt,   round(d.total_to_cnt, 0) as total_to_cnt,   round(d.total_w_time, 0) as total_w_time  from data d,   X$KEHEVTMAP e ,  X$KEHECLMAP c  where d.event_id = e.event_hash(+)	and d.wait_class_id = c.class_hash  )  SELECT *  FROM	final_query  WHERE  keh_evt_id &gt; 0 OR total_w_time &gt; 0  ORDER BY wait_class_id,  fg_w_time DESC,	event_id </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrnc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>1,654,473</td><td align="right" class='awrc'>4,944.35</td><td align="right" class='awrc'>8.17</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>6,746,682</td><td align="right" class='awrnc'>20,162.28</td><td align="right" class='awrnc'>33.32</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>4,633</td><td align="right" class='awrc'>13.85</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>6,498</td><td align="right" class='awrnc'>19.42</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>6,955,110</td><td align="right" class='awrnc'>20,785.16</td><td align="right" class='awrnc'>34.34</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>1,625</td><td align="right" class='awrc'>4.86</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>20,315,043</td><td align="right" class='awrc'>60,710.97</td><td align="right" class='awrc'>100.32</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>718,112</td><td align="right" class='awrnc'>2,146.06</td><td align="right" class='awrnc'>3.55</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>581,465,012</td><td align="right" class='awrc'>1,737,692.76</td><td align="right" class='awrc'>2,871.30</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>6,948,420</td><td align="right" class='awrnc'>20,765.17</td><td align="right" class='awrnc'>34.31</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>34,337,885</td><td align="right" class='awrc'>102,617.86</td><td align="right" class='awrc'>169.56</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>728</td><td align="right" class='awrnc'>2.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>202,509</td><td align="right" class='awrc'>605.19</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>706</td><td align="right" class='awrnc'>2.11</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>814</td><td align="right" class='awrnc'>2.43</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>668</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>178</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>641</td><td align="right" class='awrc'>1.92</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>536</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>527</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>477</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO block miss count</td><td align="right" class='awrnc'>6,232,218</td><td align="right" class='awrnc'>18,624.82</td><td align="right" class='awrnc'>30.78</td></tr>
<tr><td scope="row" class='awrc'>Batched IO buffer defrag count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>6,232,103</td><td align="right" class='awrnc'>18,624.47</td><td align="right" class='awrnc'>30.77</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>6,232,582</td><td align="right" class='awrnc'>18,625.91</td><td align="right" class='awrnc'>30.78</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector block count</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector read count</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Block Cleanout Optim referenced</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CCursor + sql area evicted</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CPU used by this session</td><td align="right" class='awrc'>606,522</td><td align="right" class='awrc'>1,812.57</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>CPU used when call started</td><td align="right" class='awrnc'>604,396</td><td align="right" class='awrnc'>1,806.22</td><td align="right" class='awrnc'>2.98</td></tr>
<tr><td scope="row" class='awrc'>CR blocks created</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Cached Commit SCN referenced</td><td align="right" class='awrnc'>5,212,271</td><td align="right" class='awrnc'>15,576.73</td><td align="right" class='awrnc'>25.74</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Receive Window</td><td align="right" class='awrc'>735</td><td align="right" class='awrc'>2.20</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Send Window</td><td align="right" class='awrnc'>735</td><td align="right" class='awrnc'>2.20</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrc'>152,250</td><td align="right" class='awrc'>455.00</td><td align="right" class='awrc'>0.75</td></tr>
<tr><td scope="row" class='awrnc'>Client Send Congestion Window</td><td align="right" class='awrnc'>1,050</td><td align="right" class='awrnc'>3.14</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Received</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrc'>325</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrnc'>228,174</td><td align="right" class='awrnc'>681.89</td><td align="right" class='awrnc'>1.13</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrc'>232,684</td><td align="right" class='awrc'>695.37</td><td align="right" class='awrc'>1.15</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Acked</td><td align="right" class='awrnc'>1,650,097</td><td align="right" class='awrnc'>4,931.27</td><td align="right" class='awrnc'>8.15</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Received</td><td align="right" class='awrc'>641,172</td><td align="right" class='awrc'>1,916.13</td><td align="right" class='awrc'>3.17</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoint buffers written</td><td align="right" class='awrnc'>784</td><td align="right" class='awrnc'>2.34</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoints</td><td align="right" class='awrc'>929</td><td align="right" class='awrc'>2.78</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR fusion writes</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR object drop buffers written</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>573</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>110,444</td><td align="right" class='awrnc'>330.06</td><td align="right" class='awrnc'>0.55</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Effective IO time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>608,498</td><td align="right" class='awrc'>1,818.48</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc req</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc space (block)</td><td align="right" class='awrnc'>81,920,000</td><td align="right" class='awrnc'>244,815.75</td><td align="right" class='awrnc'>404.53</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc time (ms)</td><td align="right" class='awrc'>17,181,800</td><td align="right" class='awrc'>51,347.35</td><td align="right" class='awrc'>84.84</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply req</td><td align="right" class='awrnc'>443</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply time (ms)</td><td align="right" class='awrc'>42,891</td><td align="right" class='awrc'>128.18</td><td align="right" class='awrc'>0.21</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free req</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB free space (block)</td><td align="right" class='awrc'>12,880</td><td align="right" class='awrc'>38.49</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free time (ms)</td><td align="right" class='awrnc'>7,177</td><td align="right" class='awrnc'>21.45</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>LOB table id lookup cache misses</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages recv'd</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX local messages sent</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages recv'd</td><td align="right" class='awrnc'>116</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages sent</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Parallel operations not downgraded</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Requests to/from client</td><td align="right" class='awrc'>323</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SMON posted for undo segment shrink</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>219</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>233</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints completed</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints started</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background timeouts</td><td align="right" class='awrc'>3,717</td><td align="right" class='awrc'>11.11</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>blocks cleaned out using minact</td><td align="right" class='awrnc'>520,343</td><td align="right" class='awrnc'>1,555.03</td><td align="right" class='awrnc'>2.57</td></tr>
<tr><td scope="row" class='awrc'>branch node splits</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>45,379,290</td><td align="right" class='awrnc'>135,614.80</td><td align="right" class='awrnc'>224.09</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>13,744,895</td><td align="right" class='awrc'>41,076.25</td><td align="right" class='awrc'>67.87</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>106,115</td><td align="right" class='awrnc'>317.12</td><td align="right" class='awrnc'>0.52</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>59,113</td><td align="right" class='awrc'>176.66</td><td align="right" class='awrc'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>6,961,794</td><td align="right" class='awrnc'>20,805.14</td><td align="right" class='awrnc'>34.38</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>278,580</td><td align="right" class='awrc'>832.53</td><td align="right" class='awrc'>1.38</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>3,421</td><td align="right" class='awrnc'>10.22</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>180,231,961,088</td><td align="right" class='awrc'>538,618,431.97</td><td align="right" class='awrc'>889,994.82</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>1,587</td><td align="right" class='awrnc'>4.74</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>946</td><td align="right" class='awrc'>2.83</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>678</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>202</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>654</td><td align="right" class='awrnc'>1.95</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: cannot pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>608,017</td><td align="right" class='awrnc'>1,817.04</td><td align="right" class='awrnc'>3.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>607,278</td><td align="right" class='awrc'>1,814.83</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>816</td><td align="right" class='awrnc'>2.44</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>consistent changes</td><td align="right" class='awrc'>4,312</td><td align="right" class='awrc'>12.89</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets</td><td align="right" class='awrnc'>33,216,285</td><td align="right" class='awrnc'>99,265.99</td><td align="right" class='awrnc'>164.02</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>6,755,004</td><td align="right" class='awrc'>20,187.15</td><td align="right" class='awrc'>33.36</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>6,754,469</td><td align="right" class='awrnc'>20,185.55</td><td align="right" class='awrnc'>33.35</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>33,216,275</td><td align="right" class='awrc'>99,265.96</td><td align="right" class='awrc'>164.02</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>26,461,261</td><td align="right" class='awrnc'>79,078.78</td><td align="right" class='awrnc'>130.67</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>6,732,624</td><td align="right" class='awrc'>20,120.27</td><td align="right" class='awrc'>33.25</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cursor reload failures</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>1,654,473</td><td align="right" class='awrc'>4,944.35</td><td align="right" class='awrc'>8.17</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>1,119,933</td><td align="right" class='awrnc'>3,346.89</td><td align="right" class='awrnc'>5.53</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>255</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>1,119,677</td><td align="right" class='awrnc'>3,346.12</td><td align="right" class='awrnc'>5.53</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>439,727</td><td align="right" class='awrc'>1,314.11</td><td align="right" class='awrc'>2.17</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>556,474</td><td align="right" class='awrnc'>1,663.01</td><td align="right" class='awrnc'>2.75</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>694,023</td><td align="right" class='awrc'>2,074.07</td><td align="right" class='awrc'>3.43</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>3,524</td><td align="right" class='awrnc'>10.53</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>414,911</td><td align="right" class='awrc'>1,239.95</td><td align="right" class='awrc'>2.05</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>414,793</td><td align="right" class='awrnc'>1,239.60</td><td align="right" class='awrnc'>2.05</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>1,475</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>6,746,682</td><td align="right" class='awrnc'>20,162.28</td><td align="right" class='awrnc'>33.32</td></tr>
<tr><td scope="row" class='awrc'>fastpath consistent get quota limit</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>397,849,830</td><td align="right" class='awrnc'>1,188,963.66</td><td align="right" class='awrnc'>1,964.60</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>20,533,789</td><td align="right" class='awrc'>61,364.68</td><td align="right" class='awrc'>101.40</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>20,379,198</td><td align="right" class='awrnc'>60,902.69</td><td align="right" class='awrnc'>100.63</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>3,366</td><td align="right" class='awrc'>10.06</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>210</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout applied</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>174,960</td><td align="right" class='awrc'>522.86</td><td align="right" class='awrc'>0.86</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>141</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>973</td><td align="right" class='awrc'>2.91</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>536</td><td align="right" class='awrc'>1.60</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>115</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>213</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>1,440</td><td align="right" class='awrnc'>4.30</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr bypass requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>885</td><td align="right" class='awrnc'>2.64</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>344</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>4,633</td><td align="right" class='awrnc'>13.85</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>6,498</td><td align="right" class='awrc'>19.42</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>2,946</td><td align="right" class='awrnc'>8.80</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>18,502</td><td align="right" class='awrc'>55.29</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>16,586</td><td align="right" class='awrnc'>49.57</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>19,114,919</td><td align="right" class='awrc'>57,124.43</td><td align="right" class='awrc'>94.39</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read time waited</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read wait timeouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read waits</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>1,204,560</td><td align="right" class='awrnc'>3,599.80</td><td align="right" class='awrnc'>5.95</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>13,498</td><td align="right" class='awrc'>40.34</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>7,859</td><td align="right" class='awrnc'>23.49</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>54,757</td><td align="right" class='awrc'>163.64</td><td align="right" class='awrc'>0.27</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>10,025,031</td><td align="right" class='awrnc'>29,959.54</td><td align="right" class='awrnc'>49.50</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>174,674</td><td align="right" class='awrc'>522.01</td><td align="right" class='awrc'>0.86</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>20,274,440</td><td align="right" class='awrnc'>60,589.63</td><td align="right" class='awrnc'>100.12</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>4,041,352</td><td align="right" class='awrc'>12,077.47</td><td align="right" class='awrc'>19.96</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>310,818</td><td align="right" class='awrnc'>928.87</td><td align="right" class='awrnc'>1.53</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>8,586,807</td><td align="right" class='awrc'>25,661.44</td><td align="right" class='awrc'>42.40</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>9,043</td><td align="right" class='awrnc'>27.02</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>31,981</td><td align="right" class='awrc'>95.57</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>224,403</td><td align="right" class='awrc'>670.62</td><td align="right" class='awrc'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>222,627</td><td align="right" class='awrnc'>665.31</td><td align="right" class='awrnc'>1.10</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>2,428</td><td align="right" class='awrnc'>7.26</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>679</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>280</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index crx state invalidation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (positioned)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>1,790</td><td align="right" class='awrnc'>5.35</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>6,749,390</td><td align="right" class='awrc'>20,170.37</td><td align="right" class='awrc'>33.33</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>101</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>3,390</td><td align="right" class='awrc'>10.13</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>3,390</td><td align="right" class='awrnc'>10.13</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>281,279,635,456</td><td align="right" class='awrc'>840,596,724.80</td><td align="right" class='awrc'>1,388,973.50</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>480</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>115,422</td><td align="right" class='awrnc'>344.94</td><td align="right" class='awrnc'>0.57</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>115,413</td><td align="right" class='awrc'>344.91</td><td align="right" class='awrc'>0.57</td></tr>
<tr><td scope="row" class='awrnc'>min active SCN optimization applied on CR</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no buffer to keep pinned count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>no work - consistent read gets</td><td align="right" class='awrnc'>26,446,953</td><td align="right" class='awrnc'>79,036.02</td><td align="right" class='awrnc'>130.60</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait count</td><td align="right" class='awrc'>23,033,947</td><td align="right" class='awrc'>68,836.34</td><td align="right" class='awrc'>113.74</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>6,955,110</td><td align="right" class='awrnc'>20,785.16</td><td align="right" class='awrnc'>34.34</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (failures)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (hard)</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (total)</td><td align="right" class='awrnc'>1,625</td><td align="right" class='awrnc'>4.86</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>parse time cpu</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical read IO requests</td><td align="right" class='awrc'>20,314,569</td><td align="right" class='awrc'>60,709.55</td><td align="right" class='awrc'>100.31</td></tr>
<tr><td scope="row" class='awrnc'>physical read bytes</td><td align="right" class='awrnc'>166,420,619,264</td><td align="right" class='awrnc'>497,343,603.51</td><td align="right" class='awrnc'>821,793.69</td></tr>
<tr><td scope="row" class='awrc'>physical read total IO requests</td><td align="right" class='awrc'>20,318,110</td><td align="right" class='awrc'>60,720.13</td><td align="right" class='awrc'>100.33</td></tr>
<tr><td scope="row" class='awrnc'>physical read total bytes</td><td align="right" class='awrnc'>167,234,745,856</td><td align="right" class='awrnc'>499,776,599.22</td><td align="right" class='awrnc'>825,813.89</td></tr>
<tr><td scope="row" class='awrc'>physical read total multi block requests</td><td align="right" class='awrc'>741</td><td align="right" class='awrc'>2.21</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads</td><td align="right" class='awrnc'>20,315,043</td><td align="right" class='awrnc'>60,710.97</td><td align="right" class='awrnc'>100.32</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache</td><td align="right" class='awrc'>20,315,040</td><td align="right" class='awrc'>60,710.96</td><td align="right" class='awrc'>100.32</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache prefetch</td><td align="right" class='awrnc'>478</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct (lob)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct temporary tablespace</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads prefetch warmup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical write IO requests</td><td align="right" class='awrc'>693,702</td><td align="right" class='awrc'>2,073.11</td><td align="right" class='awrc'>3.43</td></tr>
<tr><td scope="row" class='awrnc'>physical write bytes</td><td align="right" class='awrnc'>5,882,773,504</td><td align="right" class='awrnc'>17,580,512.48</td><td align="right" class='awrnc'>29,049.44</td></tr>
<tr><td scope="row" class='awrc'>physical write total IO requests</td><td align="right" class='awrc'>717,114</td><td align="right" class='awrc'>2,143.08</td><td align="right" class='awrc'>3.54</td></tr>
<tr><td scope="row" class='awrnc'>physical write total bytes</td><td align="right" class='awrnc'>6,496,383,488</td><td align="right" class='awrnc'>19,414,269.63</td><td align="right" class='awrnc'>32,079.48</td></tr>
<tr><td scope="row" class='awrc'>physical write total multi block requests</td><td align="right" class='awrc'>832</td><td align="right" class='awrc'>2.49</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>718,112</td><td align="right" class='awrnc'>2,146.06</td><td align="right" class='awrnc'>3.55</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct</td><td align="right" class='awrc'>443</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct (lob)</td><td align="right" class='awrnc'>188</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct temporary tablespace</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes from cache</td><td align="right" class='awrnc'>717,669</td><td align="right" class='awrnc'>2,144.73</td><td align="right" class='awrnc'>3.54</td></tr>
<tr><td scope="row" class='awrc'>physical writes non checkpoint</td><td align="right" class='awrc'>639,138</td><td align="right" class='awrc'>1,910.05</td><td align="right" class='awrc'>3.16</td></tr>
<tr><td scope="row" class='awrnc'>pinned buffers inspected</td><td align="right" class='awrnc'>37,846</td><td align="right" class='awrnc'>113.10</td><td align="right" class='awrnc'>0.19</td></tr>
<tr><td scope="row" class='awrc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>prefetched blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process last non-idle time</td><td align="right" class='awrc'>335</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>recursive calls</td><td align="right" class='awrnc'>7,164,955</td><td align="right" class='awrnc'>21,412.28</td><td align="right" class='awrnc'>35.38</td></tr>
<tr><td scope="row" class='awrc'>recursive cpu usage</td><td align="right" class='awrc'>553,112</td><td align="right" class='awrc'>1,652.96</td><td align="right" class='awrc'>2.73</td></tr>
<tr><td scope="row" class='awrnc'>redo KB read</td><td align="right" class='awrnc'>450,560</td><td align="right" class='awrnc'>1,346.49</td><td align="right" class='awrnc'>2.22</td></tr>
<tr><td scope="row" class='awrc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrc'>470,983</td><td align="right" class='awrc'>1,407.52</td><td align="right" class='awrc'>2.33</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written</td><td align="right" class='awrnc'>1,190,013</td><td align="right" class='awrnc'>3,556.32</td><td align="right" class='awrnc'>5.88</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 0)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 1)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo buffer allocation retries</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>910,901</td><td align="right" class='awrnc'>2,722.20</td><td align="right" class='awrnc'>4.50</td></tr>
<tr><td scope="row" class='awrc'>redo log space requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo size</td><td align="right" class='awrnc'>581,465,012</td><td align="right" class='awrnc'>1,737,692.76</td><td align="right" class='awrnc'>2,871.30</td></tr>
<tr><td scope="row" class='awrc'>redo size for direct writes</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo subscn max counts</td><td align="right" class='awrnc'>1,186</td><td align="right" class='awrnc'>3.54</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo synch time</td><td align="right" class='awrc'>144</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time (usec)</td><td align="right" class='awrnc'>1,389,689</td><td align="right" class='awrnc'>4,153.05</td><td align="right" class='awrnc'>6.86</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead (usec)</td><td align="right" class='awrc'>1,515</td><td align="right" class='awrc'>4.53</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>5,545,072</td><td align="right" class='awrnc'>16,571.30</td><td align="right" class='awrnc'>27.38</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>22,836</td><td align="right" class='awrc'>68.24</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>1,857</td><td align="right" class='awrc'>5.55</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>266,237,571</td><td align="right" class='awrnc'>795,643.91</td><td align="right" class='awrnc'>1,314.70</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>816,949</td><td align="right" class='awrc'>2,441.43</td><td align="right" class='awrc'>4.03</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>962,622</td><td align="right" class='awrc'>2,876.77</td><td align="right" class='awrc'>4.75</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>650</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>1,882</td><td align="right" class='awrc'>5.62</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>3,679</td><td align="right" class='awrnc'>10.99</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>4,323</td><td align="right" class='awrc'>12.92</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>3,278</td><td align="right" class='awrnc'>9.80</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (inf)</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write time</td><td align="right" class='awrc'>26,632</td><td align="right" class='awrc'>79.59</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>redo write time (usec)</td><td align="right" class='awrnc'>266,317,468</td><td align="right" class='awrnc'>795,882.68</td><td align="right" class='awrnc'>1,315.09</td></tr>
<tr><td scope="row" class='awrc'>redo write total time</td><td align="right" class='awrc'>266,806,202</td><td align="right" class='awrc'>797,343.25</td><td align="right" class='awrc'>1,317.50</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay (usec)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo writes</td><td align="right" class='awrnc'>14,318</td><td align="right" class='awrnc'>42.79</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 0)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 1)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive all</td><td align="right" class='awrc'>14,317</td><td align="right" class='awrc'>42.79</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive worker</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>1,378</td><td align="right" class='awrc'>4.12</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>1,540,096</td><td align="right" class='awrnc'>4,602.54</td><td align="right" class='awrnc'>7.61</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>1,315,528</td><td align="right" class='awrnc'>3,931.42</td><td align="right" class='awrnc'>6.50</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>1,540,096</td><td align="right" class='awrc'>4,602.54</td><td align="right" class='awrc'>7.61</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment cfs allocations</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ufs2cfs bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment total chunk allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>377</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>6,948,420</td><td align="right" class='awrnc'>20,765.17</td><td align="right" class='awrnc'>34.31</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>34,337,885</td><td align="right" class='awrc'>102,617.86</td><td align="right" class='awrc'>169.56</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>2,883,439</td><td align="right" class='awrnc'>8,617.08</td><td align="right" class='awrnc'>14.24</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get failure</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>427</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>58,416</td><td align="right" class='awrc'>174.57</td><td align="right" class='awrc'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>5,987,393</td><td align="right" class='awrnc'>17,893.17</td><td align="right" class='awrnc'>29.57</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>25,890,311</td><td align="right" class='awrc'>77,372.51</td><td align="right" class='awrc'>127.85</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>4,922</td><td align="right" class='awrc'>14.71</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>661,819</td><td align="right" class='awrnc'>1,977.83</td><td align="right" class='awrnc'>3.27</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>661,819</td><td align="right" class='awrc'>1,977.83</td><td align="right" class='awrc'>3.27</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>188</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>temp space allocated (bytes)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>5,156</td><td align="right" class='awrnc'>15.41</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>total number of times SMON posted</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock background get time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background gets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock foreground requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction rollbacks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>undo change vector size</td><td align="right" class='awrnc'>229,576,052</td><td align="right" class='awrnc'>686,081.94</td><td align="right" class='awrnc'>1,133.66</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>728</td><td align="right" class='awrc'>2.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>202,509</td><td align="right" class='awrnc'>605.19</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>706</td><td align="right" class='awrc'>2.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in background</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>30,402</td><td align="right" class='awrc'>90.86</td><td align="right" class='awrc'>0.15</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>243</td><td align="right" class='awrc'>139</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>634</td><td align="right" class='awrnc'>112</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>30,871</td><td align="right" class='awrc'>31,025</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>1,522,718,040</td><td align="right" class='awrnc'>905,687,192</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>1,741,234,808</td><td align="right" class='awrc'>1,114,176,952</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>884,718,176</td><td align="right" class='awrnc'>583,564,152</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>7,683,445,304</td><td align="right" class='awrc'>7,941,513,488</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>150.7G</td><td align="right" class='awrc'>59045.74</td><td align="right" class='awrc'>461.172M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>19.7M</td><td align="right" class='awrc'>721.77us</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>5.3G</td><td align="right" class='awrnc'>2024.12</td><td align="right" class='awrnc'>16.353M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Others</td><td align="right" class='awrc'>759M</td><td align="right" class='awrc'>8.21</td><td align="right" class='awrc'>2.268M</td><td align="right" class='awrc'>7M</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>.021M</td><td align="right" class='awrc'>1711</td><td align="right" class='awrc'>6.55ms</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>566M</td><td align="right" class='awrnc'>67.03</td><td align="right" class='awrnc'>1.691M</td><td align="right" class='awrnc'>14K</td><td align="right" class='awrnc'>18.46ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>151.4G</td><td align="right" class='awrnc'>59053.96</td><td align="right" class='awrnc'>463.441M</td><td align="right" class='awrnc'>5.9G</td><td align="right" class='awrnc'>2092.36</td><td align="right" class='awrnc'>18.068M</td><td align="right" class='awrnc'>19.7M</td><td align="right" class='awrnc'>734.88us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>150.7G</td><td align="right" class='awrc'>59031.88</td><td align="right" class='awrc'>461.271M</td><td align="right" class='awrc'>5.3G</td><td align="right" class='awrc'>2023.63</td><td align="right" class='awrc'>16.359M</td><td align="right" class='awrc'>269.73us</td><td align="right" class='awrc'>.00ns</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>728M</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>2.176M</td><td align="right" class='awrnc'>566M</td><td align="right" class='awrnc'>66.99</td><td align="right" class='awrnc'>1.691M</td><td align="right" class='awrnc'>1.80ms</td><td align="right" class='awrnc'>1786.74ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>30M</td><td align="right" class='awrc'>5.79</td><td align="right" class='awrc'>.09M</td><td align="right" class='awrc'>4M</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>.012M</td><td align="right" class='awrc'>248.71us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Temp File</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>.00ns</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>151.5G</td><td align="right" class='awrc'>59040.26</td><td align="right" class='awrc'>463.539M</td><td align="right" class='awrc'>5.9G</td><td align="right" class='awrc'>2091.72</td><td align="right" class='awrc'>18.065M</td><td align="right" class='awrc'>269.73us</td><td align="right" class='awrc'>1784.29ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>150.6G</td><td align="right" class='awrc'>59019.57</td><td align="right" class='awrc'>460.969M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>19.7M</td><td align="right" class='awrc'>721.65us</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>150.6G</td><td align="right" class='awrnc'>59019.38</td><td align="right" class='awrnc'>460.966M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>19.7M</td><td align="right" class='awrnc'>721.65us</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>161.29us</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>5.3G</td><td align="right" class='awrnc'>2023.05</td><td align="right" class='awrnc'>16.347M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
DBWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>5.3G</td><td align="right" class='awrc'>2023.12</td><td align="right" class='awrc'>16.347M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Others
</td><td align="right" class='awrc'>758M</td><td align="right" class='awrc'>8.21</td><td align="right" class='awrc'>2.265M</td><td align="right" class='awrc'>7M</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>.021M</td><td align="right" class='awrc'>1558</td><td align="right" class='awrc'>741.89us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Log File)
</td><td align="right" class='awrnc'>728M</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>2.176M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>2.20ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>30M</td><td align="right" class='awrc'>5.79</td><td align="right" class='awrc'>.09M</td><td align="right" class='awrc'>5M</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>.015M</td><td align="right" class='awrc'>1476</td><td align="right" class='awrc'>671.50us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>213.50us</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 LGWR (Log File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>566M</td><td align="right" class='awrnc'>66.98</td><td align="right" class='awrnc'>1.691M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
LGWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>566M</td><td align="right" class='awrc'>66.98</td><td align="right" class='awrc'>1.691M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Writes (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Direct Writes
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
TOTAL:
</td><td align="right" class='awrnc'>151.4G</td><td align="right" class='awrnc'>59027.78</td><td align="right" class='awrnc'>463.234M</td><td align="right" class='awrnc'>5.9G</td><td align="right" class='awrnc'>2091.32</td><td align="right" class='awrnc'>18.062M</td><td align="right" class='awrnc'>19.7M</td><td align="right" class='awrnc'>721.65us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>122,958</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>34,371,702</td><td align="right" class='awrc'>20,338,034</td><td align="right" class='awrc'>718,025</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>93</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			    718,112</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>784</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>3326</td><td align="right" class='awrc'>123527</td><td align="right" class='awrc'>84934656</td><td align="right" class='awrc'>84934656</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>4459</td><td align="right" class='awrnc'>1118032</td><td align="right" class='awrnc'>84934656</td><td align="right" class='awrnc'>84934656</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>26</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>174,988</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>92099.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>192</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>167,684</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>88255.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>288</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>163,467</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>86035.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>384</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>160,903</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>84685.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>480</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>159,153</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>83764.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>576</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>157,815</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>83059.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>672</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>156,679</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>82461.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>768</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>155,625</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>81907.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>864</td><td align="right" class='awrc'>0.82</td><td align="right" class='awrc'>101</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>154,577</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>81355.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>960</td><td align="right" class='awrnc'>0.91</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>153,550</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>80814.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,056</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>152,553</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>80290.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,152</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>134</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>151,587</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>79781.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,248</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>150,660</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>79293.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,344</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>149,759</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>78819.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,440</td><td align="right" class='awrc'>1.36</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>148,870</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>78351.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,536</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>147,995</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>77890.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,632</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>190</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>147,127</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>77433.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,728</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>201</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>146,272</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>76983.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,824</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>145,418</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>76534.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,920</td><td align="right" class='awrnc'>1.82</td><td align="right" class='awrnc'>224</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>144,571</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>76088.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>251</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>4,174</td><td align="right" class='awrc'>1,697</td><td align="right" class='awrc'>2,774.15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>427,410</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>4,174</td><td align="right" class='awrnc'>2,201</td><td align="right" class='awrnc'>2,095.21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>427,410</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>370</td><td align="right" class='awrc'>370</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>522</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>516.53</td><td align="right" class='awrc'>96.00</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>131,597,930</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,044</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>516.53</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>131,597,930</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,087</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>210.04</td><td align="right" class='awrc'>98.00</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>128,776,515</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,131</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,174</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,009</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,844</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,678</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrc'>7,513</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrnc'>8,348</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrc'>12,522</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrnc'>16,696</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrc'>25,044</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>13,779.22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126,843,060</td></tr>
<tr><td align="right" scope="row" class='awrnc'>33,392</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>13,779.22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>126,843,060</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,792</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>4,806</td><td align="right" class='awrc'>224,003</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,439</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>15,497</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,808</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>143</td><td align="right" class='awrnc'>5,317</td><td align="right" class='awrnc'>224,006</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,436</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>15,498</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,824</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>158</td><td align="right" class='awrc'>5,976</td><td align="right" class='awrc'>224,010</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,432</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>15,499</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,840</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>174</td><td align="right" class='awrnc'>7,321</td><td align="right" class='awrnc'>224,015</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,427</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>15,500</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,856</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>190</td><td align="right" class='awrc'>7,796</td><td align="right" class='awrc'>224,028</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,414</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>15,502</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,872</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>206</td><td align="right" class='awrnc'>7,938</td><td align="right" class='awrnc'>224,030</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,412</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>15,503</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,888</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>222</td><td align="right" class='awrc'>8,297</td><td align="right" class='awrc'>224,033</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,409</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>15,503</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,904</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>8,614</td><td align="right" class='awrnc'>224,036</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,406</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>15,503</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,920</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>254</td><td align="right" class='awrc'>9,121</td><td align="right" class='awrc'>224,040</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,402</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>15,504</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,936</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>269</td><td align="right" class='awrnc'>9,719</td><td align="right" class='awrnc'>224,045</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,397</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>15,505</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,984</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>317</td><td align="right" class='awrc'>11,324</td><td align="right" class='awrc'>224,063</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,379</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>15,506</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,176</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>509</td><td align="right" class='awrnc'>17,941</td><td align="right" class='awrnc'>224,087</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,355</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,368</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>525</td><td align="right" class='awrc'>18,688</td><td align="right" class='awrc'>224,087</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,355</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,560</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>525</td><td align="right" class='awrnc'>18,688</td><td align="right" class='awrnc'>224,087</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,355</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,752</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>525</td><td align="right" class='awrc'>18,688</td><td align="right" class='awrc'>224,087</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,355</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,944</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>525</td><td align="right" class='awrnc'>18,688</td><td align="right" class='awrnc'>224,087</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,355</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,136</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>525</td><td align="right" class='awrc'>18,688</td><td align="right" class='awrc'>224,087</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,355</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,328</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>525</td><td align="right" class='awrnc'>18,688</td><td align="right" class='awrnc'>224,087</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,355</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,520</td><td align="right" class='awrc'>1.96</td><td align="right" class='awrc'>525</td><td align="right" class='awrc'>18,688</td><td align="right" class='awrc'>224,087</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,355</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>15,508</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,712</td><td align="right" class='awrnc'>2.07</td><td align="right" class='awrnc'>525</td><td align="right" class='awrnc'>18,688</td><td align="right" class='awrnc'>224,087</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,355</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>15,508</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>2,304</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>237,523</td><td align="right" class='awrc'>163,460,413</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,072</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>231,752</td><td align="right" class='awrnc'>152,552,882</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,840</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>227,557</td><td align="right" class='awrc'>144,574,366</td></tr>
<tr><td align="right" scope="row" class='awrnc'>4,608</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>227,488</td><td align="right" class='awrnc'>144,574,366</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,376</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>227,488</td><td align="right" class='awrc'>144,574,366</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,144</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>227,488</td><td align="right" class='awrnc'>144,574,366</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>file header block</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>178</td></tr>
<tr><td scope="row" class='awrnc'>undo header</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>CR-Reuse Block Range (block range reuse ckpt)</td>
<td align="right" class='awrc'>5,762</td><td align="right" class='awrc'>5,762</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,258</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>60.03</td></tr>
<tr><td scope="row" class='awrnc'>HW-Segment High Water Mark</td>
<td align="right" class='awrnc'>555</td><td align="right" class='awrnc'>555</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>429.95</td></tr>
<tr><td scope="row" class='awrc'>CF-Controlfile Transaction</td>
<td align="right" class='awrc'>834</td><td align="right" class='awrc'>832</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>33.13</td></tr>
<tr><td scope="row" class='awrnc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>9.87</td></tr>
<tr><td scope="row" class='awrc'>PS-PX Process Reservation</td>
<td align="right" class='awrc'>62</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.38</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>198,265</td><td align="right" class='awrnc'>198,262</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25.00</td></tr>
<tr><td scope="row" class='awrc'>WF-AWR Flush</td>
<td align="right" class='awrc'>27</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.05</td></tr>
<tr><td scope="row" class='awrnc'>US-Undo Segment</td>
<td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.17</td></tr>
<tr><td scope="row" class='awrc'>CO-KTUCLO Master Slave enq (master slave det)</td>
<td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.20</td></tr>
<tr><td scope="row" class='awrnc'>FB-Format Block</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.50</td></tr>
<tr><td scope="row" class='awrc'>TA-Instance Undo</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>TX-Transaction</td>
<td align="right" class='awrnc'>198,503</td><td align="right" class='awrnc'>198,491</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1</td>
<td align="right" class='awrc'>1,386</td><td align="right" class='awrc'>1,386</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrnc'>1,386</td><td align="right" class='awrnc'>1,386</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IS-Instance State</td>
<td align="right" class='awrc'>920</td><td align="right" class='awrc'>920</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TT-Tablespace</td>
<td align="right" class='awrnc'>272</td><td align="right" class='awrnc'>272</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrc'>258</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrnc'>229</td><td align="right" class='awrnc'>230</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrc'>132</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrc'>74</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CU-Cursor</td>
<td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TO-Temp Object</td>
<td align="right" class='awrc'>34</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MR-Media Recovery</td>
<td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrc'>22</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SE-Session Migration</td>
<td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQ-Sequence Cache</td>
<td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrc'>8</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SH-Active Session History Flushing</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PR-Process Startup</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM allocation</td><td align="right" class='awrc'>19,928</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM connection state latch</td><td align="right" class='awrnc'>2,725</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM db client latch</td><td align="right" class='awrc'>2,368</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map headers</td><td align="right" class='awrnc'>750</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map load waiting list</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>248</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>42,843,482</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network background latch</td><td align="right" class='awrnc'>2,583</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network state latch</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM remote client latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Alerted Metric Element list</td><td align="right" class='awrc'>4,374</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Autotask management</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Change Notification Hash table latch</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Column stats entry latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>14,305</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DML lock allocation</td><td align="right" class='awrnc'>406,235</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Event Group Locks</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FIB s.o chain latch</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FOB consolidated s.o list latch</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>File State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile block</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile write queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hang Manager wait event statistics</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,931</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>I/O Staticstics latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats main anchor latch</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM access tracking extent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM activity tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary rw latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area sb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area scb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM emb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM seg hdr latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMFS defer write list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMXT hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC other latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC stats buffer allocation latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>In memory undo latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS Sh mem access</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast add buf latch</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast drop buf latch</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast load blnc latch</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue access latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue state obj latch</td><td align="right" class='awrnc'>2,814</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS slv state obj latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KCNIBR - invalid block range tree</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDCStatHash latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Buffer Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Bucket Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Elem Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO action list latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO bll latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC FX Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFCL LE Freelist</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS client latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS cluster latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS endpoint latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS process latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFK SGA Libload latch</td><td align="right" class='awrc'>11,932</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFMD SGA</td><td align="right" class='awrnc'>190</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool KGH calls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>194,734</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>156,427</td><td align="right" class='awrnc'>0.98</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool pending avail list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>5,685,378</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS req layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS id table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS ksfs_node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFSD name cache parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL LS Segment latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC ASPC anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrnc'>436</td><td align="right" class='awrnc'>0.69</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Namespace latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSK PDB IO STAT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMA SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMF SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSWL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrc'>781</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrnc'>1,225</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR large replies</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTF sga latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTILM latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTU in-memory txn table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA ODPSCN latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KWQMN job cache list latch</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Latch for NonceHistory</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Locator state objects pool parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lost write change tracking</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lsod array latch</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA asr alloc latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>217</td><td align="right" class='awrc'>23.04</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context latch</td><td align="right" class='awrnc'>1,500</td><td align="right" class='awrnc'>7.07</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>221</td><td align="right" class='awrc'>34.84</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MQL Tracking Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Management Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Subscriber</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Message cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MinActiveScn Latch</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex Stats</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process</td><td align="right" class='awrc'>662</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process allocation</td><td align="right" class='awrnc'>778</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process: request allocation</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB Hash Table Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB LRU structure</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL warning settings</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX hash array latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for dependency tracking</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for query hash table access</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for segments scanning</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>QMT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Real-time descriptor latch</td><td align="right" class='awrnc'>24,758</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request stats latch</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request struct latch</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Request holder compeltion list latch</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA IO buffer pool latch</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Bkt Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Log Latch</td><td align="right" class='awrnc'>11,075</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA blob parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA bucket locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA heap locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA pool locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SO private so latch</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>111</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager workarea list latch</td><td align="right" class='awrc'>9,111</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SR Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched IM Job latch</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched InMem Job Cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Shared B-Tree</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams Generic</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Subscriber Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Testing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Token Manager</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>UM object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>WCR: sync</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>X$KSFQP</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB NFS Security Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB unused session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB used session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>106,028</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active service list</td><td align="right" class='awrnc'>1,861</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>649</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>archive destination</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>begin backup scn array</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>business card</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffer handles</td><td align="right" class='awrc'>88</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers chains</td><td align="right" class='awrnc'>120,952,114</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>20,783,291</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>2,995,436</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21,104,226</td><td align="right" class='awrc'>0.85</td></tr>
<tr><td scope="row" class='awrnc'>cache table scan latch</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>631</td><td align="right" class='awrc'>4.28</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>change notification client cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel handle pool latch</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>1.36</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel operations parent latch</td><td align="right" class='awrnc'>8,630</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>4,175,627</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>718,443</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>client/application info</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>compile environment latch</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp handoff latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp server hash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp sga latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type state latch</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type wait latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr slave free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cvmap freelist lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>deferred cleanup latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher info</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dml lock allocation</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>done queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dtp latch</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dummy allocation</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eighth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eleventh spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enqueue freelist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18,327</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>1,252,403</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>312</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueues</td><td align="right" class='awrnc'>610</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>error message lists</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fast space usage latch</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fifteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>file cache latch</td><td align="right" class='awrnc'>485</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>first Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flash file access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flashback copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourth Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>10,462,212</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>846,417</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc imc list</td><td align="right" class='awrc'>3,263</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc xid list</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity object freelist latch</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs commit scn state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>347,637</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs opaque info freelist</td><td align="right" class='awrnc'>348,612</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs partitioned table hash</td><td align="right" class='awrc'>24,005,562</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19,023,635</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering latch</td><td align="right" class='awrnc'>82,883</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5,185</td><td align="right" class='awrnc'>5.57</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>1,507,676</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>387,857</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>27,122,525</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>334</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs resource scan list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource timerq list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource validate list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows freelist</td><td align="right" class='awrnc'>1,156,030</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>132,129</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21,807</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges deadlock list</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges domain table</td><td align="right" class='awrc'>444,187</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>414,313</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges group table</td><td align="right" class='awrc'>451,055</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process hash list</td><td align="right" class='awrnc'>716,843</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process parent latch</td><td align="right" class='awrc'>896,937</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process table freelist</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote lock freelist</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>472,966</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>1.35</td></tr>
<tr><td scope="row" class='awrc'>ges resource scan list</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource table freelist</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges s-lock bitvec freelist</td><td align="right" class='awrc'>568</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges timeout list</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges value block free list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>global KZLD latch for auth type mem in SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global tx hash mapping</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>granule from data transfer cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gws:Sharding global descriptor latch</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table Sql Plan Finding latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table column usage latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14,175</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table expression usage tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table sql contorl latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat check</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>heartbeat structure management</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>167</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>imc buf hdl lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc cr clone buf</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc hash lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc sj lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc srchsp lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc-txn-wrk-lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory area latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar segment hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory global pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>internal temp table object number allocation latch</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>interrupt manipulation</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>intra txn parallel recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule list</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule metadata list</td><td align="right" class='awrnc'>242</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job workq parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes parameter latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q global data latch</td><td align="right" class='awrc'>222</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q lock allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kKCN Cqn SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcn buffer chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kdlx hb parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgb parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgnfs mount latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjbr roi instance map</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci objects freelist latch</td><td align="right" class='awrnc'>381</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci process context latch</td><td align="right" class='awrc'>430</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19,966</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjci process list latch</td><td align="right" class='awrnc'>261</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci request sequence latch</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjcipctx state object freelist latch</td><td align="right" class='awrnc'>106</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoedcso state object freelist latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoer owner hash bucket</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjpm my inst data</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Request obj freelist latch</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrnc'>106</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect control request queue</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,394</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect warm up context</td><td align="right" class='awrnc'>1,873</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrc'>3,395</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect service hash table bucket</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjscpss state object freelist latch</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kokc descriptor allocation latch</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kpoxft latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>5.00</td></tr>
<tr><td scope="row" class='awrnc'>krso process</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksevn object root latch</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksfv messages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksi resource reuse count</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim group membership cache</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim membership request latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>266</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksns object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kss move lock</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksuosstats global area</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksutcpistat latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv allocation latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>8,400</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv msg queue latch</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxp shared latch</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxp so latch</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktfbn latch</td><td align="right" class='awrnc'>131</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg space</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg stages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg worklink</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm global data</td><td align="right" class='awrc'>216</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm prv jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktmpj HT ls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwqbsn:qsga</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbmdl: metadata latch</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbql: queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsslLat: skiplist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kxfxscanrate_latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>14,332</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>list of block allocation</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>loader state object freelist</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment dispenser latch</td><td align="right" class='awrnc'>154</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment hash table latch</td><td align="right" class='awrc'>181</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment query latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock DBA buffer during media recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log write info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15,050</td><td align="right" class='awrnc'>3.41</td></tr>
<tr><td scope="row" class='awrc'>log write worker phase</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logical standby cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer context allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer local</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer work area</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>longop free list parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>managed standby</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message bitmap latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message pool operations parent latch</td><td align="right" class='awrc'>3,119</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>messages</td><td align="right" class='awrnc'>271,463</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>msg queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>294</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service memory objects</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service namespace bucket</td><td align="right" class='awrnc'>1,801</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service pending queue</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request queue</td><td align="right" class='awrnc'>3,390</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ncodef allocation latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ninth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header freelist</td><td align="right" class='awrc'>1,256,935</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.80</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>43,025,828</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>311,401</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>object queue memory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object stats modification</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel query alloc buffer</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>400</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parallel query stats</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel txn reco latch</td><td align="right" class='awrc'>507</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parameter table management</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pdb enqueue hash chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>peshm</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_free_list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_hash_node</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pkey global statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon dead latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>134,036</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>121,455</td><td align="right" class='awrc'>1.03</td></tr>
<tr><td scope="row" class='awrnc'>process allocation</td><td align="right" class='awrnc'>1,713</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process group creation</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process memory detail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process pkey statistics list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue reference</td><td align="right" class='awrc'>3,073</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>373</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>qmn task queue latch</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>quarantine object</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server freelists</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server process</td><td align="right" class='awrc'>240</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>queued dump request</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>queuing load statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read-moslty lock queue under pkey</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>recovery domain hash bucket</td><td align="right" class='awrc'>4,212</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>81,294</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>911,306</td><td align="right" class='awrnc'>0.66</td></tr>
<tr><td scope="row" class='awrc'>redo copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>912,495</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>152,803</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote tool request latch</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr group change latch</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:active threads</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change group</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change state</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:free threads list</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change alloc latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:resource group CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:schema config</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:session queuing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache objects</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rt rmv count latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>167</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>second Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>segmented array pool</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence cache</td><td align="right" class='awrc'>411</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>service drain list</td><td align="right" class='awrnc'>334</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session allocation</td><td align="right" class='awrc'>55,639</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>55,313</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session idle bit</td><td align="right" class='awrnc'>112,434</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session state list latch</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session statistics</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session switching</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>5.36</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session timer</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>seventh spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga hash table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shard latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shardgroup list latch</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>25,835</td><td align="right" class='awrnc'>2.73</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool sim alloc</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool simulator</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared server configuration</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sim partition latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>5,841,706</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator lru latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,511,153</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>sixth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sort extent pool</td><td align="right" class='awrnc'>457</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>945</td><td align="right" class='awrc'>60.53</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>203</td><td align="right" class='awrc'>10.34</td></tr>
<tr><td scope="row" class='awrnc'>state object free list</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>statistics aggregation</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>subscriber Ht bkt</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tablespace key chain</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temp lob duration state obj allocation</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temporary table state object allocation</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tenth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 lmid cln</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mixed exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mode exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test open exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test pdb exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test shared parent2 lmid</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>thirteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>threshold alerts latch</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction allocation</td><td align="right" class='awrc'>284</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twelfth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fifth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-first spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fourth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-second spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-third spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>641,980</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit holder</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit queues</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>120,952,114</td><td align="right" class='awrc'>22,019</td><td align="right" class='awrc'>3,849</td><td align="right" class='awrc'>18,698</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>2,995,436</td><td align="right" class='awrnc'>11,760</td><td align="right" class='awrnc'>1,128</td><td align="right" class='awrnc'>10,708</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>27,122,525</td><td align="right" class='awrc'>8,456</td><td align="right" class='awrc'>1,296</td><td align="right" class='awrc'>7,328</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation hash table</td><td align="right" class='awrnc'>42,843,482</td><td align="right" class='awrnc'>6,906</td><td align="right" class='awrnc'>887</td><td align="right" class='awrnc'>6,140</td></tr>
<tr><td scope="row" class='awrc'>gc element</td><td align="right" class='awrc'>10,462,212</td><td align="right" class='awrc'>3,405</td><td align="right" class='awrc'>517</td><td align="right" class='awrc'>2,969</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>5,685,378</td><td align="right" class='awrnc'>3,110</td><td align="right" class='awrnc'>188</td><td align="right" class='awrnc'>2,946</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>271,463</td><td align="right" class='awrc'>2,682</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>2,611</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>106,028</td><td align="right" class='awrnc'>1,895</td><td align="right" class='awrnc'>822</td><td align="right" class='awrnc'>1,081</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>1,507,676</td><td align="right" class='awrc'>796</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>771</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>25,835</td><td align="right" class='awrnc'>705</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>690</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>81,294</td><td align="right" class='awrc'>690</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>598</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>134,036</td><td align="right" class='awrnc'>596</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>587</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>945</td><td align="right" class='awrc'>572</td><td align="right" class='awrc'>561</td><td align="right" class='awrc'>102</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>43,025,828</td><td align="right" class='awrnc'>496</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>431</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>1,252,403</td><td align="right" class='awrc'>452</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>390</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>194,734</td><td align="right" class='awrnc'>420</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>311</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering latch</td><td align="right" class='awrc'>82,883</td><td align="right" class='awrc'>419</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>336</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>152,803</td><td align="right" class='awrnc'>408</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>392</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>472,966</td><td align="right" class='awrc'>188</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>156</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context latch</td><td align="right" class='awrnc'>1,500</td><td align="right" class='awrnc'>106</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>9</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>221</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>6</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>414,313</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>66</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>4,175,627</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>63</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>217</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>30</td></tr>
<tr><td scope="row" class='awrc'>gcs opaque info freelist</td><td align="right" class='awrc'>348,612</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>44</td></tr>
<tr><td scope="row" class='awrnc'>gcs nodemap pool</td><td align="right" class='awrnc'>347,637</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>40</td></tr>
<tr><td scope="row" class='awrc'>undo global data</td><td align="right" class='awrc'>641,980</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>36</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>15</td></tr>
<tr><td scope="row" class='awrc'>DML lock allocation</td><td align="right" class='awrc'>406,235</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>13</td></tr>
<tr><td scope="row" class='awrnc'>ges process hash list</td><td align="right" class='awrnc'>716,843</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>14,332</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9</td></tr>
<tr><td scope="row" class='awrnc'>ksv class latch</td><td align="right" class='awrnc'>8,400</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5</td></tr>
<tr><td scope="row" class='awrc'>session switching</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>5</td></tr>
<tr><td scope="row" class='awrnc'>object queue header freelist</td><td align="right" class='awrnc'>1,256,935</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>channel handle pool latch</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmTranslate</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>466</td><td align="right" class='awrc'>436</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmDoDone_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>421</td><td align="right" class='awrnc'>446</td></tr>
<tr><td class='awrc'>DML lock allocation</td><td class='awrc'>ktaiam</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>149</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctcsnd: send normal message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>114</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>7</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_adjtkt: adjust send tickets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>MGA pid alloc latch</td><td class='awrc'>ksm_mga_sctx_rtrcv_do_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>55</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_detach_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>38</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_sync_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>30</td></tr>
<tr><td class='awrnc'>MGA shared context root latch</td><td class='awrnc'>ksm_mga_detach_whr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>85</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>786</td><td align="right" class='awrc'>818</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbk_add_rbr_ckpt: Add rbr ckpt 3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbk_add_rbr_ckpt: Add rbr ckpt 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbkcpa: Checkpoint post-processing 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbkcpa: Checkpoint post-processing</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: slow path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,418</td><td align="right" class='awrnc'>723</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclcls_3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>794</td><td align="right" class='awrc'>106</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>385</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>263</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbic2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>168</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzib: finish processing buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>753</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclpdcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgcur: slow path</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>724</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: fast pin release</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>1,291</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path exam</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>491</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbic1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>24</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclrlstp</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>18</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbxsv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>25</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: aux pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>13</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: change buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: cur pin change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>7</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclrwrite_3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbnew: new latch again</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnlc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>17</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclexpandlock</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>16</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgcur: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: retry after read</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzcg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclbla</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgws</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,031</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>86</td><td align="right" class='awrnc'>228</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>489</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>39</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbxsv: move to being written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>call allocation</td><td class='awrnc'>ksuxds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>call allocation</td><td class='awrc'>ksudlp: top call</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>channel handle pool latch</td><td class='awrnc'>ksrchdelete()</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbklbc_cql</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbkubc_4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndnewm</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>199</td><td align="right" class='awrc'>137</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndx</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>117</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclulb</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>96</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclpdcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>21</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>30</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfnds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>16</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>KCLUNLNK</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>83</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclantilock_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclexpand_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclpdc_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kcl_fairness</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnd</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrlstp</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gcs nodemap pool</td><td class='awrnc'>kjbrnmapalloc_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs nodemap pool</td><td class='awrc'>kjbrnmapfree_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>gcs opaque info freelist</td><td class='awrnc'>kjbrinfoalloc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjfcdrmrfg end step</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjfcdrmrfg drmfrz step</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjfcdrmrfg beginning</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjdrisdrm nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>109</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbralc: check freelist nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbrralc: reserve allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrfr_bg2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>10</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc add resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>446</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblocalobj_nolock</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>431</td><td align="right" class='awrnc'>699</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbcropen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>133</td><td align="right" class='awrc'>54</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclpdc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>414</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpopen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>24</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbclose_remaster</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>21</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpclose</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>20</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblpast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>24</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrprmexpack</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>7</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrdowncvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>18</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbconvert</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrrcfwst</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbassume</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbopen:affinity</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcres_99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclgrantlk_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbcancel</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblprmexp2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpflushpi</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>ges enqueue table freelist</td><td class='awrnc'>kjlalc: lock allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>ges enqueue table freelist</td><td class='awrc'>kjlfr: remove lock from parent object</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8</td></tr>
<tr><td class='awrnc'>ges process hash list</td><td class='awrnc'>kjakiqa: set inquiry response</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>27</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjlmfnd: search for lockp by rename and inst id</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjrmas1: lookup master node</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjakcai: search for resp by resname</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjcvscn: remove from scan queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjuinq: inquire resource held mode</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ksv class latch</td><td class='awrc'>ksvclsl: checkpool</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksarcv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksaamb: after wakeup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>32</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcs024</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>object queue header freelist</td><td class='awrnc'>kcbo_unlink_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>object queue header freelist</td><td class='awrc'>kcbo_link_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_unlink_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>22</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_link_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>27</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_cq</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>15</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_q_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kclbufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>ksliwat:remove</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>kslpstevent:get</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>ksliwat:add:wait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_write: before write</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>9</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_post: more space</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfwcr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>15</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfw_post: rba scn pair</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>session switching</td><td class='awrc'>kskexeall</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_grab_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>412</td><td align="right" class='awrnc'>499</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_purgeexpired</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_detach_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>62</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_movetasks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktufrbs_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktudba: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktusmupst: KSLBEGIN</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktudnx:child</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfre</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>41</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqgtl3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>31</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqrcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>37</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghupr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>6</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkdl1  85</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>98</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgn2 106</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkc1   57</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpin1   4</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpnal2  91</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpndl1  95</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	  34,337,885</li>
<li class="awr">Captured Segments account for	32.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER73</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73675</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>377,632</td><td align="right" class='awrc'>1.10</td></tr>
<tr><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>375,664</td><td align="right" class='awrnc'>1.09</td></tr>
<tr><td class='awrc'>USER47</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73538</td><td align="right" class='awrc'>73564</td><td align="right" class='awrc'>366,112</td><td align="right" class='awrc'>1.07</td></tr>
<tr><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73566</td><td align="right" class='awrnc'>73586</td><td align="right" class='awrnc'>360,832</td><td align="right" class='awrnc'>1.05</td></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>360,672</td><td align="right" class='awrc'>1.05</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	   20,315,043</li>
<li class="awr">Captured Segments account for	45.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER78</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>339,903</td><td align="right" class='awrc'>1.67</td></tr>
<tr><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>338,704</td><td align="right" class='awrnc'>1.67</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73566</td><td align="right" class='awrc'>73586</td><td align="right" class='awrc'>337,660</td><td align="right" class='awrc'>1.66</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73299</td><td align="right" class='awrnc'>73301</td><td align="right" class='awrnc'>336,961</td><td align="right" class='awrnc'>1.66</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>336,523</td><td align="right" class='awrc'>1.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   20,314,569</li>
<li class="awr">Captured Segments account for	45.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER78</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>339,903</td><td align="right" class='awrc'>1.67</td></tr>
<tr><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>338,704</td><td align="right" class='awrnc'>1.67</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73566</td><td align="right" class='awrc'>73586</td><td align="right" class='awrc'>337,660</td><td align="right" class='awrc'>1.66</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73299</td><td align="right" class='awrnc'>73301</td><td align="right" class='awrnc'>336,961</td><td align="right" class='awrnc'>1.66</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>336,523</td><td align="right" class='awrc'>1.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:      20,314,569</li>
<li class="awr">Captured Segments account for	45.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER78</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>339,903</td><td align="right" class='awrc'>1.67</td></tr>
<tr><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>338,704</td><td align="right" class='awrnc'>1.67</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73566</td><td align="right" class='awrc'>73586</td><td align="right" class='awrc'>337,660</td><td align="right" class='awrc'>1.66</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73299</td><td align="right" class='awrnc'>73301</td><td align="right" class='awrnc'>336,961</td><td align="right" class='awrnc'>1.66</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>336,523</td><td align="right" class='awrc'>1.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	       718,112</li>
<li class="awr">Captured Segments account for	40.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER73</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73675</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>10,743</td><td align="right" class='awrc'>1.50</td></tr>
<tr><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>10,681</td><td align="right" class='awrnc'>1.49</td></tr>
<tr><td class='awrc'>USER47</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73538</td><td align="right" class='awrc'>73564</td><td align="right" class='awrc'>10,631</td><td align="right" class='awrc'>1.48</td></tr>
<tr><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73698</td><td align="right" class='awrnc'>73719</td><td align="right" class='awrnc'>10,610</td><td align="right" class='awrnc'>1.48</td></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>10,591</td><td align="right" class='awrc'>1.47</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	       693,702</li>
<li class="awr">Captured Segments account for	41.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER78</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>10,539</td><td align="right" class='awrc'>1.52</td></tr>
<tr><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>10,488</td><td align="right" class='awrnc'>1.51</td></tr>
<tr><td class='awrc'>USER1</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>10,457</td><td align="right" class='awrc'>1.51</td></tr>
<tr><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73566</td><td align="right" class='awrnc'>73586</td><td align="right" class='awrnc'>10,452</td><td align="right" class='awrnc'>1.51</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>10,436</td><td align="right" class='awrc'>1.50</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		  443</li>
<li class="awr">Captured Segments account for	37.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_1451622190_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>161</td><td align="right" class='awrc'>36.34</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P223</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1.13</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER78</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>12,816</td><td align="right" class='awrc'>4.31</td></tr>
<tr><td class='awrnc'>USER91</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73762</td><td align="right" class='awrnc'>73767</td><td align="right" class='awrnc'>11,424</td><td align="right" class='awrnc'>3.84</td></tr>
<tr><td class='awrc'>USER73</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73675</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>11,328</td><td align="right" class='awrc'>3.81</td></tr>
<tr><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>11,184</td><td align="right" class='awrnc'>3.76</td></tr>
<tr><td class='awrc'>USER47</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73538</td><td align="right" class='awrc'>73564</td><td align="right" class='awrc'>10,976</td><td align="right" class='awrc'>3.69</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	      157</li>
<li class="awr">Captured Segments account for	68.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER9</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73356</td><td align="right" class='awrc'>73372</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>30.57</td></tr>
<tr><td class='awrnc'>USER12</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73370</td><td align="right" class='awrnc'>73392</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>20.38</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_PARAMETER</td><td class='awrc'>WRH$_PARAMETER_1451622190_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73015</td><td align="right" class='awrc'>73015</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>2.55</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_1451622190_0</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>73034</td><td align="right" class='awrnc'>73034</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1.91</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_PARAMETER_PK</td><td class='awrc'>WRH$_PARAMETER_1451622190_0</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>73018</td><td align="right" class='awrc'>73018</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1.91</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		 6,498</li>
<li class="awr">Captured Segments account for	27.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER80</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73710</td><td align="right" class='awrc'>73722</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>2.65</td></tr>
<tr><td class='awrnc'>USER91</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73762</td><td align="right" class='awrnc'>73767</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>2.59</td></tr>
<tr><td class='awrc'>USER66</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73649</td><td align="right" class='awrc'>73661</td><td align="right" class='awrc'>163</td><td align="right" class='awrc'>2.51</td></tr>
<tr><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73698</td><td align="right" class='awrnc'>73719</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>2.34</td></tr>
<tr><td class='awrc'>USER75</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73687</td><td align="right" class='awrc'>73694</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>2.09</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	1,204,560</li>
<li class="awr">Captured Segments account for	58.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER256</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74580</td><td align="right" class='awrc'>74596</td><td align="right" class='awrc'>35,622</td><td align="right" class='awrc'>2.96</td></tr>
<tr><td class='awrnc'>USER15</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73383</td><td align="right" class='awrnc'>73415</td><td align="right" class='awrnc'>34,897</td><td align="right" class='awrnc'>2.90</td></tr>
<tr><td class='awrc'>USER175</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74184</td><td align="right" class='awrc'>74204</td><td align="right" class='awrc'>32,751</td><td align="right" class='awrc'>2.72</td></tr>
<tr><td class='awrnc'>USER169</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74156</td><td align="right" class='awrnc'>74162</td><td align="right" class='awrnc'>32,165</td><td align="right" class='awrnc'>2.67</td></tr>
<tr><td class='awrc'>USER182</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74214</td><td align="right" class='awrc'>74236</td><td align="right" class='awrc'>31,482</td><td align="right" class='awrc'>2.61</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>2,038</td><td align="right" class='awrnc'>3.68</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>452</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>452</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>391</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>4,809</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>182</td><td align="right" class='awrnc'>4,101</td></tr>
<tr><td scope="row" class='awrc'>dc_objects</td><td align="right" class='awrc'>3,153</td><td align="right" class='awrc'>1.90</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>3,063</td></tr>
<tr><td scope="row" class='awrnc'>dc_profiles</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>dc_props</td><td align="right" class='awrc'>275</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td></tr>
<tr><td scope="row" class='awrnc'>dc_rollback_segments</td><td align="right" class='awrnc'>1,070</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>509</td></tr>
<tr><td scope="row" class='awrc'>dc_segments</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>38.89</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>821</td></tr>
<tr><td scope="row" class='awrnc'>dc_sequences</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>11.11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>dc_tablespaces</td><td align="right" class='awrc'>255</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>dc_users</td><td align="right" class='awrnc'>208</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>652</td></tr>
<tr><td scope="row" class='awrc'>outstanding_alerts</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>479</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>957</td><td align="right" class='awrnc'>6.79</td><td align="right" class='awrnc'>6,738,982</td><td align="right" class='awrnc'>-0.18</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>6</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>92.54</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>64.91</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>64.91</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>363</td><td align="right" class='awrc'>11.85</td><td align="right" class='awrc'>2,993</td><td align="right" class='awrc'>4.24</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>42.86</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>42.86</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>454</td><td align="right" class='awrc'>454</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>691</td><td align="right" class='awrc'>2,261</td><td align="right" class='awrc'>2,261</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>1,056.00</td><td align="right" class='awrc'>1,056.00</td><td align="right" class='awrc'>1,056.00</td><td align="right" class='awrc'>1,568.00</td><td align="right" class='awrc'>0</td><td class='awrc'>SHR/DEF</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>GRO/IMM</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,792.00</td><td align="right" class='awrnc'>1,792.00</td><td align="right" class='awrnc'>640.00</td><td align="right" class='awrnc'>1,792.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>GRO/DEF</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>302.06</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>6.05</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>151</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1,602.02</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.28</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>374</td><td align="right" class='awrnc'>374</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>55.89</td><td align="right" class='awrc'>53.91</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>246</td><td align="right" class='awrc'>244</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>46.32</td><td align="right" class='awrnc'>35.05</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>146</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2,006.30</td><td align="right" class='awrc'>88.96</td><td align="right" class='awrc'>6.77</td><td align="right" class='awrc'>13.55</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>947</td><td align="right" class='awrc'>915</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>237.88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.06</td><td align="right" class='awrnc'>10.22</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>47</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1,077.59</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.99</td><td align="right" class='awrc'>8.07</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>270</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>5.57</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>140</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>5.07</td><td align="right" class='awrc'>2.92</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>37</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1,327.32</td><td align="right" class='awrnc'>8.50</td><td align="right" class='awrnc'>9.17</td><td align="right" class='awrnc'>18.67</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>531</td><td align="right" class='awrnc'>494</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>1,207,959,552</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>8,954,056</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>41,373,696</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>20,216,545,280</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>15.62</td><td align="right" class='awrnc'>15.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>61.44</td><td align="right" class='awrc'>61.44</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLH0</td><td align="right" class='awrnc'>46.32</td><td align="right" class='awrnc'>47.33</td><td align="right" class='awrnc'>2.19</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>50.68</td><td align="right" class='awrc'>22.84</td><td align="right" class='awrc'>-54.94</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SO private sga</td><td align="right" class='awrnc'>92.68</td><td align="right" class='awrnc'>92.68</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SQLA</td><td align="right" class='awrc'>167.64</td><td align="right" class='awrc'>165.70</td><td align="right" class='awrc'>-1.15</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>buffer handle</td><td align="right" class='awrnc'>23.44</td><td align="right" class='awrnc'>23.44</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>dbwriter coalesce buffer</td><td align="right" class='awrc'>32.03</td><td align="right" class='awrc'>32.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>43.56</td><td align="right" class='awrnc'>86.14</td><td align="right" class='awrnc'>97.74</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resources</td><td align="right" class='awrc'>78.01</td><td align="right" class='awrc'>78.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resv res hash bucket</td><td align="right" class='awrnc'>24.00</td><td align="right" class='awrnc'>24.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs shadows</td><td align="right" class='awrc'>42.55</td><td align="right" class='awrc'>42.55</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ges enqueues</td><td align="right" class='awrnc'>91.60</td><td align="right" class='awrnc'>91.60</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges resource permanent</td><td align="right" class='awrc'>97.11</td><td align="right" class='awrc'>97.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ksunfy_meta 1</td><td align="right" class='awrnc'>196.98</td><td align="right" class='awrnc'>196.98</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>object queue hash buckets</td><td align="right" class='awrc'>32.00</td><td align="right" class='awrc'>32.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>procs: ksunfy</td><td align="right" class='awrnc'>26.72</td><td align="right" class='awrnc'>26.72</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>row cache</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>session</td><td align="right" class='awrnc'>75.45</td><td align="right" class='awrnc'>75.45</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>transaction</td><td align="right" class='awrc'>24.31</td><td align="right" class='awrc'>24.31</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>buffer_cache</td><td align="right" class='awrnc'>1,056.00</td><td align="right" class='awrnc'>1,056.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>fixed_sga</td><td align="right" class='awrc'>8.54</td><td align="right" class='awrc'>8.54</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>log_buffer</td><td align="right" class='awrnc'>39.46</td><td align="right" class='awrnc'>39.46</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>shared_io_pool</td><td align="right" class='awrc'>96.00</td><td align="right" class='awrc'>96.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>21,572</td><td align="right" class='awrc'>25,701</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>330</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p30sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199,	+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P30S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p30sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>805306368000</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p30sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>4376756224</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>5120</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>21474836480</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>3221225472</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2469</td><td align="right" class='awrc'>77.95</td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>44.39</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>42.43</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2469</div></td><td align="right" class='awrnc'><div class="hidden">77.94904057879836426549229317395407360805</div></td>
<td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>27.62</td><td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>14.63</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">2469</div></td><td align="right" class='awrc'><div class="hidden">77.94904057879836426549229317395407360805</div></td>
<td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>5.85</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>3.52</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>11.17</td>
<td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>4.78</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>4.78</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">342</div></td><td align="right" class='awrc'><div class="hidden">11.16703365838313935199748348537275872916</div></td>
<td class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>2.36</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>2.36</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">342</div></td><td align="right" class='awrnc'><div class="hidden">11.16703365838313935199748348537275872916</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1.64</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>1.57</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2469</td><td align="right" class='awrc'>77.95</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>59.01</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>42.43</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2469</div></td><td align="right" class='awrnc'><div class="hidden">77.94904057879836426549229317395407360805</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>17.14</td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>14.63</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">2469</div></td><td align="right" class='awrc'><div class="hidden">77.94904057879836426549229317395407360805</div></td>
<td class='awrc'>SELECT STATEMENT</td><td align="right" class='awrc'>1.57</td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>1.57</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>11.17</td>
<td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>10.00</td><td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>4.78</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>11.80</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>11.73</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>46.02</td><td align="right" class='awrc'>43.80</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>27.96</td><td align="right" class='awrnc'>26.62</td></tr>
<tr><td scope="row" class='awrc'>CPU + Wait for CPU</td><td class='awrc'>CPU</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>8.30</td><td align="right" class='awrc'>7.90</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td class='awrnc'>System I/O</td><td class='awrnc'>BACKGROUND</td>
<td align="right" class='awrnc'>5.54</td><td align="right" class='awrnc'>5.27</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>4.81</td><td align="right" class='awrc'>4.58</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>46.02</td><td align="right" class='awrc'>&quot;5&quot;,&quot;72049&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>5.54</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrnc'>2.42</td>
<td class='awrnc'>requests</td><td class='awrnc'>interrupt</td><td class='awrnc'>timeout</td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">db file parallel write</div></td><td align="right" class='awrc'><div class="hidden">5.53633217993079584775086505190311418685</div></td><td align="right" class='awrc'>&quot;2&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrc'>1.26</td>
<td class='awrc'><div class="hidden">requests</div></td><td class='awrc'><div class="hidden">interrupt</div></td><td class='awrc'><div class="hidden">timeout</div></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>09:17:49   (2.2 min)</td><td align="right" class='awrc'>1,591</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>769</td><td align="right" class='awrc'>24.19</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:17:49   (2.2 min)</div></td><td align="right" class='awrnc'><div class="hidden">1591</div></td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>415</td><td align="right" class='awrnc'>13.05</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:17:49   (2.2 min)</div></td><td align="right" class='awrc'><div class="hidden">1591</div></td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>4.59</td></tr>
<tr><td align="right" class='awrnc'>09:20:00   (3.4 min)</td><td align="right" class='awrnc'>1,588</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>694</td><td align="right" class='awrnc'>21.83</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:20:00   (3.4 min)</div></td><td align="right" class='awrc'><div class="hidden">1588</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>474</td><td align="right" class='awrc'>14.91</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:20:00   (3.4 min)</div></td><td align="right" class='awrnc'><div class="hidden">1588</div></td><td class='awrnc'>CPU + Wait for CPU</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>4.97</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:1451622190_2_46</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:1451622190_2_46&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 45 to 46.
Time period starts at 17-FEB-20 09.17.49 AM
Time period ends at 17-FEB-20 09.23.24 AM

Analysis Target
---------------
Database &apos;P30SDB&apos; with DB ID 1451622190.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p30sdb2, numbered 2 and hosted at
mcracpoc2.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 27981 seconds.
The average number of active sessions was 83.52.

Summary of Findings
-------------------
   Description			 Active Sessions      Recommendations
				 Percent of Activity
   ----------------------------  -------------------  ---------------
1  Interconnect Latency 	 83.52 | 100	      1
2  Top SQL Statements		 81.29 | 97.33	      2
3  &quot;User I/O&quot; wait Class	   42.45 | 50.83	0
4  Global Cache Messaging	 30.09 | 36.03	      1
5  Buffer Busy - Hot Objects	 24.68 | 29.55	      0
6  Undersized SGA		 2.24 | 2.68	      1
7  Unusual &quot;Cluster&quot; Wait Event  1.77 | 2.12		3


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 83.77 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 27527 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 94% for database lock management.
The average latency for 8K interconnect messages was 5715 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.26.102 and source &quot;6A?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 83.52 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 30.09 active sessions, 36.03% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 31.9 active sessions, 38.19% of total activity.


Finding 2: Top SQL Statements
Impact is 81.53 active sessions, 97.33% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 71.09 active sessions, 85.12% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 6253448 times and
      had an average elapsed time of 0.0035 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 9.54 active sessions, 11.42% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 93% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 193423 times and
      had an average elapsed time of 0.016 seconds.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 42.58 active sessions, 50.83% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 30.18 active sessions, 36.03% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 30.09 active sessions, 36.03% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 83% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 31.9 active sessions, 38.19% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 24.75 active sessions, 29.55% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 24.68 active sessions, 29.55% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 30.09 active sessions, 36.03% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 31.9 active sessions, 38.19% of total activity.


Finding 6: Undersized SGA
Impact is 2.25 active sessions, 2.68% of total activity.
--------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter &quot;sga_target&quot; was &quot;3072 M&quot; during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is 2.24 active sessions, 2.68% of total activity.
   -------------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter &quot;sga_target&quot; to
      3840 M.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;User I/O&quot; was consuming significant database time.
      Impact is 42.45 active sessions, 50.83% of total activity.


Finding 7: Unusual &quot;Cluster&quot; Wait Event
Impact is 1.78 active sessions, 2.12% of total activity.
--------------------------------------------------------
Wait event &quot;gc current grant read-mostly invalidation&quot; in wait class &quot;Cluster&quot;
was consuming significant database time.

   Recommendation 1: Application Analysis
   Estimated benefit is 1.77 active sessions, 2.12% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 1.77 active sessions, 2.12% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 1.77 active sessions, 2.12% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Service &quot;p30sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 31.9 active sessions, 38.19% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 4</td><td align="right" class='awrc'>	  4</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    4</td><td align="right" class='awrnc'>    4</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		    19.89</td><td align="right" class='awrnc'>		       0.03</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		13.11</td><td align="right" class='awrc'>		  0.02</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     11,582.82</td><td align="right" class='awrnc'>		   19.14</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       12,127.98</td><td align="right" class='awrc'>		    20.04</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.07</td><td align="right" class='awrnc'>		     0.00</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>		4,894.98</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	40.82</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.02</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	59.17</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  94.07</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	    7,324.8</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	       7,129.9</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  22.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	    0.0</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    6.4</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'>        58,260.9</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>		 0.0</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       1.4</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	      32,195.1</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       1,425.2</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	    91.9</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	       6,039.7</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	      213.9</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      29.7</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     30.9</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   24.0</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   35.45</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   62.77</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 1.78</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.26.102</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>13,824</td><td align="right" class='awrnc'>41.31</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>711</td><td align="right" class='awrnc'>2.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>6,146</td><td align="right" class='awrc'>18.37</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>6,884</td><td align="right" class='awrnc'>20.57</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>14,337</td><td align="right" class='awrc'>42.85</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>5,494</td><td align="right" class='awrnc'>16.42</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>960</td><td align="right" class='awrnc'>2.87</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>7,856</td><td align="right" class='awrc'>23.48</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>176,885</td><td align="right" class='awrnc'>528.62</td><td align="right" class='awrnc'>0.87</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>225</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>1,850</td><td align="right" class='awrnc'>5.53</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>155,466</td><td align="right" class='awrnc'>464.61</td><td align="right" class='awrnc'>0.77</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>7,866</td><td align="right" class='awrnc'>23.51</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>3,100</td><td align="right" class='awrnc'>9.26</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>18,587</td><td align="right" class='awrc'>55.55</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>276,485</td><td align="right" class='awrnc'>826.27</td><td align="right" class='awrnc'>1.37</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>1,248,525</td><td align="right" class='awrc'>3,731.18</td><td align="right" class='awrc'>6.17</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>142</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>119,118</td><td align="right" class='awrnc'>355.98</td><td align="right" class='awrnc'>0.59</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>3,856,415</td><td align="right" class='awrc'>11,524.79</td><td align="right" class='awrc'>19.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>330</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>2,471</td><td align="right" class='awrc'>7.38</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>0.81</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>2,060</td><td align="right" class='awrnc'>6.16</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>20,355</td><td align="right" class='awrc'>60.83</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>1,144</td><td align="right" class='awrc'>3.42</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>5,919</td><td align="right" class='awrc'>17.69</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>99,849</td><td align="right" class='awrnc'>298.40</td><td align="right" class='awrnc'>0.49</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>138,273</td><td align="right" class='awrc'>413.23</td><td align="right" class='awrc'>0.68</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>53,782</td><td align="right" class='awrnc'>160.73</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>1,499,141</td><td align="right" class='awrc'>4,480.14</td><td align="right" class='awrc'>7.40</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>603,737</td><td align="right" class='awrnc'>1,804.25</td><td align="right" class='awrnc'>2.98</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>2,463,622</td><td align="right" class='awrc'>7,362.47</td><td align="right" class='awrc'>12.17</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>3,862,334</td><td align="right" class='awrnc'>11,542.48</td><td align="right" class='awrnc'>19.07</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>1,068,471</td><td align="right" class='awrc'>3,193.10</td><td align="right" class='awrc'>5.28</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>1,891,856</td><td align="right" class='awrnc'>5,653.76</td><td align="right" class='awrnc'>9.34</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>141,034</td><td align="right" class='awrc'>421.48</td><td align="right" class='awrc'>0.70</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>2,456,770</td><td align="right" class='awrnc'>7,341.99</td><td align="right" class='awrnc'>12.13</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>826,111,370,052</td><td align="right" class='awrc'>2,468,811,902.65</td><td align="right" class='awrc'>4,079,381.02</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>114,661</td><td align="right" class='awrnc'>342.66</td><td align="right" class='awrnc'>0.57</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>3,862,333</td><td align="right" class='awrc'>11,542.48</td><td align="right" class='awrc'>19.07</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>151,359</td><td align="right" class='awrnc'>452.33</td><td align="right" class='awrnc'>0.75</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>15,526,439</td><td align="right" class='awrc'>46,400.35</td><td align="right" class='awrc'>76.67</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>1,647,628</td><td align="right" class='awrnc'>4,923.89</td><td align="right" class='awrnc'>8.14</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>2,570,738</td><td align="right" class='awrc'>7,682.58</td><td align="right" class='awrc'>12.69</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>909,684</td><td align="right" class='awrc'>2,718.57</td><td align="right" class='awrc'>4.49</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>1,129,443</td><td align="right" class='awrnc'>3,375.31</td><td align="right" class='awrnc'>5.58</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>569,555</td><td align="right" class='awrc'>1,702.10</td><td align="right" class='awrc'>2.81</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>2,656,482</td><td align="right" class='awrnc'>7,938.83</td><td align="right" class='awrnc'>13.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>214</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>1,250</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>214</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>1,225</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>1,451</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>11</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>149</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>9</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>92</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>212</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>50.00</td><td align="right" class='awrc'>50.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>87.80</td><td align="right" class='awrnc'>12.20</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>144</td><td align="right" headers="CR %|Immed" class='awrc'>98.61</td><td align="right" headers="CR %|Busy" class='awrc'>1.39</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>6,463</td><td align="right" headers="Current %|Immed" class='awrc'>33.41</td><td align="right" headers="Current %|Busy" class='awrc'>65.93</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.67</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>5</td><td align="right" headers="CR %|Immed" class='awrnc'>100.00</td><td align="right" headers="CR %|Busy" class='awrnc'>0.00</td><td align="right" headers="CR %|Congst" class='awrnc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>16</td><td align="right" headers="Current %|Immed" class='awrnc'>25.00</td><td align="right" headers="Current %|Busy" class='awrnc'>75.00</td><td align="right" headers="Current %|Congst" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrclb'>10</td><td align="right" headers="CR %|Immed" class='awrc'>60.00</td><td align="right" headers="CR %|Busy" class='awrc'>40.00</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>1</td><td align="right" headers="Current %|Immed" class='awrc'>0.00</td><td align="right" headers="Current %|Busy" class='awrc'>100.00</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>3175</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1397</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>129406</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>6909</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>6471</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>6900</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>29825</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>342</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>342</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>940</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>1486</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>758</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>71152</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1517</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>175605</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>709</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>709</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>142</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>2,159</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>others</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>5</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>4</td><td align="right" headers="Current %|2hop" class='awrnc'>100.00</td><td align="right" headers="Current %|3hop" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>6</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="CR %|2hop" class='awrnc'>&#160;</td><td align="right" headers="CR %|3hop" class='awrnc'>&#160;</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>1397</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>1397</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>6471</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>6471</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>others</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>342</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>342</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>1486</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>1486</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>1517</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>1517</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>1097</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>8953</td><td align="right" class='awrc'>43.25</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>401</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>367</td><td align="right" class='awrnc'>0.15</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>3.16</td><td align="right" class='awrc'>3.07</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.26.102</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>remaster ops</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remastered objects</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replayed locks received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>replayed locks sent</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resources cleaned</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remaster time (s)</td><td align="right" class='awrnc'>0.9</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>freeze time (s)</td><td align="right" class='awrc'>0.1</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cleanup time (s)</td><td align="right" class='awrnc'>0.0</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replay time (s)</td><td align="right" class='awrc'>0.2</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fixwrite time (s)</td><td align="right" class='awrnc'>0.0</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sync time (s)</td><td align="right" class='awrc'>0.5</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>63</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>65</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects (other inst)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>235</td><td align="right" class='awrnc'>135</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects (persistent)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 1451622190 P30SDB    p30sdb	  PRIMARY	   EE	   YES NO	 8192	      45       46	    2	     2		 2	  2	 1,138.72	  5.58
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p30sdb1   mcracpoc1. 17-Feb-20 07:43 17-Feb-20 09:17 17-Feb-20 09:23 19.0.0.0.0		       5.57	  672.37	 1.66	  120.78 Linux x86 64-bi
   2 p30sdb2   mcracpoc2. 17-Feb-20 07:43 17-Feb-20 09:17 17-Feb-20 09:23 19.0.0.0.0		       5.57	  466.35	 1.66	   83.77 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  204.56 1.E+02 ADDM:1451622190_46	       17-Feb-20 09:17 17-Feb-20 09:23
Top SQL Statements			  204.56  98.24 ADDM:1451622190_46	       17-Feb-20 09:17 17-Feb-20 09:23
"User I/O" wait Class			  204.56  57.70 ADDM:1451622190_46	       17-Feb-20 09:17 17-Feb-20 09:23
Global Cache Messaging			  204.56  32.06 ADDM:1451622190_46	       17-Feb-20 09:17 17-Feb-20 09:23
Buffer Busy - Hot Objects		  204.56  28.52 ADDM:1451622190_46	       17-Feb-20 09:17 17-Feb-20 09:23
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			      3,072		  1,136 	      1,712		     80 						      4,176		     38.2
   2			      3,072		  1,056 	      1,792		     80 						      4,176		     38.2
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			      3,072		  1,096 	      1,752		     80 						      4,176		     38.2
 Min			      3,072		  1,056 	      1,712		     80 						      4,176		     38.2
 Max			      3,072		  1,136 	      1,792		     80 						      4,176		     38.2

OS Statistics By Instance		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  64	32     2     52.8   37.3     31.3   10.5   14.3   34.6	 68.7	       6,225.2	     13,642.3	    19,867.5   1.0321E+06
   2	  64	32     2     35.0   22.4     29.2   10.0   13.6   27.6	 70.8	       5,852.3	     14,179.2	    20,031.5   1.0321E+06
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										      12,077.5	     27,821.4	    39,899.0
			  --------------------------------------------------------------------------------------------------------------------


Time Model				 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	   40,342.1	   5,806.0	 40,337.2	     2.0	    1.4 	 246.5		  0.0	     2,475.5	      765.4
   2	   27,980.8	   5,454.6	 27,972.7	     1.3	    1.2 	 203.1		  0.0	     2,402.8	      719.3
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	   68,322.9	  11,260.6	 68,309.9	     3.4	    2.6 	 449.6		  0.0	     4,878.4	    1,484.7
 Avg	   34,161.5	   5,630.3	 34,154.9	     1.7	    1.3 	 224.8		  0.0	     2,439.2	      742.3
 Std	    8,740.8	     248.5	  8,743.0	     0.5	    0.1 	  30.6		  0.0		51.4	       32.6
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       59.0		14.4	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.7	     30.9
   2	       41.0		19.5	      100.0	       0.0	      0.0	     0.0	    0.0 	    49.3	     29.9
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		16.9	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.0	     30.4
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P30SDB/p30sdb1  Snaps: 4
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      57.7	     0.0	   1.1		 0.0	       0.0	     0.0	   0.1		 0.1	      33.2	     N/A	   N/A		16.5
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	  25,203.8	     0.0	 356.0		 0.0	       0.1	     0.0	  45.9		19.2	  12,012.5	     N/A	   N/A	     5,806.0	   40,342.1
   2	  14,221.7	     0.1	 429.1		 0.0	       1.4	     0.0	  18.3		27.9	  10,685.4	     N/A	   N/A	     5,454.6	   27,980.8
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  39,425.5	     0.1	 785.0		 0.0	       1.5	     0.0	  64.2		47.2	  22,697.9	     0.0	   0.0	    11,260.6	   68,322.9
 Avg	  19,712.7	     0.0	 392.5		 0.0	       0.7	     0.0	  32.1		23.6	  11,348.9	     N/A	   N/A	     5,630.3	   34,161.5
 Std	   7,765.5	     0.1	  51.7		 0.0	       0.9	     0.0	  19.5		 6.2	     938.4	     N/A	   N/A	       248.5	    8,740.8
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time  DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		62.5	       0.0	     0.9	   0.0		 0.0	       0.0	     0.1	   0.0		29.8	       N/A	     N/A	  14.4		  59.0
   2		50.8	       0.0	     1.5	   0.0		 0.0	       0.0	     0.1	   0.1		38.2	       N/A	     N/A	  19.5		  41.0
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		56.7	       0.0	     1.2	   0.0		 0.0	       0.0	     0.1	   0.1		34.0	       N/A	     N/A	  16.9
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   User I/O   db file sequential read		       40,150,218	0.0	  39,431.70    .98ms	57.71	     .98ms   705.78us	  1.26ms   392.24us    2
       Cluster	  gc cr grant busy				1,916,182	0.0	  19,148.84   9.99ms	28.03	    9.93ms     9.02ms	 10.85ms     1.30ms    2
		  DB CPU					      N/A	N/A	  11,260.61		16.48						       2
       System I/O db file parallel write			  168,989	0.0	   2,856.09  16.90ms	 4.18	   16.91ms    16.73ms	 17.08ms   249.27us    2
       Cluster	  gc current grant 2-way			  170,028	0.0	   1,982.49  11.66ms	 2.90	   11.86ms    11.51ms	 12.20ms   487.46us    2
       Cluster	  gc current grant read-mostly invalidatio	  175,547	0.0	     778.03   4.43ms	 1.14	    4.62ms     4.29ms	  4.94ms   458.78us    2
       Other	  KJC: Wait for msg sends to complete		    4,676	0.3	     772.40 165.18ms	 1.13	  165.39ms   149.86ms	180.92ms    21.96ms    2
       System I/O log file parallel write			   26,773	0.0	     530.65  19.82ms	 0.78	   19.91ms    18.56ms	 21.26ms     1.91ms    2
       Cluster	  gc current grant busy 			   36,262	0.0	     271.20   7.48ms	 0.40	    7.48ms     6.82ms	  8.13ms   926.81us    2
       Cluster	  gc cr grant 2-way				   18,932	0.0	     218.33  11.53ms	 0.32	   11.54ms    11.51ms	 11.57ms    42.29us    2

   1   User I/O   db file sequential read		       20,000,182	0.0	  25,210.19   1.26ms	62.49
       Cluster	  gc cr grant busy				1,019,043	0.0	  11,058.98  10.85ms	27.41
		  DB CPU					      N/A	N/A	   5,806.02		14.39
       System I/O db file parallel write			   81,747	0.0	   1,396.49  17.08ms	 3.46
       Cluster	  gc current grant 2-way			   36,528	0.0	     445.68  12.20ms	 1.10
       Other	  KJC: Wait for msg sends to complete		    2,369	0.1	     355.03 149.86ms	 0.88
       System I/O log file parallel write			   12,474	0.0	     265.23  21.26ms	 0.66
       Cluster	  gc current grant read-mostly invalidatio	   37,370	0.0	     184.71   4.94ms	 0.46
       Cluster	  gc current grant busy 			   18,189	0.0	     147.92   8.13ms	 0.37
       Other	  enq: CR - block range reuse ckpt		    2,282	0.0	     114.94  50.37ms	 0.28

   2   User I/O   db file sequential read		       20,150,036	0.0	  14,221.51 705.78us	50.83
       Cluster	  gc cr grant busy				  897,139	0.0	   8,089.85   9.02ms	28.91
		  DB CPU					      N/A	N/A	   5,454.59		19.49
       Cluster	  gc current grant 2-way			  133,500	0.0	   1,536.81  11.51ms	 5.49
       System I/O db file parallel write			   87,242	0.0	   1,459.60  16.73ms	 5.22
       Cluster	  gc current grant read-mostly invalidatio	  138,177	0.0	     593.32   4.29ms	 2.12
       Other	  KJC: Wait for msg sends to complete		    2,307	0.5	     417.37 180.92ms	 1.49
       System I/O log file parallel write			   14,299	0.0	     265.42  18.56ms	 0.95
       Cluster	  gc cr grant 2-way				   11,441	0.0	     131.67  11.51ms	 0.47
       Cluster	  gc current grant busy 			   18,073	0.0	     123.29   6.82ms	 0.44
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   User I/O   db file sequential read		       40,145,645	0.0	  39,424.92    .98ms	57.70	     .98ms   705.79us	  1.26ms   392.18us    2
       Cluster	  gc cr grant busy				1,914,723	0.0	  19,129.89   9.99ms	28.00	    9.93ms     9.02ms	 10.85ms     1.29ms    2
		  DB CPU					      N/A	N/A	  11,260.61		16.48						       2
       Cluster	  gc current grant 2-way			  169,992	0.0	   1,981.43  11.66ms	 2.90	   11.85ms    11.51ms	 12.18ms   474.65us    2
       Cluster	  gc current grant read-mostly invalidatio	  175,547	0.0	     778.03   4.43ms	 1.14	    4.62ms     4.29ms	  4.94ms   458.78us    2
       Other	  KJC: Wait for msg sends to complete		    4,575	0.0	     770.24 168.36ms	 1.13	  168.39ms   153.96ms	182.81ms    20.40ms    2
       Cluster	  gc current grant busy 			   35,802	0.0	     267.81   7.48ms	 0.39	    7.49ms     6.83ms	  8.14ms   930.17us    2
       Cluster	  gc cr grant 2-way				   18,932	0.0	     218.33  11.53ms	 0.32	   11.54ms    11.51ms	 11.57ms    42.29us    2
       Cluster	  gc cr block lost				      259	0.0	     145.96 563.55ms	 0.21	  566.02ms   557.27ms	574.77ms    12.38ms    2
       Configurat enq: HW - contention				      101	0.0	      47.18 467.16ms	 0.07	  474.93ms   443.52ms	506.34ms    44.42ms    2

   1   User I/O   db file sequential read		       19,996,288	0.0	  25,203.73   1.26ms	62.47
       Cluster	  gc cr grant busy				1,017,888	0.0	  11,042.49  10.85ms	27.37
		  DB CPU					      N/A	N/A	   5,806.02		14.39
       Cluster	  gc current grant 2-way			   36,495	0.0	     444.62  12.18ms	 1.10
       Other	  KJC: Wait for msg sends to complete		    2,292	0.0	     352.88 153.96ms	 0.87
       Cluster	  gc current grant read-mostly invalidatio	   37,370	0.0	     184.71   4.94ms	 0.46
       Cluster	  gc current grant busy 			   17,754	0.0	     144.58   8.14ms	 0.36
       Cluster	  gc cr grant 2-way				    7,491	0.0	      86.66  11.57ms	 0.21
       Cluster	  gc cr block lost				       93	0.0	      53.45 574.77ms	 0.13
       Concurrenc library cache load lock			      145	0.0	      31.38 216.38ms	 0.08

   2   User I/O   db file sequential read		       20,149,357	0.0	  14,221.19 705.79us	50.82
       Cluster	  gc cr grant busy				  896,835	0.0	   8,087.39   9.02ms	28.90
		  DB CPU					      N/A	N/A	   5,454.59		19.49
       Cluster	  gc current grant 2-way			  133,497	0.0	   1,536.80  11.51ms	 5.49
       Cluster	  gc current grant read-mostly invalidatio	  138,177	0.0	     593.32   4.29ms	 2.12
       Other	  KJC: Wait for msg sends to complete		    2,283	0.0	     417.36 182.81ms	 1.49
       Cluster	  gc cr grant 2-way				   11,441	0.0	     131.67  11.51ms	 0.47
       Cluster	  gc current grant busy 			   18,048	0.0	     123.23   6.83ms	 0.44
       Cluster	  gc cr block lost				      166	0.0	      92.51 557.27ms	 0.33
       Cluster	  gc current grant congested			    1,232	0.0	      33.29  27.02ms	 0.12
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   System I/O db file parallel write			  168,984	0.0	   2,855.25  16.90ms	58.53	   16.90ms    16.73ms	 17.07ms   242.73us    2
		  background cpu time				      N/A	N/A	   1,484.67		30.43						       2
       System I/O log file parallel write			   26,771	0.0	     530.61  19.82ms	10.88	   19.91ms    18.56ms	 21.26ms     1.91ms    2
       Other	  enq: CR - block range reuse ckpt		    3,555	0.0	     194.95  54.84ms	 4.00	   56.61ms    50.37ms	 62.85ms     8.82ms    2
       Other	  reliable message				      948	0.0	      40.70  42.93ms	 0.83	   43.05ms    42.39ms	 43.71ms   936.14us    2
       System I/O control file parallel write			      317	0.0	      20.92  66.00ms	 0.43	   66.12ms    64.02ms	 68.21ms     2.96ms    2
       Cluster	  gc cr grant busy				    1,459	0.0	      18.95  12.99ms	 0.39	   11.19ms     8.10ms	 14.27ms     4.37ms    2
       User I/O   Disk file Mirror Read 			      894	0.0	      18.32  20.49ms	 0.38	   21.17ms     2.13ms	 40.21ms    26.92ms    2
       Other	  IMR slave acknowledgement msg 		    2,001	0.0	      14.22   7.11ms	 0.29	    7.08ms   876.54us	 13.28ms     8.77ms    2
       Other	  ges inquiry response				      927	0.0	       6.86   7.40ms	 0.14	    7.46ms     7.13ms	  7.79ms   469.31us    2

   1   System I/O db file parallel write			   81,742	0.0	   1,395.65  17.07ms	56.38
		  background cpu time				      N/A	N/A	     765.39		30.92
       System I/O log file parallel write			   12,471	0.0	     265.18  21.26ms	10.71
       Other	  enq: CR - block range reuse ckpt		    2,282	0.0	     114.94  50.37ms	 4.64
       Other	  reliable message				      560	0.0	      23.74  42.39ms	 0.96
       Cluster	  gc cr grant busy				    1,155	0.0	      16.49  14.27ms	 0.67
       System I/O control file parallel write			      167	0.0	      10.69  64.02ms	 0.43
       User I/O   db file sequential read			    3,888	0.0	       6.44   1.66ms	 0.26
       Cluster	  gc cr block busy				       80	0.0	       6.16  76.97ms	 0.25
       Cluster	  gc current grant busy 			      434	0.0	       3.33   7.67ms	 0.13

   2   System I/O db file parallel write			   87,242	0.0	   1,459.60  16.73ms	60.75
		  background cpu time				      N/A	N/A	     719.28		29.93
       System I/O log file parallel write			   14,300	0.0	     265.42  18.56ms	11.05
       Other	  enq: CR - block range reuse ckpt		    1,273	0.0	      80.01  62.85ms	 3.33
       User I/O   Disk file Mirror Read 			      431	0.0	      17.33  40.21ms	 0.72
       Other	  reliable message				      388	0.0	      16.96  43.71ms	 0.71
       Other	  IMR slave acknowledgement msg 		    1,005	0.0	      13.35  13.28ms	 0.56
       System I/O control file parallel write			      150	0.0	      10.23  68.21ms	 0.43
       Other	  gcs log flush sync				   16,075	0.0	       4.53 281.60us	 0.19
       Other	  ges inquiry response				      550	0.0	       3.92   7.13ms	 0.16
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
User I/O   db file sequential read			40,145,645	 0.0	   39,424.92	.98ms	 57.70	      .98ms   705.79us	   1.26ms   392.18us
Cluster    gc cr grant busy				 1,914,723	 0.0	   19,129.89   9.99ms	 28.00	     9.93ms	9.02ms	  10.85ms     1.29ms
Cluster    gc current grant 2-way			   169,992	 0.0	    1,981.43  11.66ms	  2.90	    11.85ms    11.51ms	  12.18ms   474.65us
Cluster    gc current grant read-mostly invalidatio	   175,547	 0.0	      778.03   4.43ms	  1.14	     4.62ms	4.29ms	   4.94ms   458.78us
Other	   KJC: Wait for msg sends to complete		     4,575	 0.0	      770.24 168.36ms	  1.13	   168.39ms   153.96ms	 182.81ms    20.40ms
Cluster    gc current grant busy			    35,802	 0.0	      267.81   7.48ms	  0.39	     7.49ms	6.83ms	   8.14ms   930.17us
Cluster    gc cr grant 2-way				    18,932	 0.0	      218.33  11.53ms	  0.32	    11.54ms    11.51ms	  11.57ms    42.29us
Cluster    gc cr block lost				       259	 0.0	      145.96 563.55ms	  0.21	   566.02ms   557.27ms	 574.77ms    12.38ms
Configurat enq: HW - contention 			       101	 0.0	       47.18 467.16ms	  0.07	   474.93ms   443.52ms	 506.34ms    44.42ms
Cluster    gc current block busy			     5,520	 0.0	       44.58   8.08ms	  0.07	     9.10ms	7.25ms	  10.95ms     2.62ms
Cluster    gc current grant congested			     1,573	 0.0	       40.55  25.78ms	  0.06	    24.15ms    21.28ms	  27.02ms     4.06ms
Cluster    gc current block lost				57	 0.0	       35.25 618.42ms	  0.05	   667.06ms   577.63ms	 756.49ms   126.47ms
Concurrenc library cache load lock			       145	 0.0	       31.38 216.38ms	  0.05	   216.38ms   216.38ms	 216.38ms
Cluster    gc current block 2-way			     3,483	 0.0	       30.92   8.88ms	  0.05	     9.65ms	6.46ms	  12.83ms     4.51ms
Concurrenc buffer busy waits					44	 0.0	       26.91 611.62ms	  0.04	   604.79ms   574.71ms	 634.86ms    42.54ms
Cluster    gc buffer busy release				28	 0.0	       12.49 446.20ms	  0.02	   535.52ms   356.88ms	 714.17ms   252.64ms
Other	   reliable message					 1	 0.0		4.28 4279.42m	  0.01	  4279.42ms  4279.42ms	4279.42ms
Other	   IPC send completion sync				54	 0.0		4.05  74.98ms	  0.01	    71.73ms    42.46ms	 101.00ms    41.39ms
Cluster    gc remaster						 3	66.7		4.00 1333.66m	  0.01	  1000.25ms    32.00us	2000.48ms  1414.53ms
Concurrenc latch: cache buffers chains			    10,966	 0.0		2.95 269.38us	  0.00	   295.93us   237.98us	 353.88us    81.96us
Concurrenc library cache: mutex X			       656	 0.0		2.41   3.67ms	  0.00	     3.96ms	3.65ms	   4.27ms   434.55us
Cluster    gc cr block 2-way				       238	 0.0		2.32   9.75ms	  0.00	    11.33ms	1.40ms	  21.27ms    14.05ms
Cluster    gc cr block busy					11	 0.0		2.25 204.28ms	  0.00	   208.68ms   160.21ms	 257.16ms    68.56ms
Other	   latch: gcs resource hash			     1,610	 0.0		2.11   1.31ms	  0.00	     1.55ms   360.44us	   2.74ms     1.68ms
Other	   latch free					     2,442	 0.0		2.08 851.25us	  0.00	   834.61us   703.55us	    .97ms   185.35us
Commit	   log file sync					27	 0.0		1.48  54.83ms	  0.00	    56.69ms	6.53ms	 106.85ms    70.94ms
Cluster    gc cr grant congested			       109	 0.0		1.46  13.43ms	  0.00	     8.29ms	2.51ms	  14.06ms     8.17ms
Cluster    gc current block congested				45	 0.0		1.29  28.70ms	  0.00	    16.34ms	3.40ms	  29.28ms    18.30ms
Cluster    gc cr multi block grant				67	 0.0		1.22  18.16ms	  0.00	    18.16ms    18.16ms	  18.16ms
Other	   PX Deq: Slave Session Stats				34	 0.0		1.02  30.13ms	  0.00	    30.13ms   513.59us	  59.74ms    41.88ms
Other	   latch: gc element				       932	 0.0		0.96   1.03ms	  0.00	     1.27ms   392.62us	   2.14ms     1.23ms
Concurrenc cursor: pin S wait on X				20	 0.0		0.43  21.46ms	  0.00	    21.46ms    21.46ms	  21.46ms
User I/O   Disk file Mirror Read				37	 0.0		0.38  10.16ms	  0.00	     5.55ms   374.50us	  10.72ms     7.31ms
User I/O   db file scattered read				95	 0.0		0.11   1.14ms	  0.00	     4.17ms	1.01ms	   7.33ms     4.47ms
System I/O control file sequential read 		       148	 0.0		0.10 646.01us	  0.00	   582.95us   512.25us	 653.66us    99.99us
Concurrenc latch: shared pool				       155	 0.0		0.08 538.25us	  0.00	   323.61us    39.26us	 607.96us   402.13us
Other	   latch: cache buffers lru chain		       499	 0.0		0.08 162.04us	  0.00	   160.45us   133.17us	 187.73us    38.58us
Cluster    gc current retry					 2	 0.0		0.06  29.95ms	  0.00	    29.95ms    29.95ms	  29.95ms
User I/O   direct path write					11	 0.0		0.05   4.47ms	  0.00	     4.47ms	4.47ms	   4.47ms
Other	   PGA memory operation 			       399	 0.0		0.04  98.66us	  0.00	    84.00us    34.84us	 133.15us    69.52us
Concurrenc row cache lock					16     100.0		0.04   2.36ms	  0.00	     2.36ms	2.36ms	   2.36ms
Other	   latch: redo allocation			       111	 0.0		0.03 311.30us	  0.00	   339.39us   214.66us	 464.12us   176.39us
Other	   latch: object queue header operation 	       112	 0.0		0.03 288.31us	  0.00	   282.01us   193.77us	 370.25us   124.79us
User I/O   read by other session				 3	 0.0		0.03  10.29ms	  0.00	    10.29ms    10.29ms	  10.29ms
Other	   latch: enqueue hash chains			       111	 0.0		0.03 272.54us	  0.00	   277.53us   216.05us	 339.00us    86.94us
Other	   enq: WF - contention 				18	 0.0		0.02   1.00ms	  0.00	     1.00ms	1.00ms	   1.00ms
Cluster    gc current split					 1	 0.0		0.02  17.03ms	  0.00	    17.03ms    17.03ms	  17.03ms
Other	   enq: PS - contention 				18	 0.0		0.02 925.89us	  0.00	   891.09us   577.88us	   1.20ms   442.95us
Cluster    gc cr multi block mixed				 5	 0.0		0.02   3.09ms	  0.00	     3.09ms	3.09ms	   3.09ms
Other	   DLM cross inst call completion			24	 0.0		0.01 515.42us	  0.00	   898.81us   387.62us	   1.41ms   722.93us
Cluster    gc index operation					 1	 0.0		0.01  11.47ms	  0.00	    11.47ms    11.47ms	  11.47ms
Other	   PX Deq: reap credit				       592     100.0		0.01  19.31us	  0.00	    19.24us    18.47us	  20.00us     1.08us
User I/O   db file parallel read				 6	 0.0		0.01   1.68ms	  0.00	     1.68ms	1.68ms	   1.68ms
Other	   ges enter server mode			     1,331	 0.0		0.01   6.61us	  0.00	     6.60us	6.23us	   6.97us   527.17ns
Other	   wait list latch free 				 5	 0.0		0.01   1.11ms	  0.00	     1.11ms	1.11ms	   1.11ms
Applicatio SQL*Net break/reset to client			66	 0.0		0.00  58.56us	  0.00	    58.56us    58.56us	  58.56us
Cluster    gc current multi block request			 1	 0.0		0.00   3.78ms	  0.00	     3.78ms	3.78ms	   3.78ms
Network    SQL*Net message to client			       588	 0.0		0.00   5.68us	  0.00	     5.81us	5.31us	   6.31us   703.06ns
Other	   latch: ges resource hash list			22	 0.0		0.00 120.55us	  0.00	   124.75us   115.50us	 134.00us    13.08us
User I/O   Disk file operations I/O				74	 0.0		0.00  35.70us	  0.00	    28.11us    13.33us	  42.89us    20.90us
Foreground Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   latch: call allocation				33	 0.0		0.00  78.76us	  0.00	    81.76us    70.76us	  92.75us    15.55us
Other	   lock deadlock retry					57     100.0		0.00  24.28us	  0.00	    26.97us    22.02us	  31.92us     7.00us
Other	   enq: FB - contention 				 1	 0.0		0.00   1.33ms	  0.00	     1.33ms	1.33ms	   1.33ms
Concurrenc cursor: pin S					 1	 0.0		0.00   1.09ms	  0.00	     1.09ms	1.09ms	   1.09ms
Other	   latch: undo global data				 9	 0.0		0.00 118.00us	  0.00	   118.58us   116.83us	 120.33us     2.47us
Other	   latch: messages					 5	 0.0		0.00 183.60us	  0.00	   162.75us   128.00us	 197.50us    49.14us
User I/O   ASM IO for non-blocking poll 			48	 0.0		0.00  14.23us	  0.00	    14.23us    14.23us	  14.23us
Network    IPC group service call				24	 0.0		0.00  14.13us	  0.00	    16.32us	7.53us	  25.11us    12.43us
Other	   AWR Flush						 5	 0.0		0.00   4.40us	  0.00	     4.40us	4.40us	   4.40us
Other	   asynch descriptor resize				 1     100.0		0.00  10.00us	  0.00	    10.00us    10.00us	  10.00us
Other	   ges resource directory to be unfrozen		 1	 0.0		0.00   3.00us	  0.00	     3.00us	3.00us	   3.00us
Idle	   watchdog main loop				     1,338	 0.0	    4,011.02 2997.78m	  5.87	  2997.79ms  2995.53ms	3000.04ms     3.19ms
Idle	   SQL*Net message from client			       588	 0.0	      330.68 562.37ms	  0.48	   448.52ms	2.22ms	 894.83ms   631.17ms
Idle	   PL/SQL lock timer					 1     100.0		9.00 9000.30m	  0.01	  9000.30ms  9000.30ms	9000.30ms
Idle	   PX Deq: Execution Msg			       102	 0.0		7.23  70.85ms	  0.01	    70.85ms    44.89ms	  96.81ms    36.71ms
Idle	   PX Deq: Msg Fragment 			       300	 0.0		0.36   1.20ms	  0.00	     1.20ms	1.18ms	   1.22ms    30.70us
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O db file parallel write			   168,984	 0.0	    2,855.25  16.90ms	  0.59	    16.90ms    16.73ms	  17.07ms   242.73us
System I/O log file parallel write			    26,771	 0.0	      530.61  19.82ms	  0.11	    19.91ms    18.56ms	  21.26ms     1.91ms
Other	   enq: CR - block range reuse ckpt		     3,555	 0.0	      194.95  54.84ms	  0.04	    56.61ms    50.37ms	  62.85ms     8.82ms
Other	   reliable message				       948	 0.0	       40.70  42.93ms	  0.01	    43.05ms    42.39ms	  43.71ms   936.14us
System I/O control file parallel write			       317	 0.0	       20.92  66.00ms	  0.00	    66.12ms    64.02ms	  68.21ms     2.96ms
Cluster    gc cr grant busy				     1,459	 0.0	       18.95  12.99ms	  0.00	    11.19ms	8.10ms	  14.27ms     4.37ms
User I/O   Disk file Mirror Read			       894	 0.0	       18.32  20.49ms	  0.00	    21.17ms	2.13ms	  40.21ms    26.92ms
Other	   IMR slave acknowledgement msg		     2,001	 0.0	       14.22   7.11ms	  0.00	     7.08ms   876.54us	  13.28ms     8.77ms
Other	   ges inquiry response 			       927	 0.0		6.86   7.40ms	  0.00	     7.46ms	7.13ms	   7.79ms   469.31us
User I/O   db file sequential read			     4,567	 0.0		6.76   1.48ms	  0.00	     1.06ms   469.96us	   1.66ms   839.32us
Cluster    gc cr block busy					80	 0.0		6.16  76.97ms	  0.00	    76.97ms    76.97ms	  76.97ms
Other	   gcs log flush sync				    19,223	 0.0		5.59 290.84us	  0.00	   309.80us   281.60us	 338.00us    39.88us
Other	   enq: CF - contention 				73	46.6		3.72  51.02ms	  0.00	    48.14ms    34.11ms	  62.17ms    19.84ms
Cluster    gc current grant busy			       459	 0.0		3.38   7.36ms	  0.00	     4.87ms	2.07ms	   7.67ms     3.95ms
Other	   PX Deq: Join ACK					34	 0.0		3.08  90.59ms	  0.00	    81.24ms	1.78ms	 160.71ms   112.38ms
Other	   ASM file metadata operation			     2,921	 0.0		2.87	.98ms	  0.00	      .98ms   916.44us	   1.05ms    91.94us
User I/O   ASM IO for non-blocking poll 		   170,775	 0.0		2.68  15.70us	  0.00	    15.71us    15.16us	  16.26us   774.97ns
System I/O control file sequential read 		     3,771	 0.0		2.57 682.74us	  0.00	   677.80us   543.88us	 811.73us   189.40us
Other	   KSV master wait				     1,100	45.5		2.51   2.28ms	  0.00	     2.28ms	2.12ms	   2.44ms   220.43us
Applicatio enq: RO - fast object reuse			       104	 0.0		2.21  21.29ms	  0.00	    21.29ms	9.85ms	  32.74ms    16.18ms
Other	   KJC: Wait for msg sends to complete		       101	13.9		2.16  21.35ms	  0.00	    14.17ms   485.54us	  27.86ms    19.36ms
Other	   gcs remastering wait for read latch			44	 0.0		2.05  46.66ms	  0.00	    46.66ms    39.62ms	  53.70ms     9.96ms
Cluster    gc current block lost				 3	 0.0		2.03 678.11ms	  0.00	   678.11ms   678.11ms	 678.11ms
Concurrenc buffer busy waits					30	 0.0		1.96  65.42ms	  0.00	    71.82ms    23.85ms	 119.79ms    67.84ms
Other	   PX Deq: reap credit				    87,583     100.0		1.95  22.28us	  0.00	    22.28us    21.85us	  22.71us   605.09ns
System I/O log file sequential read			       450	 0.0		1.25   2.77ms	  0.00	     2.77ms	2.34ms	   3.20ms   602.90us
Other	   DFS lock handle				       634     100.0		1.13   1.78ms	  0.00	     2.25ms   611.69us	   3.89ms     2.32ms
Other	   latch free					     2,921	 0.0		1.12 381.96us	  0.00	   380.50us   331.61us	 429.40us    69.15us
Cluster    gc cr block lost					 2	 0.0		1.08 539.74ms	  0.00	   539.74ms   539.74ms	 539.74ms
Cluster    gc current block 2-way				50	 0.0		1.08  21.52ms	  0.00	    21.52ms    21.52ms	  21.52ms
Cluster    gc cr multi block mixed				22	 0.0		1.05  47.93ms	  0.00	    47.93ms    47.93ms	  47.93ms
Cluster    gc current grant 2-way				36	 0.0		1.05  29.29ms	  0.00	    16.13ms   332.33us	  31.92ms    22.34ms
Other	   PX Deq: Signal ACK EXT				34	 0.0		1.01  29.62ms	  0.00	    33.55ms   143.95us	  66.96ms    47.25ms
Cluster    gc cr block 2-way				     1,187	 0.0		0.99 830.37us	  0.00	   674.90us   517.83us	 831.96us   222.12us
User I/O   direct path write temp				79	 0.0		0.91  11.49ms	  0.00	    11.55ms    10.85ms	  12.24ms      .98ms
Other	   Sync ASM rebalance					60	 0.0		0.61  10.19ms	  0.00	    10.19ms	6.81ms	  13.57ms     4.78ms
Cluster    gc current block busy			       212	 0.0		0.55   2.58ms	  0.00	     1.72ms   686.41us	   2.75ms     1.46ms
Other	   latch: cache buffers lru chain		     1,776	 0.0		0.52 290.80us	  0.00	   287.76us   249.75us	 325.77us    53.75us
User I/O   direct path write					21	 0.0		0.43  20.27ms	  0.00	    15.56ms	6.58ms	  24.55ms    12.71ms
Other	   ges lms sync during dynamic remastering		92	20.7		0.42   4.56ms	  0.00	     4.64ms	3.96ms	   5.32ms      .96ms
Other	   latch: gc element				       136	 0.0		0.42   3.07ms	  0.00	     2.26ms   360.46us	   4.15ms     2.68ms
Other	   latch: gcs resource hash			       737	 0.0		0.40 538.44us	  0.00	   501.21us   383.42us	 618.99us   166.58us
Concurrenc latch: MGA shared context root latch 	       196	 0.0		0.36   1.84ms	  0.00	     1.61ms   693.77us	   2.53ms     1.30ms
System I/O db file async I/O submit			    51,374	 0.0		0.27   5.35us	  0.00	     5.35us	5.23us	   5.47us   171.53ns
Concurrenc latch: MGA shared context latch		       273	 0.0		0.27	.98ms	  0.00	   811.02us   225.46us	   1.40ms   828.10us
Other	   CGS wait for IPC msg 			    17,373     100.0		0.26  15.23us	  0.00	    15.97us    14.20us	  17.74us     2.51us
Other	   gcs drm freeze in enter server mode			 4	 0.0		0.25  63.39ms	  0.00	    63.39ms    63.39ms	  63.39ms
Other	   enq: US - contention 				49	 0.0		0.24   4.82ms	  0.00	     3.55ms	1.87ms	   5.24ms     2.38ms
User I/O   db file scattered read			       213	 0.0		0.21   1.00ms	  0.00	   615.57us   160.38us	   1.07ms   643.74us
Other	   PGA memory operation 			       391	 0.0		0.20 508.93us	  0.00	   440.36us   267.40us	 613.32us   244.61us
Concurrenc latch: cache buffers chains			       681	 0.0		0.19 278.50us	  0.00	   282.46us   209.55us	 355.37us   103.11us
Other	   enq: TO - contention 				 6	 0.0		0.17  28.54ms	  0.00	    28.54ms    28.54ms	  28.54ms
Cluster    gc cr multi block grant				37	 0.0		0.17   4.58ms	  0.00	     4.58ms	4.58ms	   4.58ms
Other	   AQ: RAC AQ Network				     6,648     100.0		0.15  22.90us	  0.00	    22.90us    21.81us	  23.98us     1.54us
Other	   ksxr poll remote instances			     4,623     100.0		0.11  24.82us	  0.00	    24.81us    23.76us	  25.86us     1.49us
Concurrenc row cache lock					54     100.0		0.09   1.62ms	  0.00	     1.63ms	1.60ms	   1.67ms    44.88us
User I/O   Disk file operations I/O			       478	 0.0		0.08 173.01us	  0.00	   173.25us   167.49us	 179.02us     8.15us
Other	   enq: WF - contention 				21	 0.0		0.06   2.74ms	  0.00	     1.81ms   775.00us	   2.84ms     1.46ms
Other	   LGWR wait for redo copy			       404	 0.0		0.05 115.25us	  0.00	   114.73us    99.77us	 129.68us    21.15us
Cluster    gc current multi block request			18	 0.0		0.04   2.42ms	  0.00	     1.44ms   332.00us	   2.54ms     1.56ms
Background Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Configurat write complete waits 				 1	 0.0		0.04  42.15ms	  0.00	    42.15ms    42.15ms	  42.15ms
Cluster    gc cr disk read					12	 0.0		0.04   3.44ms	  0.00	     2.34ms	1.01ms	   3.66ms     1.87ms
Other	   oracle thread bootstrap				 2	 0.0		0.04  20.52ms	  0.00	    20.52ms    18.00ms	  23.05ms     3.57ms
Cluster    gc buffer busy release				 1	 0.0		0.04  40.06ms	  0.00	    40.06ms    40.06ms	  40.06ms
Network    IPC group service call			       509	 0.0		0.04  76.72us	  0.00	    76.75us    72.11us	  81.40us     6.57us
Other	   latch: messages				       135	 0.0		0.04 288.04us	  0.00	   288.43us   234.87us	 342.00us    75.75us
Other	   CSS operation: data query				22	 0.0		0.04   1.70ms	  0.00	     1.70ms	1.69ms	   1.72ms    20.96us
Other	   enq: PS - contention 				30	40.0		0.03   1.16ms	  0.00	     1.16ms	1.09ms	   1.24ms   108.29us
System I/O kfk: async disk IO					 8	 0.0		0.03   4.21ms	  0.00	     7.96ms	2.95ms	  12.96ms     7.08ms
Other	   CSS operation: data update				24	 0.0		0.03   1.22ms	  0.00	     1.22ms	 .97ms	   1.48ms   359.92us
Other	   IPC send completion sync			       683	97.4		0.03  37.49us	  0.00	    37.49us    36.18us	  38.81us     1.86us
Applicatio enq: TM - contention 				 2	 0.0		0.03  12.54ms	  0.00	    12.54ms   615.00us	  24.46ms    16.86ms
Configurat latch: redo writing					42	 0.0		0.02 525.14us	  0.00	   564.73us   398.46us	 731.00us   235.14us
Concurrenc latch: MGA heap latch				68	 0.0		0.02 309.13us	  0.00	   261.11us    57.04us	 465.19us   288.61us
Other	   ges2 LMON to wake up LMD - mrcvr		       105	 0.0		0.02 168.34us	  0.00	   162.25us   144.97us	 179.54us    24.44us
Other	   DLM cross inst call completion			61	 0.0		0.02 268.95us	  0.00	   200.76us    74.71us	 326.81us   178.26us
User I/O   db file parallel read				 7	 0.0		0.02   2.34ms	  0.00	     2.34ms	2.34ms	   2.34ms
Cluster    gc index operation					 1	 0.0		0.01  13.55ms	  0.00	    13.55ms    13.55ms	  13.55ms
Other	   latch: redo allocation				43	 0.0		0.01 251.21us	  0.00	   254.01us   229.92us	 278.11us    34.07us
Cluster    gc cr block congested				 2	 0.0		0.01   4.60ms	  0.00	     4.60ms	4.60ms	   4.60ms
Other	   PX Deq: Slave Session Stats				34	 0.0		0.01 216.24us	  0.00	   214.46us   199.33us	 229.58us    21.39us
Other	   latch: object queue header operation 		34	 0.0		0.01 215.38us	  0.00	   209.01us   181.92us	 236.10us    38.31us
Cluster    gc current block congested				 2	 0.0		0.01   3.50ms	  0.00	     3.50ms	3.50ms	   3.50ms
Other	   enq: FB - contention 				 6	 0.0		0.01   1.14ms	  0.00	   827.20us   351.00us	   1.30ms   673.45us
Other	   enq: CO - master slave det				 6     100.0		0.01   1.02ms	  0.00	     1.02ms	1.02ms	   1.02ms
Other	   latch: ges resource hash list			30	 0.0		0.01 179.23us	  0.00	   177.86us   157.29us	 198.44us    29.10us
Configurat enq: HW - contention 				 4	 0.0		0.00   1.10ms	  0.00	   857.33us   365.00us	   1.35ms   696.26us
Other	   enq: TA - contention 				 2	 0.0		0.00   2.08ms	  0.00	     2.08ms   609.00us	   3.55ms     2.08ms
Concurrenc libcache interrupt action by LCK		       764	 0.0		0.00   4.56us	  0.00	     4.56us	4.43us	   4.69us   189.10ns
Other	   os thread creation					 2	 0.0		0.00   1.44ms	  0.00	     1.44ms	1.40ms	   1.49ms    66.47us
Other	   latch: checkpoint queue latch			12	 0.0		0.00 205.50us	  0.00	   244.75us   127.00us	 362.50us   166.52us
Other	   enq: RA - RT ADDM flood control			 1     100.0		0.00   2.35ms	  0.00	     2.35ms	2.35ms	   2.35ms
Other	   wait list latch free 				 2	 0.0		0.00   1.16ms	  0.00	     1.16ms	1.16ms	   1.16ms
Other	   latch: enqueue hash chains				 6	 0.0		0.00 334.33us	  0.00	   274.50us    95.00us	 454.00us   253.85us
Other	   asynch descriptor resize			       259     100.0		0.00   5.91us	  0.00	     6.03us	5.37us	   6.70us   936.99ns
Other	   ges ipc enter server mode			       254	 0.0		0.00   5.32us	  0.00	     5.40us	4.99us	   5.81us   584.69ns
Network    SQL*Net message to client			       259	 0.0		0.00   4.21us	  0.00	     4.16us	3.88us	   4.44us   397.60ns
Cluster    gc current split					 1	 0.0		0.00   1.03ms	  0.00	     1.03ms	1.03ms	   1.03ms
Other	   ges enter server mode			       107	 0.0		0.00   8.90us	  0.00	     8.65us	7.74us	   9.56us     1.28us
Other	   CSS operation: action				 2	 0.0		0.00 435.00us	  0.00	   435.00us   435.00us	 435.00us
Other	   enq: AF - task serialization 			 1	 0.0		0.00 728.00us	  0.00	   728.00us   728.00us	 728.00us
Other	   latch: call allocation				 6	 0.0		0.00  55.00us	  0.00	    62.25us    40.50us	  84.00us    30.76us
Other	   GCR CSS group update 				22	 0.0		0.00  13.77us	  0.00	    13.77us    10.27us	  17.27us     4.95us
Other	   GCR CSS group query					22	 0.0		0.00  13.50us	  0.00	    13.50us    12.55us	  14.45us     1.35us
Concurrenc row cache mutex					 1	 0.0		0.00 215.00us	  0.00	   215.00us   215.00us	 215.00us
Other	   buffer deadlock					 2     100.0		0.00  30.50us	  0.00	    30.50us    30.50us	  30.50us
Concurrenc latch: shared pool					 1	 0.0		0.00  46.00us	  0.00	    46.00us    46.00us	  46.00us
Other	   lock deadlock retry					 1     100.0		0.00  18.00us	  0.00	    18.00us    18.00us	  18.00us
Other	   ges resource directory to be unfrozen		 3	 0.0		0.00   4.33us	  0.00	     4.00us	3.00us	   5.00us     1.41us
Other	   AWR Flush						 3	 0.0		0.00   3.67us	  0.00	     3.67us	3.67us	   3.67us
Other	   undo_retention publish retry 			 2	 0.0		0.00   4.50us	  0.00	     4.50us	4.00us	   5.00us   707.11ns
Idle	   PX Idle Wait 					34	 0.0	   85,930.61 2527.37	 17.61	  2527.37 s  2518.91 s	2535.84 s    11.97 s
Idle	   Space Manager: slave idle wait		     7,102	 0.0	   30,700.56 4322.81m	  6.29	  4322.81ms  4305.66ms	4339.96ms    24.25ms
Idle	   rdbms ipc message				    50,302	25.0	   16,022.63 318.53ms	  3.28	   318.85ms   308.39ms	 329.30ms    14.78ms
Idle	   class slave wait				     8,328	77.8	    4,941.69 593.38ms	  1.01	   592.99ms   563.84ms	 622.14ms    41.22ms
Idle	   LMS CR slave timer				   265,812	 0.0	    2,658.72  10.00ms	  0.55	    10.00ms    10.00ms	  10.01ms     8.26us
Idle	   gcs yield cpu				    93,874	96.4	    2,651.17  28.24ms	  0.54	    28.24ms    28.11ms	  28.38ms   191.43us
Idle	   gcs remote message				 4,894,710	 0.0	    2,034.84 415.72us	  0.42	   417.31us   395.36us	 439.26us    31.04us
Idle	   wait for unread message on broadcast cha	     1,021	99.9	    1,997.65 1956.57m	  0.41	  1956.56ms  1955.46ms	1957.66ms     1.56ms
Idle	   ges remote message				    41,428	 0.0	    1,996.27  48.19ms	  0.41	    48.29ms    46.11ms	  50.48ms     3.09ms
Background Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Idle	   GCR sleep					     4,426	 0.0	    1,329.58 300.40ms	  0.27	   300.40ms   300.40ms	 300.40ms     1.90us
Idle	   pmon timer					       443     100.0	    1,328.92 2999.82m	  0.27	  2999.82ms  2999.80ms	2999.84ms    26.80us
Idle	   DIAG idle wait				    13,907	57.7	    1,316.19  94.64ms	  0.27	    95.19ms    88.06ms	 102.31ms    10.08ms
Idle	   LGWR worker group idle				 2	 0.0	    1,200.00 600.00 s	  0.25	   300.00 s   300.00 s	 300.00 s
Idle	   Data Guard: Gap Manager				12	 0.0	      720.01  60.00 s	  0.15	    60.00 s    60.00 s	  60.00 s    58.69us
Idle	   Streams AQ: qmn slave idle wait			24	 0.0	      672.02  28.00 s	  0.14	    28.00 s    28.00 s	  28.00 s   105.83us
Idle	   Streams AQ: qmn coordinator idle wait		48	 0.0	      672.02  14.00 s	  0.14	    14.00 s    14.00 s	  14.00 s    17.91us
Idle	   VKRM Idle						 0	 N/A	      670.05		  0.14
Idle	   Streams AQ: waiting for time management		 0	 N/A	      670.01		  0.14
Idle	   OFS idle					       223     100.0	      669.00 3000.00m	  0.14	  3000.00ms  2999.99ms	3000.01ms    10.21us
Idle	   pman timer					       223     100.0	      668.94 2999.72m	  0.14	  2999.72ms  2999.68ms	2999.76ms    55.95us
Idle	   lreg timer					       222     100.0	      666.64 3002.87m	  0.14	  3002.87ms  3002.86ms	3002.88ms    18.19us
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		12     100.0	      666.12  55.51 s	  0.14	    55.51 s    55.33 s	  55.69 s   253.52ms
Idle	   heartbeat redo informer			       666	 0.0	      666.10 1000.14m	  0.14	  1000.14ms  1000.14ms	1000.15ms     4.75us
Idle	   ASM background timer 			     2,245	 0.0	      666.02 296.67ms	  0.14	   296.67ms   296.49ms	 296.85ms   258.23us
Idle	   ASM cluster membership changes		       381	84.0	      665.65 1747.12m	  0.14	  1747.13ms  1743.88ms	1750.38ms     4.60ms
Idle	   SCM slave idle				     6,739	 0.0	      660.45  98.00ms	  0.14	    98.01ms    97.72ms	  98.29ms   403.19us
Idle	   PING 					       618	18.8	      660.30 1068.45m	  0.14	  1069.16ms  1041.48ms	1096.84ms    39.15ms
Idle	   shared server idle wait				 0	 N/A	      660.13		  0.14
Idle	   AQPC idle						22     100.0	      660.01  30.00 s	  0.14	    30.00 s    30.00 s	  30.00 s   230.58us
Idle	   dispatcher timer					10     100.0	      600.05  60.01 s	  0.12	    60.01 s    60.01 s	  60.01 s   176.92us
Idle	   smon timer					       105	 0.0	      367.06 3495.82m	  0.08	  3585.15ms  3138.49ms	4031.82ms   631.68ms
Idle	   PX Deq: Parse Reply					34	 0.0		1.88  55.30ms	  0.00	    54.55ms    48.24ms	  60.87ms     8.93ms
Idle	   PX Deq: Execute Reply				34	 0.0		1.17  34.31ms	  0.00	    35.27ms    27.13ms	  43.41ms    11.52ms
Idle	   PX Deq Credit: send blkd			       157	 0.0		0.23   1.48ms	  0.00	     1.55ms   899.02us	   2.19ms   914.88us
Idle	   SQL*Net message from client			       260	 0.0		0.22 864.38us	  0.00	      .98ms   295.19us	   1.67ms      .97ms
Idle	   RMA: IPC0 completion sync			       723	 0.0		0.01  17.99us	  0.00	    17.98us    16.84us	  19.13us     1.62us
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	    6580					   28.2     65.6      3.1      2.2	0.6	 0.2	  0.1	0.0(1)
ASM IO for non-blocking p 168.1K		       0.0(3)	  25.5	   58.0     11.2      2.8      1.6	0.6	 0.2	  0.1  0.0(46)	0.0(12)   0.0(3)   0.0(1)
ASM file metadata operati   2898			  4.9	   8.6	    4.1     12.5     18.8     14.2     11.5	12.8	  1.6	   1.7	    2.7      2.1      3.7      0.4	0.2   0.0(1)
AWR Flush		       8			 25.0	  75.0
CGS wait for IPC msg	   17.3K				   9.7	   62.0     24.6      2.0      1.3	0.3	 0.1   0.0(5)
CSS operation: action	       2					   50.0 						 50.0
CSS operation: data query     22											13.6	 22.7	  36.4	   13.6     13.6
CSS operation: data updat     23												 60.9	  26.1	    8.7      4.3
DFS lock handle 	     684										3.5	46.3	 36.3	   9.2	    3.5      0.9					  0.1	   0.1
DLM cross inst call compl     84					   13.1     46.4      1.2      6.0	4.8	 6.0	 11.9	   8.3	    1.2      1.2
Disk file Mirror Read	     926								       1.2     15.2	13.9	 14.6	   8.2	   12.6      8.9     13.3      4.5	1.2	 1.2	  2.9	   1.9	    0.3
Disk file operations I/O     553			  0.2	   0.4	    8.3     23.7      9.9      8.1     29.1	17.7	  2.4	   0.2
GCR CSS group query	      22					   81.8     13.6      4.5
GCR CSS group update	      21				  23.8	   61.9      9.5	       4.8
IMR slave acknowledgement   1979				   3.9	   10.4      6.7      3.2     21.9     16.8	10.5	  7.8	   3.7	    4.2      2.6      4.3      1.2	0.4	 0.4	  0.9	   0.8	    0.2
IPC group service call	     531				   1.9	    3.0     20.2     27.3     39.4	7.5	 0.4	  0.2	   0.2
IPC send completion sync     731					   16.1     67.6      4.1      1.8	3.7	 1.6	  2.7	   1.4	    0.5      0.1							    0.1      0.1
KJC: Wait for msg sends t   4591						     0.1      6.4     20.6	3.9	 2.7	  6.3	   4.7	    2.0      0.5   0.0(2)					  51.8	    1.0
KSV master wait 	    1094				   4.8	   16.6     16.9      2.7      6.2     15.5	 8.0	  1.4	   3.5	    7.0      6.1     10.0      1.1	0.1	 0.1
LGWR wait for redo copy      404			 11.6	  27.7	    3.2      1.2      9.7     20.8     14.1	 7.2	  3.7	   0.7
PGA memory operation	     793			  0.8	   8.4	   14.5     12.7      4.0      8.4     27.6	14.9	  2.5	   3.0	    1.8      1.3
PX Deq: Join ACK	      34					    2.9 						 41.2	  29.4	    8.8      8.8      5.9							     2.9
PX Deq: Signal ACK EXT	      34					   14.7     35.3     14.7      5.9	8.8	 8.8	  2.9	   2.9	    2.9 								    2.9
PX Deq: Slave Session Sta     68				   5.9	    5.9      4.4      2.9     29.4     16.2	14.7	 13.2	   1.5	    4.4 								    1.5
PX Deq: reap credit	   87.3K				   0.1	   34.9     59.6      2.5      2.0	0.6	 0.2	  0.1  0.0(20)	 0.0(4)
SQL*Net break/reset to cl     66				  40.9	    9.1 		      40.9	6.1	 3.0
SQL*Net message to client    848			 21.0	  74.1	    3.3      0.6      0.9      0.1
Sync ASM rebalance	      60					   21.7     16.7     11.7				  8.3	   8.3		     1.7      8.3     10.0     13.3
asynch descriptor resize     260			  1.9	  90.8	    6.2      0.4      0.4		0.4
buffer busy waits	      74					    4.1 	      1.4      4.1     14.9	 8.1	  8.1			     2.7			4.1	 6.8	  8.1	   6.8	   13.5     17.6
buffer deadlock 	       3					   33.3     33.3     33.3
control file parallel wri    320														    9.1     38.8     20.3      8.1	4.1	 4.7	  7.5	   4.7	    2.8
control file sequential r   3907				   0.6	   12.6      9.4      0.5      7.1     19.0	25.5	 13.6	   6.3	    2.4      1.5      1.5      0.1
cursor: pin S		       1													 100.0
cursor: pin S wait on X       20															     5.0     20.0     50.0     25.0
db file async I/O submit   50.5K			 37.1	  59.5	    1.8      0.4      0.7      0.3	0.1	 0.1   0.0(6)	0.0(3)	 0.0(3)
db file parallel read	      13											15.4	 15.4	  38.5	   15.4     15.4
db file parallel write	  166.3K					0.0(58)      0.5      3.0      2.7	3.8	 5.6	  9.4	  14.0	   18.1     16.2     13.0      5.2	1.1	 1.7	  5.3	   0.3	    0.1
db file scattered read	     307								       0.3     18.9	34.2	 26.7	  13.0	    2.9      0.3      3.6
db file sequential read    39.8M								  0.0(7552	4.2	48.8	 28.6	  11.4	    4.1      0.8      2.0      0.1 0.0(1253 0.0(791) 0.0(255)
direct path write	      32													  21.9	   46.9      6.3     15.6      3.1		 3.1	  3.1
direct path write temp	      79														   59.5     22.8      7.6      3.8	2.5	 1.3	  2.5
enq: AF - task serializat      1												100.0
enq: CF - contention	      74											13.5	 43.2	  12.2	   12.2      4.1				 1.4	  5.4	   5.4	    2.7
enq: CO - master slave de      5											20.0	 60.0		   20.0
enq: CR - block range reu   3533								       0.1   0.0(1)	 4.5	 21.2	  27.6	   18.1      4.2      1.6      1.8	3.0	 2.4	 10.1	   3.9	    1.2      0.3
enq: FB - contention	       7											57.1	 14.3	  28.6
enq: HW - contention	     105											 2.9		   1.0		     2.9      1.0      1.9	5.7	 4.8	 15.2	  31.4	   24.8      8.6
enq: PS - contention	      48											27.1	 39.6	  22.9	    8.3      2.1
enq: RA - RT ADDM flood c      1														  100.0
enq: RO - fast object reu    104											55.8	  3.8	   6.7	   23.1      2.9      1.0		1.0	 1.0	  2.9	   1.0	    1.0
enq: TA - contention	       3											33.3	 33.3		   33.3
enq: TD - KTF dump entrie      1										       100.0
enq: TM - contention	       2												 50.0					      50.0
enq: TO - contention	       6											16.7	 16.7	  33.3	   16.7 						 16.7
enq: US - contention	      50											 4.0	 38.0	  44.0	    8.0      2.0      2.0				  2.0
enq: WF - contention	      39											23.1	 35.9	  23.1	   12.8 	      2.6      2.6
gc buffer busy release	      45				   2.2	   15.6      8.9      6.7      2.2	2.2	 2.2	  2.2	   2.2	    8.9     13.3      4.4		2.2				   26.7
gc cr block 2-way	    1429								       0.1     16.7	23.5	 34.4	  17.3	    6.2      1.6      0.2						    0.1
gc cr block busy	      97													   1.0	    9.3     21.6     25.8     18.6	2.1	 2.1	  9.3	   8.2	    1.0      1.0
Wait Event Histogram (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
gc cr block congested	       1															   100.0
gc cr block lost	     261																						  40.6	   58.6      0.8
gc cr disk read 	      12												 25.0	  25.0	   16.7     25.0      8.3
gc cr grant 2-way	   18.9K							      0.1      0.2	2.3	24.0	 35.3	  23.0	   11.2      2.5      0.4   0.0(1)	      0.0(1)			    1.0   0.0(5)
gc cr grant busy	    1.9M					0.0(48) 0.0(140) 0.0(123) 0.0(284)	0.1	 4.3	 28.8	  36.5	   19.3      6.7      2.1      0.4	0.3	 0.9  0.0(64)		    0.6 0.0(742)
gc cr grant congested	     109													  11.0	   47.7     33.0      7.3						    0.9
gc cr multi block grant      104											 5.8	 25.0	  31.7	   27.9      3.8      1.9      1.0	1.0	 1.0			    1.0
gc cr multi block mixed       27												 14.8	  22.2	   48.1     11.1							    3.7
gc current block 2-way	    3532							   0.0(1)      0.1	0.1	10.2	 43.1	  28.8	   13.3      3.3      0.3      0.1					    0.7      0.1
gc current block busy	    5699								    0.0(1)	0.4	 7.6	 26.9	  32.2	   20.7      7.7      2.2      0.7	0.5	 0.8   0.0(1)	0.0(1)	    0.4
gc current block congeste     45													   2.2	   37.8     37.8     13.3      6.7					    2.2
gc current block lost	      58																						  24.1	   72.4      3.4
gc current grant 2-way	  167.3K					 0.0(2) 	   0.0(1)   0.0(3)  0.0(16)	 0.1	  3.1	  29.0	   37.8     18.7      6.1      1.7	0.9	 1.9	  0.1		    0.5  0.0(81)
gc current grant busy	   35.7K						  0.0(6)   0.0(3)   0.0(6)	0.1	 5.5	 31.6	  37.1	   17.3      5.5      1.6      0.3	0.1	 0.5			    0.4  0.0(10)
gc current grant congeste   1547														   10.0     31.7     32.8     11.1	4.7	 8.7	  0.3		    0.5      0.1
gc current grant read-mos 172.8K					 0.0(3)   0.0(8)	    0.0(3)  0.0(22)	 0.9	 23.2	  39.7	   22.1      7.8      2.8      0.9	0.8	 1.7  0.0(28)		0.0(11)   0.0(2)
gc current multi block re     13											30.8	 15.4	  30.8	   15.4 	      7.7
gc current retry	       2												 50.0						       50.0
gc current split	       8									       12.5	37.5		  12.5	   12.5     12.5	      12.5
gc index operation	       9					   11.1 		      22.2     11.1	11.1		  11.1		    11.1     22.2
gc remaster		       3							     33.3																    66.7
gcs drm freeze in enter s      4																	      25.0     50.0		 25.0
gcs log flush sync	   15.7K				   0.1	    4.8      5.4     14.9     21.2     20.8	18.2	  9.7	   3.5	    1.2      0.3   0.0(7)
gcs remastering wait for      44					    4.5      2.3			6.8	 6.8	  4.5	   2.3	    2.3     20.5      4.5		2.3	43.2
ges enter server mode	    1438			  9.9	  81.7	    5.3      0.4      1.7      0.8	0.3
ges inquiry response	     923								       0.1	0.5	 6.8	 27.8	  38.6	   20.4      3.5      0.4      0.1	0.1	 0.1	  0.7	   0.8	    0.1
ges ipc enter server mode    254			 27.6	  68.5	    2.0 	      1.6      0.4
ges lms sync during dynam     92						     2.2	       1.1     10.9	 7.6	 17.4	  29.3	    7.6      2.2     12.0      9.8
ges resource directory to      4			 75.0	  25.0
ges2 LMON to wake up LMD     105					   19.0     13.3      6.7     16.2     25.7	13.3	  4.8	   1.0
kfk: async disk IO	       8							     12.5			12.5		  25.0	   12.5     12.5     25.0
ksxr poll remote instance   4596					   31.7     58.9      4.4      3.8	1.0	 0.2		0.0(1)	 0.0(1)
latch free		    5340				   0.3	    7.4      4.1      2.7     13.2     25.9	27.5	 12.2	   2.6	    1.2      0.8      2.2
latch: MGA heap latch	      68				  11.8	    4.4      8.8     23.5     13.2	8.8	 2.9	 17.6	   8.8
latch: MGA shared context    273				   1.5	    8.1      1.5      1.1     12.1     21.6	25.3	 16.8	   2.6	    1.8      2.9      4.8
latch: MGA shared context    196				   0.5		     1.5      3.6      5.1	6.6	10.7	 20.9	  35.2	    5.1      6.1      4.6
latch: cache buffers chai  11.5K				   1.1	   30.5      5.5      3.8     17.5     19.7	12.1	  6.2	   2.4	    0.9      0.2   0.0(3)		0.1   0.0(2)
latch: cache buffers lru    2240				   1.1	   20.5      3.9      4.2     21.2     22.4	14.9	  7.2	   3.3	    1.1      0.2
latch: call allocation	      39				   7.7	   17.9     10.3     17.9     30.8     10.3	 5.1
latch: checkpoint queue l     12					   16.7 	      8.3     25.0     33.3	 8.3		   8.3
latch: enqueue hash chain    116					    8.6      7.8      6.0     22.4     27.6	12.9	  9.5	   4.3	    0.9
latch: gc element	    1050				   0.5	   15.4      5.3      3.4     17.9     23.2	16.8	  8.6	   5.7	    1.3      0.5      0.1		0.2	 1.0
latch: gcs resource hash    2307				   0.6	   16.2      5.1      4.2     19.6     23.1	14.8	  9.3	   3.9	    1.6      0.3	    0.0(1)	0.5	 0.6
latch: ges resource hash      52				   7.7	   15.4      1.9      5.8     32.7     19.2	13.5	  1.9	   1.9
latch: messages 	     140				   0.7	    7.9      3.6      2.9     20.7     29.3	23.6	  7.9	   2.1	    1.4
latch: object queue heade    144				   1.4	   16.7      4.2      2.8     16.7     28.5	18.1	  9.7	   0.7	    1.4
latch: redo allocation	     154				   0.6	   13.6      7.8      5.8     22.7     26.0	14.9	  3.9	   2.6	    1.3 	      0.6
latch: redo writing	      42				   2.4	   11.9      7.1      2.4     19.0     21.4	 9.5	  9.5	   9.5	    4.8      2.4
latch: shared pool	     157				   7.0	   19.7     10.8      2.5      7.0	8.9	 8.9	 20.4	   8.9	    4.5      1.3
latch: undo global data        9				  11.1	   22.2 	     11.1     33.3     11.1	11.1
libcache interrupt action    760		 0.1	 50.7	  46.3	    1.7      0.5      0.3      0.1	0.3
library cache load lock      145										0.7			   0.7		     2.1     13.8      1.4	1.4		 42.1	  37.9
library cache: mutex X	     662			  1.5	  16.9	   18.7      6.0      6.3      7.3	5.3	 4.8	  5.9	   3.6	    0.5 	     15.3      6.3	1.5
lock deadlock retry	      56					   17.9     75.0      3.6		3.6
log file parallel write    26.5K														    6.4     39.6     38.9     10.4	1.2	 0.4	  2.2	   0.7	    0.3   0.0(5)
log file sequential read     450							     27.1      5.1	6.9	 6.9	  6.7	  10.2	    6.7     21.6      8.0      0.9
log file sync		      28													   3.6	   17.9     28.6     10.7      3.6		17.9	 17.9
oracle thread bootstrap        2																	     100.0
os thread creation	       2													 100.0
read by other session	       3												 33.3				     66.7
Wait Event Histogram (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
reliable message	     943												  1.3	   3.6	   16.4     42.6     25.3      1.8	0.7	 1.1	  3.0	   2.4	    0.8      0.8
row cache lock		      69											11.6	 27.5	  43.5	   10.1      5.8      1.4
row cache mutex 	       1									      100.0
undo_retention publish re      2				 100.0
wait list latch free	       7													 100.0
write complete waits	       1																		      100.0
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	  33,372,657   20,164,422      692,189	    545,751    1,611,225	1,065	 6,533,193	  6,069 	18	196,531
   2	  34,337,885   20,315,043      718,112	    567,837    1,654,473	  728	 6,746,682	  1,625 	19	202,509
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  67,710,542   40,479,465    1,410,301	  1,113,588    3,265,698	1,793	13,279,875	  7,694 	37	399,040
 Avg	  33,855,271   20,239,733      705,151	    556,794    1,632,849	  897	 6,639,938	  3,847 	19	199,520
 Std	     682,519	  106,505	18,330	     15,617	  30,581	  238	   150,960	  3,142 	 1	  4,227
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   99,736.58	 60,262.8      2,068.7	    1,631.0	 4,815.3	  3.2	  19,524.9	   18.1       0.05	  587.3
   2	  102,617.86	 60,711.0      2,146.1	    1,697.0	 4,944.3	  2.2	  20,162.3	    4.9       0.06	  605.2
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  202,354.44	120,973.8      4,214.7	    3,328.0	 9,759.6	  5.4	  39,687.2	   23.0       0.11	1,192.5
 Avg	  101,177.22	 60,486.9      2,107.4	    1,664.0	 4,879.8	  2.7	  19,843.6	   11.5       0.06	  596.3
 Std	    2,037.37	    316.9	  54.7	       46.6	    91.3	  0.7	     450.7	    9.4       0.00	   12.6
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	      169.81	    102.6	   3.5		2.8	     8.2	  0.0	      33.2	    0.0       0.00
   2	      169.56	    100.3	   3.5		2.8	     8.2	  0.0	      33.3	    0.0       0.00
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	      169.69	    101.5	   3.5		2.8	     8.2	  0.0	      33.3	    0.0       0.00
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     2,831	 1,424	       6,503	     160	  N/A	       0	3,985,490	   8,446      3,830,977       5,851    1,079,603   1,686,200	   111		0
   2	     6,498	   157	       2,946	   1,440	  N/A	       0	3,869,913	   5,919      4,049,211       9,043    1,068,471   1,891,856	   210		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     9,329	 1,581	       9,449	   1,600	    0	       0	7,855,403	  14,365      7,880,188      14,894    2,148,074   3,578,056	   321		0
 Avg	     4,665	   791	       4,725	     800	  N/A	       0	3,927,702	   7,183      3,940,094       7,447    1,074,037   1,789,028	   161		0
 Std	     2,593	   896	       2,515	     905	  N/A	       0	   81,725	   1,787	154,315       2,257	   7,872     145,421	    70		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P30SDB/p30sdb1  Snaps: 45-

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      8.46	  4.26	       19.43	    0.48	  N/A	    0.00	11,910.92	   25.24      11,449.15       17.49	 3,226.5    5,039.33	     0		0
   2	     19.42	  0.47		8.80	    4.30	  N/A	    0.00	11,565.13	   17.69      12,100.96       27.02	 3,193.1    5,653.76	     1		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     27.88	  4.72	       28.24	    4.78	 0.00	    0.00	23,476.05	   42.93      23,550.11       44.51	 6,419.6   10,693.09	     1		0
 Avg	     13.94	  2.36	       14.12	    2.39	  N/A	    0.00	11,738.03	   21.47      11,775.05       22.26	 3,209.8    5,346.55	     0		0
 Std	      7.75	  2.68		7.52	    2.70	  N/A	    0.00	   244.51	    5.34	 460.90        6.74	    23.6      434.47	     0		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P30SDB/p30sdb1  Snaps: 45-4

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.01	  0.01		0.03	    0.00	  N/A	    0.00	    20.28	    0.04	  19.49        0.03	     5.5	8.58	  0.0	     0.0
   2	      0.03	  0.00		0.01	    0.01	  N/A	    0.00	    19.11	    0.03	  20.00        0.04	     5.3	9.34	  0.0	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.02	  0.00		0.02	    0.00	  N/A	    0.00	    19.69	    0.04	  19.74        0.04	     5.4	8.96	  0.0	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	     39.56     0.01    60.43	     94.47
   2	     40.82     0.02    59.17	     94.07
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	  1537	      7353	   0	140000	     4.4       10922	     0	   20938       0.5
   2	  1425	      7325	   0	 58261	     6.4	7130	     0	   32195       1.4
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	     88     6338       57	  36	   31	    38.3     59.8      1.9
   2	     92     6040       30	  31	   24	    35.4     62.8      1.8
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	       145	    17	       145	  0	  11	       161	 0	    0	    1	    0	       115	    9		 7	  145	 0
   2	       214	 1,250	       214	  1    1,225	     1,451	 1	    0	   11	    1	       149	    9		92	  212	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	       359	 1,267	       359	  1    1,236	     1,612	 1	    0	   12	    1	       264	   18		99	  357	 0
 Avg	       180	   634	       180	  1	 618	       806	 1	    0	    6	    1	       132	    9		50	  179	 0
 Std		49	   872		49	  1	 858	       912	 1	    0	    7	    1		24	    0		60	   47	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       4    50.00    50.00     0.00	0.00	 0.00	  0.00		32     0.00	3.13	68.75	 18.75	   9.38     0.00
   2	       2    50.00    50.00     0.00	0.00	 0.00	  0.00		41     0.00	0.00	87.80	 12.20	   0.00     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	       6								73
 Avg	       3								37
 Std	       1								 6
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		   207	 97.6	 2.4	0.0	    2,822   49.2   50.7    0.1	   6474   6335	12067	 N/A	11001  13008   9065   4354
	2   undo header 	 1,203	 92.7	 7.1	0.2		0    N/A    N/A    N/A	   6786    785	84636	4600	  N/A	 N/A	N/A    N/A
	2   others		    15	100.0	 0.0	0.0	       31   12.9   87.1    0.0	    723    723	  N/A	 N/A	  517	 704	489    N/A
	2   undo block		     1	100.0	 0.0	0.0		0    N/A    N/A    N/A	   2126   2126	  N/A	 N/A	  N/A	 N/A	N/A    N/A

   2	1   data block		   144	 98.6	 1.4	0.0	    6,463   33.4   65.9    0.7	   3175   1397 1.E+05	 N/A	 6909	6471   6900  29825
	1   others		     5	100.0	 0.0	0.0	       16   25.0   75.0    0.0	    342    342	  N/A	 N/A	  940	1486	758    N/A
	1   undo header 	    10	 60.0	40.0	0.0		1    0.0  100.0    0.0	  71152   1517 2.E+05	 N/A	  709	 N/A	709    N/A
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	    202   100.0      0.0	 1,389	 100.0	    0.0      6335    6335     N/A     13008   13008	N/A
	2   undo header 	 0    N/A	  1,115   100.0      0.0	     0	   N/A	    N/A       785     785     N/A	N/A	N/A	N/A
	2   others		 0    N/A	     15   100.0      0.0	     4	 100.0	    0.0       723     723     N/A	704	704	N/A
	2   undo block		 0    N/A	      1   100.0      0.0	     0	   N/A	    N/A      2126    2126     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	    142   100.0      0.0	 2,159	 100.0	    0.0      1397    1397     N/A      6471    6471	N/A
	1   others		 0    N/A	      5   100.0      0.0	     4	 100.0	    0.0       342     342     N/A      1486    1486	N/A
	1   undo header 	 0    N/A	      6   100.0      0.0	     0	   N/A	    N/A      1517    1517     N/A	N/A	N/A	N/A
	1   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.26.166  N
   2 fg-priv:1	  169.254.26.102  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      31      498    0.2	   33	   475	  0.2
	  2	      31     1574    1.3	   33	  1724	  1.4

   2	  1	      30     1097    0.8	   33	  8953	 43.3
	  2	      31      401    0.2	   33	   367	  0.2
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  1,092.0	28.0	    1.6    1,019.7	  0.6	    42.3      1,113.5	    17.0	1.4    1,048.6	      0.6	45.9
   2	  1,122.3	17.4	    1.4    1,057.0	  0.6	    45.9      1,097.6	    27.7	1.6    1,025.6	      0.6	42.3
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	  2,214.3	45.4	    3.0    2,076.7	  1.1	    88.2      2,211.2	    44.7	3.0    2,074.2	      1.1	88.2
 Avg	  1,107.2	22.7	    1.5    1,038.3	  0.6	    44.1      1,105.6	    22.3	1.5    1,037.1	      0.6	44.1
 Std	     21.4	 7.4	    0.1       26.4	  0.0	     2.6	 11.2	     7.5	0.1	  16.3	      0.0	 2.6
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P30SDB/p30sdb1  Snaps: 45-

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      3.3	 0.1	    0.0        3.0	  0.0	     0.1	  3.3	     0.1	0.0	   3.1	      0.0	 0.1
   2	      3.4	 0.1	    0.0        3.2	  0.0	     0.1	  3.3	     0.1	0.0	   3.1	      0.0	 0.1
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	      6.6	 0.1	    0.0        6.2	  0.0	     0.3	  6.6	     0.1	0.0	   6.2	      0.0	 0.3
 Avg	      3.3	 0.1	    0.0        3.1	  0.0	     0.1	  3.3	     0.1	0.0	   3.1	      0.0	 0.1
 Std	      0.1	 0.0	    0.0        0.1	  0.0	     0.0	  0.0	     0.0	0.0	   0.0	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.4	  255.255.255.0 	  7,721.4    6,271,717	     0	     0	     0	     0	       7,819.8	  6,219,944	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  1,733.3    4,163,524	     0	     0	     0	     0	       1,786.4	  4,451,485	  0	  0	  0	  0
       fg-priv:1  169.254.26.166  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	   107	     0	     0	     0	     0		   0.0		115	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      1.6	 1,559	     0	     0	     0	     0		   1.2	      2,248	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     62.3    1,064,704	     0	     0	     0	     0		  62.3	  1,064,704	  0	  0	  0	  0
   2   eth0	  10.1.5.6	  255.255.255.0 	  7,910.0    6,394,193	     0	     0	     0	     0	       7,630.1	  6,086,925	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  1,782.9    4,291,651	     0	     0	     0	     0	       1,736.4	  4,321,166	  0	  0	  0	  0
       fg-priv:1  169.254.26.102  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	   116	     0	     0	     0	     0		   0.0		108	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      1.6	 1,561	     0	     0	     0	     0		   1.2	      2,280	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     61.7    1,221,562	     0	     0	     0	     0		  61.7	  1,221,562	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 19,274.8   23,410,694	     0	     0	     0	     0	      19,099.2	 23,370,537	  0	  0	  0	  0
 Avg							  1,133.8    1,377,100	     0	     0	     0	     0	       1,123.5	  1,374,737	  0	  0	  0	  0
 Std							  2,580.3    2,323,256	     0	     0	     0	     0	       2,551.0	  2,301,141	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P30SDB/p30sdb1  Snaps: 45-
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.4	  255.255.255.0 	     23.1	18,743	     0	     0	     0	     0		  23.4	     18,589	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	      5.2	12,443	     0	     0	     0	     0		   5.3	     13,304	  0	  0	  0	  0
       fg-priv:1  169.254.26.166  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  7	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,182	     0	     0	     0	     0		   0.2	      3,182	  0	  0	  0	  0
   2   eth0	  10.1.5.6	  255.255.255.0 	     23.6	19,109	     0	     0	     0	     0		  22.8	     18,191	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	      5.3	12,825	     0	     0	     0	     0		   5.2	     12,914	  0	  0	  0	  0
       fg-priv:1  169.254.26.102  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  7	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,651	     0	     0	     0	     0		   0.2	      3,651	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							     57.6	69,963	     0	     0	     0	     0		  57.1	     69,843	  0	  0	  0	  0
 Avg							      3.4	 4,115	     0	     0	     0	     0		   3.4	      4,108	  0	  0	  0	  0
 Std							      7.7	 6,943	     0	     0	     0	     0		   7.6	      6,877	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    1	       100.0	      0.0	   0.0		0.0	   0.85      0.35      0.02	 0.17	   0.02      0.26	     235	  135		  65		0	    65
   2	    1	       100.0	      0.0	   0.0		0.0	   0.85      0.09      0.01	 0.19	   0.02      0.52	      63	   63		  65		0	    65
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    1	       100.0	      0.0	   0.0		0.0	   0.85      0.22      0.02	 0.18	   0.02      0.39	     149	   99		  65		0	    65
 Max				      0.0	   0.0		0.0	   0.85      0.35      0.02	 0.19	   0.02      0.52	     235	  135		  65		0	    65
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Captured SQL account for   92.6% of Total DB Time (s):	   68,323
-> Captured PL/SQL account for	 38.7% of Total DB Time (s):	      68,323

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    57,924.05	 8,702.68   36,489.73	  61,577,832   37,411,377   12,296,228	 18,343.87   12,295,996 	   0.00        0.00	   0.00 	   5.0		3.0	     1.0	0.00	   84.8     77.3      0.9     90.9     92.4	80.7	 92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     5,300.85	   429.20    1,336.33	   2,431,247	1,161,290    1,140,915	  3,265.87	380,305 	   0.01        0.00	   0.00 	   6.4		3.1	     3.0	0.01	    7.8      3.8      0.0      3.6	2.9	14.4	  2.9
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhydnmhhkhhdy	       260.57	    17.18	50.11	      47,507	   33,596	     1	    202.15	      1 	 260.57       17.18	  50.11       47,507.0	   33,596.0	     1.0      202.15	    0.4      0.2      0.0      0.1	0.1	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

fcfy9turtx376	       259.87	    46.95      124.85	     293,372	  178,380	     1	    107.12	      1 	 259.87       46.95	 124.85      293,372.0	  178,380.0	     1.0      107.12	    0.4      0.4      0.0      0.4	0.4	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

f7s68cgfrpfx5	       259.27	    42.05      113.14	     261,290	  156,827	     1	    120.79	      1 	 259.27       42.05	 113.14      261,290.0	  156,827.0	     1.0      120.79	    0.4      0.4      0.0      0.4	0.4	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

c45q6fupzf7tg	       259.25	    14.92	44.58	      40,874	   29,122	     1	    207.71	      1 	 259.25       14.92	  44.58       40,874.0	   29,122.0	     1.0      207.71	    0.4      0.1      0.0      0.1	0.1	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

5m9kb3cpp792u	       259.25	    18.64	37.58	      47,398	   33,577	     1	    212.98	      1 	 259.25       18.64	  37.58       47,398.0	   33,577.0	     1.0      212.98	    0.4      0.2      0.0      0.1	0.1	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

0u5gbpqpjtcbb	       259.25	    19.06	38.17	      53,000	   37,126	     1	    212.12	      1 	 259.25       19.06	  38.17       53,000.0	   37,126.0	     1.0      212.12	    0.4      0.2      0.0      0.1	0.1	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

0fxpq9z2j2zyu	       258.93	    17.52	33.86	      45,563	   30,977	     1	    215.80	      1 	 258.93       17.52	  33.86       45,563.0	   30,977.0	     1.0      215.80	    0.4      0.2      0.0      0.1	0.1	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '191'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

5t5va0wzy46cz	       258.92	    35.62	96.14	     213,086	  130,826	     1	    137.97	      1 	 258.92       35.62	  96.14      213,086.0	  130,826.0	     1.0      137.97	    0.4      0.3      0.0      0.3	0.3	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Captured SQL account for   81.2% of Total CPU Time (s):	    11,261
-> Captured PL/SQL account for	 45.4% of Total CPU Time (s):	       11,261

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   8,702.68	57,924.05   36,489.73	  61,577,832   37,411,377   12,296,228	 18,343.87   12,295,996 	 0.00	       0.00	   0.00 	   5.0		3.0	     1.0	0.00	   77.3     84.8     92.5     90.9     92.4	80.7	 92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     429.20	 5,300.85    1,336.33	   2,431,247	1,161,290    1,140,915	  3,265.87	380,305 	 0.00	       0.01	   0.00 	   6.4		3.1	     3.0	0.01	    3.8      7.8      3.4      3.6	2.9	14.4	  2.9
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

7s9avvsud7a92	      85.35	   258.88      218.77	     601,996	  338,370	     1	      0.00	      1 	85.35	     258.88	 218.77      601,996.0	  338,370.0	     1.0	0.00	    0.8      0.4      0.6      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

fgw43xkd3k8vd	      85.21	   256.85      214.70	     622,597	  331,133	     1	      0.00	      1 	85.21	     256.85	 214.70      622,597.0	  331,133.0	     1.0	0.00	    0.8      0.4      0.5      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

djbfhkquyuyab	      85.20	   256.79      216.24	     606,220	  334,817	     1	      0.00	      1 	85.20	     256.79	 216.24      606,220.0	  334,817.0	     1.0	0.00	    0.8      0.4      0.5      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

b2rbrgpu3jxh1	      85.11	   258.85      218.26	     592,033	  337,620	     1	      0.00	      1 	85.11	     258.85	 218.26      592,033.0	  337,620.0	     1.0	0.00	    0.8      0.4      0.6      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

f90ww8cyy5gy0	      84.80	   256.81      216.68	     589,997	  335,385	     1	      0.00	      1 	84.80	     256.81	 216.68      589,997.0	  335,385.0	     1.0	0.00	    0.8      0.4      0.5      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

fpt7knftv3a5x	      84.72	   256.91      213.51	     626,097	  328,107	     1	      1.84	      1 	84.72	     256.91	 213.51      626,097.0	  328,107.0	     1.0	1.84	    0.8      0.4      0.5      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

4c3z7x1gkcdup	      84.54	   256.86      217.06	     597,231	  334,882	     1	      0.00	      1 	84.54	     256.86	 217.06      597,231.0	  334,882.0	     1.0	0.00	    0.8      0.4      0.6      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

7a4r7h7dtp9uk	      84.50	   258.90      218.80	     577,629	  337,950	     1	      0.58	      1 	84.50	     258.90	 218.80      577,629.0	  337,950.0	     1.0	0.58	    0.8      0.4      0.6      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Captured SQL account for   95.9% of Total User I/O Wait Time (s):	      39,455
-> Captured PL/SQL account for	 43.6% of Total User I/O Wait Time (s): 	 39,455

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  36,489.73	57,924.05    8,702.68	  61,577,832   37,411,377   12,296,228	 18,343.87   12,295,996 	 0.00	       0.00	   0.00 	   5.0		3.0	     1.0	0.00	   92.5     84.8     77.3     90.9     92.4	80.7	 92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   1,336.33	 5,300.85      429.20	   2,431,247	1,161,290    1,140,915	  3,265.87	380,305 	 0.00	       0.01	   0.00 	   6.4		3.1	     3.0	0.01	    3.4      7.8      3.8      3.6	2.9	14.4	  2.9
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

7a4r7h7dtp9uk	     218.80	   258.90	84.50	     577,629	  337,950	     1	      0.58	      1        218.80	     258.90	  84.50      577,629.0	  337,950.0	     1.0	0.58	    0.6      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

7s9avvsud7a92	     218.77	   258.88	85.35	     601,996	  338,370	     1	      0.00	      1        218.77	     258.88	  85.35      601,996.0	  338,370.0	     1.0	0.00	    0.6      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

b2rbrgpu3jxh1	     218.26	   258.85	85.11	     592,033	  337,620	     1	      0.00	      1        218.26	     258.85	  85.11      592,033.0	  337,620.0	     1.0	0.00	    0.6      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

4c3z7x1gkcdup	     217.06	   256.86	84.54	     597,231	  334,882	     1	      0.00	      1        217.06	     256.86	  84.54      597,231.0	  334,882.0	     1.0	0.00	    0.6      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

f90ww8cyy5gy0	     216.68	   256.81	84.80	     589,997	  335,385	     1	      0.00	      1        216.68	     256.81	  84.80      589,997.0	  335,385.0	     1.0	0.00	    0.5      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

djbfhkquyuyab	     216.24	   256.79	85.20	     606,220	  334,817	     1	      0.00	      1        216.24	     256.79	  85.20      606,220.0	  334,817.0	     1.0	0.00	    0.5      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

fgw43xkd3k8vd	     214.70	   256.85	85.21	     622,597	  331,133	     1	      0.00	      1        214.70	     256.85	  85.21      622,597.0	  331,133.0	     1.0	0.00	    0.5      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

fpt7knftv3a5x	     213.51	   256.91	84.72	     626,097	  328,107	     1	      1.84	      1        213.51	     256.91	  84.72      626,097.0	  328,107.0	     1.0	1.84	    0.5      0.4      0.8      0.9	0.8	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Total Buffer Gets:	   67,710,542
-> Captured SQL account for   94.6% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
akay050h1s6c4		   N/A		N/A	     0.00	 0.00	      N/A	   N/A	       N/A	    N/A 	     N/A	  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A      0.0      0.0	N/A	 N/A	  N/A
SELECT MAX(CUSTID) FROM CF1

bhdvtsvjhgvrh	    61,577,832	 37,411,377	57,924.05    8,702.68	36,489.73   12,296,228	 18,343.87   12,295,996 	     5.0	  3.0	       0.00	   0.00        0.00	     1.0	0.00	   90.9     92.4     84.8     77.3     92.5	80.7	 92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     2,431,247	  1,161,290	 5,300.85      429.20	 1,336.33    1,140,915	  3,265.87	380,305 	     6.4	  3.1	       0.01	   0.00        0.00	     3.0	0.01	    3.6      2.9      7.8      3.8	3.4	14.4	  2.9
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

fpt7knftv3a5x	       626,097	    328,107	   256.91	84.72	   213.51	     1	      1.84	      1        626,097.0    328,107.0	     256.91	  84.72      213.51	     1.0	1.84	    0.9      0.8      0.4      0.8	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

fgw43xkd3k8vd	       622,597	    331,133	   256.85	85.21	   214.70	     1	      0.00	      1        622,597.0    331,133.0	     256.85	  85.21      214.70	     1.0	0.00	    0.9      0.8      0.4      0.8	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

djbfhkquyuyab	       606,220	    334,817	   256.79	85.20	   216.24	     1	      0.00	      1        606,220.0    334,817.0	     256.79	  85.20      216.24	     1.0	0.00	    0.9      0.8      0.4      0.8	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '47'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

7s9avvsud7a92	       601,996	    338,370	   258.88	85.35	   218.77	     1	      0.00	      1        601,996.0    338,370.0	     258.88	  85.35      218.77	     1.0	0.00	    0.9      0.8      0.4      0.8	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

4c3z7x1gkcdup	       597,231	    334,882	   256.86	84.54	   217.06	     1	      0.00	      1        597,231.0    334,882.0	     256.86	  84.54      217.06	     1.0	0.00	    0.9      0.8      0.4      0.8	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

b2rbrgpu3jxh1	       592,033	    337,620	   258.85	85.11	   218.26	     1	      0.00	      1        592,033.0    337,620.0	     258.85	  85.11      218.26	     1.0	0.00	    0.9      0.8      0.4      0.8	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

f90ww8cyy5gy0	       589,997	    335,385	   256.81	84.80	   216.68	     1	      0.00	      1        589,997.0    335,385.0	     256.81	  84.80      216.68	     1.0	0.00	    0.9      0.8      0.4      0.8	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Total Disk Reads:	  40,479,465
-> Captured SQL account for   95.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
akay050h1s6c4		 N/A		N/A	     0.00	 0.00	      N/A	   N/A	       N/A	    N/A 	   N/A		  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A      0.0      0.0	N/A	 N/A	  N/A
SELECT MAX(CUSTID) FROM CF1

bhdvtsvjhgvrh	  37,411,377	 61,577,832	57,924.05    8,702.68	36,489.73   12,296,228	 18,343.87   12,295,996 	   3.0		  5.0	       0.00	   0.00        0.00	     1.0	0.00	   92.4     90.9     84.8     77.3     92.5	80.7	 92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   1,161,290	  2,431,247	 5,300.85      429.20	 1,336.33    1,140,915	  3,265.87	380,305 	   3.1		  6.4	       0.01	   0.00        0.00	     3.0	0.01	    2.9      3.6      7.8      3.8	3.4	14.4	  2.9
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

8td9ta6n97dbm	     339,387	    568,040	   256.84	84.28	   217.86	     1	      0.00	      1      339,387.0	    568,040.0	     256.84	  84.28      217.86	     1.0	0.00	    0.8      0.8      0.4      0.7	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

311ar1kvtsj1u	     338,401	    563,537	   256.82	83.91	   217.35	     1	      0.05	      1      338,401.0	    563,537.0	     256.82	  83.91      217.35	     1.0	0.05	    0.8      0.8      0.4      0.7	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7s9avvsud7a92	     338,370	    601,996	   258.88	85.35	   218.77	     1	      0.00	      1      338,370.0	    601,996.0	     258.88	  85.35      218.77	     1.0	0.00	    0.8      0.9      0.4      0.8	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

6thask7s4zxhn	     338,185	    563,472	   258.90	84.22	   217.96	     1	      2.03	      1      338,185.0	    563,472.0	     258.90	  84.22      217.96	     1.0	2.03	    0.8      0.8      0.4      0.7	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

8wqq6m9va6xs1	     338,107	    562,385	   256.80	83.84	   216.30	     1	      0.01	      1      338,107.0	    562,385.0	     256.80	  83.84      216.30	     1.0	0.01	    0.8      0.8      0.4      0.7	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7a4r7h7dtp9uk	     337,950	    577,629	   258.90	84.50	   218.80	     1	      0.58	      1      337,950.0	    577,629.0	     258.90	  84.50      218.80	     1.0	0.58	    0.8      0.9      0.4      0.8	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

b2rbrgpu3jxh1	     337,620	    592,033	   258.85	85.11	   218.26	     1	      0.00	      1      337,620.0	    592,033.0	     258.85	  85.11      218.26	     1.0	0.00	    0.8      0.9      0.4      0.8	0.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P30SDB/p30sdb1  Snap
-> Total Physical Read Requests:      40,478,209
-> Captured SQL account for    0.9% of Total
-> Total UnOptimized Read Requests:	 40,478,209
-> Captured SQL account for    0.9% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
akay050h1s6c4		 N/A	      N/A	   N/A		0.00	    0.00	 N/A	      N/A	  N/A	       N/A	      N/A	   N/A		N/A	      N/A	  N/A	      N/A	   N/A	       N/A	     N/A      N/A    N/A     0.0    0.0     N/A     N/A    N/A
SELECT MAX(CUSTID) FROM CF1

bhdvtsvjhgvrh	     357,397	  357,397   37,411,377	   57,924.05	8,702.68   36,489.73   12,296,228   18,343.87	12,295,996	      0.0	   0.0		3.0	     0.00	 0.00	     0.00	   1.0	      0.00	     0.9      0.9   92.4    84.8   77.3    92.5    80.7   92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

8td9ta6n97dbm	     339,387	  339,387      339,387	      256.84	   84.28      217.86		1	 0.00		 1	339,387.0    339,387.0	  339,387.0	   256.84	84.28	   217.86	   1.0	      0.00	     0.8      0.8    0.8     0.4    0.7     0.6     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

311ar1kvtsj1u	     338,401	  338,401      338,401	      256.82	   83.91      217.35		1	 0.05		 1	338,401.0    338,401.0	  338,401.0	   256.82	83.91	   217.35	   1.0	      0.05	     0.8      0.8    0.8     0.4    0.7     0.6     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '190'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7s9avvsud7a92	     338,370	  338,370      338,370	      258.88	   85.35      218.77		1	 0.00		 1	338,370.0    338,370.0	  338,370.0	   258.88	85.35	   218.77	   1.0	      0.00	     0.8      0.8    0.8     0.4    0.8     0.6     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

6thask7s4zxhn	     338,185	  338,185      338,185	      258.90	   84.22      217.96		1	 2.03		 1	338,185.0    338,185.0	  338,185.0	   258.90	84.22	   217.96	   1.0	      2.03	     0.8      0.8    0.8     0.4    0.7     0.6     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

8wqq6m9va6xs1	     338,107	  338,107      338,107	      256.80	   83.84      216.30		1	 0.01		 1	338,107.0    338,107.0	  338,107.0	   256.80	83.84	   216.30	   1.0	      0.01	     0.8      0.8    0.8     0.4    0.7     0.5     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7a4r7h7dtp9uk	     337,950	  337,950      337,950	      258.90	   84.50      218.80		1	 0.58		 1	337,950.0    337,950.0	  337,950.0	   258.90	84.50	   218.80	   1.0	      0.58	     0.8      0.8    0.8     0.4    0.8     0.6     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

b2rbrgpu3jxh1	     337,620	  337,620      337,620	      258.85	   85.11      218.26		1	 0.00		 1	337,620.0    337,620.0	  337,620.0	   258.85	85.11	   218.26	   1.0	      0.00	     0.8      0.8    0.8     0.4    0.8     0.6     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_st
ress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hots

b86uad51uut0p	     336,444	  336,444      336,444	      256.88	   83.80      216.45		1	 1.41		 1	336,444.0    336,444.0	  336,444.0	   256.88	83.80	   216.45	   1.0	      1.41	     0.8      0.8    0.8     0.4    0.7     0.5     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Total Executions:	  13,279,875
-> Captured SQL account for   95.5% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
akay050h1s6c4		 N/A	      0.00	  0.00	       N/A	      N/A	   N/A		N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A      0.0      0.0      N/A	N/A	 N/A	  N/A
SELECT MAX(CUSTID) FROM CF1

bhdvtsvjhgvrh	  12,295,996	 57,924.05    8,702.68	 36,489.73     61,577,832   37,411,377	 12,296,228   18,343.87 	   0.00        0.00	   0.00 	   5.0		3.0	     1.0	0.00	   92.6     84.8     77.3     92.5     90.9	92.4	 80.7
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     380,305	  5,300.85	429.20	  1,336.33	2,431,247    1,161,290	  1,140,915    3,265.87 	   0.01        0.00	   0.00 	   6.4		3.1	     3.0	0.01	    2.9      7.8      3.8      3.4	3.6	 2.9	 14.4
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

24djtk7r8fz33	       2,545	      0.16	  0.16	      0.01	    7,723	     2	      2,543	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

87gaftwrm2h68		 751	      0.09	  0.04	      0.04	    1,641	    23		139	   0.01 	   0.00        0.00	   0.00 	   2.2		0.0	     0.2	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

acmvv4fhdc9zh		 508	      0.23	  0.08	      0.12	    1,810	    57		286	   0.05 	   0.00        0.00	   0.00 	   3.6		0.1	     0.6	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

0gx3b09qrx9f5		 402	      0.12	  0.03	      0.01	      830	     9		 20	   0.09 	   0.00        0.00	   0.00 	   2.1		0.0	     0.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,index# from oid$ where user#=:1 and oid$=:2

9tgj4g8y4rwy8		 275	      0.25	  0.07	      0.11	      825	    59		275	   0.09 	   0.00        0.00	   0.00 	   3.0		0.2	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

9babjv8yq8ru3		 256	     33.18	  0.51	      0.10	    1,019	    33		256	   0.03 	   0.13        0.00	   0.00 	   4.0		0.1	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

53saa2zkr6wc3		 220	      0.02	  0.02	      0.00	    1,022	     1		276	   0.00 	   0.00        0.00	   0.00 	   4.6		0.0	     1.3	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Total Cluster Wait Time (s): 	 22,735
-> Captured SQL account for   95.1% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
akay050h1s6c4		N/A	     0.00	 0.00	      N/A	     N/A	  N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	N/A	       N/A	    N/A 	 N/A	    N/A      0.0      0.0      N/A	N/A	 N/A	  N/A
SELECT MAX(CUSTID) FROM CF1

bhdvtsvjhgvrh	  18,343.87	57,924.05    8,702.68	36,489.73     61,577,832   37,411,377	12,296,228   12,295,996 	 0.00	       0.00	   0.00        0.00	       5.0	    3.0 	 1.0	   80.7     84.8     77.3     92.5     90.9	92.4	 92.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   3,265.87	 5,300.85      429.20	 1,336.33      2,431,247    1,161,290	 1,140,915	380,305 	 0.01	       0.01	   0.00        0.00	       6.4	    3.1 	 3.0	   14.4      7.8      3.8      3.4	3.6	 2.9	  2.9
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

0fxpq9z2j2zyu	     215.80	   258.93	17.52	    33.86	  45,563       30,977		 1	      1        215.80	     258.93	  17.52       33.86	  45,563.0     30,977.0 	 1.0	    0.9      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '191'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

5m9kb3cpp792u	     212.98	   259.25	18.64	    37.58	  47,398       33,577		 1	      1        212.98	     259.25	  18.64       37.58	  47,398.0     33,577.0 	 1.0	    0.9      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

0u5gbpqpjtcbb	     212.12	   259.25	19.06	    38.17	  53,000       37,126		 1	      1        212.12	     259.25	  19.06       38.17	  53,000.0     37,126.0 	 1.0	    0.9      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

c45q6fupzf7tg	     207.71	   259.25	14.92	    44.58	  40,874       29,122		 1	      1        207.71	     259.25	  14.92       44.58	  40,874.0     29,122.0 	 1.0	    0.9      0.4      0.1      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

47rm3ra5qrvzk	     203.59	   258.91	21.28	    42.80	  59,736       41,743		 1	      1        203.59	     258.91	  21.28       42.80	  59,736.0     41,743.0 	 1.0	    0.9      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '256'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

bhydnmhhkhhdy	     202.15	   260.57	17.18	    50.11	  47,507       33,596		 1	      1        202.15	     260.57	  17.18       50.11	  47,507.0     33,596.0 	 1.0	    0.9      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

cbkautz3zg33t	     199.63	   256.41	15.71	    49.34	  38,880       24,527		 1	      1        199.63	     256.41	  15.71       49.34	  38,880.0     24,527.0 	 1.0	    0.9      0.4      0.1      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '3'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM cbk:blocks examined						  1,455 	   4.3		0.0		2.2	      0.4	    1.9 	  2.4
ASSM cbk:blocks marked full						    339 	   1.0		0.0		0.5	      0.0	    0.5 	  0.5
ASSM gsp:L1 bitmaps examined						  1,177 	   3.5		0.0		1.8	      0.3	    1.5 	  2.0
ASSM gsp:L2 bitmap full 						     29 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    215 	   0.6		0.0		0.3	      0.3	    0.1 	  0.5
ASSM gsp:Optimized reject DB						     13 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM gsp:Search all							     32 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
ASSM gsp:Search hint							     23 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
ASSM gsp:Search steal							     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						  1,115 	   3.3		0.0		1.7	      0.4	    1.4 	  1.9
ASSM gsp:get free data block						    911 	   2.7		0.0		1.4	      0.3	    1.1 	  1.6
ASSM gsp:get free index block						    204 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
ASSM gsp:good hint							    995 	   3.0		0.0		1.5	      0.1	    1.4 	  1.6
ASSM gsp:reject db							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM rsv:fill reserve							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM wasted db state change						      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Batched IO (bound) vector count 					    824 	   2.5		0.0		1.2	      0.3	    1.0 	  1.4
Batched IO block miss count					     12,385,142       37,013.3	       31.0	   18,506.6	    167.1      18,388.5      18,624.8
Batched IO double miss count					     12,384,879       37,012.5	       31.0	   18,506.2	    167.2      18,388.0      18,624.5
Batched IO same unit count						    172 	   0.5		0.0		0.3	      0.0	    0.2 	  0.3
Batched IO single block count					     12,385,709       37,015.0	       31.0	   18,507.5	    167.5      18,389.1      18,625.9
Batched IO vector block count						      8 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO vector read count						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Block Cleanout Optim referenced 					     40 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
CCursor + sql area evicted						     36 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
CPU used by this session					      1,255,507        3,752.1		3.1	    1,876.1	     89.8	1,812.6       1,939.5
CPU used when call started					      1,263,413        3,775.7		3.2	    1,887.9	    115.5	1,806.2       1,969.5
CR blocks created							     29 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
Cached Commit SCN referenced					     13,102,030       39,155.8	       32.8	   19,577.9	  5,658.5      15,576.7      23,579.1
Client Advertised Receive Window					  1,799 	   5.4		0.0		2.7	      0.7	    2.2 	  3.2
Client Advertised Send Window						  1,799 	   5.4		0.0		2.7	      0.7	    2.2 	  3.2
Client Path Maximum Transmission Unit(MTU)			     10,113,570       30,225.1	       25.3	   15,112.6	 20,728.9	  455.0      29,770.1
Client Send Congestion Window						  2,570 	   7.7		0.0		3.8	      1.0	    3.1 	  4.5
Client Time (usec) Last Ack Received					 28,557 	  85.3		0.1	       42.7	     60.2	    0.1 	 85.2
Client Time (usec) Last Data Received					     91 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
Client Time (usec) Last Data Sent					 33,762 	 100.9		0.1	       50.5	     70.0	    1.0 	 99.9
Client Time (usec) Round Trip Time				      1,334,205        3,987.3		3.3	    1,993.7	  1,855.1	  681.9       3,305.5
Client Time (usec) Round Trip Time Variance			      2,101,526        6,280.5		5.3	    3,140.3	  3,457.6	  695.4       5,585.2
Client Total Bytes Acked					      4,055,428       12,119.8	       10.2	    6,059.9	  1,596.1	4,931.3       7,188.5
Client Total Bytes Received					      1,570,950        4,694.8		3.9	    2,347.4	    609.9	1,916.1       2,778.7
Commit SCN cached							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
DB time 							      7,693,950       22,993.6	       19.3	   11,496.8	  3,044.6	9,343.9      13,649.7
DBWR checkpoint buffers written 					  1,427 	   4.3		0.0		2.1	      0.3	    1.9 	  2.3
DBWR checkpoints							  1,852 	   5.5		0.0		2.8	      0.0	    2.8 	  2.8
DBWR fusion writes							    166 	   0.5		0.0		0.2	      0.2	    0.1 	  0.4
DBWR object drop buffers written					     50 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
DBWR transaction table writes						  3,101 	   9.3		0.0		4.6	      4.1	    1.7 	  7.6
DBWR undo block writes							209,586 	 626.4		0.5	      313.2	     23.9	  296.3 	330.1
DFO trees parallelized							     18 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
HSC Heap Segment Block Changes					      1,196,196        3,574.9		3.0	    1,787.4	     43.9	1,756.4       1,818.5
Heap Segment Array Inserts						    365 	   1.1		0.0		0.5	      0.0	    0.5 	  0.6
Heap Segment Array Updates						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								    140 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
KTFB alloc space (block)					    139,919,360      418,151.0	      350.6	  209,075.5	 50,544.3     173,335.2     244,815.7
KTFB alloc time (ms)						     26,999,606       80,688.6	       67.7	   40,344.3	 15,560.7      29,341.2      51,347.4
KTFB apply req								  1,028 	   3.1		0.0		1.5	      0.3	    1.3 	  1.7
KTFB apply time (ms)							 97,190 	 290.5		0.2	      145.2	     24.1	  128.2 	162.3
KTFB free req								    897 	   2.7		0.0		1.3	      0.4	    1.1 	  1.6
KTFB free space (block) 						 22,416 	  67.0		0.1	       33.5	      7.1	   28.5 	 38.5

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
KTFB free time (ms)							 12,677 	  37.9		0.0	       18.9	      3.5	   16.4 	 21.4
PX local messages recv'd						    214 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
PX local messages sent							    214 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
PX remote messages recv'd						    222 	   0.7		0.0		0.3	      0.0	    0.3 	  0.3
PX remote messages sent 						    222 	   0.7		0.0		0.3	      0.0	    0.3 	  0.3
Parallel operations not downgraded					     18 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Requests to/from client 						    845 	   2.5		0.0		1.3	      0.4	    1.0 	  1.6
SMON posted for undo segment shrink					    100 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
SQL*Net roundtrips to/from client					    589 	   1.8		0.0		0.9	      0.3	    0.7 	  1.1
active txn count during cleanout					    555 	   1.7		0.0		0.8	      0.2	    0.7 	  1.0
application wait time							    225 	   0.7		0.0		0.3	      0.2	    0.2 	  0.5
background checkpoints completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
background timeouts							  7,389 	  22.1		0.0	       11.0	      0.1	   11.0 	 11.1
blocks cleaned out using minact 				      1,001,972        2,994.4		2.5	    1,497.2	     81.8	1,439.4       1,555.0
branch node splits							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
buffer is not pinned count					     89,549,064      267,619.3	      224.4	  133,809.7	  2,552.8     132,004.5     135,614.8
buffer is pinned count						     26,996,837       80,680.6	       67.7	   40,340.3	  1,040.8      39,604.4      41,076.3
bytes received via SQL*Net from client					463,993        1,386.7		1.2	      693.3	    532.0	  317.1       1,069.5
bytes sent via SQL*Net to client					150,195 	 448.9		0.4	      224.4	     67.6	  176.7 	272.2
calls to get snapshot scn: kcmgss				     13,706,700       40,962.8	       34.3	   20,481.4	    457.9      20,157.6      20,805.1
calls to kcmgas 							549,431        1,642.0		1.4	      821.0	     16.3	  809.5 	832.5
calls to kcmgcs 							  7,085 	  21.2		0.0	       10.6	      0.5	   10.2 	 11.0
cell physical IO interconnect bytes				358,755,427,328 1.07214861E+09	  899,046.3   5.3607431E+08   3,597,938.0 5.3353018E+08 5.3861843E+08
change write time							  3,125 	   9.3		0.0		4.7	      0.1	    4.6 	  4.7
cleanout - number of ktugct calls					  1,478 	   4.4		0.0		2.2	      0.9	    1.6 	  2.8
cleanouts and rollbacks - consistent read gets				      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
cleanouts only - consistent read gets					    906 	   2.7		0.0		1.4	      1.0	    0.7 	  2.0
cluster key scan block gets						  2,529 	   7.6		0.0		3.8	      4.5	    0.6 	  7.0
cluster key scans							  1,699 	   5.1		0.0		2.5	      2.9	    0.5 	  4.6
cluster wait time						      2,265,421        6,770.3		5.7	    3,385.1	    278.6	3,188.1       3,582.2
commit cleanout failures: block lost					    878 	   2.6		0.0		1.3	      0.9	    0.7 	  2.0
commit cleanout failures: buffer being written				    115 	   0.3		0.0		0.2	      0.1	    0.1 	  0.2
commit cleanout failures: callback failure				     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanouts						      1,195,762        3,573.6		3.0	    1,786.8	     42.8	1,756.5       1,817.0
commit cleanouts successfully completed 			      1,194,757        3,570.6		3.0	    1,785.3	     41.8	1,755.7       1,814.8
commit txn count during cleanout					  1,169 	   3.5		0.0		1.7	      1.0	    1.1 	  2.4
concurrency wait time							  6,654 	  19.9		0.0		9.9	      6.1	    5.6 	 14.3
consistent changes							  9,043 	  27.0		0.0	       13.5	      0.9	   12.9 	 14.1
consistent gets 						     65,496,194      195,736.8	      164.1	   97,868.4	  1,976.5      96,470.8      99,266.0
consistent gets examination					     13,333,645       39,847.9	       33.4	   19,923.9	    372.2      19,660.7      20,187.2
consistent gets examination (fastpath)				     13,326,738       39,827.2	       33.4	   19,913.6	    384.6      19,641.7      20,185.6
consistent gets from cache					     65,496,176      195,736.8	      164.1	   97,868.4	  1,976.5      96,470.8      99,266.0
consistent gets pin						     52,162,503      155,888.8	      130.7	   77,944.4	  1,604.3      76,810.0      79,078.8
consistent gets pin (fastpath)					     12,853,420       38,412.7	       32.2	   19,206.4	  1,292.5      18,292.4      20,120.3
cursor authentications							    259 	   0.8		0.0		0.4	      0.4	    0.1 	  0.7
cursor reload failures							     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
data blocks consistent reads - undo records applied			     22 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
db block changes						      3,265,698        9,759.6		8.2	    4,879.8	     91.3	4,815.3       4,944.3
db block gets							      2,210,573        6,606.3		5.5	    3,303.2	     61.8	3,259.5       3,346.9
db block gets direct							    589 	   1.8		0.0		0.9	      0.2	    0.8 	  1.0
db block gets from cache					      2,209,983        6,604.6		5.5	    3,302.3	     62.0	3,258.5       3,346.1
db block gets from cache (fastpath)					868,846        2,596.6		2.2	    1,298.3	     22.4	1,282.5       1,314.1
deferred (CURRENT) block cleanout applications			      1,059,557        3,166.5		2.7	    1,583.3	    112.8	1,503.5       1,663.0
dirty buffers inspected 					      1,362,847        4,072.9		3.4	    2,036.4	     53.2	1,998.8       2,074.1
enqueue conversions							  7,746 	  23.1		0.0	       11.6	      1.5	   10.5 	 12.6
enqueue releases							818,795        2,447.0		2.1	    1,223.5	     23.3	1,207.0       1,240.0
enqueue requests							818,508        2,446.1		2.1	    1,223.1	     23.4	1,206.5       1,239.6
enqueue timeouts							     13 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
enqueue waits								  4,002 	  12.0		0.0		6.0	      2.2	    4.4 	  7.6
exchange deadlocks							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
execute count							     13,279,875       39,687.2	       33.3	   19,843.6	    450.7      19,524.9      20,162.3
file io service time						  1,298,854,116    3,881,679.6	    3,254.9	1,940,839.8   1,063,313.4   1,188,963.7   2,692,715.9
file io wait time						131,567,143,038  393,192,161.0	  329,709.2   1.9659608E+08  33,700,759.6 1.7276604E+08 2.2042612E+08
free buffer inspected						     40,834,164      122,033.8	      102.3	   61,016.9	    491.8      60,669.1      61,364.7
free buffer requested						     40,524,713      121,109.0	      101.6	   60,554.5	    492.4      60,206.3      60,902.7
gc blocks compressed							  8,370 	  25.0		0.0	       12.5	      3.5	   10.1 	 15.0
gc blocks lost								    321 	   1.0		0.0		0.5	      0.2	    0.3 	  0.6
gc cleanout saved							      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc cr anti locks created						347,303        1,037.9		0.9	      519.0	      5.5	  515.1 	522.9
gc cr anti locks expanded						    165 	   0.5		0.0		0.2	      0.2	    0.1 	  0.4
gc cr anti locks shrunk 						  2,526 	   7.5		0.0		3.8	      1.2	    2.9 	  4.6
gc cr block flush time							    634 	   1.9		0.0		0.9	      0.9	    0.3 	  1.6
gc cr block receive time						  1,162 	   3.5		0.0		1.7	      2.0	    0.3 	  3.1
gc cr blocks built							    359 	   1.1		0.0		0.5	      0.1	    0.4 	  0.6
gc cr blocks flushed							     95 	   0.3		0.0		0.1	      0.2	    0.0 	  0.3
gc cr blocks received							  1,581 	   4.7		0.0		2.4	      2.7	    0.5 	  4.3
gc cr blocks served							  1,600 	   4.8		0.0		2.4	      2.7	    0.5 	  4.3
gc cr multiblock grant time						    956 	   2.9		0.0		1.4	      1.7	    0.2 	  2.6
gc cr multiblock grants received					    652 	   1.9		0.0		1.0	      0.1	    0.9 	  1.0
gc current block flush time						    199 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
gc current block receive time						  7,725 	  23.1		0.0	       11.5	      3.3	    9.2 	 13.8
gc current blocks flushed						     43 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
gc current blocks pinned						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks received						  9,329 	  27.9		0.0	       13.9	      7.7	    8.5 	 19.4
gc current blocks served						  9,449 	  28.2		0.0	       14.1	      7.5	    8.8 	 19.4
gc force cr read cr							     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc force cr read current						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc kbytes saved 							 45,342 	 135.5		0.1	       67.8	     17.6	   55.3 	 80.2
gc kbytes sent								 43,059 	 128.7		0.1	       64.3	     20.9	   49.6 	 79.1
gc local grants 						     38,086,648      113,822.8	       95.4	   56,911.4	    301.3      56,698.4      57,124.4
gc merge pi bg								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc merge pi fg								     44 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
gc no change made							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass grants 						     94 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
gc reader bypass waits							     48 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
gc remote grants						      2,314,244        6,916.2		5.8	    3,458.1	    200.4	3,316.4       3,599.8
gc status messages received						 21,298 	  63.6		0.1	       31.8	     12.0	   23.3 	 40.3
gc status messages sent 						 21,478 	  64.2		0.1	       32.1	     12.2	   23.5 	 40.7
gcs affinity lock failures						 74,257 	 221.9		0.2	      111.0	     74.5	   58.3 	163.6
gcs affinity lock grants					     26,278,980       78,535.6	       65.9	   39,267.8	 13,163.9      29,959.5      48,576.1
gcs anti-locks created							346,348        1,035.1		0.9	      517.5	      6.3	  513.1 	522.0
gcs data block access records					     40,397,685      120,729.4	      101.2	   60,364.7	    318.1      60,139.8      60,589.6
gcs messages sent						      7,858,710       23,485.9	       19.7	   11,743.0	    473.1      11,408.4      12,077.5
gcs read-mostly lock failures						394,345        1,178.5		1.0	      589.2	    480.3	  249.6 	928.9
gcs read-mostly lock grants					     10,920,225       32,635.0	       27.4	   16,317.5	 13,214.3	6,973.6      25,661.4
ges messages sent							 14,894 	  44.5		0.0	       22.3	      6.7	   17.5 	 27.0
global enqueue get time 						 70,167 	 209.7		0.2	      104.8	     13.1	   95.6 	114.1
global enqueue gets sync						472,872        1,413.2		1.2	      706.6	     50.9	  670.6 	742.6
global enqueue releases 						469,231        1,402.3		1.2	      701.2	     50.7	  665.3 	737.0
heap block compress							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
hot buffers moved to head of LRU					  3,916 	  11.7		0.0		5.9	      2.0	    4.4 	  7.3
immediate (CR) block cleanout applications				    908 	   2.7		0.0		1.4	      1.0	    0.7 	  2.0
immediate (CURRENT) block cleanout applications 			    568 	   1.7		0.0		0.8	      0.0	    0.8 	  0.9
in call idle wait time						      8,318,799       24,860.9	       20.8	   12,430.5	     14.1      12,420.5      12,440.4
index crx upgrade (positioned)						     33 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
index fetch by key							 10,832 	  32.4		0.0	       16.2	     15.3	    5.3 	 27.0
index range scans						     13,278,545       39,683.2	       33.3	   19,841.6	    464.9      19,512.8      20,170.4
leaf node 90-10 splits							     44 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
leaf node splits							    198 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
lob reads								    564 	   1.7		0.0		0.8	      0.4	    0.6 	  1.1
lob writes								  6,770 	  20.2		0.0	       10.1	      0.0	   10.1 	 10.1
lob writes unaligned							  6,770 	  20.2		0.0	       10.1	      0.0	   10.1 	 10.1
logical read bytes from cache					554,647,748,608 1.65757693E+09	1,389,955.3   8.2878847E+08  16,699,399.8 8.1698021E+08 8.4059672E+08
logons cumulative							     37 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
max cf enq hold time							  1,828 	   5.5		0.0		2.7	      1.8	    1.4 	  4.0
messages received							225,262 	 673.2		0.6	      336.6	     11.8	  328.3 	344.9
messages sent								225,252 	 673.2		0.6	      336.6	     11.8	  328.3 	344.9
no work - consistent read gets					     52,031,736      155,498.0	      130.4	   77,749.0	  1,820.1      76,462.0      79,036.0
non-idle wait count						     45,727,430      136,657.4	      114.6	   68,328.7	    717.9      67,821.1      68,836.3
non-idle wait time						      6,703,387       20,033.3	       16.8	   10,016.6	  2,593.0	8,183.1      11,850.2
opened cursors cumulative					     13,715,178       40,988.1	       34.4	   20,494.1	    411.7      20,202.9      20,785.2
parse count (describe)							     32 	   0.1		0.0		0.0	      0.1	    0.0 	  0.1
parse count (hard)							    690 	   2.1		0.0		1.0	      1.1	    0.2 	  1.8
parse count (total)							  7,694 	  23.0		0.0	       11.5	      9.4	    4.9 	 18.1
parse time cpu								    154 	   0.5		0.0		0.2	      0.2	    0.1 	  0.4
parse time elapsed							    311 	   0.9		0.0		0.5	      0.5	    0.1 	  0.8
physical read IO requests					     40,478,209      120,970.0	      101.4	   60,485.0	    317.5      60,260.5      60,709.6
physical read bytes						331,607,556,096  991,016,608.4	  831,013.3   4.9550830E+08   2,595,505.2 4.9367300E+08 4.9734360E+08
physical read total IO requests 				     40,485,445      120,991.7	      101.5	   60,495.8	    317.2      60,271.5      60,720.1
physical read total bytes					333,228,510,208  995,860,866.0	  835,075.5   4.9793043E+08   2,610,873.3 4.9608427E+08 4.9977660E+08
physical read total multi block requests				  1,479 	   4.4		0.0		2.2	      0.0	    2.2 	  2.2
physical reads							     40,479,465      120,973.8	      101.4	   60,486.9	    316.9      60,262.8      60,711.0
physical reads cache						     40,479,461      120,973.8	      101.4	   60,486.9	    316.9      60,262.8      60,711.0
physical reads cache prefetch						  1,318 	   3.9		0.0		2.0	      0.8	    1.4 	  2.5
physical write IO requests					      1,362,943        4,073.2		3.4	    2,036.6	     51.6	2,000.1       2,073.1
physical write bytes						 11,553,185,792   34,526,946.2	   28,952.5    17,263,473.1	448,361.4  16,946,433.7  17,580,512.5
physical write total IO requests				      1,406,744        4,204.1		3.5	    2,102.0	     58.0	2,061.0       2,143.1
physical write total bytes					 12,758,866,944   38,130,150.5	   31,973.9    19,065,075.2	493,835.4  18,715,880.8  19,414,269.6
physical write total multi block requests				  1,743 	   5.2		0.0		2.6	      0.2	    2.5 	  2.7
physical writes 						      1,410,301        4,214.7		3.5	    2,107.4	     54.7	2,068.7       2,146.1
physical writes direct							    950 	   2.8		0.0		1.4	      0.1	    1.3 	  1.5
physical writes direct (lob)						    361 	   1.1		0.0		0.5	      0.0	    0.5 	  0.6
physical writes direct temporary tablespace				    196 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
physical writes from cache					      1,409,351        4,211.9		3.5	    2,105.9	     54.9	2,067.1       2,144.7
physical writes non checkpoint					      1,260,460        3,766.9		3.2	    1,883.5	     37.6	1,856.9       1,910.0
pinned buffers inspected						 70,655 	 211.2		0.2	      105.6	     10.6	   98.1 	113.1
process last non-idle time						    665 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
recursive calls 						     14,178,540       42,372.9	       35.5	   21,186.4	    319.4      20,960.6      21,412.3
recursive cpu usage						      1,126,663        3,367.1		2.8	    1,683.5	     43.2	1,653.0       1,714.1
redo KB read								892,928        2,668.5		2.2	    1,334.3	     17.3	1,322.0       1,346.5
redo blocks checksummed by FG (exclusive)				921,010        2,752.5		2.3	    1,376.2	     44.3	1,344.9       1,407.5
redo blocks written						      2,328,905        6,960.0		5.8	    3,480.0	    107.9	3,403.7       3,556.3
redo entries							      1,790,282        5,350.3		4.5	    2,675.1	     66.5	2,628.1       2,722.2
redo size							  1,140,313,764    3,407,852.3	    2,857.6	1,703,926.2	 47,753.2   1,670,159.6   1,737,692.8
redo size for direct writes						    300 	   0.9		0.0		0.4	      0.1	    0.4 	  0.5
redo subscn max counts							  1,767 	   5.3		0.0		2.6	      1.3	    1.7 	  3.5
redo synch time 							    158 	   0.5		0.0		0.2	      0.3	    0.0 	  0.4
redo synch time (usec)						      1,481,900        4,428.6		3.7	    2,214.3	  2,741.8	  275.6       4,153.0
redo synch time overhead (usec) 					  3,304 	   9.9		0.0		4.9	      0.6	    4.5 	  5.3
redo synch time overhead count (  2ms)					     28 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
redo synch writes							    258 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
redo wastage							     10,376,492       31,010.3	       26.0	   15,505.2	  1,507.7      14,439.0      16,571.3
redo write active strands						 42,604 	 127.3		0.1	       63.7	      6.5	   59.1 	 68.2
redo write broadcast ack count						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write broadcast ack time						  1,857 	   5.5		0.0		5.5	      N/A	    5.5 	  5.5
redo write finish time						    530,341,596    1,584,937.7	    1,329.0	  792,468.9	  4,490.2     789,293.8     795,643.9
redo write gather time						      1,570,613        4,693.8		3.9	    2,346.9	    133.7	2,252.4       2,441.4
redo write info find							     28 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
redo write schedule time					      1,853,764        5,540.0		4.6	    2,770.0	    151.0	2,663.2       2,876.8

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo write size count (   4KB)						    931 	   2.8		0.0		1.4	      0.8	    0.8 	  1.9
redo write size count (   8KB)						  2,816 	   8.4		0.0		4.2	      2.0	    2.8 	  5.6
redo write size count (  16KB)						  6,810 	  20.4		0.0	       10.2	      1.2	    9.4 	 11.0
redo write size count (  32KB)						  9,605 	  28.7		0.0	       14.4	      2.0	   12.9 	 15.8
redo write size count ( 128KB)						  5,550 	  16.6		0.0		8.3	      2.1	    6.8 	  9.8
redo write size count ( 256KB)						    165 	   0.5		0.0		0.2	      0.1	    0.2 	  0.3
redo write size count ( 512KB)						    399 	   1.2		0.0		0.6	      0.1	    0.5 	  0.7
redo write size count (1024KB)						    346 	   1.0		0.0		0.5	      0.1	    0.5 	  0.6
redo write size count (inf)						    101 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
redo write time 							 53,050 	 158.5		0.1	       79.3	      0.5	   79.0 	 79.6
redo write time (usec)						    530,497,792    1,585,404.5	    1,329.4	  792,702.3	  4,497.8     789,521.8     795,882.7
redo write total time						    531,446,314    1,588,239.2	    1,331.8	  794,119.6	  4,558.9     790,895.9     797,343.3
redo writes								 26,723 	  79.9		0.1	       39.9	      4.0	   37.1 	 42.8
redo writes adaptive all						 26,722 	  79.9		0.1	       39.9	      4.0	   37.1 	 42.8
rollbacks only - consistent read gets					     19 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
rows fetched via callback						  5,479 	  16.4		0.0		8.2	      5.8	    4.1 	 12.3
securefile allocation bytes					      2,957,312        8,838.0		7.4	    4,419.0	    259.6	4,235.5       4,602.5
securefile allocation chunks						    124 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
securefile bytes non-transformed				      2,514,794        7,515.5		6.3	    3,757.8	    245.6	3,584.1       3,931.4
securefile direct write bytes					      2,957,312        8,838.0		7.4	    4,419.0	    259.6	4,235.5       4,602.5
securefile direct write ops						    122 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
securefile number of non-transformed flushes				    128 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
segment chunks allocation from dispenser				    124 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
segment dispenser allocations						    121 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
session connect time							    377 	   1.1		0.0		1.1	      N/A	    1.1 	  1.1
session cursor cache hits					     13,675,645       40,870.0	       34.3	   20,435.0	    467.0      20,104.8      20,765.2
session logical reads						     67,710,542      202,354.4	      169.7	  101,177.2	  2,037.4      99,736.6     102,617.9
shared hash latch upgrades - no wait				      8,507,941       25,426.3	       21.3	   12,713.2	  5,792.7	8,617.1      16,809.2
shared hash latch upgrades - wait					    123 	   0.4		0.0		0.2	      0.2	    0.1 	  0.3
shared io pool buffer get success					    121 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
sorts (memory)								  2,164 	   6.5		0.0		3.2	      2.8	    1.3 	  5.2
sorts (rows)								127,174 	 380.1		0.3	      190.0	     21.9	  174.6 	205.5
sql area evicted							     54 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
sql area purged 							     17 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
summed dirty queue length					     11,871,231       35,477.4	       29.7	   17,738.7	    218.4      17,584.3      17,893.2
switch current caused by our pin					     37 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
switch current to new buffer						     64 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
table fetch by rowid						     51,038,832      152,530.7	      127.9	   76,265.3	  1,565.8      75,158.2      77,372.5
table fetch continued row						    322 	   1.0		0.0		0.5	      0.6	    0.1 	  0.9
table scan blocks gotten						 11,260 	  33.7		0.0	       16.8	      3.0	   14.7 	 18.9
table scan disk non-IMC rows gotten				      1,361,222        4,068.0		3.4	    2,034.0	     79.5	1,977.8       2,090.2
table scan rows gotten						      1,361,222        4,068.0		3.4	    2,034.0	     79.5	1,977.8       2,090.2
table scans (short tables)						    707 	   2.1		0.0		1.1	      0.7	    0.6 	  1.6
total cf enq hold time							 11,690 	  34.9		0.0	       17.5	      2.9	   15.4 	 19.5
total number of cf enq holders						    244 	   0.7		0.0		0.4	      0.0	    0.4 	  0.4
total number of times SMON posted					    105 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
transaction tables consistent reads - undo records applied		     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
undo change vector size 					    449,621,896    1,343,704.7	    1,126.8	  671,852.4	 20,123.7     657,622.8     686,081.9
user I/O wait time						      3,979,908       11,894.1	       10.0	    5,947.0	  2,335.3	4,295.7       7,598.4
user calls								  1,793 	   5.4		0.0		2.7	      0.7	    2.2 	  3.2
user commits								399,040        1,192.5		1.0	      596.3	     12.6	  587.3 	605.2
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    257 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
workarea executions - optimal						  2,128 	   6.4		0.0		3.2	      1.5	    2.1 	  4.2
write clones created in background					      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
write clones created in foreground					 61,586 	 184.1		0.2	       92.0	      1.7	   90.9 	 93.2
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    138 	   0.4		0.0		0.2	      0.2	    0.1 	  0.3
Global Enqueue S-optim S-lock gets					 56,128 	 167.7		0.1	       83.9	     60.2	   41.3 	126.4
Global Enqueue S-optim anti-locks crea					     71 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
acks for commit broadcast(actual)					  1,517 	   4.5		0.0		2.3	      0.2	    2.1 	  2.4
acks for commit broadcast(logical)					 12,937 	  38.7		0.0	       19.3	      1.4	   18.4 	 20.3
broadcast msgs on commit(actual)					 12,971 	  38.8		0.0	       19.4	      1.7	   18.2 	 20.6
broadcast msgs on commit(logical)					 26,758 	  80.0		0.1	       40.0	      4.0	   37.1 	 42.8
broadcast msgs on commit(wasted)					 10,440 	  31.2		0.0	       15.6	      1.2	   14.8 	 16.4
flow control messages received						     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
flow control messages sent						     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs assume no cvt							  3,175 	   9.5		0.0		4.7	      2.7	    2.9 	  6.6
gcs ast to fg								 21,472 	  64.2		0.1	       32.1	     12.2	   23.5 	 40.7
gcs ast xid								      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs bidless ast to lms							     72 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
gcs blocked converts							349,895        1,045.7		0.9	      522.8	      8.2	  517.1 	528.6
gcs blocked cr converts 						    452 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
gcs compatible basts							      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs compatible cr basts (global)					     46 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
gcs compatible cr basts (local) 					  3,644 	  10.9		0.0		5.4	      0.1	    5.4 	  5.5
gcs dbwr flush pi msgs							210,694 	 629.7		0.5	      314.8	    211.8	  165.1 	464.6
gcs dbwr write request msgs						    161 	   0.5		0.0		0.2	      0.2	    0.1 	  0.4
gcs error msgs								      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs force cr grant							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs grant ast								 21,544 	  64.4		0.1	       32.2	     12.3	   23.5 	 40.9
gcs immediate (compatible) converts					  4,030 	  12.0		0.0		6.0	      4.6	    2.8 	  9.3
gcs immediate (null) converts						 36,470 	 109.0		0.1	       54.5	      1.5	   53.4 	 55.5
gcs immediate cr (compatible) converts					522,385        1,561.2		1.3	      780.6	     64.6	  734.9 	826.3
gcs immediate cr (null) converts				      2,348,310        7,018.0		5.9	    3,509.0	    314.2	3,286.8       3,731.2
gcs lms write request msgs						    148 	   0.4		0.0		0.2	      0.3	    0.0 	  0.4
gcs msgs process time(ms)						263,554 	 787.6		0.7	      393.8	     53.5	  356.0 	431.7
gcs msgs received						      7,834,105       23,412.4	       19.6	   11,706.2	    256.6      11,524.8      11,887.6
gcs new served by master						    350 	   1.0		0.0		0.5	      0.7	    0.1 	  1.0
gcs out-of-order msgs							  5,304 	  15.9		0.0		7.9	      0.8	    7.4 	  8.5
gcs pings refused							    418 	   1.2		0.0		0.6	      0.3	    0.4 	  0.8
gcs queued converts							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs reader bypass grant immediate					     92 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
gcs refuse xid								      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs refuse xid to fg							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs side channel msgs actual						  3,185 	   9.5		0.0		4.8	      2.0	    3.4 	  6.2
gcs side channel msgs logical						 32,476 	  97.1		0.1	       48.5	     17.4	   36.2 	 60.8
gcs stale cr								     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs undo cr								  1,155 	   3.5		0.0		1.7	      2.4	    0.0 	  3.4
gcs write notification msgs						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs writes refused							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges msgs process time(ms)						    405 	   1.2		0.0		0.6	      0.3	    0.4 	  0.8
ges msgs received							 14,365 	  42.9		0.0	       21.5	      5.3	   17.7 	 25.2
ges remote lock allocation						     18 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
implicit batch messages received					235,641 	 704.2		0.6	      352.1	     76.0	  298.4 	405.8
implicit batch messages sent						236,552 	 706.9		0.6	      353.5	     84.5	  293.7 	413.2
messages flow controlled						107,734 	 322.0		0.3	      161.0	      0.4	  160.7 	161.2
messages queue sent actual					      2,843,381        8,497.5		7.1	    4,248.8	    327.2	4,017.4       4,480.1
messages queue sent logical					      1,022,413        3,055.5		2.6	    1,527.7	    391.0	1,251.2       1,804.3
messages received actual					      4,996,788       14,933.0	       12.5	    7,466.5	    147.1	7,362.5       7,570.5
messages received logical					      7,848,470       23,455.3	       19.7	   11,727.7	    261.9      11,542.5      11,912.9
messages sent directly						      2,148,074        6,419.6		5.4	    3,209.8	     23.6	3,193.1       3,226.5
messages sent indirectly					      3,578,056       10,693.1		9.0	    5,346.5	    434.5	5,039.3       5,653.8
messages sent not implicit batched					250,063 	 747.3		0.6	      373.7	     67.6	  325.8 	421.5
messages sent pbatched						      4,773,109       14,264.5	       12.0	    7,132.3	    296.6	6,922.5       7,342.0
msgs received kernel queue time (ns)			      1,854,735,377,096 5.54292850E+09	4,647,993.6   2.7714643E+09 4.2801506E+08 2.4688119E+09 3.0741166E+09
msgs received queue time (ms)						342,236        1,022.8		0.9	      511.4	    238.6	  342.7 	680.1

Global Messaging Statistics (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
msgs received queued						      7,848,468       23,455.3	       19.7	   11,727.7	    261.9      11,542.5      11,912.9
msgs sent queue time (ms)						274,862 	 821.4		0.7	      410.7	     58.9	  369.1 	452.3
msgs sent queue time on ksxp (ms)				     30,902,376       92,352.4	       77.4	   46,176.2	    317.0      45,952.1      46,400.4
msgs sent queued						      3,046,894        9,105.7		7.6	    4,552.8	    524.7	4,181.8       4,923.9
msgs sent queued on ksxp					      4,996,548       14,932.3	       12.5	    7,466.1	    306.1	7,249.7       7,682.6
process batch messages received 				      1,901,738        5,683.4		4.8	    2,841.7	    174.1	2,718.6       2,964.8
process batch messages sent					      2,124,246        6,348.4		5.3	    3,174.2	    284.4	2,973.0       3,375.3
receiver cycle time						      1,135,348        3,393.0		2.8	    1,696.5	      7.9	1,690.9       1,702.1
receiver loop count						      4,926,621       14,723.3	       12.3	    7,361.6	    816.3	6,784.5       7,938.8
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    294      141	      795	   112		 31,924       32,330
   2	    243      139	      634	   112		 30,871       31,025
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    537      280	    1,429	   224		 62,795       63,355
 Avg	    269      140	      715	   112		 31,398       31,678
 Std	     36        1	      114	     0		    745 	 923
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			    125,178.36	   120,974.86	    4,203.50
Database Requests		    125,025.85	   120,953.23	    4,072.62
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				 79.85		  N/A	       79.85
Total (MB)				985.95	       949.60	       36.36
Database (MB)				977.90	       944.98	       32.92
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  3.25		  N/A		3.25
Database (blocks)		    125,171.12	   120,956.99	    4,214.13
Via Buffer Cache (blocks)	    125,168.27	   120,956.97	    4,211.29
Direct (blocks) 			  2.84		 0.00		2.84
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 40,767,252  121,816.92  117,706.99    4,109.94        321,032	    959.28	923.74	     35.54     39.4M 467.49us
     Buffer Cache Re	 39,386,334  117,690.59  117,690.59	   0.00        307,625	    919.22	919.22	      0.00     39.4M 454.08us
     DBWR		  1,332,652    3,982.11        0.00    3,982.11 	10,762	     32.16	  0.00	     32.16	   0
     Others		      6,221	  18.59       16.39	   2.20 	 1,530	      4.57	  4.52	      0.05	3431   6.88ms
     LGWR		     41,936	 125.31        0.00	 125.31 	 1,113	      3.33	  0.00	      3.33     26.3K  19.71ms
     Direct Writes		109	   0.33        0.00	   0.33 	     2	      0.01	  0.00	      0.01	   0

   1 Total		 20,306,534   60,678.10   58,660.26    2,017.84        159,910	    477.83	460.36	     17.47     19.6M 198.72us
     Buffer Cache Re	 19,628,506   58,652.08   58,652.08	   0.00        153,308	    458.10	458.10	      0.00     19.6M 185.04us
     DBWR		    655,344    1,958.24        0.00    1,958.24 	 5,290	     15.81	  0.00	     15.81	   0
     Others		      3,124	   9.33        8.18	   1.15 	   764	      2.28	  2.26	      0.03	1720   7.21ms
     LGWR		     19,507	  58.29        0.00	  58.29 	   547	      1.63	  0.00	      1.63     12.2K  21.16ms
     Direct Writes		 53	   0.16        0.00	   0.16 	     1	      0.00	  0.00	      0.00	   0

   2 Total		 20,460,718   61,138.82   59,046.72    2,092.10        161,122	    481.45	463.38	     18.07     19.7M 734.88us
     Buffer Cache Re	 19,757,828   59,038.51   59,038.51	   0.00        154,317	    461.12	461.12	      0.00     19.7M 721.77us
     DBWR		    677,308    2,023.87        0.00    2,023.87 	 5,472	     16.35	  0.00	     16.35	   0
     Others		      3,097	   9.25        8.21	   1.04 	   766	      2.29	  2.27	      0.02	1711   6.55ms
     LGWR		     22,429	  67.02        0.00	  67.02 	   566	      1.69	  0.00	      1.69	 14K  18.46ms
     Direct Writes		 56	   0.17        0.00	   0.17 	     1	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 40,754,849  121,779.86  117,670.70    4,109.16        321,292	    960.05	924.52	     35.53   525.63us 1778.74m
     Data File		 40,706,508  121,635.42  117,653.87    3,981.55        318,652	    952.17	919.99	     32.17   525.64us 428.57us
     Log File		     43,515	 130.03        4.78	 125.25 	 2,566	      7.67	  4.34	      3.33     2.48ms 1787.32m
     Control File	      4,516	  13.49       11.59	   1.91 	    70	      0.21	  0.18	      0.03   369.52us
     Temp File			310	   0.93        0.47	   0.46 	     4	      0.01	  0.01	      0.01   331.21us

   1 Total		 20,298,928   60,655.38   58,637.68    2,017.70        160,138	    478.51	461.04	     17.47   783.26us 1773.20m
     Data File		 20,276,172   60,587.38   58,629.21    1,958.16        158,828	    474.60	458.78	     15.82   783.28us 500.00us
     Log File		     20,298	  60.65        2.38	  58.27 	 1,272	      3.80	  2.17	      1.63     3.16ms 1787.89m
     Control File	      2,272	   6.79        5.80	   0.99 	    36	      0.11	  0.09	      0.02   490.21us
     Temp File			186	   0.56        0.28	   0.27 	     2	      0.01	  0.00	      0.00   547.37us

   2 Total		 20,455,921   61,124.49   59,033.02    2,091.46        161,154	    481.55	463.48	     18.06   269.73us 1784.29m
     Data File		 20,430,336   61,048.04   59,024.65    2,023.38        159,824	    477.57	461.21	     16.36   269.73us	 .00ns
     Log File		     23,217	  69.37        2.40	  66.98 	 1,294	      3.87	  2.18	      1.69     1.80ms 1786.74m
     Control File	      2,244	   6.71        5.79	   0.91 	    34	      0.10	  0.09	      0.01   248.71us
     Temp File			124	   0.37        0.19	   0.19 	     2	      0.01	  0.00	      0.00	.00ns
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   26.3% of Total Logical Reads:      67,710,542
-> Captured Segments account for   39.0% of Total Physical Reads:      40,479,465
-> Captured Segments account for   39.0% of Total Physical Read Requests:      40,478,209
-> Captured Segments account for   39.0% of Total UnOptimized Read Requests:	  40,478,209
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       1
-> Captured Segments account for   34.4% of Total Physical Writes:	 1,410,301
-> Captured Segments account for   35.4% of Total Physical Write Requests:	 1,362,943
-> Captured Segments account for   42.4% of Total Direct Physical Writes:	      950
-> Captured Segments account for    0.0% of Total Table Scans:		     2
-> Captured Segments account for   15.2% of Total CR Blocks Received:		1,581
-> Captured Segments account for   22.2% of Total Current Blocks Received:	     9,329
-> Captured Segments account for   15.0% of Total CR Blocks Served:	      1,600
-> Captured Segments account for   21.9% of Total Current Blocks Served:	   9,449
-> Captured Segments account for   56.6% of Total Global Cache Remote Grants:	    2,314,244
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
db block changes	 USER78     IOPS       CF1			       TABLE	  73698      73719	 12,816    N/A	   22.2
			 USER91     IOPS       CF1			       TABLE	  73762      73767	 11,424    N/A	   19.8
			 USER73     IOPS       CF1			       TABLE	  73675      73684	 11,328    N/A	   19.6
			 USER57     IOPS       CF1			       TABLE	  73591      73595	 11,184    N/A	   19.4
			 USER47     IOPS       CF1			       TABLE	  73538      73564	 10,976    N/A	   19.0
gc cr blocks received	 USER13     IOPS       CF1			       TABLE	  73373      73381	     50    3.2	   28.7
			 USER9	    IOPS       CF1			       TABLE	  73356      73372	     48    3.0	   27.6
			 USER12     IOPS       CF1			       TABLE	  73370      73392	     32    2.0	   18.4
			 SYS	    SYSAUX     WRH$_SYSSTAT	    51622190_0 TABLE	  73011      73011	     28    1.8	   16.1
			 USER42     IOPS       CF1			       TABLE	  73517      73534	     16    1.0	    9.2
gc cr blocks served	 USER13     IOPS       CF1			       TABLE	  73373      73381	     50    3.1	   28.7
			 USER9	    IOPS       CF1			       TABLE	  73356      73372	     48    3.0	   27.6
			 USER12     IOPS       CF1			       TABLE	  73370      73392	     32    2.0	   18.4
			 SYS	    SYSAUX     WRH$_SYSSTAT	    51622190_0 TABLE	  73011      73011	     28    1.8	   16.1
			 USER42     IOPS       CF1			       TABLE	  73517      73534	     16    1.0	    9.2
gc cu blocks received	 USER80     IOPS       CF1			       TABLE	  73710      73722	    172    1.8	   21.7
			 USER91     IOPS       CF1			       TABLE	  73762      73767	    168    1.8	   21.2
			 USER66     IOPS       CF1			       TABLE	  73649      73661	    163    1.7	   20.6
			 USER78     IOPS       CF1			       TABLE	  73698      73719	    152    1.6	   19.2
			 USER75     IOPS       CF1			       TABLE	  73687      73694	    136    1.5	   17.2
gc cu blocks served	 USER80     IOPS       CF1			       TABLE	  73710      73722	    172    1.8	   21.7
			 USER91     IOPS       CF1			       TABLE	  73762      73767	    168    1.8	   21.2
			 USER66     IOPS       CF1			       TABLE	  73649      73661	    163    1.7	   20.6
			 USER78     IOPS       CF1			       TABLE	  73698      73719	    152    1.6	   19.2
			 USER75     IOPS       CF1			       TABLE	  73687      73694	    136    1.4	   17.2
gc remote grants	 USER256    IOPS       CF1			       TABLE	  74580      74596	 35,622    1.5	   21.3
			 USER15     IOPS       CF1			       TABLE	  73383      73415	 34,897    1.5	   20.9
			 USER175    IOPS       CF1			       TABLE	  74184      74204	 32,751    1.4	   19.6
			 USER169    IOPS       CF1			       TABLE	  74156      74162	 32,165    1.4	   19.3
			 USER182    IOPS       CF1			       TABLE	  74214      74236	 31,482    1.4	   18.9
logical reads		 USER73     IOPS       CF1			       TABLE	  73675      73684	377,632    0.6	   20.5
			 USER57     IOPS       CF1			       TABLE	  73591      73595	375,664    0.6	   20.4
			 USER47     IOPS       CF1			       TABLE	  73538      73564	366,112    0.5	   19.9
			 USER52     IOPS       CF1			       TABLE	  73566      73586	360,832    0.5	   19.6
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	360,672    0.5	   19.6
physical reads		 USER78     IOPS       CF1			       TABLE	  73698      73719	339,903    0.8	   20.1
			 USER67     IOPS       CF1			       TABLE	  73655      73664	338,704    0.8	   20.0
			 USER52     IOPS       CF1			       TABLE	  73566      73586	337,660    0.8	   20.0
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	336,961    0.8	   19.9
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	336,523    0.8	   19.9
physical read requests	 USER78     IOPS       CF1			       TABLE	  73698      73719	339,903    0.8	   20.1
			 USER67     IOPS       CF1			       TABLE	  73655      73664	338,704    0.8	   20.0
			 USER52     IOPS       CF1			       TABLE	  73566      73586	337,660    0.8	   20.0
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	336,961    0.8	   19.9
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	336,523    0.8	   19.9
physical writes 	 USER73     IOPS       CF1			       TABLE	  73675      73684	 10,743    N/A	   20.2
			 USER57     IOPS       CF1			       TABLE	  73591      73595	 10,681    N/A	   20.1
			 USER47     IOPS       CF1			       TABLE	  73538      73564	 10,631    N/A	   20.0
			 USER78     IOPS       CF1			       TABLE	  73698      73719	 10,610    N/A	   19.9
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	 10,591    N/A	   19.9
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 51622190_0 TABLE	  73031      73031	    393    N/A	   97.5
			 SYS	    SYSAUX     SYS_LOB0000007451C00 S_LOB_P223 LOB P	  78502      78502	     10    N/A	    2.5
physical write requests  USER78     IOPS       CF1			       TABLE	  73698      73719	 10,539    0.8	   20.1
			 USER67     IOPS       CF1			       TABLE	  73655      73664	 10,488    0.8	   20.0
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	 10,457    0.8	   20.0
			 USER52     IOPS       CF1			       TABLE	  73566      73586	 10,452    0.8	   20.0
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	 10,436    0.8	   19.9
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 422	0.5	     1,208   13.2	  29	    0	       195	  1,151        1,151	       0	   0
CLUSTER 		  76	0.0		76    0.0	   0	    0		76	     76 	  76	       0	   0
DBLINK			   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
EDITION 		   3   33.3		 6   33.3	   0	    0		 3	      3 	   3	       0	   0
INDEX			  99   13.1		99   28.3	  15	    0		99	     99 	  99	       0	   0
OBJECT ID		  14  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  33	0.0		33    0.0	   0	    0		33	     33 	  33	       0	   0
SCHEMA			 790	0.3		 0    N/A	   0	    0		15	      0 	   0	       0	   0
SQL AREA	       3,645   35.6	13,316,042   -0.2	 185	   17		 0	      0 	   0	       0	   0
SQL AREA BUILD		 572   83.2		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS		 473   95.8	       473   95.8	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        3,078   20.1	    10,545   14.1	 314	    0	     4,133	  7,290        7,290	       0	   0
TRANSFORMATION		  33	0.0		33    0.0	   0	    0		33	     33 	  33	       0	   0
TRIGGER 		  10   60.0		10   60.0	   0	    0		 0	     10 	  10	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  4,174.0    4,174.0	    1,306.2    1,991.3	      3,375.2	 2,254.2	    0.0        0.0	      0.0	 0.0	      417.4	 417.4
   2	  4,174.0    4,174.0	    1,696.9    2,200.8	      2,774.2	 2,095.2	    0.0        0.0	      0.0	 0.0	      417.4	 417.4
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      336.2	 .0	2.5	5.1	44    N/A   134   134
       Other	    1882.7	N/A	4.4	5.4	47     49   425   425
       PL/SQL	      83.4     81.0	 .3	 .3	 2	3   297   295
       SQL	      49.7     36.5	 .2	 .4	 1     11   226   191
       Total	    2351.9    117.5	7.4    11.2	94     63  1082  1045
     E Freeable      153.8	 .0	3.8	7.8	44    N/A    41    41
       Other	    1060.2	N/A	3.9	6.8	47     49   272   272
       PL/SQL	      12.1     10.8	 .1	 .4	 2	3   144   142
       SQL	       4.2	2.3	 .1	 .1	 1     11    73    41
       Total	    1230.3     13.1	7.8    15.1	94     62   530   496
   2 B Freeable      302.1	 .0	2.0	6.0	44    N/A   151   151
       Other	    1602.0	N/A	4.3	6.8	92     92   374   374
       PL/SQL	      55.9     53.9	 .2	 .3	 1	3   246   244
       SQL	      46.3     35.1	 .3	 .4	 1     18   176   146
       Total	    2006.3     89.0	6.8    13.5    138    113   947   915
     E Freeable      237.9	 .0	5.1    10.2	44    N/A    47    47
       Other	    1077.6	N/A	4.0	8.1	93     93   270   270
       PL/SQL	       6.8	5.6	 .0	 .2	 1	3   142   140
       SQL	       5.1	2.9	 .1	 .2	 1     18    72    37
       Total	    1327.3	8.5	9.2    18.7    139    114   531   494
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p30sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P30S/P30SDB/CONTROLFILE/current.261.1032513199, +FRA
db_block_size			* 8192
db_create_file_dest		* +P30S
db_domain			* example.com
db_name 			* p30sdb
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 805306368000
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p30sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 4376756224
processes			* 5120
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_max_size			* 21474836480
sga_target			* 3221225472
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P30SDB/CONTROLFILE/current.256.1032513199
				* +P30S/P30SDB/CONTROLFILE/current.261.1032513199
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     6406	   83.56
db file sequential read 	 50.88 TABLE ACCESS - BY INDEX ROWID BAT   48.31
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 27.32 INDEX - RANGE SCAN		   15.53


CPU + Wait for CPU		  5.29 TABLE ACCESS - BY INDEX ROWID BAT    3.09

	  35dumc2tpr9dv 	   203653710		      558	    7.97
gc current grant 2-way		  2.74 UPDATE				    2.74
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


db file sequential read 	  1.78 UPDATE				    1.70


gc current grant read-mostly i	  1.22 UPDATE				    1.22

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     6406	   83.56
TABLE ACCESS - BY INDEX ROWID BATCHED	   63.22 db file sequential read   48.31
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			   18.58 gc cr grant busy	   15.53


SELECT STATEMENT			    1.53 CPU + Wait for CPU	    1.53

	  35dumc2tpr9dv 	   203653710		      558	    7.97
UPDATE					    6.57 gc current grant 2-way     2.74
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE							8.41
   SQL									8.36
			  --------------------------------------------------------------------------------------------------------------------

Top Events				 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
db file sequential read 	    User I/O	    FOREGROUND
     52.67     121.26
gc cr grant busy		    Cluster	    FOREGROUND
     27.76	63.92
CPU + Wait for CPU		    CPU 	    FOREGROUND
      7.00	16.11
db file parallel write		    System I/O	    BACKGROUND
      4.25	 9.79
gc current grant 2-way		    Cluster	    FOREGROUND
      2.76	 6.35
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
db file sequential read 	 52.68		 "9","128484619","1"	   0.03
file#			   block#		      blocks

db file parallel write		  4.25		"1","0","2147483647"	   1.78
requests		   interrupt		      timeout

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			 DB/Inst: P30SDB/p30sdb1  Snaps: 45-46
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
09:17:49   (2.2 min)	3,851 db file sequential read		1,995	25.94
			      gc cr grant busy			1,100	14.30
			      CPU + Wait for CPU		  320	 4.16
09:20:00   (3.4 min)	3,839 db file sequential read		2,056	26.74
			      gc cr grant busy			1,035	13.46
			      CPU + Wait for CPU		  313	 4.07
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:1451622190_46'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 45 to 46.
Time period starts at 17-FEB-20 09.17.49 AM
Time period ends at 17-FEB-20 09.23.24 AM

Analysis Target
---------------
Database 'P30SDB' with DB ID 1451622190.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 68323 seconds.
The average number of active sessions was 203.95.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       203.95 | 100	   1
2  Top SQL Statements	      200.37 | 98.24	   2
3  "User I/O" wait Class      117.69 | 57.7	   0
4  Global Cache Messaging     65.38 | 32.06	   1
5  Buffer Busy - Hot Objects  58.16 | 28.52	   0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 204.56 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 54310 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 5338 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  59.05	     ADDM:1451622190_1_46
    2	    p30sdb2  40.95	     ADDM:1451622190_2_46

   Recommendation 1: Host Configuration
   Estimated benefit is 203.95 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 65.38 active sessions, 32.06% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 67.75 active sessions, 33.22% of total activity.


Finding 2: Top SQL Statements
Impact is 200.97 active sessions, 98.24% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  59.72	     ADDM:1451622190_1_46
    2	    p30sdb2  40.28	     ADDM:1451622190_2_46

   Recommendation 1: SQL Tuning
   Estimated benefit is 182.91 active sessions, 89.68% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 12295996 times
      and had an average elapsed time of 0.0047 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 15.75 active sessions, 7.72% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 90% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 380305 times and
      had an average elapsed time of 0.013 seconds.


Finding 3: "User I/O" wait Class
Impact is 118.04 active sessions, 57.7% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  63.93	     ADDM:1451622190_1_46
    2	    p30sdb2  36.07	     ADDM:1451622190_2_46

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 65.58 active sessions, 32.06% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  54 	     ADDM:1451622190_1_46
    2	    p30sdb2  46 	     ADDM:1451622190_2_46

   Recommendation 1: Application Analysis
   Estimated benefit is 65.38 active sessions, 32.06% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 91% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 67.75 active sessions, 33.22% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 58.34 active sessions, 28.52% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  80.33	     ADDM:1451622190_2_46
    1	    p30sdb1  19.67	     ADDM:1451622190_1_46

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 58.16 active sessions, 28.52% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 65.38 active sessions, 32.06% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 67.75 active sessions, 33.22% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p30sdb1  mcracpoc1.example.com  120.78	     59.05
    2	    p30sdb2  mcracpoc2.example.com  83.77	     40.95

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 1451622190	P30SDB	       p30sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex

Using 1451622190 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P30SDB		     1	16 Feb 2020 11:00    1
		     2	16 Feb 2020 12:48    1
		     3	16 Feb 2020 13:00    1
		     4	16 Feb 2020 13:13    1
		     5	16 Feb 2020 13:19    1
		     6	16 Feb 2020 13:22    1
		     7	16 Feb 2020 13:30    1
		     8	16 Feb 2020 13:33    1
		     9	16 Feb 2020 13:42    1
		    10	16 Feb 2020 13:49    1
		    11	16 Feb 2020 13:55    1
		    12	16 Feb 2020 14:10    1
		    13	16 Feb 2020 14:16    1
		    14	16 Feb 2020 14:24    1
		    15	16 Feb 2020 14:33    1
		    16	16 Feb 2020 14:38    1
		    17	16 Feb 2020 14:49    1
		    18	16 Feb 2020 14:56    1
		    19	16 Feb 2020 15:04    1
		    20	16 Feb 2020 16:00    1
		    21	16 Feb 2020 17:23    1
		    22	16 Feb 2020 17:57    1
		    23	16 Feb 2020 18:05    1
		    24	16 Feb 2020 18:13    1
		    25	16 Feb 2020 18:19    1
		    26	16 Feb 2020 18:22    1
		    27	16 Feb 2020 18:25    1
		    28	16 Feb 2020 18:27    1
		    29	16 Feb 2020 18:35    1
		    30	17 Feb 2020 07:54    1
		    31	17 Feb 2020 08:10    1
		    32	17 Feb 2020 08:16    1
		    33	17 Feb 2020 08:20    1
		    34	17 Feb 2020 08:25    1
		    35	17 Feb 2020 08:27    1
		    36	17 Feb 2020 08:33    1
		    37	17 Feb 2020 08:37    1
		    38	17 Feb 2020 08:43    1
		    39	17 Feb 2020 08:47    1
		    40	17 Feb 2020 08:52    1
		    41	17 Feb 2020 08:55    1
		    42	17 Feb 2020 09:00    1
		    43	17 Feb 2020 09:09    1
		    44	17 Feb 2020 09:14    1
		    45	17 Feb 2020 09:17    1
		    46	17 Feb 2020 09:23    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 45

End   Snapshot Id specified: 46



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_45_46.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P30SDB, Snaps: 45-46</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>1451622190</td><td headers="Database Name" class='awrc'>P30SDB</td><td headers="Database UniqueName" class='awrc'>p30sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>45</td><td align="right" headers="SnapshotIds End" class='awrc'>46</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>1,138.72</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>5.58</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p30sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>17-Feb-20 07:43</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>5.57</td><td align="right" class='awrc'>672.37</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>120.78</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p30sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>17-Feb-20 07:43</td><td class='awrnc'>17-Feb-20 09:17</td><td class='awrnc'>17-Feb-20 09:23</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>5.57</td><td align="right" class='awrnc'>466.35</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>83.77</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>204.56</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:1451622190_46</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>204.56</td><td align="right" class='awrnc'>98.24</td><td scope="row" class='awrnc'>ADDM:1451622190_46</td><td class='awrnc'>17-Feb-20 09:17</td><td class='awrnc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>204.56</td><td align="right" class='awrc'>57.70</td><td scope="row" class='awrc'>ADDM:1451622190_46</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>204.56</td><td align="right" class='awrnc'>32.06</td><td scope="row" class='awrnc'>ADDM:1451622190_46</td><td class='awrnc'>17-Feb-20 09:17</td><td class='awrnc'>17-Feb-20 09:23</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>204.56</td><td align="right" class='awrc'>28.52</td><td scope="row" class='awrc'>ADDM:1451622190_46</td><td class='awrc'>17-Feb-20 09:17</td><td class='awrc'>17-Feb-20 09:23</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>3,072</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>1,136</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>1,712</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>80</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>4,176</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>3,072</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>1,056</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>1,792</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>80</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>4,176</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,072</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,096</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,752</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>80</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>4,176</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,072</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,056</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,712</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>4,176</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,072</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,136</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,792</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>80</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>4,176</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>38.16</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>64</td><td align="right" headers="CPU #Cores" class='awrc'>32</td><td align="right" headers="CPU #Sckts" class='awrc'>2</td><td align="right" headers="Load Begin" class='awrclb'>52.77</td><td align="right" headers="Load End" class='awrc'>37.25</td><td align="right" headers="%CPU %Busy" class='awrclb'>31.33</td><td align="right" headers="%CPU %Usr" class='awrc'>10.49</td><td align="right" headers="%CPU %Sys" class='awrc'>14.29</td><td align="right" headers="%CPU %WIO" class='awrc'>34.60</td><td align="right" headers="%CPU %Idl" class='awrc'>68.67</td><td align="right" headers="Time(s) Busy" class='awrclb'>6,225.21</td><td align="right" headers="Time(s) Idle" class='awrc'>13,642.25</td><td align="right" headers="Time(s) Total" class='awrc'>19,867.46</td><td align="right" headers="Memory MB" class='awrclb'>1,032,089.41</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>64</td><td align="right" headers="CPU #Cores" class='awrnc'>32</td><td align="right" headers="CPU #Sckts" class='awrnc'>2</td><td align="right" headers="Load Begin" class='awrnclb'>35.04</td><td align="right" headers="Load End" class='awrnc'>22.37</td><td align="right" headers="%CPU %Busy" class='awrnclb'>29.22</td><td align="right" headers="%CPU %Usr" class='awrnc'>10.05</td><td align="right" headers="%CPU %Sys" class='awrnc'>13.57</td><td align="right" headers="%CPU %WIO" class='awrnc'>27.59</td><td align="right" headers="%CPU %Idl" class='awrnc'>70.78</td><td align="right" headers="Time(s) Busy" class='awrnclb'>5,852.32</td><td align="right" headers="Time(s) Idle" class='awrnc'>14,179.18</td><td align="right" headers="Time(s) Total" class='awrnc'>20,031.50</td><td align="right" headers="Memory MB" class='awrnclb'>1,032,089.42</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>12,077.53</td><td align="right" class='awrct'>27,821.43</td><td align="right" class='awrct'>39,898.96</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>40,342.13</td><td align="right" class='awrc'>5,806.02</td><td align="right" class='awrc'>40,337.18</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>246.47</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2,475.53</td><td align="right" class='awrc'>765.39</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>27,980.80</td><td align="right" class='awrnc'>5,454.59</td><td align="right" class='awrnc'>27,972.70</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>203.13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,402.82</td><td align="right" class='awrnc'>719.28</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>68,322.93</td><td align="right" class='awrct'>11,260.61</td><td align="right" class='awrct'>68,309.88</td><td align="right" class='awrct'>3.37</td><td align="right" class='awrct'>2.60</td><td align="right" class='awrct'>449.60</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>4,878.35</td><td align="right" class='awrct'>1,484.67</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>34,161.47</td><td align="right" class='awrnc'>5,630.30</td><td align="right" class='awrnc'>34,154.94</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>1.30</td><td align="right" class='awrnc'>224.80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,439.18</td><td align="right" class='awrnc'>742.33</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>8,740.78</td><td align="right" class='awrc'>248.50</td><td align="right" class='awrc'>8,743.00</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>30.65</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>51.41</td><td align="right" class='awrc'>32.61</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>59.05</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>14.39</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.01</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>50.75</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>30.92</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>40.95</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>19.49</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.97</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>49.25</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>29.93</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>16.94</td><td align="right" class='awrct'>99.98</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>30.43</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>57.70</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>33.22</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.48</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>25,203.78</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>355.99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>45.87</td><td align="right" class='awrc'>19.24</td><td align="right" class='awrc'>12,012.51</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5,806.02</td><td align="right" class='awrc'>40,342.13</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>14,221.72</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>429.06</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>18.33</td><td align="right" class='awrnc'>27.94</td><td align="right" class='awrnc'>10,685.37</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5,454.59</td><td align="right" class='awrnc'>27,980.80</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>39,425.50</td><td align="right" class='awrct'>0.10</td><td align="right" class='awrct'>785.05</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>1.48</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>64.20</td><td align="right" class='awrct'>47.18</td><td align="right" class='awrct'>22,697.88</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>11,260.61</td><td align="right" class='awrct'>68,322.93</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>19,712.75</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>392.52</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>32.10</td><td align="right" class='awrnc'>23.59</td><td align="right" class='awrnc'>11,348.94</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5,630.30</td><td align="right" class='awrnc'>34,161.47</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>7,765.49</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>51.67</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.92</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>19.48</td><td align="right" class='awrc'>6.15</td><td align="right" class='awrc'>938.43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>248.50</td><td align="right" class='awrc'>8,740.78</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>62.48</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.00</td><td align="right" headers="%DBtime Other" class='awrc'>0.88</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>0.00</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.11</td><td align="right" headers="%DBtime Config" class='awrc'>0.05</td><td align="right" headers="%DBtime Cluster" class='awrc'>29.78</td><td align="right" headers="%DBtime Admin" class='awrc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>14.39</td><td align="right" class='awrc'>59.05</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>50.83</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>1.53</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.00</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.07</td><td align="right" headers="%DBtime Config" class='awrnc'>0.10</td><td align="right" headers="%DBtime Cluster" class='awrnc'>38.19</td><td align="right" headers="%DBtime Admin" class='awrnc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>19.49</td><td align="right" class='awrnc'>40.95</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>56.65</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>1.21</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.09</td><td align="right" class='awrct'>0.07</td><td align="right" class='awrct'>33.98</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>16.94</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>40,150,218</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39,431.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>57.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>705.78us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>392.24us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,916,182</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19,148.84</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>28.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11,260.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>168,989</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,856.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.90ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>249.27us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>170,028</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,982.49</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>487.46us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>175,547</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>778.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>458.78us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>4,676</td><td align="right" headers="Event %Timeouts" class='awrc'>0.30</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>772.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>165.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>165.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>149.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>180.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>21.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>26,773</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>530.65</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>36,262</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>271.20</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>926.81us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>18,932</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>218.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>42.29us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>20,000,182</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>25,210.19</td><td align="right" headers="WaitTime AvgWait" class='awrct'>1.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>62.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,019,043</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,058.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,806.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>14.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>81,747</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,396.49</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>36,528</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>445.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>2,369</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.13</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>355.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>149.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>12,474</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>265.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.66</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>37,370</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>184.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>18,189</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>147.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>2,282</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>114.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>50.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>20,150,036</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>14,221.51</td><td align="right" headers="WaitTime AvgWait" class='awrct'>705.78us</td><td align="right" headers="WaitTime %DBtime" class='awrct'>50.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>897,139</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,089.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>28.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,454.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>19.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>133,500</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,536.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>87,242</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,459.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>138,177</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>593.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>2,307</td><td align="right" headers="Event %Timeouts" class='awrc'>0.48</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>417.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>180.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>14,299</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>265.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>11,441</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>131.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>18,073</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>123.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>40,145,645</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39,424.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>57.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>705.79us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>392.18us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,914,723</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19,129.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>28.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.29ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11,260.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>169,992</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,981.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>474.65us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>175,547</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>778.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>458.78us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>4,575</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>770.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>168.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>168.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>153.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>182.81ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>20.40ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>35,802</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>267.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>930.17us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>18,932</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>218.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>42.29us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>259</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>145.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>563.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>566.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>557.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>574.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>12.38ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>101</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>47.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>467.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>474.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>443.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>506.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>44.42ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>19,996,288</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>25,203.73</td><td align="right" headers="WaitTime AvgWait" class='awrct'>1.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>62.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,017,888</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,042.49</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,806.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>14.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>36,495</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>444.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>2,292</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>352.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>153.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>37,370</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>184.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>17,754</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>144.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>7,491</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>86.66</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>93</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>53.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>574.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrnclb'>145</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>31.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>216.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>20,149,357</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>14,221.19</td><td align="right" headers="WaitTime AvgWait" class='awrct'>705.79us</td><td align="right" headers="WaitTime %DBtime" class='awrct'>50.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>896,835</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,087.39</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>28.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,454.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>19.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>133,497</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,536.80</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>138,177</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>593.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>2,283</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>417.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>182.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>11,441</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>131.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>18,048</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>123.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>166</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>92.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>557.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>1,232</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>33.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>168,984</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,855.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.90ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>58.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>242.73us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>background cpu time</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,484.67</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>30.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>26,771</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>530.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>19.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>19.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>21.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>3,555</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>194.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>54.84ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>56.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>50.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>62.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>8.82ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>reliable message</td><td align="right" headers="Event Waits" class='awrclb'>948</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>40.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>42.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>43.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>42.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>43.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>936.14us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>317</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>20.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>66.00ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>66.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>64.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>68.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,459</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18.95</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>4.37ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>894</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>18.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>26.92ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>2,001</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>876.54us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>8.77ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>927</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>469.31us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>System I/O</td><td headers="Wait Event" class='awrct'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclbt'>81,742</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,395.65</td><td align="right" headers="WaitTime AvgWait" class='awrct'>17.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>56.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>background cpu time</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>765.39</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>30.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>12,471</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>265.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>2,282</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>114.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>50.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>reliable message</td><td align="right" headers="Event Waits" class='awrclb'>560</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>23.74</td><td align="right" headers="WaitTime AvgWait" class='awrc'>42.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,155</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16.49</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>167</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>64.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,888</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.44</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.26</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>80</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>76.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>434</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>System I/O</td><td headers="Wait Event" class='awrct'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclbt'>87,242</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,459.60</td><td align="right" headers="WaitTime AvgWait" class='awrct'>16.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>60.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>background cpu time</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>719.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>29.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>14,300</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>265.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>1,273</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>80.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>62.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>431</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>40.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>388</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>43.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>1,005</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>150</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>68.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>16,075</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>281.60us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>550</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>40,145,645</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39,424.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>57.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>705.79us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>392.18us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,914,723</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19,129.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>28.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.29ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>169,992</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,981.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>474.65us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>175,547</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>778.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>458.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>4,575</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>770.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>168.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>168.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>153.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>182.81ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>20.40ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>35,802</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>267.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>930.17us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>18,932</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>218.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>42.29us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>259</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>145.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>563.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>566.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>557.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>574.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>12.38ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>101</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>47.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>467.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>474.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>443.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>506.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>44.42ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>5,520</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>44.58</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.25ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.62ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>1,573</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>40.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>25.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.06ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>57</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>35.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>618.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>667.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>577.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>756.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>126.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrclb'>145</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>31.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>216.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>216.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>216.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>216.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>3,483</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.51ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>26.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>611.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>604.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>574.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>634.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>42.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrnclb'>28</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12.49</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>446.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>535.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>356.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>714.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>252.64ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>reliable message</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4279.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4279.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4279.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4279.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>54</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>74.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>71.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>42.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>101.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.39ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc remaster</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>66.67</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1333.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1000.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>32.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2000.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1414.53ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>10,966</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>269.38us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>295.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>237.98us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>353.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>81.96us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrclb'>656</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>434.55us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>238</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.05ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>204.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>208.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>160.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>257.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>68.56ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>1,610</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>360.44us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.68ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch free</td><td align="right" headers="Event Waits" class='awrclb'>2,442</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>851.25us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>834.61us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>703.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>185.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Commit</td><td headers="Wait Event" class='awrnc'>log file sync</td><td align="right" headers="Event Waits" class='awrnclb'>27</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>54.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>56.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>106.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>70.94ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>109</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>45</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>18.30ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>67</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>18.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>34</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>513.59us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>59.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.88ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>932</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>392.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.23ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrnclb'>20</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>37</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>374.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.31ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>95</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>148</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>646.01us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>582.95us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>512.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>653.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>99.99us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrnclb'>155</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>538.25us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>323.61us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>39.26us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>607.96us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>402.13us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>499</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>162.04us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>160.45us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>133.17us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>187.73us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>38.58us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current retry</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>29.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>399</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>98.66us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>84.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>34.84us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>133.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>69.52us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>111</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>311.30us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>339.39us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>214.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>464.12us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>176.39us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>112</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>288.31us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>282.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>193.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>370.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>124.79us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>read by other session</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrclb'>111</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>272.54us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>277.53us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>216.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>339.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>86.94us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.00ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current split</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>925.89us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>891.09us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>577.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>442.95us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.09ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>24</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>515.42us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>898.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>387.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>722.93us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc index operation</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>592</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.31us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.24us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.47us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.08us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.68ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>1,331</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.61us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.23us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>527.17ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrnclb'>66</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>58.56us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>58.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>58.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>58.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>588</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.68us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.31us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>703.06ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>120.55us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>124.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>115.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>134.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.08us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>74</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.70us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>42.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.90us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrclb'>33</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>78.76us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>81.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>70.76us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>92.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.55us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrnclb'>57</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.28us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.97us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.02us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.92us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.33ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>118.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>118.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>116.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>120.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.47us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>183.60us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>162.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>128.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>197.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>49.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>48</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.23us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.23us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.23us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>24</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.13us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.53us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>25.11us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>12.43us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.40us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrnclb'>1,338</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,011.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2997.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2997.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2995.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.19ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>588</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>330.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>562.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>448.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>894.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>631.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PL/SQL lock timer</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9000.30ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9000.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9000.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9000.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrclb'>102</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>70.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>70.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>44.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>96.81ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>36.71ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrnclb'>300</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>30.70us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>168,984</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,855.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.90ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>242.73us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>26,771</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>530.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.91ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>3,555</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>194.95</td><td align="right" headers="WaitTime AvgWait" class='awrc'>54.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>56.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>50.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.82ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>948</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>40.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>42.93ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>43.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>42.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>43.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>936.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>317</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>66.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>66.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>64.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>68.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.96ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,459</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>18.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.99ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.37ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>894</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>26.92ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>2,001</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>876.54us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.77ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrclb'>927</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.86</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>469.31us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>4,567</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.76</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>469.96us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>839.32us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>80</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>76.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>76.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>76.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>76.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrnclb'>19,223</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5.59</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>290.84us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>309.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>281.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>338.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>39.88us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrclb'>73</td><td align="right" headers="Event %Timeouts" class='awrc'>46.58</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>51.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>48.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>34.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.84ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>459</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.36ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.95ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>34</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>90.59ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>81.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>160.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>112.38ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrnclb'>2,921</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>916.44us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>91.94us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>170,775</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.70us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.26us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>774.97ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,771</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>682.74us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>677.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>543.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>811.73us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>189.40us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrclb'>1,100</td><td align="right" headers="Event %Timeouts" class='awrc'>45.45</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.28ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>220.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>104</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.18ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>101</td><td align="right" headers="Event %Timeouts" class='awrc'>13.86</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>485.54us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.36ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs remastering wait for read latch</td><td align="right" headers="Event Waits" class='awrnclb'>44</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>46.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>46.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>39.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>53.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>678.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>678.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>678.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>678.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>65.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>71.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>119.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>67.84ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>87,583</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.95</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.28us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.28us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.85us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.71us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>605.09ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>450</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>602.90us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrclb'>634</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>611.69us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.32ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>2,921</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>381.96us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>380.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>331.61us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>429.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>69.15us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>539.74ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>539.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>539.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>539.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>50</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>47.93ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>47.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>47.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>47.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>36</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>332.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>34</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>143.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>66.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>47.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>1,187</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>830.37us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>674.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>517.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>831.96us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>222.12us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrclb'>79</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrnclb'>60</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.78ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>212</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>686.41us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.46ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrnclb'>1,776</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>290.80us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>287.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>249.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>325.77us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>53.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>24.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>12.71ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" headers="Event Waits" class='awrnclb'>92</td><td align="right" headers="Event %Timeouts" class='awrnc'>20.65</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>136</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>360.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.68ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>737</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>538.44us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>501.21us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>383.42us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>618.99us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>166.58us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrclb'>196</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>693.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.30ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrnclb'>51,374</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.35us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.35us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.23us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.47us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>171.53ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrclb'>273</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>811.02us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>225.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>828.10us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrnclb'>17,373</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.23us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.97us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.74us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.51us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>63.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>63.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>63.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>63.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrnclb'>49</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.38ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>213</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>615.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>160.38us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>643.74us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>391</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>508.93us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>440.36us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>267.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>613.32us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>244.61us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>681</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>278.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>282.46us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>209.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>355.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>103.11us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>37</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrnclb'>6,648</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.90us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.98us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.54us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrclb'>4,623</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.82us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.76us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.49us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>54</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>44.88us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>478</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>173.01us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>173.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>167.49us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>179.02us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.15us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>21</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.74ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>775.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.46ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrclb'>404</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>115.25us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>114.73us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>99.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>129.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.15us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>332.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.56ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>write complete waits</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>42.15ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>42.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>42.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>42.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.44ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.87ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>20.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.57ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>40.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>40.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>509</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>76.72us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>76.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>72.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>81.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.57us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>135</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>288.04us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>288.43us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>234.87us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>342.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>75.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>20.96us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>40.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>108.29us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>kfk: async disk IO</td><td align="right" headers="Event Waits" class='awrclb'>8</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.08ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrnclb'>24</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>359.92us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrclb'>683</td><td align="right" headers="Event %Timeouts" class='awrc'>97.36</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>37.49us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>37.49us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>36.18us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>38.81us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.86us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>615.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>24.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.86ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrclb'>42</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>525.14us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>564.73us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>398.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>731.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>235.14us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>68</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>309.13us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>261.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>57.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>465.19us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>288.61us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" headers="Event Waits" class='awrclb'>105</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>168.34us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>162.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>144.97us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>179.54us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>24.44us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>61</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>268.95us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>200.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>74.71us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>326.81us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>178.26us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.34ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc index operation</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.55ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>43</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>251.21us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>254.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>229.92us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>278.11us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>34.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.60ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrclb'>34</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>216.24us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>214.46us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>199.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>229.58us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.39us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>34</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>215.38us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>209.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>181.92us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>236.10us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>38.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>827.20us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>351.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>673.45us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>179.23us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>177.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>157.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>198.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>29.10us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.10ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>857.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>365.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>696.26us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>609.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.08ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrclb'>764</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.56us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.69us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>189.10ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>os thread creation</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.44ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>66.47us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>205.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>244.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>127.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>362.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>166.52us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>334.33us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>274.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>95.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>454.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>253.85us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>259</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.91us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.03us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.37us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.70us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>936.99ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>254</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.32us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.99us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.81us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>584.69ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>259</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.21us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.16us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>397.60ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current split</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>107</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.90us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.65us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.28us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>435.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>435.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>435.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>435.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>728.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>728.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>728.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>728.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>55.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>62.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>84.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>30.76us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.77us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.77us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.27us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.27us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.95us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.45us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.35us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>215.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>215.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>215.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>215.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>46.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>46.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>46.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>46.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.33us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.67us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrnclb'>34</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>85,930.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2527.37 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>17.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2527.37 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2518.91 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2535.84 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.97 s</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>7,102</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30,700.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4322.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>6.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4322.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4305.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4339.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>24.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrnclb'>50,302</td><td align="right" headers="Event %Timeouts" class='awrnc'>24.98</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16,022.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>318.53ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>3.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>318.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>308.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>329.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.78ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>class slave wait</td><td align="right" headers="Event Waits" class='awrclb'>8,328</td><td align="right" headers="Event %Timeouts" class='awrc'>77.80</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,941.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>593.38ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>1.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>592.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>563.84ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>622.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>41.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrnclb'>265,812</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,658.72</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.26us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrclb'>93,874</td><td align="right" headers="Event %Timeouts" class='awrc'>96.44</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,651.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.54</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>191.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrnclb'>4,894,710</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,034.84</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>415.72us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>417.31us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>395.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>439.26us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>31.04us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrclb'>1,021</td><td align="right" headers="Event %Timeouts" class='awrc'>99.90</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,997.65</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1956.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1956.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1955.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1957.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.56ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>41,428</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,996.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>48.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>48.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>46.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>50.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.09ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrclb'>4,426</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,329.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.90us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pmon timer</td><td align="right" headers="Event Waits" class='awrnclb'>443</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,328.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2999.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>26.80us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrclb'>13,907</td><td align="right" headers="Event %Timeouts" class='awrc'>57.71</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,316.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>94.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>95.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>88.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>102.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.08ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>720.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>58.69us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>24</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>672.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>105.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrclb'>48</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>672.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.91us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>670.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>670.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>OFS idle</td><td align="right" headers="Event Waits" class='awrnclb'>223</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>669.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3000.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3000.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.21us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pman timer</td><td align="right" headers="Event Waits" class='awrclb'>223</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>668.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>55.95us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>lreg timer</td><td align="right" headers="Event Waits" class='awrnclb'>222</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>666.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3002.87ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3002.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3002.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3002.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>18.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>666.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.51 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>55.51 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>55.33 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>55.69 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>253.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrnclb'>666</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>666.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1000.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1000.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1000.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1000.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrclb'>2,245</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>666.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>296.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>296.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>296.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>296.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>258.23us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrnclb'>381</td><td align="right" headers="Event %Timeouts" class='awrnc'>83.99</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>665.65</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1747.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1747.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1743.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1750.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.60ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrclb'>6,739</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>660.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>98.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>98.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>97.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>98.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>403.19us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PING</td><td align="right" headers="Event Waits" class='awrnclb'>618</td><td align="right" headers="Event %Timeouts" class='awrnc'>18.77</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>660.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1068.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1069.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1041.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1096.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>39.15ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>660.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>660.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>230.58us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>600.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>176.92us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>smon timer</td><td align="right" headers="Event Waits" class='awrnclb'>105</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>367.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3495.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3585.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3138.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4031.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>631.68ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrclb'>34</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>48.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.93ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrnclb'>34</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>34.31ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>43.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>157</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>899.02us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>914.88us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>260</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>864.38us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>295.19us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.97ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrclb'>723</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.99us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.98us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.84us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>19.13us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.62us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6580</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>65.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>168.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>25.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>58.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(46)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(12)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2898</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>17.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>62.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>60.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>684</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>46.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>36.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>84</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>46.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>926</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>553</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>29.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>81.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>23.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>61.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1979</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>531</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>39.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>731</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>67.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>4591</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>51.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1094</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>404</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>793</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>2.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>34</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>68</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>87.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>34.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>59.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>66</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>848</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>74.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>60</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>260</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>90.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>74</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>17.6</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>320</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>38.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>3907</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>50.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>37.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>59.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>166.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(58)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>307</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>34.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>39.8M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(7552)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>48.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(1253)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(791)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(255)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>46.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>59.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: AF - task serialization</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>74</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>43.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CO - master slave det</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>3533</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>105</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>24.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>8.6</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>48</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>39.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>104</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>55.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>44.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>45</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>1429</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>97</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>261</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>40.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>58.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>18.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(5)</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1.9M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(48)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(140)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(123)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(284)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(64)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(742)</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>109</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>47.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>104</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>48.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>3532</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>43.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>5699</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>45</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>58</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>72.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>3.4</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>167.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(16)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(81)</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>35.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>37.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(10)</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1547</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>31.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>32.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>172.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(22)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>39.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(28)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(2)</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current split</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc index operation</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>66.7</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>15.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>43.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1438</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>81.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>923</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>254</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>68.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>92</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>105</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>4596</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>31.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>58.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>5340</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>68</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>273</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>196</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>11.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>30.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>2240</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>116</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>1050</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>2307</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>32.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>140</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>144</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>154</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>157</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>760</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>50.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>46.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache load lock</td><td align="right" class='awrnc'>145</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>42.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>662</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>26.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>39.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(5)</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>450</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>943</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>42.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.8</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>69</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>43.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>33,372,657</td><td align="right" class='awrc'>20,164,422</td><td align="right" class='awrc'>692,189</td><td align="right" class='awrc'>545,751</td><td align="right" class='awrc'>1,611,225</td><td align="right" class='awrc'>1,065</td><td align="right" class='awrc'>6,533,193</td><td align="right" class='awrc'>6,069</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>196,531</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>34,337,885</td><td align="right" class='awrnc'>20,315,043</td><td align="right" class='awrnc'>718,112</td><td align="right" class='awrnc'>567,837</td><td align="right" class='awrnc'>1,654,473</td><td align="right" class='awrnc'>728</td><td align="right" class='awrnc'>6,746,682</td><td align="right" class='awrnc'>1,625</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>202,509</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>67,710,542</td><td align="right" class='awrct'>40,479,465</td><td align="right" class='awrct'>1,410,301</td><td align="right" class='awrct'>1,113,588</td><td align="right" class='awrct'>3,265,698</td><td align="right" class='awrct'>1,793</td><td align="right" class='awrct'>13,279,875</td><td align="right" class='awrct'>7,694</td><td align="right" class='awrct'>37</td><td align="right" class='awrct'>399,040</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>33,855,271</td><td align="right" class='awrnc'>20,239,733</td><td align="right" class='awrnc'>705,151</td><td align="right" class='awrnc'>556,794</td><td align="right" class='awrnc'>1,632,849</td><td align="right" class='awrnc'>897</td><td align="right" class='awrnc'>6,639,938</td><td align="right" class='awrnc'>3,847</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>199,520</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>682,519</td><td align="right" class='awrc'>106,505</td><td align="right" class='awrc'>18,330</td><td align="right" class='awrc'>15,617</td><td align="right" class='awrc'>30,581</td><td align="right" class='awrc'>238</td><td align="right" class='awrc'>150,960</td><td align="right" class='awrc'>3,142</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>4,227</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>99,736.58</td><td align="right" class='awrc'>60,262.82</td><td align="right" class='awrc'>2,068.66</td><td align="right" class='awrc'>1,631.02</td><td align="right" class='awrc'>4,815.26</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>19,524.92</td><td align="right" class='awrc'>18.14</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>587.35</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>102,617.86</td><td align="right" class='awrnc'>60,710.97</td><td align="right" class='awrnc'>2,146.06</td><td align="right" class='awrnc'>1,696.97</td><td align="right" class='awrnc'>4,944.35</td><td align="right" class='awrnc'>2.18</td><td align="right" class='awrnc'>20,162.28</td><td align="right" class='awrnc'>4.86</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>605.19</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>202,354.44</td><td align="right" class='awrct'>120,973.79</td><td align="right" class='awrct'>4,214.72</td><td align="right" class='awrct'>3,327.98</td><td align="right" class='awrct'>9,759.61</td><td align="right" class='awrct'>5.36</td><td align="right" class='awrct'>39,687.20</td><td align="right" class='awrct'>22.99</td><td align="right" class='awrct'>0.11</td><td align="right" class='awrct'>1,192.54</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>101,177.22</td><td align="right" class='awrnc'>60,486.89</td><td align="right" class='awrnc'>2,107.36</td><td align="right" class='awrnc'>1,663.99</td><td align="right" class='awrnc'>4,879.81</td><td align="right" class='awrnc'>2.68</td><td align="right" class='awrnc'>19,843.60</td><td align="right" class='awrnc'>11.50</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>596.27</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,037.37</td><td align="right" class='awrc'>316.89</td><td align="right" class='awrc'>54.73</td><td align="right" class='awrc'>46.63</td><td align="right" class='awrc'>91.28</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>450.68</td><td align="right" class='awrc'>9.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>12.62</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>169.81</td><td align="right" class='awrc'>102.60</td><td align="right" class='awrc'>3.52</td><td align="right" class='awrc'>2.78</td><td align="right" class='awrc'>8.20</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>33.24</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>169.56</td><td align="right" class='awrnc'>100.32</td><td align="right" class='awrnc'>3.55</td><td align="right" class='awrnc'>2.80</td><td align="right" class='awrnc'>8.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>33.32</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>169.69</td><td align="right" class='awrct'>101.46</td><td align="right" class='awrct'>3.53</td><td align="right" class='awrct'>2.79</td><td align="right" class='awrct'>8.18</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>33.28</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>2,831</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>1,424</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>6,503</td><td align="right" headers="BlocksServed GCCR" class='awrc'>160</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>3,985,490</td><td align="right" headers="Messages GESReceived" class='awrc'>8,446</td><td align="right" headers="Messages GCSSent" class='awrc'>3,830,977</td><td align="right" headers="Messages GESSent" class='awrc'>5,851</td><td align="right" headers="Messages SentDirect" class='awrc'>1,079,603</td><td align="right" headers="Messages SentIndir" class='awrc'>1,686,200</td><td align="right" headers="GCBlks Lost" class='awrclb'>111</td><td align="right" headers="GCCR Failure" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>6,498</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>157</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>2,946</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>1,440</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>3,869,913</td><td align="right" headers="Messages GESReceived" class='awrnc'>5,919</td><td align="right" headers="Messages GCSSent" class='awrnc'>4,049,211</td><td align="right" headers="Messages GESSent" class='awrnc'>9,043</td><td align="right" headers="Messages SentDirect" class='awrnc'>1,068,471</td><td align="right" headers="Messages SentIndir" class='awrnc'>1,891,856</td><td align="right" headers="GCBlks Lost" class='awrnclb'>210</td><td align="right" headers="GCCR Failure" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>9,329</td><td align="right" class='awrct'>1,581</td><td align="right" class='awrclbt'>9,449</td><td align="right" class='awrct'>1,600</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>7,855,403</td><td align="right" class='awrct'>14,365</td><td align="right" class='awrct'>7,880,188</td><td align="right" class='awrct'>14,894</td><td align="right" class='awrct'>2,148,074</td><td align="right" class='awrct'>3,578,056</td><td align="right" class='awrclbt'>321</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>4,665</td><td align="right" class='awrnc'>791</td><td align="right" class='awrnclb'>4,725</td><td align="right" class='awrnc'>800</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>3,927,702</td><td align="right" class='awrnc'>7,183</td><td align="right" class='awrnc'>3,940,094</td><td align="right" class='awrnc'>7,447</td><td align="right" class='awrnc'>1,074,037</td><td align="right" class='awrnc'>1,789,028</td><td align="right" class='awrnclb'>161</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>2,593</td><td align="right" class='awrc'>896</td><td align="right" class='awrclb'>2,515</td><td align="right" class='awrc'>905</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>81,725</td><td align="right" class='awrc'>1,787</td><td align="right" class='awrc'>154,315</td><td align="right" class='awrc'>2,257</td><td align="right" class='awrc'>7,872</td><td align="right" class='awrc'>145,421</td><td align="right" class='awrclb'>70</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>8.46</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>4.26</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>19.43</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>0.48</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>11,910.92</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>25.24</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>11,449.15</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>17.49</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>3,226.47</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>5,039.33</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>0</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>19.42</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>0.47</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>8.80</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>4.30</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>11,565.13</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>17.69</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>12,100.96</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>27.02</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>3,193.10</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>5,653.76</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>1</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>27.88</td><td align="right" class='awrct'>4.72</td><td align="right" class='awrclbt'>28.24</td><td align="right" class='awrct'>4.78</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>23,476.05</td><td align="right" class='awrct'>42.93</td><td align="right" class='awrct'>23,550.11</td><td align="right" class='awrct'>44.51</td><td align="right" class='awrct'>6,419.57</td><td align="right" class='awrct'>10,693.09</td><td align="right" class='awrclbt'>1</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>13.94</td><td align="right" class='awrnc'>2.36</td><td align="right" class='awrnclb'>14.12</td><td align="right" class='awrnc'>2.39</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>11,738.03</td><td align="right" class='awrnc'>21.47</td><td align="right" class='awrnc'>11,775.05</td><td align="right" class='awrnc'>22.26</td><td align="right" class='awrnc'>3,209.78</td><td align="right" class='awrnc'>5,346.55</td><td align="right" class='awrnclb'>0</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>7.75</td><td align="right" class='awrc'>2.68</td><td align="right" class='awrclb'>7.52</td><td align="right" class='awrc'>2.70</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>244.51</td><td align="right" class='awrc'>5.34</td><td align="right" class='awrc'>460.90</td><td align="right" class='awrc'>6.74</td><td align="right" class='awrc'>23.60</td><td align="right" class='awrc'>434.47</td><td align="right" class='awrclb'>0</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.01</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.01</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.03</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.00</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>20.28</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.04</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>19.49</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.03</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>5.49</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>8.58</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.00</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.03</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.00</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.01</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.01</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>19.11</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.03</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>20.00</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>0.04</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>5.28</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>9.34</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.00</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>19.69</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>19.74</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>5.38</td><td align="right" class='awrct'>8.96</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrcbbt'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>39.56</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.01</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>60.43</td><td align="right" class='awrc'>94.47</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>40.82</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.02</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>59.17</td><td align="right" class='awrnc'>94.07</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1537</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>7353</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>0</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>140000</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>4.38</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>10922</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>0</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>20938</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>0.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1425</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>7325</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>0</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>58261</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>6.39</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>7130</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>0</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>32195</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>1.39</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>88</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>6338</td><td align="right" headers="QueueTime(us) Received" class='awrc'>57</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>36</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>31</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>38.29</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>59.80</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>1.91</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>92</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>6040</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>30</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>31</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>24</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>35.45</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>62.77</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>1.78</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>145</td><td align="right" headers="BlockRequests CU" class='awrc'>17</td><td align="right" headers="BlockRequests Data" class='awrc'>145</td><td align="right" headers="BlockRequests Undo" class='awrc'>0</td><td align="right" headers="BlockRequests TX" class='awrc'>11</td><td align="right" headers="Results Current" class='awrclb'>161</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>0</td><td align="right" headers="Results DskRd" class='awrc'>1</td><td align="right" headers="Results Fail" class='awrc'>0</td><td align="right" headers="Fairness DownConv" class='awrclb'>115</td><td align="right" headers="Light Works" class='awrclb'>9</td><td align="right" headers="Total Flushes" class='awrclb'>7</td><td align="right" headers="Total Builds" class='awrc'>145</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>214</td><td align="right" headers="BlockRequests CU" class='awrnc'>1,250</td><td align="right" headers="BlockRequests Data" class='awrnc'>214</td><td align="right" headers="BlockRequests Undo" class='awrnc'>1</td><td align="right" headers="BlockRequests TX" class='awrnc'>1,225</td><td align="right" headers="Results Current" class='awrnclb'>1,451</td><td align="right" headers="Results Private" class='awrnc'>1</td><td align="right" headers="Results Zero" class='awrnc'>0</td><td align="right" headers="Results DskRd" class='awrnc'>11</td><td align="right" headers="Results Fail" class='awrnc'>1</td><td align="right" headers="Fairness DownConv" class='awrnclb'>149</td><td align="right" headers="Light Works" class='awrnclb'>9</td><td align="right" headers="Total Flushes" class='awrnclb'>92</td><td align="right" headers="Total Builds" class='awrnc'>212</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>359</td><td align="right" class='awrct'>1,267</td><td align="right" class='awrct'>359</td><td align="right" class='awrct'>1</td><td align="right" class='awrct'>1,236</td><td align="right" class='awrclbt'>1,612</td><td align="right" class='awrct'>1</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>12</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>264</td><td align="right" class='awrclbt'>18</td><td align="right" class='awrclbt'>99</td><td align="right" class='awrct'>357</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>180</td><td align="right" class='awrnc'>634</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>618</td><td align="right" class='awrnclb'>806</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnclb'>132</td><td align="right" class='awrnclb'>9</td><td align="right" class='awrnclb'>50</td><td align="right" class='awrnc'>179</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>49</td><td align="right" class='awrc'>872</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>858</td><td align="right" class='awrclb'>912</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>1</td><td align="right" class='awrclb'>24</td><td align="right" class='awrclb'>0</td><td align="right" class='awrclb'>60</td><td align="right" class='awrc'>47</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>50.00</td><td align="right" class='awrc'>50.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>68.75</td><td align="right" class='awrc'>18.75</td><td align="right" class='awrc'>9.38</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>50.00</td><td align="right" class='awrnc'>50.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>87.80</td><td align="right" class='awrnc'>12.20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>73</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>207</td><td align="right" headers="CRBlocks %Immed" class='awrc'>97.58</td><td align="right" headers="CRBlocks %Busy" class='awrc'>2.42</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>2,822</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>49.22</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>50.67</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.11</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>6474</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>6335</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>12067</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>11001</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>13008</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>9065</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>4354</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>1,203</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>92.68</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>7.15</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.17</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>6786</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>785</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>84636</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>4600</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>15</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>31</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>12.90</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>87.10</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>723</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>723</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>517</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>704</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>489</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="CRBlocks Received" class='awrnclb'>1</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>2126</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>2126</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrclbt'>144</td><td align="right" headers="CRBlocks %Immed" class='awrct'>98.61</td><td align="right" headers="CRBlocks %Busy" class='awrct'>1.39</td><td align="right" headers="CRBlocks %Cngst" class='awrct'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclbt'>6,463</td><td align="right" headers="CurrentBlocks %Immed" class='awrct'>33.41</td><td align="right" headers="CurrentBlocks %Busy" class='awrct'>65.93</td><td align="right" headers="CurrentBlocks %Cngst" class='awrct'>0.67</td><td align="right" headers="CRAvgTime(us) All" class='awrclbt'>3175</td><td align="right" headers="CRAvgTime(us) Immed" class='awrct'>1397</td><td align="right" headers="CRAvgTime(us) Busy" class='awrct'>129406</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrct'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclbt'>6909</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrct'>6471</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrct'>6900</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrbt'>29825</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="CRBlocks Received" class='awrnclb'>5</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>16</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>25.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>75.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>342</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>342</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>940</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>1486</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>758</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrclb'>10</td><td align="right" headers="CRBlocks %Immed" class='awrc'>60.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>40.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>1</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>71152</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1517</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>175605</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>709</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>709</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>202</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>1,389</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>6335</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>6335</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>13008</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>13008</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>1,115</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>785</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>785</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>15</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>4</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>723</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>723</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>704</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>704</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>1</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>2126</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>2126</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>142</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>2,159</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>1397</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>1397</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>6471</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>6471</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>5</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>4</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>342</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>342</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>1486</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>1486</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>6</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>1517</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>1517</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.26.166</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.26.102</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>31</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>498</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.20</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>33</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>475</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.19</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>31</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>1574</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>1.33</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>33</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>1724</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>1.45</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>30</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>1097</td><td align="right" headers="500bytes Std|Dev" class='awrct'>0.83</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>33</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>8953</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>43.25</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>31</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>401</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.20</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>33</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>367</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.15</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>1,091.99</td><td align="right" headers="Sent(MB) Cache" class='awrc'>27.98</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>1.55</td><td align="right" headers="Sent(MB) DLM" class='awrc'>1,019.66</td><td align="right" headers="Sent(MB) PNG" class='awrc'>0.55</td><td align="right" headers="Sent(MB) Misc" class='awrc'>42.25</td><td align="right" headers="Received(MB) Total" class='awrclb'>1,113.52</td><td align="right" headers="Received(MB) Cache" class='awrc'>17.03</td><td align="right" headers="Received(MB) IPQ" class='awrc'>1.40</td><td align="right" headers="Received(MB) DLM" class='awrc'>1,048.61</td><td align="right" headers="Received(MB) PNG" class='awrc'>0.55</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>45.92</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>1,122.32</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>17.45</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>1.40</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>1,056.99</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>0.55</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>45.92</td><td align="right" headers="Received(MB) Total" class='awrnclb'>1,097.63</td><td align="right" headers="Received(MB) Cache" class='awrnc'>27.66</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>1.55</td><td align="right" headers="Received(MB) DLM" class='awrnc'>1,025.58</td><td align="right" headers="Received(MB) PNG" class='awrnc'>0.55</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>42.28</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>2,214.32</td><td align="right" class='awrct'>45.43</td><td align="right" class='awrct'>2.96</td><td align="right" class='awrct'>2,076.65</td><td align="right" class='awrct'>1.11</td><td align="right" class='awrct'>88.17</td><td align="right" class='awrclbt'>2,211.15</td><td align="right" class='awrct'>44.69</td><td align="right" class='awrct'>2.96</td><td align="right" class='awrct'>2,074.19</td><td align="right" class='awrct'>1.11</td><td align="right" class='awrcrbt'>88.20</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>1,107.16</td><td align="right" class='awrnc'>22.71</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>1,038.33</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>44.09</td><td align="right" class='awrnclb'>1,105.58</td><td align="right" class='awrnc'>22.35</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>1,037.09</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrncrb'>44.10</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>21.45</td><td align="right" class='awrc'>7.45</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>26.40</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.60</td><td align="right" class='awrclb'>11.23</td><td align="right" class='awrc'>7.52</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>16.28</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>2.58</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>3.26</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.08</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>3.05</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.13</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>3.33</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.05</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>3.13</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.14</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>3.35</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.05</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>3.16</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.14</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>3.28</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.08</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>3.06</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.13</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>6.62</td><td align="right" class='awrct'>0.14</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>6.21</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.26</td><td align="right" class='awrclbt'>6.61</td><td align="right" class='awrct'>0.13</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>6.20</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.26</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>3.31</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnclb'>3.30</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.13</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.06</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrclb'>0.03</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>7,721.35</td><td align="right" headers="Sent Packets" class='awrc'>6,271,717</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>7,819.77</td><td align="right" headers="Received Packets" class='awrc'>6,219,944</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>1,733.33</td><td align="right" headers="Sent Packets" class='awrnc'>4,163,524</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1,786.42</td><td align="right" headers="Received Packets" class='awrnc'>4,451,485</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.166</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.01</td><td align="right" headers="Sent Packets" class='awrnc'>107</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.01</td><td align="right" headers="Received Packets" class='awrnc'>115</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>1.62</td><td align="right" headers="Sent Packets" class='awrc'>1,559</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>1.25</td><td align="right" headers="Received Packets" class='awrc'>2,248</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>62.26</td><td align="right" headers="Sent Packets" class='awrnc'>1,064,704</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>62.26</td><td align="right" headers="Received Packets" class='awrnc'>1,064,704</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.6</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>7,909.97</td><td align="right" headers="Sent Packets" class='awrc'>6,394,193</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>7,630.14</td><td align="right" headers="Received Packets" class='awrc'>6,086,925</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>1,782.88</td><td align="right" headers="Sent Packets" class='awrnc'>4,291,651</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1,736.36</td><td align="right" headers="Received Packets" class='awrnc'>4,321,166</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.102</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.01</td><td align="right" headers="Sent Packets" class='awrnc'>116</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.01</td><td align="right" headers="Received Packets" class='awrnc'>108</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.22</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>1.62</td><td align="right" headers="Sent Packets" class='awrnc'>1,561</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.25</td><td align="right" headers="Received Packets" class='awrnc'>2,280</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>61.72</td><td align="right" headers="Sent Packets" class='awrc'>1,221,562</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>61.72</td><td align="right" headers="Received Packets" class='awrc'>1,221,562</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>19,274.76</td><td align="right" class='awrnct'>23,410,694</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>19,099.17</td><td align="right" class='awrnct'>23,370,537</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>1,133.81</td><td align="right" class='awrc'>1,377,100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>1,123.48</td><td align="right" class='awrc'>1,374,737</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>2,580.26</td><td align="right" class='awrnc'>2,323,256</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>2,551.03</td><td align="right" class='awrnc'>2,301,141</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>23.08</td><td align="right" headers="Sent Packets" class='awrc'>18,743</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>23.37</td><td align="right" headers="Received Packets" class='awrc'>18,589</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>5.18</td><td align="right" headers="Sent Packets" class='awrnc'>12,443</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>5.34</td><td align="right" headers="Received Packets" class='awrnc'>13,304</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.166</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>5</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>7</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.19</td><td align="right" headers="Sent Packets" class='awrnc'>3,182</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.19</td><td align="right" headers="Received Packets" class='awrnc'>3,182</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.6</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>23.64</td><td align="right" headers="Sent Packets" class='awrc'>19,109</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>22.80</td><td align="right" headers="Received Packets" class='awrc'>18,191</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>5.33</td><td align="right" headers="Sent Packets" class='awrnc'>12,825</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>5.19</td><td align="right" headers="Received Packets" class='awrnc'>12,914</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.102</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.22</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>5</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>7</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.18</td><td align="right" headers="Sent Packets" class='awrc'>3,651</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.18</td><td align="right" headers="Received Packets" class='awrc'>3,651</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>57.60</td><td align="right" class='awrnct'>69,963</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>57.08</td><td align="right" class='awrnct'>69,843</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>3.39</td><td align="right" class='awrc'>4,115</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>3.36</td><td align="right" class='awrc'>4,108</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>7.71</td><td align="right" class='awrnc'>6,943</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>7.62</td><td align="right" class='awrnc'>6,877</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>100.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>0.85</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>0.35</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>0.02</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>0.17</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>0.02</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>0.26</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>235</td><td align="right" headers="AffinityObjects End" class='awrc'>135</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>65</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>0</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>65</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>100.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>0.85</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>0.09</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>0.01</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>0.19</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>0.02</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>0.52</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>63</td><td align="right" headers="AffinityObjects End" class='awrnc'>63</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>65</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>0</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>65</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>100.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>0.85</td><td align="right" class='awrct'>0.22</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.18</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.39</td><td align="right" class='awrclbt'>149</td><td align="right" class='awrct'>99</td><td align="right" class='awrclbt'>65</td><td align="right" class='awrct'>0</td><td align="right" class='awrcrbt'>65</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>0.85</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnclb'>235</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnclb'>65</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>65</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   92.6% of Total DB Time (s):		68,323</li>
<li class="awr">Captured PL/SQL account for   38.7% of Total DB Time (s):	   68,323</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrc'>8,702.68</td><td align="right" headers="Total IOWait(s)" class='awrc'>36,489.73</td><td align="right" headers="Total Gets" class='awrc'>61,577,832</td><td align="right" headers="Total Reads" class='awrc'>37,411,377</td><td align="right" headers="Total Rows" class='awrc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrc'>18,343.87</td><td align="right" headers="Total Execs" class='awrc'>12,295,996</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>3.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>77.28</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>90.94</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>92.42</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>80.69</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>92.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>5,300.85</td><td align="right" headers="Total CPU(s)" class='awrnc'>429.20</td><td align="right" headers="Total IOWait(s)" class='awrnc'>1,336.33</td><td align="right" headers="Total Gets" class='awrnc'>2,431,247</td><td align="right" headers="Total Reads" class='awrnc'>1,161,290</td><td align="right" headers="Total Rows" class='awrnc'>1,140,915</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,265.87</td><td align="right" headers="Total Execs" class='awrnc'>380,305</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.39</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>7.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.81</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.59</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>2.87</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>14.37</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>2.86</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhydnmhhkhhdy">bhydnmhhkhhdy</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>260.57</td><td align="right" headers="Total CPU(s)" class='awrc'>17.18</td><td align="right" headers="Total IOWait(s)" class='awrc'>50.11</td><td align="right" headers="Total Gets" class='awrc'>47,507</td><td align="right" headers="Total Reads" class='awrc'>33,596</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>202.15</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>260.57</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>17.18</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>50.11</td><td align="right" headers="PerExecution Gets" class='awrc'>47,507.00</td><td align="right" headers="PerExecution Reads" class='awrc'>33,596.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>202.15</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.15</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.89</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fcfy9turtx376">fcfy9turtx376</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>259.87</td><td align="right" headers="Total CPU(s)" class='awrnc'>46.95</td><td align="right" headers="Total IOWait(s)" class='awrnc'>124.85</td><td align="right" headers="Total Gets" class='awrnc'>293,372</td><td align="right" headers="Total Reads" class='awrnc'>178,380</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>107.12</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>259.87</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>46.95</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>124.85</td><td align="right" headers="PerExecution Gets" class='awrnc'>293,372.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>178,380.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>107.12</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.42</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.43</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.44</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.47</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f7s68cgfrpfx5">f7s68cgfrpfx5</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>259.27</td><td align="right" headers="Total CPU(s)" class='awrc'>42.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>113.14</td><td align="right" headers="Total Gets" class='awrc'>261,290</td><td align="right" headers="Total Reads" class='awrc'>156,827</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>120.79</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>259.27</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>113.14</td><td align="right" headers="PerExecution Gets" class='awrc'>261,290.00</td><td align="right" headers="PerExecution Reads" class='awrc'>156,827.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>120.79</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.39</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.39</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.53</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#c45q6fupzf7tg">c45q6fupzf7tg</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>259.25</td><td align="right" headers="Total CPU(s)" class='awrnc'>14.92</td><td align="right" headers="Total IOWait(s)" class='awrnc'>44.58</td><td align="right" headers="Total Gets" class='awrnc'>40,874</td><td align="right" headers="Total Reads" class='awrnc'>29,122</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>207.71</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>259.25</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>14.92</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>44.58</td><td align="right" headers="PerExecution Gets" class='awrnc'>40,874.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>29,122.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>207.71</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.06</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.91</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5m9kb3cpp792u">5m9kb3cpp792u</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>259.25</td><td align="right" headers="Total CPU(s)" class='awrc'>18.64</td><td align="right" headers="Total IOWait(s)" class='awrc'>37.58</td><td align="right" headers="Total Gets" class='awrc'>47,398</td><td align="right" headers="Total Reads" class='awrc'>33,577</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>212.98</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>259.25</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.64</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>37.58</td><td align="right" headers="PerExecution Gets" class='awrc'>47,398.00</td><td align="right" headers="PerExecution Reads" class='awrc'>33,577.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>212.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.94</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0u5gbpqpjtcbb">0u5gbpqpjtcbb</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>259.25</td><td align="right" headers="Total CPU(s)" class='awrnc'>19.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>38.17</td><td align="right" headers="Total Gets" class='awrnc'>53,000</td><td align="right" headers="Total Reads" class='awrnc'>37,126</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>212.12</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>259.25</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>19.06</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>38.17</td><td align="right" headers="PerExecution Gets" class='awrnc'>53,000.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>37,126.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>212.12</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0fxpq9z2j2zyu">0fxpq9z2j2zyu</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>258.93</td><td align="right" headers="Total CPU(s)" class='awrc'>17.52</td><td align="right" headers="Total IOWait(s)" class='awrc'>33.86</td><td align="right" headers="Total Gets" class='awrc'>45,563</td><td align="right" headers="Total Reads" class='awrc'>30,977</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>215.80</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>258.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>17.52</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>33.86</td><td align="right" headers="PerExecution Gets" class='awrc'>45,563.00</td><td align="right" headers="PerExecution Reads" class='awrc'>30,977.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>215.80</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5t5va0wzy46cz">5t5va0wzy46cz</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>258.92</td><td align="right" headers="Total CPU(s)" class='awrnc'>35.62</td><td align="right" headers="Total IOWait(s)" class='awrnc'>96.14</td><td align="right" headers="Total Gets" class='awrnc'>213,086</td><td align="right" headers="Total Reads" class='awrnc'>130,826</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>137.97</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>258.92</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>35.62</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>96.14</td><td align="right" headers="PerExecution Gets" class='awrnc'>213,086.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>130,826.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>137.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.32</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.31</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.32</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   81.2% of Total CPU Time (s): 	 11,261</li>
<li class="awr">Captured PL/SQL account for   45.4% of Total CPU Time (s):	    11,261</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>8,702.68</td><td align="right" headers="Total Elapsed(s)" class='awrc'>57,924.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>36,489.73</td><td align="right" headers="Total Gets" class='awrc'>61,577,832</td><td align="right" headers="Total Reads" class='awrc'>37,411,377</td><td align="right" headers="Total Rows" class='awrc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrc'>18,343.87</td><td align="right" headers="Total Execs" class='awrc'>12,295,996</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>3.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>77.28</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>84.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>92.48</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>90.94</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>92.42</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>80.69</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>92.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>429.20</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>5,300.85</td><td align="right" headers="Total IOWait(s)" class='awrnc'>1,336.33</td><td align="right" headers="Total Gets" class='awrnc'>2,431,247</td><td align="right" headers="Total Reads" class='awrnc'>1,161,290</td><td align="right" headers="Total Rows" class='awrnc'>1,140,915</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,265.87</td><td align="right" headers="Total Execs" class='awrnc'>380,305</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.39</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>3.81</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>7.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>3.39</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.59</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>2.87</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>14.37</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>2.86</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>85.35</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.88</td><td align="right" headers="Total IOWait(s)" class='awrc'>218.77</td><td align="right" headers="Total Gets" class='awrc'>601,996</td><td align="right" headers="Total Reads" class='awrc'>338,370</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>85.35</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.88</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.77</td><td align="right" headers="PerExecution Gets" class='awrc'>601,996.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,370.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.89</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>85.21</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.85</td><td align="right" headers="Total IOWait(s)" class='awrnc'>214.70</td><td align="right" headers="Total Gets" class='awrnc'>622,597</td><td align="right" headers="Total Reads" class='awrnc'>331,133</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>85.21</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.85</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>214.70</td><td align="right" headers="PerExecution Gets" class='awrnc'>622,597.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>331,133.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.82</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>85.20</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.79</td><td align="right" headers="Total IOWait(s)" class='awrc'>216.24</td><td align="right" headers="Total Gets" class='awrc'>606,220</td><td align="right" headers="Total Reads" class='awrc'>334,817</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>85.20</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.79</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>216.24</td><td align="right" headers="PerExecution Gets" class='awrc'>606,220.00</td><td align="right" headers="PerExecution Reads" class='awrc'>334,817.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.90</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>85.11</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.85</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.26</td><td align="right" headers="Total Gets" class='awrnc'>592,033</td><td align="right" headers="Total Reads" class='awrnc'>337,620</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>85.11</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.85</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.26</td><td align="right" headers="PerExecution Gets" class='awrnc'>592,033.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>337,620.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>84.80</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.81</td><td align="right" headers="Total IOWait(s)" class='awrc'>216.68</td><td align="right" headers="Total Gets" class='awrc'>589,997</td><td align="right" headers="Total Reads" class='awrc'>335,385</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>84.80</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>216.68</td><td align="right" headers="PerExecution Gets" class='awrc'>589,997.00</td><td align="right" headers="PerExecution Reads" class='awrc'>335,385.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.75</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>84.72</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.91</td><td align="right" headers="Total IOWait(s)" class='awrnc'>213.51</td><td align="right" headers="Total Gets" class='awrnc'>626,097</td><td align="right" headers="Total Reads" class='awrnc'>328,107</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.84</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>84.72</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.91</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>213.51</td><td align="right" headers="PerExecution Gets" class='awrnc'>626,097.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>328,107.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.84</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.75</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.81</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>84.54</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.86</td><td align="right" headers="Total IOWait(s)" class='awrc'>217.06</td><td align="right" headers="Total Gets" class='awrc'>597,231</td><td align="right" headers="Total Reads" class='awrc'>334,882</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>84.54</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.86</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>217.06</td><td align="right" headers="PerExecution Gets" class='awrc'>597,231.00</td><td align="right" headers="PerExecution Reads" class='awrc'>334,882.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.75</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>84.50</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.90</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.80</td><td align="right" headers="Total Gets" class='awrnc'>577,629</td><td align="right" headers="Total Reads" class='awrnc'>337,950</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.58</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>84.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.90</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.80</td><td align="right" headers="PerExecution Gets" class='awrnc'>577,629.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>337,950.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.75</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   95.9% of Total User I/O Wait Time (s):	   39,455</li>
<li class="awr">Captured PL/SQL account for   43.6% of Total User I/O Wait Time (s):	      39,455</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>36,489.73</td><td align="right" headers="Total Elapsed(s)" class='awrc'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrc'>8,702.68</td><td align="right" headers="Total Gets" class='awrc'>61,577,832</td><td align="right" headers="Total Reads" class='awrc'>37,411,377</td><td align="right" headers="Total Rows" class='awrc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrc'>18,343.87</td><td align="right" headers="Total Execs" class='awrc'>12,295,996</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>3.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>92.48</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>77.28</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>90.94</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>92.42</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>80.69</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>92.59</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>1,336.33</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>5,300.85</td><td align="right" headers="Total CPU(s)" class='awrnc'>429.20</td><td align="right" headers="Total Gets" class='awrnc'>2,431,247</td><td align="right" headers="Total Reads" class='awrnc'>1,161,290</td><td align="right" headers="Total Rows" class='awrnc'>1,140,915</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,265.87</td><td align="right" headers="Total Execs" class='awrnc'>380,305</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.39</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>3.39</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>7.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>3.81</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.59</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>2.87</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>14.37</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>2.86</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>218.80</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.90</td><td align="right" headers="Total CPU(s)" class='awrc'>84.50</td><td align="right" headers="Total Gets" class='awrc'>577,629</td><td align="right" headers="Total Reads" class='awrc'>337,950</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.58</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>218.80</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.90</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>84.50</td><td align="right" headers="PerExecution Gets" class='awrc'>577,629.00</td><td align="right" headers="PerExecution Reads" class='awrc'>337,950.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.58</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>218.77</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.88</td><td align="right" headers="Total CPU(s)" class='awrnc'>85.35</td><td align="right" headers="Total Gets" class='awrnc'>601,996</td><td align="right" headers="Total Reads" class='awrnc'>338,370</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>218.77</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.88</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>85.35</td><td align="right" headers="PerExecution Gets" class='awrnc'>601,996.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>338,370.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.89</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>218.26</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.85</td><td align="right" headers="Total CPU(s)" class='awrc'>85.11</td><td align="right" headers="Total Gets" class='awrc'>592,033</td><td align="right" headers="Total Reads" class='awrc'>337,620</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>218.26</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.85</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.11</td><td align="right" headers="PerExecution Gets" class='awrc'>592,033.00</td><td align="right" headers="PerExecution Reads" class='awrc'>337,620.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>217.06</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.86</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.54</td><td align="right" headers="Total Gets" class='awrnc'>597,231</td><td align="right" headers="Total Reads" class='awrnc'>334,882</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>217.06</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.86</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.54</td><td align="right" headers="PerExecution Gets" class='awrnc'>597,231.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>334,882.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>216.68</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.81</td><td align="right" headers="Total CPU(s)" class='awrc'>84.80</td><td align="right" headers="Total Gets" class='awrc'>589,997</td><td align="right" headers="Total Reads" class='awrc'>335,385</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>216.68</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>84.80</td><td align="right" headers="PerExecution Gets" class='awrc'>589,997.00</td><td align="right" headers="PerExecution Reads" class='awrc'>335,385.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>216.24</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.79</td><td align="right" headers="Total CPU(s)" class='awrnc'>85.20</td><td align="right" headers="Total Gets" class='awrnc'>606,220</td><td align="right" headers="Total Reads" class='awrnc'>334,817</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>216.24</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.79</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>85.20</td><td align="right" headers="PerExecution Gets" class='awrnc'>606,220.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>334,817.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.90</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>214.70</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.85</td><td align="right" headers="Total CPU(s)" class='awrc'>85.21</td><td align="right" headers="Total Gets" class='awrc'>622,597</td><td align="right" headers="Total Reads" class='awrc'>331,133</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>214.70</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.85</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.21</td><td align="right" headers="PerExecution Gets" class='awrc'>622,597.00</td><td align="right" headers="PerExecution Reads" class='awrc'>331,133.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.54</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.82</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>213.51</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.91</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.72</td><td align="right" headers="Total Gets" class='awrnc'>626,097</td><td align="right" headers="Total Reads" class='awrnc'>328,107</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.84</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>213.51</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.91</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.72</td><td align="right" headers="PerExecution Gets" class='awrnc'>626,097.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>328,107.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.54</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.81</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	67,710,542</li>
<li class="awr">Captured SQL account for   94.6% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td><td align="right" headers="Total Gets" class='awrclb'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrnclb'>61,577,832</td><td align="right" headers="Total Reads" class='awrnc'>37,411,377</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrnc'>8,702.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>36,489.73</td><td align="right" headers="Total Rows" class='awrnc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrnc'>18,343.87</td><td align="right" headers="Total Execs" class='awrnc'>12,295,996</td><td align="right" headers="PerExecution Gets" class='awrnclb'>5.01</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>90.94</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>92.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>77.28</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>92.48</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>80.69</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>92.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrclb'>2,431,247</td><td align="right" headers="Total Reads" class='awrc'>1,161,290</td><td align="right" headers="Total Elapsed(s)" class='awrc'>5,300.85</td><td align="right" headers="Total CPU(s)" class='awrc'>429.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>1,336.33</td><td align="right" headers="Total Rows" class='awrc'>1,140,915</td><td align="right" headers="Total Cluster(s)" class='awrc'>3,265.87</td><td align="right" headers="Total Execs" class='awrc'>380,305</td><td align="right" headers="PerExecution Gets" class='awrclb'>6.39</td><td align="right" headers="PerExecution Reads" class='awrc'>3.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>3.59</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>2.87</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>7.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.81</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>3.39</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>14.37</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>2.86</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fpt7knftv3a5x">fpt7knftv3a5x</a></td><td align="right" headers="Total Gets" class='awrnclb'>626,097</td><td align="right" headers="Total Reads" class='awrnc'>328,107</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.91</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.72</td><td align="right" headers="Total IOWait(s)" class='awrnc'>213.51</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.84</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>626,097.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>328,107.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.91</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>213.51</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.84</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.81</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fgw43xkd3k8vd">fgw43xkd3k8vd</a></td><td align="right" headers="Total Gets" class='awrclb'>622,597</td><td align="right" headers="Total Reads" class='awrc'>331,133</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.85</td><td align="right" headers="Total CPU(s)" class='awrc'>85.21</td><td align="right" headers="Total IOWait(s)" class='awrc'>214.70</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>622,597.00</td><td align="right" headers="PerExecution Reads" class='awrc'>331,133.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.85</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.21</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>214.70</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.92</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#djbfhkquyuyab">djbfhkquyuyab</a></td><td align="right" headers="Total Gets" class='awrnclb'>606,220</td><td align="right" headers="Total Reads" class='awrnc'>334,817</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.79</td><td align="right" headers="Total CPU(s)" class='awrnc'>85.20</td><td align="right" headers="Total IOWait(s)" class='awrnc'>216.24</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>606,220.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>334,817.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.79</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>85.20</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>216.24</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.90</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td><td align="right" headers="Total Gets" class='awrclb'>601,996</td><td align="right" headers="Total Reads" class='awrc'>338,370</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.88</td><td align="right" headers="Total CPU(s)" class='awrc'>85.35</td><td align="right" headers="Total IOWait(s)" class='awrc'>218.77</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>601,996.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,370.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.88</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.35</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.77</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.89</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#4c3z7x1gkcdup">4c3z7x1gkcdup</a></td><td align="right" headers="Total Gets" class='awrnclb'>597,231</td><td align="right" headers="Total Reads" class='awrnc'>334,882</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.86</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.54</td><td align="right" headers="Total IOWait(s)" class='awrnc'>217.06</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>597,231.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>334,882.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.86</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.54</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>217.06</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td><td align="right" headers="Total Gets" class='awrclb'>592,033</td><td align="right" headers="Total Reads" class='awrc'>337,620</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.85</td><td align="right" headers="Total CPU(s)" class='awrc'>85.11</td><td align="right" headers="Total IOWait(s)" class='awrc'>218.26</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>592,033.00</td><td align="right" headers="PerExecution Reads" class='awrc'>337,620.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.85</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.26</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f90ww8cyy5gy0">f90ww8cyy5gy0</a></td><td align="right" headers="Total Gets" class='awrnclb'>589,997</td><td align="right" headers="Total Reads" class='awrnc'>335,385</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.81</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.80</td><td align="right" headers="Total IOWait(s)" class='awrnc'>216.68</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>589,997.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>335,385.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.80</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>216.68</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      40,479,465</li>
<li class="awr">Captured SQL account for   95.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td><td align="right" headers="Total Reads" class='awrclb'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrnclb'>37,411,377</td><td align="right" headers="Total Gets" class='awrnc'>61,577,832</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrnc'>8,702.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>36,489.73</td><td align="right" headers="Total Rows" class='awrnc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrnc'>18,343.87</td><td align="right" headers="Total Execs" class='awrnc'>12,295,996</td><td align="right" headers="PerExecution Reads" class='awrnclb'>3.04</td><td align="right" headers="PerExecution Gets" class='awrnc'>5.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>92.42</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>90.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>77.28</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>92.48</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>80.69</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>92.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrclb'>1,161,290</td><td align="right" headers="Total Gets" class='awrc'>2,431,247</td><td align="right" headers="Total Elapsed(s)" class='awrc'>5,300.85</td><td align="right" headers="Total CPU(s)" class='awrc'>429.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>1,336.33</td><td align="right" headers="Total Rows" class='awrc'>1,140,915</td><td align="right" headers="Total Cluster(s)" class='awrc'>3,265.87</td><td align="right" headers="Total Execs" class='awrc'>380,305</td><td align="right" headers="PerExecution Reads" class='awrclb'>3.05</td><td align="right" headers="PerExecution Gets" class='awrc'>6.39</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>2.87</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>3.59</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>7.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.81</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>3.39</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>14.37</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>2.86</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td><td align="right" headers="Total Reads" class='awrnclb'>339,387</td><td align="right" headers="Total Gets" class='awrnc'>568,040</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.84</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.28</td><td align="right" headers="Total IOWait(s)" class='awrnc'>217.86</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>339,387.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>568,040.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.84</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.28</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>217.86</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.84</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td><td align="right" headers="Total Reads" class='awrclb'>338,401</td><td align="right" headers="Total Gets" class='awrc'>563,537</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.82</td><td align="right" headers="Total CPU(s)" class='awrc'>83.91</td><td align="right" headers="Total IOWait(s)" class='awrc'>217.35</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.05</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>338,401.00</td><td align="right" headers="PerExecution Gets" class='awrc'>563,537.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.82</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>83.91</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>217.35</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.05</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.84</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td><td align="right" headers="Total Reads" class='awrnclb'>338,370</td><td align="right" headers="Total Gets" class='awrnc'>601,996</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.88</td><td align="right" headers="Total CPU(s)" class='awrnc'>85.35</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.77</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>338,370.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>601,996.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.88</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>85.35</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.77</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.84</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td><td align="right" headers="Total Reads" class='awrclb'>338,185</td><td align="right" headers="Total Gets" class='awrc'>563,472</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.90</td><td align="right" headers="Total CPU(s)" class='awrc'>84.22</td><td align="right" headers="Total IOWait(s)" class='awrc'>217.96</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>2.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>338,185.00</td><td align="right" headers="PerExecution Gets" class='awrc'>563,472.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.90</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>84.22</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>217.96</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>2.03</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.84</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td><td align="right" headers="Total Reads" class='awrnclb'>338,107</td><td align="right" headers="Total Gets" class='awrnc'>562,385</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.80</td><td align="right" headers="Total CPU(s)" class='awrnc'>83.84</td><td align="right" headers="Total IOWait(s)" class='awrnc'>216.30</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>338,107.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>562,385.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.80</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>83.84</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>216.30</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.84</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td><td align="right" headers="Total Reads" class='awrclb'>337,950</td><td align="right" headers="Total Gets" class='awrc'>577,629</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.90</td><td align="right" headers="Total CPU(s)" class='awrc'>84.50</td><td align="right" headers="Total IOWait(s)" class='awrc'>218.80</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.58</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>337,950.00</td><td align="right" headers="PerExecution Gets" class='awrc'>577,629.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.90</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>84.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.80</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.58</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.83</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td><td align="right" headers="Total Reads" class='awrnclb'>337,620</td><td align="right" headers="Total Gets" class='awrnc'>592,033</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.85</td><td align="right" headers="Total CPU(s)" class='awrnc'>85.11</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.26</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>337,620.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>592,033.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.85</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>85.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.26</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.83</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   40,478,209</li>
<li class="awr">Captured SQL account for    0.9% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      40,478,209</li>
<li class="awr">Captured SQL account for    0.9% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="Total Requests" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Requests" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>357,397</td><td align="right" headers="Total Requests" class='awrnc'>357,397</td><td align="right" headers="Total Reads" class='awrnc'>37,411,377</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrnc'>8,702.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>36,489.73</td><td align="right" headers="Total Rows" class='awrnc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrnc'>18,343.87</td><td align="right" headers="Total Execs" class='awrnc'>12,295,996</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>0.03</td><td align="right" headers="PerExecution Requests" class='awrnc'>0.03</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>92.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>77.28</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>92.48</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>80.69</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>92.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8td9ta6n97dbm">8td9ta6n97dbm</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>339,387</td><td align="right" headers="Total Requests" class='awrc'>339,387</td><td align="right" headers="Total Reads" class='awrc'>339,387</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.84</td><td align="right" headers="Total CPU(s)" class='awrc'>84.28</td><td align="right" headers="Total IOWait(s)" class='awrc'>217.86</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>339,387.00</td><td align="right" headers="PerExecution Requests" class='awrc'>339,387.00</td><td align="right" headers="PerExecution Reads" class='awrc'>339,387.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.84</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>84.28</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>217.86</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.84</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#311ar1kvtsj1u">311ar1kvtsj1u</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>338,401</td><td align="right" headers="Total Requests" class='awrnc'>338,401</td><td align="right" headers="Total Reads" class='awrnc'>338,401</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.82</td><td align="right" headers="Total CPU(s)" class='awrnc'>83.91</td><td align="right" headers="Total IOWait(s)" class='awrnc'>217.35</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.05</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>338,401.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>338,401.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>338,401.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.82</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>83.91</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>217.35</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.05</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.84</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7s9avvsud7a92">7s9avvsud7a92</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>338,370</td><td align="right" headers="Total Requests" class='awrc'>338,370</td><td align="right" headers="Total Reads" class='awrc'>338,370</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.88</td><td align="right" headers="Total CPU(s)" class='awrc'>85.35</td><td align="right" headers="Total IOWait(s)" class='awrc'>218.77</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>338,370.00</td><td align="right" headers="PerExecution Requests" class='awrc'>338,370.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,370.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.88</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.35</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.77</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.84</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#6thask7s4zxhn">6thask7s4zxhn</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>338,185</td><td align="right" headers="Total Requests" class='awrnc'>338,185</td><td align="right" headers="Total Reads" class='awrnc'>338,185</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.90</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.22</td><td align="right" headers="Total IOWait(s)" class='awrnc'>217.96</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>2.03</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>338,185.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>338,185.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>338,185.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.90</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.22</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>217.96</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>2.03</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.84</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8wqq6m9va6xs1">8wqq6m9va6xs1</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>338,107</td><td align="right" headers="Total Requests" class='awrc'>338,107</td><td align="right" headers="Total Reads" class='awrc'>338,107</td><td align="right" headers="Total Elapsed(s)" class='awrc'>256.80</td><td align="right" headers="Total CPU(s)" class='awrc'>83.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>216.30</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>338,107.00</td><td align="right" headers="PerExecution Requests" class='awrc'>338,107.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,107.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>256.80</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>83.84</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>216.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.84</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7a4r7h7dtp9uk">7a4r7h7dtp9uk</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>337,950</td><td align="right" headers="Total Requests" class='awrnc'>337,950</td><td align="right" headers="Total Reads" class='awrnc'>337,950</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.90</td><td align="right" headers="Total CPU(s)" class='awrnc'>84.50</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.80</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.58</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>337,950.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>337,950.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>337,950.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.90</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>84.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>218.80</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.83</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b2rbrgpu3jxh1">b2rbrgpu3jxh1</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>337,620</td><td align="right" headers="Total Requests" class='awrc'>337,620</td><td align="right" headers="Total Reads" class='awrc'>337,620</td><td align="right" headers="Total Elapsed(s)" class='awrc'>258.85</td><td align="right" headers="Total CPU(s)" class='awrc'>85.11</td><td align="right" headers="Total IOWait(s)" class='awrc'>218.26</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>337,620.00</td><td align="right" headers="PerExecution Requests" class='awrc'>337,620.00</td><td align="right" headers="PerExecution Reads" class='awrc'>337,620.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>258.85</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>85.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>218.26</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.83</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b86uad51uut0p">b86uad51uut0p</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>336,444</td><td align="right" headers="Total Requests" class='awrnc'>336,444</td><td align="right" headers="Total Reads" class='awrnc'>336,444</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.88</td><td align="right" headers="Total CPU(s)" class='awrnc'>83.80</td><td align="right" headers="Total IOWait(s)" class='awrnc'>216.45</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.41</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>336,444.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>336,444.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>336,444.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.88</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>83.80</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>216.45</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.41</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.83</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:      13,279,875</li>
<li class="awr">Captured SQL account for   95.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td><td align="right" headers="Total Execs" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrnclb'>12,295,996</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrnc'>8,702.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>36,489.73</td><td align="right" headers="Total Gets" class='awrnc'>61,577,832</td><td align="right" headers="Total Reads" class='awrnc'>37,411,377</td><td align="right" headers="Total Rows" class='awrnc'>12,296,228</td><td align="right" headers="Total Cluster(s)" class='awrnc'>18,343.87</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.04</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>92.59</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>77.28</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>92.48</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>90.94</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>92.42</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>80.69</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrclb'>380,305</td><td align="right" headers="Total Elapsed(s)" class='awrc'>5,300.85</td><td align="right" headers="Total CPU(s)" class='awrc'>429.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>1,336.33</td><td align="right" headers="Total Gets" class='awrc'>2,431,247</td><td align="right" headers="Total Reads" class='awrc'>1,161,290</td><td align="right" headers="Total Rows" class='awrc'>1,140,915</td><td align="right" headers="Total Cluster(s)" class='awrc'>3,265.87</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>6.39</td><td align="right" headers="PerExecution Reads" class='awrc'>3.05</td><td align="right" headers="PerExecution Rows" class='awrc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>2.86</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>7.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.81</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>3.39</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>3.59</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>2.87</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>14.37</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrnclb'>2,545</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.16</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.16</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.01</td><td align="right" headers="Total Gets" class='awrnc'>7,723</td><td align="right" headers="Total Reads" class='awrnc'>2</td><td align="right" headers="Total Rows" class='awrnc'>2,543</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.03</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrclb'>751</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.09</td><td align="right" headers="Total CPU(s)" class='awrc'>0.04</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.04</td><td align="right" headers="Total Gets" class='awrc'>1,641</td><td align="right" headers="Total Reads" class='awrc'>23</td><td align="right" headers="Total Rows" class='awrc'>139</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.19</td><td align="right" headers="PerExecution Reads" class='awrc'>0.03</td><td align="right" headers="PerExecution Rows" class='awrc'>0.19</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrnclb'>508</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.23</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.08</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.12</td><td align="right" headers="Total Gets" class='awrnc'>1,810</td><td align="right" headers="Total Reads" class='awrnc'>57</td><td align="right" headers="Total Rows" class='awrnc'>286</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.56</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.11</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.56</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td><td align="right" headers="Total Execs" class='awrclb'>402</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.12</td><td align="right" headers="Total CPU(s)" class='awrc'>0.03</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.01</td><td align="right" headers="Total Gets" class='awrc'>830</td><td align="right" headers="Total Reads" class='awrc'>9</td><td align="right" headers="Total Rows" class='awrc'>20</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.09</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.06</td><td align="right" headers="PerExecution Reads" class='awrc'>0.02</td><td align="right" headers="PerExecution Rows" class='awrc'>0.05</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td><td align="right" headers="Total Execs" class='awrnclb'>275</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.25</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.07</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.11</td><td align="right" headers="Total Gets" class='awrnc'>825</td><td align="right" headers="Total Reads" class='awrnc'>59</td><td align="right" headers="Total Rows" class='awrnc'>275</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.09</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.21</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select type#, blocks, extents,...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td><td align="right" headers="Total Execs" class='awrclb'>256</td><td align="right" headers="Total Elapsed(s)" class='awrc'>33.18</td><td align="right" headers="Total CPU(s)" class='awrc'>0.51</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.10</td><td align="right" headers="Total Gets" class='awrc'>1,019</td><td align="right" headers="Total Reads" class='awrc'>33</td><td align="right" headers="Total Rows" class='awrc'>256</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.98</td><td align="right" headers="PerExecution Reads" class='awrc'>0.13</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.05</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#53saa2zkr6wc3">53saa2zkr6wc3</a></td><td align="right" headers="Total Execs" class='awrnclb'>220</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.02</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.02</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>1,022</td><td align="right" headers="Total Reads" class='awrnc'>1</td><td align="right" headers="Total Rows" class='awrnc'>276</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>4.65</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.25</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select intcol#, nvl(pos#, 0), ...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	      22,735</li>
<li class="awr">Captured SQL account for   95.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#akay050h1s6c4">akay050h1s6c4</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT MAX(CUSTID) FROM CF1</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>18,343.87</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>57,924.05</td><td align="right" headers="Total CPU(s)" class='awrnc'>8,702.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>36,489.73</td><td align="right" headers="Total Gets" class='awrnc'>61,577,832</td><td align="right" headers="Total Reads" class='awrnc'>37,411,377</td><td align="right" headers="Total Rows" class='awrnc'>12,296,228</td><td align="right" headers="Total Execs" class='awrnc'>12,295,996</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.04</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>80.69</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>84.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>77.28</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>92.48</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>90.94</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>92.42</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>92.59</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>3,265.87</td><td align="right" headers="Total Elapsed(s)" class='awrc'>5,300.85</td><td align="right" headers="Total CPU(s)" class='awrc'>429.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>1,336.33</td><td align="right" headers="Total Gets" class='awrc'>2,431,247</td><td align="right" headers="Total Reads" class='awrc'>1,161,290</td><td align="right" headers="Total Rows" class='awrc'>1,140,915</td><td align="right" headers="Total Execs" class='awrc'>380,305</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>6.39</td><td align="right" headers="PerExecution Reads" class='awrc'>3.05</td><td align="right" headers="PerExecution Rows" class='awrc'>3.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>14.37</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>7.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>3.81</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>3.39</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>3.59</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>2.87</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>2.86</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0fxpq9z2j2zyu">0fxpq9z2j2zyu</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>215.80</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>17.52</td><td align="right" headers="Total IOWait(s)" class='awrnc'>33.86</td><td align="right" headers="Total Gets" class='awrnc'>45,563</td><td align="right" headers="Total Reads" class='awrnc'>30,977</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>215.80</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>17.52</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>33.86</td><td align="right" headers="PerExecution Gets" class='awrnc'>45,563.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>30,977.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5m9kb3cpp792u">5m9kb3cpp792u</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>212.98</td><td align="right" headers="Total Elapsed(s)" class='awrc'>259.25</td><td align="right" headers="Total CPU(s)" class='awrc'>18.64</td><td align="right" headers="Total IOWait(s)" class='awrc'>37.58</td><td align="right" headers="Total Gets" class='awrc'>47,398</td><td align="right" headers="Total Reads" class='awrc'>33,577</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>212.98</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>259.25</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.64</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>37.58</td><td align="right" headers="PerExecution Gets" class='awrc'>47,398.00</td><td align="right" headers="PerExecution Reads" class='awrc'>33,577.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0u5gbpqpjtcbb">0u5gbpqpjtcbb</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>212.12</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>259.25</td><td align="right" headers="Total CPU(s)" class='awrnc'>19.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>38.17</td><td align="right" headers="Total Gets" class='awrnc'>53,000</td><td align="right" headers="Total Reads" class='awrnc'>37,126</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>212.12</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>259.25</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>19.06</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>38.17</td><td align="right" headers="PerExecution Gets" class='awrnc'>53,000.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>37,126.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#c45q6fupzf7tg">c45q6fupzf7tg</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>207.71</td><td align="right" headers="Total Elapsed(s)" class='awrc'>259.25</td><td align="right" headers="Total CPU(s)" class='awrc'>14.92</td><td align="right" headers="Total IOWait(s)" class='awrc'>44.58</td><td align="right" headers="Total Gets" class='awrc'>40,874</td><td align="right" headers="Total Reads" class='awrc'>29,122</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>207.71</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>259.25</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>14.92</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>44.58</td><td align="right" headers="PerExecution Gets" class='awrc'>40,874.00</td><td align="right" headers="PerExecution Reads" class='awrc'>29,122.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.13</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.06</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#47rm3ra5qrvzk">47rm3ra5qrvzk</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>203.59</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>258.91</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.28</td><td align="right" headers="Total IOWait(s)" class='awrnc'>42.80</td><td align="right" headers="Total Gets" class='awrnc'>59,736</td><td align="right" headers="Total Reads" class='awrnc'>41,743</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>203.59</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>258.91</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>21.28</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>42.80</td><td align="right" headers="PerExecution Gets" class='awrnc'>59,736.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>41,743.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.90</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhydnmhhkhhdy">bhydnmhhkhhdy</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>202.15</td><td align="right" headers="Total Elapsed(s)" class='awrc'>260.57</td><td align="right" headers="Total CPU(s)" class='awrc'>17.18</td><td align="right" headers="Total IOWait(s)" class='awrc'>50.11</td><td align="right" headers="Total Gets" class='awrc'>47,507</td><td align="right" headers="Total Reads" class='awrc'>33,596</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>202.15</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>260.57</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>17.18</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>50.11</td><td align="right" headers="PerExecution Gets" class='awrc'>47,507.00</td><td align="right" headers="PerExecution Reads" class='awrc'>33,596.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.15</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cbkautz3zg33t">cbkautz3zg33t</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>199.63</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>256.41</td><td align="right" headers="Total CPU(s)" class='awrnc'>15.71</td><td align="right" headers="Total IOWait(s)" class='awrnc'>49.34</td><td align="right" headers="Total Gets" class='awrnc'>38,880</td><td align="right" headers="Total Reads" class='awrnc'>24,527</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>199.63</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>256.41</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>15.71</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>49.34</td><td align="right" headers="PerExecution Gets" class='awrnc'>38,880.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>24,527.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.14</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.06</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.06</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks examined</td><td align="right" class='awrc'>1,455</td><td align="right" class='awrc'>4.35</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.17</td><td align="right" headers="perSecond StdDev" class='awrc'>0.37</td><td align="right" headers="perSecond Min" class='awrc'>1.92</td><td align="right" headers="perSecond Max" class='awrcrb'>2.43</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks marked full</td><td align="right" class='awrnc'>339</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.50</td><td align="right" headers="perSecond Max" class='awrncrb'>0.52</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrc'>1,177</td><td align="right" class='awrc'>3.52</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.76</td><td align="right" headers="perSecond StdDev" class='awrc'>0.34</td><td align="right" headers="perSecond Min" class='awrc'>1.52</td><td align="right" headers="perSecond Max" class='awrcrb'>2.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrc'>215</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.30</td><td align="right" headers="perSecond Min" class='awrc'>0.11</td><td align="right" headers="perSecond Max" class='awrcrb'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Optimized reject DB</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>1,115</td><td align="right" class='awrc'>3.33</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.67</td><td align="right" headers="perSecond StdDev" class='awrc'>0.35</td><td align="right" headers="perSecond Min" class='awrc'>1.42</td><td align="right" headers="perSecond Max" class='awrcrb'>1.92</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>911</td><td align="right" class='awrnc'>2.72</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.34</td><td align="right" headers="perSecond Min" class='awrnc'>1.12</td><td align="right" headers="perSecond Max" class='awrncrb'>1.60</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>204</td><td align="right" class='awrc'>0.61</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.30</td><td align="right" headers="perSecond Max" class='awrcrb'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>995</td><td align="right" class='awrnc'>2.97</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>1.40</td><td align="right" headers="perSecond Max" class='awrncrb'>1.57</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:reject db</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM rsv:fill reserve</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM wasted db state change</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (bound) vector count</td><td align="right" class='awrnc'>824</td><td align="right" class='awrnc'>2.46</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.27</td><td align="right" headers="perSecond Min" class='awrnc'>1.04</td><td align="right" headers="perSecond Max" class='awrncrb'>1.43</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>12,385,142</td><td align="right" class='awrc'>37,013.27</td><td align="right" class='awrc'>31.04</td><td align="right" headers="perSecond Average" class='awrclb'>18,506.64</td><td align="right" headers="perSecond StdDev" class='awrc'>167.13</td><td align="right" headers="perSecond Min" class='awrc'>18,388.45</td><td align="right" headers="perSecond Max" class='awrcrb'>18,624.82</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>12,384,879</td><td align="right" class='awrnc'>37,012.49</td><td align="right" class='awrnc'>31.04</td><td align="right" headers="perSecond Average" class='awrnclb'>18,506.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>167.20</td><td align="right" headers="perSecond Min" class='awrnc'>18,388.01</td><td align="right" headers="perSecond Max" class='awrncrb'>18,624.47</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.23</td><td align="right" headers="perSecond Max" class='awrcrb'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>12,385,709</td><td align="right" class='awrnc'>37,014.97</td><td align="right" class='awrnc'>31.04</td><td align="right" headers="perSecond Average" class='awrnclb'>18,507.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>167.47</td><td align="right" headers="perSecond Min" class='awrnc'>18,389.06</td><td align="right" headers="perSecond Max" class='awrncrb'>18,625.91</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector block count</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector read count</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Block Cleanout Optim referenced</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>CCursor + sql area evicted</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>CPU used by this session</td><td align="right" class='awrc'>1,255,507</td><td align="right" class='awrc'>3,752.11</td><td align="right" class='awrc'>3.15</td><td align="right" headers="perSecond Average" class='awrclb'>1,876.06</td><td align="right" headers="perSecond StdDev" class='awrc'>89.78</td><td align="right" headers="perSecond Min" class='awrc'>1,812.57</td><td align="right" headers="perSecond Max" class='awrcrb'>1,939.54</td></tr>
<tr><td scope="row" class='awrnc'>CPU used when call started</td><td align="right" class='awrnc'>1,263,413</td><td align="right" class='awrnc'>3,775.74</td><td align="right" class='awrnc'>3.17</td><td align="right" headers="perSecond Average" class='awrnclb'>1,887.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>115.47</td><td align="right" headers="perSecond Min" class='awrnc'>1,806.22</td><td align="right" headers="perSecond Max" class='awrncrb'>1,969.52</td></tr>
<tr><td scope="row" class='awrc'>CR blocks created</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>Cached Commit SCN referenced</td><td align="right" class='awrnc'>13,102,030</td><td align="right" class='awrnc'>39,155.84</td><td align="right" class='awrnc'>32.83</td><td align="right" headers="perSecond Average" class='awrnclb'>19,577.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,658.54</td><td align="right" headers="perSecond Min" class='awrnc'>15,576.73</td><td align="right" headers="perSecond Max" class='awrncrb'>23,579.11</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Receive Window</td><td align="right" class='awrc'>1,799</td><td align="right" class='awrc'>5.38</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.69</td><td align="right" headers="perSecond StdDev" class='awrc'>0.70</td><td align="right" headers="perSecond Min" class='awrc'>2.20</td><td align="right" headers="perSecond Max" class='awrcrb'>3.18</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Send Window</td><td align="right" class='awrnc'>1,799</td><td align="right" class='awrnc'>5.38</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.70</td><td align="right" headers="perSecond Min" class='awrnc'>2.20</td><td align="right" headers="perSecond Max" class='awrncrb'>3.18</td></tr>
<tr><td scope="row" class='awrc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrc'>10,113,570</td><td align="right" class='awrc'>30,225.11</td><td align="right" class='awrc'>25.34</td><td align="right" headers="perSecond Average" class='awrclb'>15,112.56</td><td align="right" headers="perSecond StdDev" class='awrc'>20,728.92</td><td align="right" headers="perSecond Min" class='awrc'>455.00</td><td align="right" headers="perSecond Max" class='awrcrb'>29,770.12</td></tr>
<tr><td scope="row" class='awrnc'>Client Send Congestion Window</td><td align="right" class='awrnc'>2,570</td><td align="right" class='awrnc'>7.68</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>3.84</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.99</td><td align="right" headers="perSecond Min" class='awrnc'>3.14</td><td align="right" headers="perSecond Max" class='awrncrb'>4.54</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrc'>28,557</td><td align="right" class='awrc'>85.34</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>42.67</td><td align="right" headers="perSecond StdDev" class='awrc'>60.16</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>85.21</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Received</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.14</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrc'>33,762</td><td align="right" class='awrc'>100.90</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>50.45</td><td align="right" headers="perSecond StdDev" class='awrc'>69.97</td><td align="right" headers="perSecond Min" class='awrc'>0.97</td><td align="right" headers="perSecond Max" class='awrcrb'>99.93</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrnc'>1,334,205</td><td align="right" class='awrnc'>3,987.34</td><td align="right" class='awrnc'>3.34</td><td align="right" headers="perSecond Average" class='awrnclb'>1,993.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,855.14</td><td align="right" headers="perSecond Min" class='awrnc'>681.89</td><td align="right" headers="perSecond Max" class='awrncrb'>3,305.45</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrc'>2,101,526</td><td align="right" class='awrc'>6,280.54</td><td align="right" class='awrc'>5.27</td><td align="right" headers="perSecond Average" class='awrclb'>3,140.27</td><td align="right" headers="perSecond StdDev" class='awrc'>3,457.61</td><td align="right" headers="perSecond Min" class='awrc'>695.37</td><td align="right" headers="perSecond Max" class='awrcrb'>5,585.17</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Acked</td><td align="right" class='awrnc'>4,055,428</td><td align="right" class='awrnc'>12,119.78</td><td align="right" class='awrnc'>10.16</td><td align="right" headers="perSecond Average" class='awrnclb'>6,059.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,596.10</td><td align="right" headers="perSecond Min" class='awrnc'>4,931.27</td><td align="right" headers="perSecond Max" class='awrncrb'>7,188.50</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Received</td><td align="right" class='awrc'>1,570,950</td><td align="right" class='awrc'>4,694.83</td><td align="right" class='awrc'>3.94</td><td align="right" headers="perSecond Average" class='awrclb'>2,347.42</td><td align="right" headers="perSecond StdDev" class='awrc'>609.94</td><td align="right" headers="perSecond Min" class='awrc'>1,916.13</td><td align="right" headers="perSecond Max" class='awrcrb'>2,778.71</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DB time</td><td align="right" class='awrc'>7,693,950</td><td align="right" class='awrc'>22,993.61</td><td align="right" class='awrc'>19.28</td><td align="right" headers="perSecond Average" class='awrclb'>11,496.81</td><td align="right" headers="perSecond StdDev" class='awrc'>3,044.60</td><td align="right" headers="perSecond Min" class='awrc'>9,343.95</td><td align="right" headers="perSecond Max" class='awrcrb'>13,649.66</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoint buffers written</td><td align="right" class='awrnc'>1,427</td><td align="right" class='awrnc'>4.26</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>1.92</td><td align="right" headers="perSecond Max" class='awrncrb'>2.34</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoints</td><td align="right" class='awrc'>1,852</td><td align="right" class='awrc'>5.53</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.77</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>2.76</td><td align="right" headers="perSecond Max" class='awrcrb'>2.78</td></tr>
<tr><td scope="row" class='awrnc'>DBWR fusion writes</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.25</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.42</td></tr>
<tr><td scope="row" class='awrc'>DBWR object drop buffers written</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>3,101</td><td align="right" class='awrnc'>9.27</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>4.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.13</td><td align="right" headers="perSecond Min" class='awrnc'>1.71</td><td align="right" headers="perSecond Max" class='awrncrb'>7.56</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>209,586</td><td align="right" class='awrc'>626.35</td><td align="right" class='awrc'>0.53</td><td align="right" headers="perSecond Average" class='awrclb'>313.18</td><td align="right" headers="perSecond StdDev" class='awrc'>23.88</td><td align="right" headers="perSecond Min" class='awrc'>296.29</td><td align="right" headers="perSecond Max" class='awrcrb'>330.06</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>1,196,196</td><td align="right" class='awrc'>3,574.86</td><td align="right" class='awrc'>3.00</td><td align="right" headers="perSecond Average" class='awrclb'>1,787.43</td><td align="right" headers="perSecond StdDev" class='awrc'>43.91</td><td align="right" headers="perSecond Min" class='awrc'>1,756.38</td><td align="right" headers="perSecond Max" class='awrcrb'>1,818.48</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.53</td><td align="right" headers="perSecond Max" class='awrncrb'>0.56</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>139,919,360</td><td align="right" class='awrc'>418,150.99</td><td align="right" class='awrc'>350.64</td><td align="right" headers="perSecond Average" class='awrclb'>209,075.50</td><td align="right" headers="perSecond StdDev" class='awrc'>50,544.35</td><td align="right" headers="perSecond Min" class='awrc'>173,335.25</td><td align="right" headers="perSecond Max" class='awrcrb'>244,815.75</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>26,999,606</td><td align="right" class='awrnc'>80,688.57</td><td align="right" class='awrnc'>67.66</td><td align="right" headers="perSecond Average" class='awrnclb'>40,344.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>15,560.69</td><td align="right" headers="perSecond Min" class='awrnc'>29,341.22</td><td align="right" headers="perSecond Max" class='awrncrb'>51,347.35</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>1,028</td><td align="right" class='awrc'>3.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.54</td><td align="right" headers="perSecond StdDev" class='awrc'>0.30</td><td align="right" headers="perSecond Min" class='awrc'>1.32</td><td align="right" headers="perSecond Max" class='awrcrb'>1.75</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>97,190</td><td align="right" class='awrnc'>290.46</td><td align="right" class='awrnc'>0.24</td><td align="right" headers="perSecond Average" class='awrnclb'>145.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>24.11</td><td align="right" headers="perSecond Min" class='awrnc'>128.18</td><td align="right" headers="perSecond Max" class='awrncrb'>162.28</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>897</td><td align="right" class='awrc'>2.68</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.35</td><td align="right" headers="perSecond Min" class='awrc'>1.09</td><td align="right" headers="perSecond Max" class='awrcrb'>1.59</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>22,416</td><td align="right" class='awrnc'>66.99</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>33.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.07</td><td align="right" headers="perSecond Min" class='awrnc'>28.50</td><td align="right" headers="perSecond Max" class='awrncrb'>38.49</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>12,677</td><td align="right" class='awrc'>37.89</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>18.94</td><td align="right" headers="perSecond StdDev" class='awrc'>3.54</td><td align="right" headers="perSecond Min" class='awrc'>16.44</td><td align="right" headers="perSecond Max" class='awrcrb'>21.45</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages recv'd</td><td align="right" class='awrnc'>214</td><td align="right" class='awrnc'>0.64</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>0.35</td></tr>
<tr><td scope="row" class='awrc'>PX local messages sent</td><td align="right" class='awrc'>214</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.29</td><td align="right" headers="perSecond Max" class='awrcrb'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages recv'd</td><td align="right" class='awrnc'>222</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.32</td><td align="right" headers="perSecond Max" class='awrncrb'>0.35</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages sent</td><td align="right" class='awrc'>222</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.32</td><td align="right" headers="perSecond Max" class='awrcrb'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>Parallel operations not downgraded</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Requests to/from client</td><td align="right" class='awrc'>845</td><td align="right" class='awrc'>2.53</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.26</td><td align="right" headers="perSecond StdDev" class='awrc'>0.42</td><td align="right" headers="perSecond Min" class='awrc'>0.97</td><td align="right" headers="perSecond Max" class='awrcrb'>1.56</td></tr>
<tr><td scope="row" class='awrnc'>SMON posted for undo segment shrink</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>589</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.88</td><td align="right" headers="perSecond StdDev" class='awrc'>0.32</td><td align="right" headers="perSecond Min" class='awrc'>0.65</td><td align="right" headers="perSecond Max" class='awrcrb'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>555</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>0.70</td><td align="right" headers="perSecond Max" class='awrncrb'>0.96</td></tr>
<tr><td scope="row" class='awrc'>application wait time</td><td align="right" class='awrc'>225</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.25</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.51</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background timeouts</td><td align="right" class='awrc'>7,389</td><td align="right" class='awrc'>22.08</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>11.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>10.97</td><td align="right" headers="perSecond Max" class='awrcrb'>11.11</td></tr>
<tr><td scope="row" class='awrnc'>blocks cleaned out using minact</td><td align="right" class='awrnc'>1,001,972</td><td align="right" class='awrnc'>2,994.41</td><td align="right" class='awrnc'>2.51</td><td align="right" headers="perSecond Average" class='awrnclb'>1,497.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>81.78</td><td align="right" headers="perSecond Min" class='awrnc'>1,439.38</td><td align="right" headers="perSecond Max" class='awrncrb'>1,555.03</td></tr>
<tr><td scope="row" class='awrc'>branch node splits</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>89,549,064</td><td align="right" class='awrnc'>267,619.34</td><td align="right" class='awrnc'>224.41</td><td align="right" headers="perSecond Average" class='awrnclb'>133,809.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,552.84</td><td align="right" headers="perSecond Min" class='awrnc'>132,004.54</td><td align="right" headers="perSecond Max" class='awrncrb'>135,614.80</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>26,996,837</td><td align="right" class='awrc'>80,680.63</td><td align="right" class='awrc'>67.65</td><td align="right" headers="perSecond Average" class='awrclb'>40,340.32</td><td align="right" headers="perSecond StdDev" class='awrc'>1,040.77</td><td align="right" headers="perSecond Min" class='awrc'>39,604.38</td><td align="right" headers="perSecond Max" class='awrcrb'>41,076.25</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>463,993</td><td align="right" class='awrnc'>1,386.67</td><td align="right" class='awrnc'>1.16</td><td align="right" headers="perSecond Average" class='awrnclb'>693.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>532.04</td><td align="right" headers="perSecond Min" class='awrnc'>317.12</td><td align="right" headers="perSecond Max" class='awrncrb'>1,069.54</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>150,195</td><td align="right" class='awrc'>448.86</td><td align="right" class='awrc'>0.38</td><td align="right" headers="perSecond Average" class='awrclb'>224.43</td><td align="right" headers="perSecond StdDev" class='awrc'>67.56</td><td align="right" headers="perSecond Min" class='awrc'>176.66</td><td align="right" headers="perSecond Max" class='awrcrb'>272.21</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>13,706,700</td><td align="right" class='awrnc'>40,962.77</td><td align="right" class='awrnc'>34.35</td><td align="right" headers="perSecond Average" class='awrnclb'>20,481.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>457.85</td><td align="right" headers="perSecond Min" class='awrnc'>20,157.64</td><td align="right" headers="perSecond Max" class='awrncrb'>20,805.14</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>549,431</td><td align="right" class='awrc'>1,641.99</td><td align="right" class='awrc'>1.38</td><td align="right" headers="perSecond Average" class='awrclb'>820.99</td><td align="right" headers="perSecond StdDev" class='awrc'>16.31</td><td align="right" headers="perSecond Min" class='awrc'>809.46</td><td align="right" headers="perSecond Max" class='awrcrb'>832.53</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>7,085</td><td align="right" class='awrnc'>21.17</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>10.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.51</td><td align="right" headers="perSecond Min" class='awrnc'>10.22</td><td align="right" headers="perSecond Max" class='awrncrb'>10.95</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>358,755,427,328</td><td align="right" class='awrc'>1,072,148,611.29</td><td align="right" class='awrc'>899,046.28</td><td align="right" headers="perSecond Average" class='awrclb'>536,074,305.64</td><td align="right" headers="perSecond StdDev" class='awrc'>3,597,937.96</td><td align="right" headers="perSecond Min" class='awrc'>533,530,179.31</td><td align="right" headers="perSecond Max" class='awrcrb'>538,618,431.97</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>3,125</td><td align="right" class='awrnc'>9.34</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>4.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.10</td><td align="right" headers="perSecond Min" class='awrnc'>4.60</td><td align="right" headers="perSecond Max" class='awrncrb'>4.74</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>1,478</td><td align="right" class='awrc'>4.42</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.21</td><td align="right" headers="perSecond StdDev" class='awrc'>0.87</td><td align="right" headers="perSecond Min" class='awrc'>1.59</td><td align="right" headers="perSecond Max" class='awrcrb'>2.83</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>906</td><td align="right" class='awrc'>2.71</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.95</td><td align="right" headers="perSecond Min" class='awrc'>0.68</td><td align="right" headers="perSecond Max" class='awrcrb'>2.03</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>2,529</td><td align="right" class='awrnc'>7.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>3.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.49</td><td align="right" headers="perSecond Min" class='awrnc'>0.60</td><td align="right" headers="perSecond Max" class='awrncrb'>6.95</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>1,699</td><td align="right" class='awrc'>5.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.54</td><td align="right" headers="perSecond StdDev" class='awrc'>2.88</td><td align="right" headers="perSecond Min" class='awrc'>0.50</td><td align="right" headers="perSecond Max" class='awrcrb'>4.58</td></tr>
<tr><td scope="row" class='awrnc'>cluster wait time</td><td align="right" class='awrnc'>2,265,421</td><td align="right" class='awrnc'>6,770.27</td><td align="right" class='awrnc'>5.68</td><td align="right" headers="perSecond Average" class='awrnclb'>3,385.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>278.64</td><td align="right" headers="perSecond Min" class='awrnc'>3,188.10</td><td align="right" headers="perSecond Max" class='awrncrb'>3,582.16</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>878</td><td align="right" class='awrc'>2.62</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.31</td><td align="right" headers="perSecond StdDev" class='awrc'>0.91</td><td align="right" headers="perSecond Min" class='awrc'>0.67</td><td align="right" headers="perSecond Max" class='awrcrb'>1.95</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>115</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.22</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>1,195,762</td><td align="right" class='awrnc'>3,573.56</td><td align="right" class='awrnc'>3.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1,786.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>42.80</td><td align="right" headers="perSecond Min" class='awrnc'>1,756.52</td><td align="right" headers="perSecond Max" class='awrncrb'>1,817.04</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>1,194,757</td><td align="right" class='awrc'>3,570.56</td><td align="right" class='awrc'>2.99</td><td align="right" headers="perSecond Average" class='awrclb'>1,785.28</td><td align="right" headers="perSecond StdDev" class='awrc'>41.80</td><td align="right" headers="perSecond Min" class='awrc'>1,755.72</td><td align="right" headers="perSecond Max" class='awrcrb'>1,814.83</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>1,169</td><td align="right" class='awrnc'>3.49</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.98</td><td align="right" headers="perSecond Min" class='awrnc'>1.05</td><td align="right" headers="perSecond Max" class='awrncrb'>2.44</td></tr>
<tr><td scope="row" class='awrc'>concurrency wait time</td><td align="right" class='awrc'>6,654</td><td align="right" class='awrc'>19.89</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>9.94</td><td align="right" headers="perSecond StdDev" class='awrc'>6.10</td><td align="right" headers="perSecond Min" class='awrc'>5.63</td><td align="right" headers="perSecond Max" class='awrcrb'>14.26</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>9,043</td><td align="right" class='awrnc'>27.03</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>13.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.89</td><td align="right" headers="perSecond Min" class='awrnc'>12.89</td><td align="right" headers="perSecond Max" class='awrncrb'>14.14</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>65,496,194</td><td align="right" class='awrc'>195,736.81</td><td align="right" class='awrc'>164.13</td><td align="right" headers="perSecond Average" class='awrclb'>97,868.40</td><td align="right" headers="perSecond StdDev" class='awrc'>1,976.48</td><td align="right" headers="perSecond Min" class='awrc'>96,470.82</td><td align="right" headers="perSecond Max" class='awrcrb'>99,265.99</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>13,333,645</td><td align="right" class='awrnc'>39,847.89</td><td align="right" class='awrnc'>33.41</td><td align="right" headers="perSecond Average" class='awrnclb'>19,923.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>372.23</td><td align="right" headers="perSecond Min" class='awrnc'>19,660.74</td><td align="right" headers="perSecond Max" class='awrncrb'>20,187.15</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>13,326,738</td><td align="right" class='awrc'>39,827.25</td><td align="right" class='awrc'>33.40</td><td align="right" headers="perSecond Average" class='awrclb'>19,913.62</td><td align="right" headers="perSecond StdDev" class='awrc'>384.56</td><td align="right" headers="perSecond Min" class='awrc'>19,641.70</td><td align="right" headers="perSecond Max" class='awrcrb'>20,185.55</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>65,496,176</td><td align="right" class='awrnc'>195,736.75</td><td align="right" class='awrnc'>164.13</td><td align="right" headers="perSecond Average" class='awrnclb'>97,868.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,976.47</td><td align="right" headers="perSecond Min" class='awrnc'>96,470.80</td><td align="right" headers="perSecond Max" class='awrncrb'>99,265.96</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>52,162,503</td><td align="right" class='awrc'>155,888.78</td><td align="right" class='awrc'>130.72</td><td align="right" headers="perSecond Average" class='awrclb'>77,944.39</td><td align="right" headers="perSecond StdDev" class='awrc'>1,604.26</td><td align="right" headers="perSecond Min" class='awrc'>76,810.00</td><td align="right" headers="perSecond Max" class='awrcrb'>79,078.78</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>12,853,420</td><td align="right" class='awrnc'>38,412.71</td><td align="right" class='awrnc'>32.21</td><td align="right" headers="perSecond Average" class='awrnclb'>19,206.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,292.47</td><td align="right" headers="perSecond Min" class='awrnc'>18,292.44</td><td align="right" headers="perSecond Max" class='awrncrb'>20,120.27</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>259</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.41</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.68</td></tr>
<tr><td scope="row" class='awrnc'>cursor reload failures</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>3,265,698</td><td align="right" class='awrnc'>9,759.61</td><td align="right" class='awrnc'>8.18</td><td align="right" headers="perSecond Average" class='awrnclb'>4,879.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>91.28</td><td align="right" headers="perSecond Min" class='awrnc'>4,815.26</td><td align="right" headers="perSecond Max" class='awrncrb'>4,944.35</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>2,210,573</td><td align="right" class='awrc'>6,606.35</td><td align="right" class='awrc'>5.54</td><td align="right" headers="perSecond Average" class='awrclb'>3,303.17</td><td align="right" headers="perSecond StdDev" class='awrc'>61.83</td><td align="right" headers="perSecond Min" class='awrc'>3,259.46</td><td align="right" headers="perSecond Max" class='awrcrb'>3,346.89</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>589</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.17</td><td align="right" headers="perSecond Min" class='awrnc'>0.76</td><td align="right" headers="perSecond Max" class='awrncrb'>1.00</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>2,209,983</td><td align="right" class='awrc'>6,604.58</td><td align="right" class='awrc'>5.54</td><td align="right" headers="perSecond Average" class='awrclb'>3,302.29</td><td align="right" headers="perSecond StdDev" class='awrc'>61.99</td><td align="right" headers="perSecond Min" class='awrc'>3,258.46</td><td align="right" headers="perSecond Max" class='awrcrb'>3,346.12</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>868,846</td><td align="right" class='awrnc'>2,596.57</td><td align="right" class='awrnc'>2.18</td><td align="right" headers="perSecond Average" class='awrnclb'>1,298.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>22.39</td><td align="right" headers="perSecond Min" class='awrnc'>1,282.45</td><td align="right" headers="perSecond Max" class='awrncrb'>1,314.11</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>1,059,557</td><td align="right" class='awrc'>3,166.51</td><td align="right" class='awrc'>2.66</td><td align="right" headers="perSecond Average" class='awrclb'>1,583.25</td><td align="right" headers="perSecond StdDev" class='awrc'>112.79</td><td align="right" headers="perSecond Min" class='awrc'>1,503.50</td><td align="right" headers="perSecond Max" class='awrcrb'>1,663.01</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>1,362,847</td><td align="right" class='awrnc'>4,072.90</td><td align="right" class='awrnc'>3.42</td><td align="right" headers="perSecond Average" class='awrnclb'>2,036.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>53.20</td><td align="right" headers="perSecond Min" class='awrnc'>1,998.83</td><td align="right" headers="perSecond Max" class='awrncrb'>2,074.07</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>7,746</td><td align="right" class='awrc'>23.15</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>11.57</td><td align="right" headers="perSecond StdDev" class='awrc'>1.48</td><td align="right" headers="perSecond Min" class='awrc'>10.53</td><td align="right" headers="perSecond Max" class='awrcrb'>12.62</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>818,795</td><td align="right" class='awrnc'>2,446.99</td><td align="right" class='awrnc'>2.05</td><td align="right" headers="perSecond Average" class='awrnclb'>1,223.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.27</td><td align="right" headers="perSecond Min" class='awrnc'>1,207.04</td><td align="right" headers="perSecond Max" class='awrncrb'>1,239.95</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>818,508</td><td align="right" class='awrc'>2,446.13</td><td align="right" class='awrc'>2.05</td><td align="right" headers="perSecond Average" class='awrclb'>1,223.06</td><td align="right" headers="perSecond StdDev" class='awrc'>23.38</td><td align="right" headers="perSecond Min" class='awrc'>1,206.53</td><td align="right" headers="perSecond Max" class='awrcrb'>1,239.60</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>4,002</td><td align="right" class='awrc'>11.96</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>5.98</td><td align="right" headers="perSecond StdDev" class='awrc'>2.22</td><td align="right" headers="perSecond Min" class='awrc'>4.41</td><td align="right" headers="perSecond Max" class='awrcrb'>7.55</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>13,279,875</td><td align="right" class='awrc'>39,687.20</td><td align="right" class='awrc'>33.28</td><td align="right" headers="perSecond Average" class='awrclb'>19,843.60</td><td align="right" headers="perSecond StdDev" class='awrc'>450.68</td><td align="right" headers="perSecond Min" class='awrc'>19,524.92</td><td align="right" headers="perSecond Max" class='awrcrb'>20,162.28</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>1,298,854,116</td><td align="right" class='awrnc'>3,881,679.57</td><td align="right" class='awrnc'>3,254.95</td><td align="right" headers="perSecond Average" class='awrnclb'>1,940,839.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,063,313.42</td><td align="right" headers="perSecond Min" class='awrnc'>1,188,963.66</td><td align="right" headers="perSecond Max" class='awrncrb'>2,692,715.91</td></tr>
<tr><td scope="row" class='awrc'>file io wait time</td><td align="right" class='awrc'>131,567,143,038</td><td align="right" class='awrc'>393,192,161.01</td><td align="right" class='awrc'>329,709.16</td><td align="right" headers="perSecond Average" class='awrclb'>196,596,080.51</td><td align="right" headers="perSecond StdDev" class='awrc'>33,700,759.61</td><td align="right" headers="perSecond Min" class='awrc'>172,766,044.85</td><td align="right" headers="perSecond Max" class='awrcrb'>220,426,116.16</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>40,834,164</td><td align="right" class='awrnc'>122,033.81</td><td align="right" class='awrnc'>102.33</td><td align="right" headers="perSecond Average" class='awrnclb'>61,016.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>491.83</td><td align="right" headers="perSecond Min" class='awrnc'>60,669.13</td><td align="right" headers="perSecond Max" class='awrncrb'>61,364.68</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>40,524,713</td><td align="right" class='awrc'>121,109.01</td><td align="right" class='awrc'>101.56</td><td align="right" headers="perSecond Average" class='awrclb'>60,554.50</td><td align="right" headers="perSecond StdDev" class='awrc'>492.41</td><td align="right" headers="perSecond Min" class='awrc'>60,206.32</td><td align="right" headers="perSecond Max" class='awrcrb'>60,902.69</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>8,370</td><td align="right" class='awrnc'>25.01</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>12.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.46</td><td align="right" headers="perSecond Min" class='awrnc'>10.06</td><td align="right" headers="perSecond Max" class='awrncrb'>14.95</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>321</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrc'>0.21</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.63</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>347,303</td><td align="right" class='awrc'>1,037.92</td><td align="right" class='awrc'>0.87</td><td align="right" headers="perSecond Average" class='awrclb'>518.96</td><td align="right" headers="perSecond StdDev" class='awrc'>5.52</td><td align="right" headers="perSecond Min" class='awrc'>515.06</td><td align="right" headers="perSecond Max" class='awrcrb'>522.86</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.25</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.42</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>2,526</td><td align="right" class='awrc'>7.55</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>3.77</td><td align="right" headers="perSecond StdDev" class='awrc'>1.23</td><td align="right" headers="perSecond Min" class='awrc'>2.91</td><td align="right" headers="perSecond Max" class='awrcrb'>4.64</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>634</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.93</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>1.60</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,162</td><td align="right" class='awrc'>3.47</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.74</td><td align="right" headers="perSecond StdDev" class='awrc'>1.97</td><td align="right" headers="perSecond Min" class='awrc'>0.34</td><td align="right" headers="perSecond Max" class='awrcrb'>3.13</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>359</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.44</td><td align="right" headers="perSecond Max" class='awrncrb'>0.64</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>1,581</td><td align="right" class='awrnc'>4.72</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.68</td><td align="right" headers="perSecond Min" class='awrnc'>0.47</td><td align="right" headers="perSecond Max" class='awrncrb'>4.26</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>1,600</td><td align="right" class='awrc'>4.78</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.39</td><td align="right" headers="perSecond StdDev" class='awrc'>2.70</td><td align="right" headers="perSecond Min" class='awrc'>0.48</td><td align="right" headers="perSecond Max" class='awrcrb'>4.30</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>956</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.72</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>2.64</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>652</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.97</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.92</td><td align="right" headers="perSecond Max" class='awrcrb'>1.03</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>199</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.20</td><td align="right" headers="perSecond Max" class='awrncrb'>0.39</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>7,725</td><td align="right" class='awrc'>23.09</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>11.54</td><td align="right" headers="perSecond StdDev" class='awrc'>3.26</td><td align="right" headers="perSecond Min" class='awrc'>9.24</td><td align="right" headers="perSecond Max" class='awrcrb'>13.85</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks flushed</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks pinned</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>9,329</td><td align="right" class='awrnc'>27.88</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>13.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.75</td><td align="right" headers="perSecond Min" class='awrnc'>8.46</td><td align="right" headers="perSecond Max" class='awrncrb'>19.42</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks served</td><td align="right" class='awrc'>9,449</td><td align="right" class='awrc'>28.24</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>14.12</td><td align="right" headers="perSecond StdDev" class='awrc'>7.52</td><td align="right" headers="perSecond Min" class='awrc'>8.80</td><td align="right" headers="perSecond Max" class='awrcrb'>19.43</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read cr</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read current</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>45,342</td><td align="right" class='awrnc'>135.51</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>67.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>17.62</td><td align="right" headers="perSecond Min" class='awrnc'>55.29</td><td align="right" headers="perSecond Max" class='awrncrb'>80.21</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>43,059</td><td align="right" class='awrc'>128.68</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>64.34</td><td align="right" headers="perSecond StdDev" class='awrc'>20.89</td><td align="right" headers="perSecond Min" class='awrc'>49.57</td><td align="right" headers="perSecond Max" class='awrcrb'>79.12</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>38,086,648</td><td align="right" class='awrnc'>113,822.80</td><td align="right" class='awrnc'>95.45</td><td align="right" headers="perSecond Average" class='awrnclb'>56,911.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>301.27</td><td align="right" headers="perSecond Min" class='awrnc'>56,698.37</td><td align="right" headers="perSecond Max" class='awrncrb'>57,124.43</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi bg</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi fg</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc no change made</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.11</td><td align="right" headers="perSecond Max" class='awrncrb'>0.17</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>2,314,244</td><td align="right" class='awrnc'>6,916.17</td><td align="right" class='awrnc'>5.80</td><td align="right" headers="perSecond Average" class='awrnclb'>3,458.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>200.41</td><td align="right" headers="perSecond Min" class='awrnc'>3,316.37</td><td align="right" headers="perSecond Max" class='awrncrb'>3,599.80</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>21,298</td><td align="right" class='awrc'>63.65</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>31.82</td><td align="right" headers="perSecond StdDev" class='awrc'>12.04</td><td align="right" headers="perSecond Min" class='awrc'>23.31</td><td align="right" headers="perSecond Max" class='awrcrb'>40.34</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>21,478</td><td align="right" class='awrnc'>64.19</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>32.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.17</td><td align="right" headers="perSecond Min" class='awrnc'>23.49</td><td align="right" headers="perSecond Max" class='awrncrb'>40.70</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>74,257</td><td align="right" class='awrc'>221.92</td><td align="right" class='awrc'>0.19</td><td align="right" headers="perSecond Average" class='awrclb'>110.96</td><td align="right" headers="perSecond StdDev" class='awrc'>74.50</td><td align="right" headers="perSecond Min" class='awrc'>58.28</td><td align="right" headers="perSecond Max" class='awrcrb'>163.64</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>26,278,980</td><td align="right" class='awrnc'>78,535.63</td><td align="right" class='awrnc'>65.86</td><td align="right" headers="perSecond Average" class='awrnclb'>39,267.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>13,163.89</td><td align="right" headers="perSecond Min" class='awrnc'>29,959.54</td><td align="right" headers="perSecond Max" class='awrncrb'>48,576.09</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>346,348</td><td align="right" class='awrc'>1,035.07</td><td align="right" class='awrc'>0.87</td><td align="right" headers="perSecond Average" class='awrclb'>517.53</td><td align="right" headers="perSecond StdDev" class='awrc'>6.33</td><td align="right" headers="perSecond Min" class='awrc'>513.06</td><td align="right" headers="perSecond Max" class='awrcrb'>522.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>40,397,685</td><td align="right" class='awrnc'>120,729.39</td><td align="right" class='awrnc'>101.24</td><td align="right" headers="perSecond Average" class='awrnclb'>60,364.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>318.10</td><td align="right" headers="perSecond Min" class='awrnc'>60,139.76</td><td align="right" headers="perSecond Max" class='awrncrb'>60,589.63</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>7,858,710</td><td align="right" class='awrc'>23,485.92</td><td align="right" class='awrc'>19.69</td><td align="right" headers="perSecond Average" class='awrclb'>11,742.96</td><td align="right" headers="perSecond StdDev" class='awrc'>473.07</td><td align="right" headers="perSecond Min" class='awrc'>11,408.45</td><td align="right" headers="perSecond Max" class='awrcrb'>12,077.47</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>394,345</td><td align="right" class='awrnc'>1,178.50</td><td align="right" class='awrnc'>0.99</td><td align="right" headers="perSecond Average" class='awrnclb'>589.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>480.30</td><td align="right" headers="perSecond Min" class='awrnc'>249.63</td><td align="right" headers="perSecond Max" class='awrncrb'>928.87</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>10,920,225</td><td align="right" class='awrc'>32,635.03</td><td align="right" class='awrc'>27.37</td><td align="right" headers="perSecond Average" class='awrclb'>16,317.52</td><td align="right" headers="perSecond StdDev" class='awrc'>13,214.31</td><td align="right" headers="perSecond Min" class='awrc'>6,973.59</td><td align="right" headers="perSecond Max" class='awrcrb'>25,661.44</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>14,894</td><td align="right" class='awrnc'>44.51</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>22.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.74</td><td align="right" headers="perSecond Min" class='awrnc'>17.49</td><td align="right" headers="perSecond Max" class='awrncrb'>27.02</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>70,167</td><td align="right" class='awrc'>209.70</td><td align="right" class='awrc'>0.18</td><td align="right" headers="perSecond Average" class='awrclb'>104.85</td><td align="right" headers="perSecond StdDev" class='awrc'>13.11</td><td align="right" headers="perSecond Min" class='awrc'>95.57</td><td align="right" headers="perSecond Max" class='awrcrb'>114.12</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets sync</td><td align="right" class='awrnc'>472,872</td><td align="right" class='awrnc'>1,413.19</td><td align="right" class='awrnc'>1.19</td><td align="right" headers="perSecond Average" class='awrnclb'>706.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>50.87</td><td align="right" headers="perSecond Min" class='awrnc'>670.62</td><td align="right" headers="perSecond Max" class='awrncrb'>742.57</td></tr>
<tr><td scope="row" class='awrc'>global enqueue releases</td><td align="right" class='awrc'>469,231</td><td align="right" class='awrc'>1,402.31</td><td align="right" class='awrc'>1.18</td><td align="right" headers="perSecond Average" class='awrclb'>701.15</td><td align="right" headers="perSecond StdDev" class='awrc'>50.68</td><td align="right" headers="perSecond Min" class='awrc'>665.31</td><td align="right" headers="perSecond Max" class='awrcrb'>736.99</td></tr>
<tr><td scope="row" class='awrnc'>heap block compress</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hot buffers moved to head of LRU</td><td align="right" class='awrc'>3,916</td><td align="right" class='awrc'>11.70</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>5.85</td><td align="right" headers="perSecond StdDev" class='awrc'>1.99</td><td align="right" headers="perSecond Min" class='awrc'>4.45</td><td align="right" headers="perSecond Max" class='awrcrb'>7.26</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CR) block cleanout applications</td><td align="right" class='awrnc'>908</td><td align="right" class='awrnc'>2.71</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.95</td><td align="right" headers="perSecond Min" class='awrnc'>0.68</td><td align="right" headers="perSecond Max" class='awrncrb'>2.03</td></tr>
<tr><td scope="row" class='awrc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrc'>568</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.85</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.84</td><td align="right" headers="perSecond Max" class='awrcrb'>0.86</td></tr>
<tr><td scope="row" class='awrnc'>in call idle wait time</td><td align="right" class='awrnc'>8,318,799</td><td align="right" class='awrnc'>24,860.92</td><td align="right" class='awrnc'>20.85</td><td align="right" headers="perSecond Average" class='awrnclb'>12,430.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>14.11</td><td align="right" headers="perSecond Min" class='awrnc'>12,420.48</td><td align="right" headers="perSecond Max" class='awrncrb'>12,440.44</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>10,832</td><td align="right" class='awrc'>32.37</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>16.19</td><td align="right" headers="perSecond StdDev" class='awrc'>15.33</td><td align="right" headers="perSecond Min" class='awrc'>5.35</td><td align="right" headers="perSecond Max" class='awrcrb'>27.02</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>13,278,545</td><td align="right" class='awrnc'>39,683.22</td><td align="right" class='awrnc'>33.28</td><td align="right" headers="perSecond Average" class='awrnclb'>19,841.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>464.94</td><td align="right" headers="perSecond Min" class='awrnc'>19,512.85</td><td align="right" headers="perSecond Max" class='awrncrb'>20,170.37</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>198</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>564</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.84</td><td align="right" headers="perSecond StdDev" class='awrc'>0.38</td><td align="right" headers="perSecond Min" class='awrc'>0.57</td><td align="right" headers="perSecond Max" class='awrcrb'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>6,770</td><td align="right" class='awrnc'>20.23</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>10.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>10.10</td><td align="right" headers="perSecond Max" class='awrncrb'>10.13</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>6,770</td><td align="right" class='awrc'>20.23</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>10.12</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>10.10</td><td align="right" headers="perSecond Max" class='awrcrb'>10.13</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>554,647,748,608</td><td align="right" class='awrnc'>1,657,576,931.94</td><td align="right" class='awrnc'>1,389,955.26</td><td align="right" headers="perSecond Average" class='awrnclb'>828,788,465.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>16,699,399.78</td><td align="right" headers="perSecond Min" class='awrnc'>816,980,207.14</td><td align="right" headers="perSecond Max" class='awrncrb'>840,596,724.80</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>1,828</td><td align="right" class='awrnc'>5.46</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.83</td><td align="right" headers="perSecond Min" class='awrnc'>1.43</td><td align="right" headers="perSecond Max" class='awrncrb'>4.03</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>225,262</td><td align="right" class='awrc'>673.20</td><td align="right" class='awrc'>0.56</td><td align="right" headers="perSecond Average" class='awrclb'>336.60</td><td align="right" headers="perSecond StdDev" class='awrc'>11.79</td><td align="right" headers="perSecond Min" class='awrc'>328.26</td><td align="right" headers="perSecond Max" class='awrcrb'>344.94</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>225,252</td><td align="right" class='awrnc'>673.17</td><td align="right" class='awrnc'>0.56</td><td align="right" headers="perSecond Average" class='awrnclb'>336.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>11.77</td><td align="right" headers="perSecond Min" class='awrnc'>328.26</td><td align="right" headers="perSecond Max" class='awrncrb'>344.91</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>52,031,736</td><td align="right" class='awrc'>155,497.98</td><td align="right" class='awrc'>130.39</td><td align="right" headers="perSecond Average" class='awrclb'>77,748.99</td><td align="right" headers="perSecond StdDev" class='awrc'>1,820.13</td><td align="right" headers="perSecond Min" class='awrc'>76,461.96</td><td align="right" headers="perSecond Max" class='awrcrb'>79,036.02</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>45,727,430</td><td align="right" class='awrnc'>136,657.44</td><td align="right" class='awrnc'>114.59</td><td align="right" headers="perSecond Average" class='awrnclb'>68,328.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>717.88</td><td align="right" headers="perSecond Min" class='awrnc'>67,821.10</td><td align="right" headers="perSecond Max" class='awrncrb'>68,836.34</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait time</td><td align="right" class='awrc'>6,703,387</td><td align="right" class='awrc'>20,033.28</td><td align="right" class='awrc'>16.80</td><td align="right" headers="perSecond Average" class='awrclb'>10,016.64</td><td align="right" headers="perSecond StdDev" class='awrc'>2,593.04</td><td align="right" headers="perSecond Min" class='awrc'>8,183.09</td><td align="right" headers="perSecond Max" class='awrcrb'>11,850.19</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>13,715,178</td><td align="right" class='awrnc'>40,988.11</td><td align="right" class='awrnc'>34.37</td><td align="right" headers="perSecond Average" class='awrnclb'>20,494.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>411.69</td><td align="right" headers="perSecond Min" class='awrnc'>20,202.95</td><td align="right" headers="perSecond Max" class='awrncrb'>20,785.16</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>690</td><td align="right" class='awrnc'>2.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.24</td><td align="right" headers="perSecond Max" class='awrncrb'>1.82</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>7,694</td><td align="right" class='awrc'>22.99</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>11.50</td><td align="right" headers="perSecond StdDev" class='awrc'>9.39</td><td align="right" headers="perSecond Min" class='awrc'>4.86</td><td align="right" headers="perSecond Max" class='awrcrb'>18.14</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>154</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.20</td><td align="right" headers="perSecond Min" class='awrnc'>0.09</td><td align="right" headers="perSecond Max" class='awrncrb'>0.37</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>311</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.46</td><td align="right" headers="perSecond StdDev" class='awrc'>0.53</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.84</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>40,478,209</td><td align="right" class='awrnc'>120,970.03</td><td align="right" class='awrnc'>101.44</td><td align="right" headers="perSecond Average" class='awrnclb'>60,485.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>317.54</td><td align="right" headers="perSecond Min" class='awrnc'>60,260.48</td><td align="right" headers="perSecond Max" class='awrncrb'>60,709.55</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>331,607,556,096</td><td align="right" class='awrc'>991,016,608.44</td><td align="right" class='awrc'>831,013.32</td><td align="right" headers="perSecond Average" class='awrclb'>495,508,304.22</td><td align="right" headers="perSecond StdDev" class='awrc'>2,595,505.15</td><td align="right" headers="perSecond Min" class='awrc'>493,673,004.93</td><td align="right" headers="perSecond Max" class='awrcrb'>497,343,603.51</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>40,485,445</td><td align="right" class='awrnc'>120,991.66</td><td align="right" class='awrnc'>101.46</td><td align="right" headers="perSecond Average" class='awrnclb'>60,495.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>317.21</td><td align="right" headers="perSecond Min" class='awrnc'>60,271.53</td><td align="right" headers="perSecond Max" class='awrncrb'>60,720.13</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>333,228,510,208</td><td align="right" class='awrc'>995,860,866.04</td><td align="right" class='awrc'>835,075.46</td><td align="right" headers="perSecond Average" class='awrclb'>497,930,433.02</td><td align="right" headers="perSecond StdDev" class='awrc'>2,610,873.28</td><td align="right" headers="perSecond Min" class='awrc'>496,084,266.82</td><td align="right" headers="perSecond Max" class='awrcrb'>499,776,599.22</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>1,479</td><td align="right" class='awrnc'>4.42</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>2.21</td><td align="right" headers="perSecond Max" class='awrncrb'>2.21</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>40,479,465</td><td align="right" class='awrc'>120,973.79</td><td align="right" class='awrc'>101.44</td><td align="right" headers="perSecond Average" class='awrclb'>60,486.89</td><td align="right" headers="perSecond StdDev" class='awrc'>316.89</td><td align="right" headers="perSecond Min" class='awrc'>60,262.82</td><td align="right" headers="perSecond Max" class='awrcrb'>60,710.97</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>40,479,461</td><td align="right" class='awrnc'>120,973.78</td><td align="right" class='awrnc'>101.44</td><td align="right" headers="perSecond Average" class='awrnclb'>60,486.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>316.88</td><td align="right" headers="perSecond Min" class='awrnc'>60,262.82</td><td align="right" headers="perSecond Max" class='awrncrb'>60,710.96</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>1,318</td><td align="right" class='awrc'>3.94</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.97</td><td align="right" headers="perSecond StdDev" class='awrc'>0.77</td><td align="right" headers="perSecond Min" class='awrc'>1.43</td><td align="right" headers="perSecond Max" class='awrcrb'>2.51</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>1,362,943</td><td align="right" class='awrnc'>4,073.18</td><td align="right" class='awrnc'>3.42</td><td align="right" headers="perSecond Average" class='awrnclb'>2,036.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>51.64</td><td align="right" headers="perSecond Min" class='awrnc'>2,000.07</td><td align="right" headers="perSecond Max" class='awrncrb'>2,073.11</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>11,553,185,792</td><td align="right" class='awrc'>34,526,946.18</td><td align="right" class='awrc'>28,952.45</td><td align="right" headers="perSecond Average" class='awrclb'>17,263,473.09</td><td align="right" headers="perSecond StdDev" class='awrc'>448,361.40</td><td align="right" headers="perSecond Min" class='awrc'>16,946,433.70</td><td align="right" headers="perSecond Max" class='awrcrb'>17,580,512.48</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>1,406,744</td><td align="right" class='awrnc'>4,204.08</td><td align="right" class='awrnc'>3.53</td><td align="right" headers="perSecond Average" class='awrnclb'>2,102.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>58.03</td><td align="right" headers="perSecond Min" class='awrnc'>2,061.01</td><td align="right" headers="perSecond Max" class='awrncrb'>2,143.08</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>12,758,866,944</td><td align="right" class='awrc'>38,130,150.47</td><td align="right" class='awrc'>31,973.90</td><td align="right" headers="perSecond Average" class='awrclb'>19,065,075.23</td><td align="right" headers="perSecond StdDev" class='awrc'>493,835.45</td><td align="right" headers="perSecond Min" class='awrc'>18,715,880.84</td><td align="right" headers="perSecond Max" class='awrcrb'>19,414,269.63</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>1,743</td><td align="right" class='awrnc'>5.21</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.17</td><td align="right" headers="perSecond Min" class='awrnc'>2.49</td><td align="right" headers="perSecond Max" class='awrncrb'>2.72</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>1,410,301</td><td align="right" class='awrc'>4,214.72</td><td align="right" class='awrc'>3.53</td><td align="right" headers="perSecond Average" class='awrclb'>2,107.36</td><td align="right" headers="perSecond StdDev" class='awrc'>54.73</td><td align="right" headers="perSecond Min" class='awrc'>2,068.66</td><td align="right" headers="perSecond Max" class='awrcrb'>2,146.06</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>950</td><td align="right" class='awrnc'>2.84</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>1.32</td><td align="right" headers="perSecond Max" class='awrncrb'>1.52</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>361</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.54</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.52</td><td align="right" headers="perSecond Max" class='awrcrb'>0.56</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>196</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>1,409,351</td><td align="right" class='awrc'>4,211.88</td><td align="right" class='awrc'>3.53</td><td align="right" headers="perSecond Average" class='awrclb'>2,105.94</td><td align="right" headers="perSecond StdDev" class='awrc'>54.87</td><td align="right" headers="perSecond Min" class='awrc'>2,067.14</td><td align="right" headers="perSecond Max" class='awrcrb'>2,144.73</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>1,260,460</td><td align="right" class='awrnc'>3,766.91</td><td align="right" class='awrnc'>3.16</td><td align="right" headers="perSecond Average" class='awrnclb'>1,883.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>37.61</td><td align="right" headers="perSecond Min" class='awrnc'>1,856.87</td><td align="right" headers="perSecond Max" class='awrncrb'>1,910.05</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>70,655</td><td align="right" class='awrc'>211.15</td><td align="right" class='awrc'>0.18</td><td align="right" headers="perSecond Average" class='awrclb'>105.58</td><td align="right" headers="perSecond StdDev" class='awrc'>10.64</td><td align="right" headers="perSecond Min" class='awrc'>98.05</td><td align="right" headers="perSecond Max" class='awrcrb'>113.10</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>665</td><td align="right" class='awrnc'>1.99</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.99</td><td align="right" headers="perSecond Max" class='awrncrb'>1.00</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>14,178,540</td><td align="right" class='awrc'>42,372.88</td><td align="right" class='awrc'>35.53</td><td align="right" headers="perSecond Average" class='awrclb'>21,186.44</td><td align="right" headers="perSecond StdDev" class='awrc'>319.38</td><td align="right" headers="perSecond Min" class='awrc'>20,960.60</td><td align="right" headers="perSecond Max" class='awrcrb'>21,412.28</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>1,126,663</td><td align="right" class='awrnc'>3,367.06</td><td align="right" class='awrnc'>2.82</td><td align="right" headers="perSecond Average" class='awrnclb'>1,683.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>43.23</td><td align="right" headers="perSecond Min" class='awrnc'>1,652.96</td><td align="right" headers="perSecond Max" class='awrncrb'>1,714.10</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>892,928</td><td align="right" class='awrc'>2,668.54</td><td align="right" class='awrc'>2.24</td><td align="right" headers="perSecond Average" class='awrclb'>1,334.27</td><td align="right" headers="perSecond StdDev" class='awrc'>17.28</td><td align="right" headers="perSecond Min" class='awrc'>1,322.05</td><td align="right" headers="perSecond Max" class='awrcrb'>1,346.49</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>921,010</td><td align="right" class='awrnc'>2,752.46</td><td align="right" class='awrnc'>2.31</td><td align="right" headers="perSecond Average" class='awrnclb'>1,376.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>44.25</td><td align="right" headers="perSecond Min" class='awrnc'>1,344.94</td><td align="right" headers="perSecond Max" class='awrncrb'>1,407.52</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>2,328,905</td><td align="right" class='awrc'>6,959.98</td><td align="right" class='awrc'>5.84</td><td align="right" headers="perSecond Average" class='awrclb'>3,479.99</td><td align="right" headers="perSecond StdDev" class='awrc'>107.95</td><td align="right" headers="perSecond Min" class='awrc'>3,403.66</td><td align="right" headers="perSecond Max" class='awrcrb'>3,556.32</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>1,790,282</td><td align="right" class='awrnc'>5,350.30</td><td align="right" class='awrnc'>4.49</td><td align="right" headers="perSecond Average" class='awrnclb'>2,675.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>66.55</td><td align="right" headers="perSecond Min" class='awrnc'>2,628.09</td><td align="right" headers="perSecond Max" class='awrncrb'>2,722.20</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>1,140,313,764</td><td align="right" class='awrc'>3,407,852.32</td><td align="right" class='awrc'>2,857.64</td><td align="right" headers="perSecond Average" class='awrclb'>1,703,926.16</td><td align="right" headers="perSecond StdDev" class='awrc'>47,753.18</td><td align="right" headers="perSecond Min" class='awrc'>1,670,159.57</td><td align="right" headers="perSecond Max" class='awrcrb'>1,737,692.76</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>300</td><td align="right" class='awrnc'>0.90</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>0.36</td><td align="right" headers="perSecond Max" class='awrncrb'>0.54</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>1,767</td><td align="right" class='awrc'>5.28</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.64</td><td align="right" headers="perSecond StdDev" class='awrc'>1.28</td><td align="right" headers="perSecond Min" class='awrc'>1.74</td><td align="right" headers="perSecond Max" class='awrcrb'>3.54</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.27</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.43</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>1,481,900</td><td align="right" class='awrc'>4,428.63</td><td align="right" class='awrc'>3.71</td><td align="right" headers="perSecond Average" class='awrclb'>2,214.31</td><td align="right" headers="perSecond StdDev" class='awrc'>2,741.78</td><td align="right" headers="perSecond Min" class='awrc'>275.58</td><td align="right" headers="perSecond Max" class='awrcrb'>4,153.05</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>3,304</td><td align="right" class='awrnc'>9.87</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>4.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.58</td><td align="right" headers="perSecond Min" class='awrnc'>4.53</td><td align="right" headers="perSecond Max" class='awrncrb'>5.35</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>258</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.10</td><td align="right" headers="perSecond Min" class='awrnc'>0.32</td><td align="right" headers="perSecond Max" class='awrncrb'>0.45</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>10,376,492</td><td align="right" class='awrc'>31,010.35</td><td align="right" class='awrc'>26.00</td><td align="right" headers="perSecond Average" class='awrclb'>15,505.17</td><td align="right" headers="perSecond StdDev" class='awrc'>1,507.73</td><td align="right" headers="perSecond Min" class='awrc'>14,439.05</td><td align="right" headers="perSecond Max" class='awrcrb'>16,571.30</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>42,604</td><td align="right" class='awrnc'>127.32</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>63.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.48</td><td align="right" headers="perSecond Min" class='awrnc'>59.08</td><td align="right" headers="perSecond Max" class='awrncrb'>68.24</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>1,857</td><td align="right" class='awrnc'>5.55</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>5.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>5.55</td><td align="right" headers="perSecond Max" class='awrncrb'>5.55</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>530,341,596</td><td align="right" class='awrc'>1,584,937.73</td><td align="right" class='awrc'>1,329.04</td><td align="right" headers="perSecond Average" class='awrclb'>792,468.86</td><td align="right" headers="perSecond StdDev" class='awrc'>4,490.20</td><td align="right" headers="perSecond Min" class='awrc'>789,293.82</td><td align="right" headers="perSecond Max" class='awrcrb'>795,643.91</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>1,570,613</td><td align="right" class='awrnc'>4,693.81</td><td align="right" class='awrnc'>3.94</td><td align="right" headers="perSecond Average" class='awrnclb'>2,346.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>133.68</td><td align="right" headers="perSecond Min" class='awrnc'>2,252.38</td><td align="right" headers="perSecond Max" class='awrncrb'>2,441.43</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>1,853,764</td><td align="right" class='awrnc'>5,540.01</td><td align="right" class='awrnc'>4.65</td><td align="right" headers="perSecond Average" class='awrnclb'>2,770.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>150.99</td><td align="right" headers="perSecond Min" class='awrnc'>2,663.24</td><td align="right" headers="perSecond Max" class='awrncrb'>2,876.77</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>931</td><td align="right" class='awrc'>2.78</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.78</td><td align="right" headers="perSecond Min" class='awrc'>0.84</td><td align="right" headers="perSecond Max" class='awrcrb'>1.94</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>2,816</td><td align="right" class='awrnc'>8.42</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>4.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.00</td><td align="right" headers="perSecond Min" class='awrnc'>2.79</td><td align="right" headers="perSecond Max" class='awrncrb'>5.62</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>6,810</td><td align="right" class='awrc'>20.35</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>10.18</td><td align="right" headers="perSecond StdDev" class='awrc'>1.16</td><td align="right" headers="perSecond Min" class='awrc'>9.36</td><td align="right" headers="perSecond Max" class='awrcrb'>10.99</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>9,605</td><td align="right" class='awrnc'>28.70</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>14.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.03</td><td align="right" headers="perSecond Min" class='awrnc'>12.92</td><td align="right" headers="perSecond Max" class='awrncrb'>15.79</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>5,550</td><td align="right" class='awrc'>16.59</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>8.29</td><td align="right" headers="perSecond StdDev" class='awrc'>2.13</td><td align="right" headers="perSecond Min" class='awrc'>6.79</td><td align="right" headers="perSecond Max" class='awrcrb'>9.80</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.31</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>399</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.60</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>0.50</td><td align="right" headers="perSecond Max" class='awrcrb'>0.70</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>346</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.46</td><td align="right" headers="perSecond Max" class='awrncrb'>0.58</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>101</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>53,050</td><td align="right" class='awrnc'>158.54</td><td align="right" class='awrnc'>0.13</td><td align="right" headers="perSecond Average" class='awrnclb'>79.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.45</td><td align="right" headers="perSecond Min" class='awrnc'>78.95</td><td align="right" headers="perSecond Max" class='awrncrb'>79.59</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>530,497,792</td><td align="right" class='awrc'>1,585,404.52</td><td align="right" class='awrc'>1,329.44</td><td align="right" headers="perSecond Average" class='awrclb'>792,702.26</td><td align="right" headers="perSecond StdDev" class='awrc'>4,497.80</td><td align="right" headers="perSecond Min" class='awrc'>789,521.84</td><td align="right" headers="perSecond Max" class='awrcrb'>795,882.68</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>531,446,314</td><td align="right" class='awrnc'>1,588,239.20</td><td align="right" class='awrnc'>1,331.81</td><td align="right" headers="perSecond Average" class='awrnclb'>794,119.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,558.93</td><td align="right" headers="perSecond Min" class='awrnc'>790,895.95</td><td align="right" headers="perSecond Max" class='awrncrb'>797,343.25</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>26,723</td><td align="right" class='awrc'>79.86</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>39.93</td><td align="right" headers="perSecond StdDev" class='awrc'>4.04</td><td align="right" headers="perSecond Min" class='awrc'>37.07</td><td align="right" headers="perSecond Max" class='awrcrb'>42.79</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>26,722</td><td align="right" class='awrnc'>79.86</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>39.93</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.04</td><td align="right" headers="perSecond Min" class='awrnc'>37.07</td><td align="right" headers="perSecond Max" class='awrncrb'>42.79</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>5,479</td><td align="right" class='awrnc'>16.37</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>8.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.75</td><td align="right" headers="perSecond Min" class='awrnc'>4.12</td><td align="right" headers="perSecond Max" class='awrncrb'>12.26</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>2,957,312</td><td align="right" class='awrc'>8,837.99</td><td align="right" class='awrc'>7.41</td><td align="right" headers="perSecond Average" class='awrclb'>4,418.99</td><td align="right" headers="perSecond StdDev" class='awrc'>259.57</td><td align="right" headers="perSecond Min" class='awrc'>4,235.45</td><td align="right" headers="perSecond Max" class='awrcrb'>4,602.54</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>2,514,794</td><td align="right" class='awrc'>7,515.51</td><td align="right" class='awrc'>6.30</td><td align="right" headers="perSecond Average" class='awrclb'>3,757.76</td><td align="right" headers="perSecond StdDev" class='awrc'>245.60</td><td align="right" headers="perSecond Min" class='awrc'>3,584.09</td><td align="right" headers="perSecond Max" class='awrcrb'>3,931.42</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>2,957,312</td><td align="right" class='awrnc'>8,837.99</td><td align="right" class='awrnc'>7.41</td><td align="right" headers="perSecond Average" class='awrnclb'>4,418.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>259.57</td><td align="right" headers="perSecond Min" class='awrnc'>4,235.45</td><td align="right" headers="perSecond Max" class='awrncrb'>4,602.54</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.18</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.20</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.19</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>377</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.13</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.13</td><td align="right" headers="perSecond Max" class='awrcrb'>1.13</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>13,675,645</td><td align="right" class='awrnc'>40,869.96</td><td align="right" class='awrnc'>34.27</td><td align="right" headers="perSecond Average" class='awrnclb'>20,434.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>466.96</td><td align="right" headers="perSecond Min" class='awrnc'>20,104.79</td><td align="right" headers="perSecond Max" class='awrncrb'>20,765.17</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>67,710,542</td><td align="right" class='awrc'>202,354.44</td><td align="right" class='awrc'>169.68</td><td align="right" headers="perSecond Average" class='awrclb'>101,177.22</td><td align="right" headers="perSecond StdDev" class='awrc'>2,037.37</td><td align="right" headers="perSecond Min" class='awrc'>99,736.58</td><td align="right" headers="perSecond Max" class='awrcrb'>102,617.86</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>8,507,941</td><td align="right" class='awrnc'>25,426.31</td><td align="right" class='awrnc'>21.32</td><td align="right" headers="perSecond Average" class='awrnclb'>12,713.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,792.72</td><td align="right" headers="perSecond Min" class='awrnc'>8,617.08</td><td align="right" headers="perSecond Max" class='awrncrb'>16,809.23</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>2,164</td><td align="right" class='awrc'>6.47</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>3.23</td><td align="right" headers="perSecond StdDev" class='awrc'>2.77</td><td align="right" headers="perSecond Min" class='awrc'>1.28</td><td align="right" headers="perSecond Max" class='awrcrb'>5.19</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>127,174</td><td align="right" class='awrnc'>380.06</td><td align="right" class='awrnc'>0.32</td><td align="right" headers="perSecond Average" class='awrnclb'>190.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.86</td><td align="right" headers="perSecond Min" class='awrnc'>174.57</td><td align="right" headers="perSecond Max" class='awrncrb'>205.49</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>11,871,231</td><td align="right" class='awrc'>35,477.44</td><td align="right" class='awrc'>29.75</td><td align="right" headers="perSecond Average" class='awrclb'>17,738.72</td><td align="right" headers="perSecond StdDev" class='awrc'>218.42</td><td align="right" headers="perSecond Min" class='awrc'>17,584.27</td><td align="right" headers="perSecond Max" class='awrcrb'>17,893.17</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>51,038,832</td><td align="right" class='awrnc'>152,530.67</td><td align="right" class='awrnc'>127.90</td><td align="right" headers="perSecond Average" class='awrnclb'>76,265.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,565.78</td><td align="right" headers="perSecond Min" class='awrnc'>75,158.16</td><td align="right" headers="perSecond Max" class='awrncrb'>77,372.51</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>322</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrc'>0.59</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.90</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>11,260</td><td align="right" class='awrnc'>33.65</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>16.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.99</td><td align="right" headers="perSecond Min" class='awrnc'>14.71</td><td align="right" headers="perSecond Max" class='awrncrb'>18.94</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>1,361,222</td><td align="right" class='awrc'>4,068.04</td><td align="right" class='awrc'>3.41</td><td align="right" headers="perSecond Average" class='awrclb'>2,034.02</td><td align="right" headers="perSecond StdDev" class='awrc'>79.47</td><td align="right" headers="perSecond Min" class='awrc'>1,977.83</td><td align="right" headers="perSecond Max" class='awrcrb'>2,090.22</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>1,361,222</td><td align="right" class='awrnc'>4,068.04</td><td align="right" class='awrnc'>3.41</td><td align="right" headers="perSecond Average" class='awrnclb'>2,034.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>79.47</td><td align="right" headers="perSecond Min" class='awrnc'>1,977.83</td><td align="right" headers="perSecond Max" class='awrncrb'>2,090.22</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>707</td><td align="right" class='awrc'>2.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.70</td><td align="right" headers="perSecond Min" class='awrc'>0.56</td><td align="right" headers="perSecond Max" class='awrcrb'>1.55</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>11,690</td><td align="right" class='awrnc'>34.94</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>17.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.91</td><td align="right" headers="perSecond Min" class='awrnc'>15.41</td><td align="right" headers="perSecond Max" class='awrncrb'>19.53</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>244</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.36</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>total number of times SMON posted</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>undo change vector size</td><td align="right" class='awrnc'>449,621,896</td><td align="right" class='awrnc'>1,343,704.72</td><td align="right" class='awrnc'>1,126.76</td><td align="right" headers="perSecond Average" class='awrnclb'>671,852.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>20,123.66</td><td align="right" headers="perSecond Min" class='awrnc'>657,622.78</td><td align="right" headers="perSecond Max" class='awrncrb'>686,081.94</td></tr>
<tr><td scope="row" class='awrc'>user I/O wait time</td><td align="right" class='awrc'>3,979,908</td><td align="right" class='awrc'>11,894.10</td><td align="right" class='awrc'>9.97</td><td align="right" headers="perSecond Average" class='awrclb'>5,947.05</td><td align="right" headers="perSecond StdDev" class='awrc'>2,335.33</td><td align="right" headers="perSecond Min" class='awrc'>4,295.72</td><td align="right" headers="perSecond Max" class='awrcrb'>7,598.38</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,793</td><td align="right" class='awrnc'>5.36</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.71</td><td align="right" headers="perSecond Min" class='awrnc'>2.18</td><td align="right" headers="perSecond Max" class='awrncrb'>3.18</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>399,040</td><td align="right" class='awrc'>1,192.54</td><td align="right" class='awrc'>1.00</td><td align="right" headers="perSecond Average" class='awrclb'>596.27</td><td align="right" headers="perSecond StdDev" class='awrc'>12.62</td><td align="right" headers="perSecond Min" class='awrc'>587.35</td><td align="right" headers="perSecond Max" class='awrcrb'>605.19</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>257</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.31</td><td align="right" headers="perSecond Max" class='awrcrb'>0.45</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>2,128</td><td align="right" class='awrnc'>6.36</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>3.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.51</td><td align="right" headers="perSecond Min" class='awrnc'>2.11</td><td align="right" headers="perSecond Max" class='awrncrb'>4.25</td></tr>
<tr><td scope="row" class='awrc'>write clones created in background</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>61,586</td><td align="right" class='awrnc'>184.05</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>92.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.65</td><td align="right" headers="perSecond Min" class='awrnc'>90.86</td><td align="right" headers="perSecond Max" class='awrncrb'>93.20</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>56,128</td><td align="right" class='awrnc'>167.74</td><td align="right" class='awrnc'>0.14</td><td align="right" headers="perSecond Average" class='awrnclb'>83.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>60.19</td><td align="right" headers="perSecond Min" class='awrnc'>41.31</td><td align="right" headers="perSecond Max" class='awrncrb'>126.43</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>1,517</td><td align="right" class='awrnc'>4.53</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.20</td><td align="right" headers="perSecond Min" class='awrnc'>2.12</td><td align="right" headers="perSecond Max" class='awrncrb'>2.41</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>12,937</td><td align="right" class='awrc'>38.66</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>19.33</td><td align="right" headers="perSecond StdDev" class='awrc'>1.36</td><td align="right" headers="perSecond Min" class='awrc'>18.37</td><td align="right" headers="perSecond Max" class='awrcrb'>20.30</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>12,971</td><td align="right" class='awrnc'>38.76</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>19.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.68</td><td align="right" headers="perSecond Min" class='awrnc'>18.19</td><td align="right" headers="perSecond Max" class='awrncrb'>20.57</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>26,758</td><td align="right" class='awrc'>79.97</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>39.98</td><td align="right" headers="perSecond StdDev" class='awrc'>4.05</td><td align="right" headers="perSecond Min" class='awrc'>37.12</td><td align="right" headers="perSecond Max" class='awrcrb'>42.85</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>10,440</td><td align="right" class='awrnc'>31.20</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>15.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.16</td><td align="right" headers="perSecond Min" class='awrnc'>14.78</td><td align="right" headers="perSecond Max" class='awrncrb'>16.42</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>3,175</td><td align="right" class='awrc'>9.49</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>4.74</td><td align="right" headers="perSecond StdDev" class='awrc'>2.65</td><td align="right" headers="perSecond Min" class='awrc'>2.87</td><td align="right" headers="perSecond Max" class='awrcrb'>6.62</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>21,472</td><td align="right" class='awrnc'>64.17</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>32.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.17</td><td align="right" headers="perSecond Min" class='awrnc'>23.48</td><td align="right" headers="perSecond Max" class='awrncrb'>40.69</td></tr>
<tr><td scope="row" class='awrc'>gcs ast xid</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs bidless ast to lms</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked converts</td><td align="right" class='awrc'>349,895</td><td align="right" class='awrc'>1,045.67</td><td align="right" class='awrc'>0.88</td><td align="right" headers="perSecond Average" class='awrclb'>522.83</td><td align="right" headers="perSecond StdDev" class='awrc'>8.18</td><td align="right" headers="perSecond Min" class='awrc'>517.05</td><td align="right" headers="perSecond Max" class='awrcrb'>528.62</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked cr converts</td><td align="right" class='awrnc'>452</td><td align="right" class='awrnc'>1.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.67</td><td align="right" headers="perSecond Max" class='awrncrb'>0.68</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible basts</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (global)</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (local)</td><td align="right" class='awrc'>3,644</td><td align="right" class='awrc'>10.89</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>5.45</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>5.36</td><td align="right" headers="perSecond Max" class='awrcrb'>5.53</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>210,694</td><td align="right" class='awrnc'>629.66</td><td align="right" class='awrnc'>0.53</td><td align="right" headers="perSecond Average" class='awrnclb'>314.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>211.82</td><td align="right" headers="perSecond Min" class='awrnc'>165.05</td><td align="right" headers="perSecond Max" class='awrncrb'>464.61</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>161</td><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrc'>0.24</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>21,544</td><td align="right" class='awrnc'>64.39</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>32.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.28</td><td align="right" headers="perSecond Min" class='awrnc'>23.51</td><td align="right" headers="perSecond Max" class='awrncrb'>40.88</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (compatible) converts</td><td align="right" class='awrc'>4,030</td><td align="right" class='awrc'>12.04</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>6.02</td><td align="right" headers="perSecond StdDev" class='awrc'>4.59</td><td align="right" headers="perSecond Min" class='awrc'>2.78</td><td align="right" headers="perSecond Max" class='awrcrb'>9.26</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (null) converts</td><td align="right" class='awrnc'>36,470</td><td align="right" class='awrnc'>108.99</td><td align="right" class='awrnc'>0.09</td><td align="right" headers="perSecond Average" class='awrnclb'>54.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.49</td><td align="right" headers="perSecond Min" class='awrnc'>53.44</td><td align="right" headers="perSecond Max" class='awrncrb'>55.55</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrc'>522,385</td><td align="right" class='awrc'>1,561.16</td><td align="right" class='awrc'>1.31</td><td align="right" headers="perSecond Average" class='awrclb'>780.58</td><td align="right" headers="perSecond StdDev" class='awrc'>64.61</td><td align="right" headers="perSecond Min" class='awrc'>734.89</td><td align="right" headers="perSecond Max" class='awrcrb'>826.27</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (null) converts</td><td align="right" class='awrnc'>2,348,310</td><td align="right" class='awrnc'>7,017.97</td><td align="right" class='awrnc'>5.88</td><td align="right" headers="perSecond Average" class='awrnclb'>3,508.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>314.24</td><td align="right" headers="perSecond Min" class='awrnc'>3,286.79</td><td align="right" headers="perSecond Max" class='awrncrb'>3,731.18</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.29</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.42</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>263,554</td><td align="right" class='awrnc'>787.64</td><td align="right" class='awrnc'>0.66</td><td align="right" headers="perSecond Average" class='awrnclb'>393.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>53.51</td><td align="right" headers="perSecond Min" class='awrnc'>355.98</td><td align="right" headers="perSecond Max" class='awrncrb'>431.66</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>7,834,105</td><td align="right" class='awrc'>23,412.41</td><td align="right" class='awrc'>19.63</td><td align="right" headers="perSecond Average" class='awrclb'>11,706.20</td><td align="right" headers="perSecond StdDev" class='awrc'>256.55</td><td align="right" headers="perSecond Min" class='awrc'>11,524.79</td><td align="right" headers="perSecond Max" class='awrcrb'>11,887.61</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>350</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.66</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.99</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>5,304</td><td align="right" class='awrc'>15.85</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>7.93</td><td align="right" headers="perSecond StdDev" class='awrc'>0.77</td><td align="right" headers="perSecond Min" class='awrc'>7.38</td><td align="right" headers="perSecond Max" class='awrcrb'>8.47</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>418</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.26</td><td align="right" headers="perSecond Min" class='awrnc'>0.44</td><td align="right" headers="perSecond Max" class='awrncrb'>0.81</td></tr>
<tr><td scope="row" class='awrc'>gcs queued converts</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant immediate</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.17</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs actual</td><td align="right" class='awrc'>3,185</td><td align="right" class='awrc'>9.52</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>4.76</td><td align="right" headers="perSecond StdDev" class='awrc'>1.98</td><td align="right" headers="perSecond Min" class='awrc'>3.36</td><td align="right" headers="perSecond Max" class='awrcrb'>6.16</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs logical</td><td align="right" class='awrnc'>32,476</td><td align="right" class='awrnc'>97.05</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>48.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>17.40</td><td align="right" headers="perSecond Min" class='awrnc'>36.22</td><td align="right" headers="perSecond Max" class='awrncrb'>60.83</td></tr>
<tr><td scope="row" class='awrc'>gcs stale cr</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs undo cr</td><td align="right" class='awrnc'>1,155</td><td align="right" class='awrnc'>3.45</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.39</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>3.42</td></tr>
<tr><td scope="row" class='awrc'>gcs write notification msgs</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs writes refused</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges msgs process time(ms)</td><td align="right" class='awrc'>405</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.61</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>0.42</td><td align="right" headers="perSecond Max" class='awrcrb'>0.79</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs received</td><td align="right" class='awrnc'>14,365</td><td align="right" class='awrnc'>42.93</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>21.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.34</td><td align="right" headers="perSecond Min" class='awrnc'>17.69</td><td align="right" headers="perSecond Max" class='awrncrb'>25.24</td></tr>
<tr><td scope="row" class='awrc'>ges remote lock allocation</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>235,641</td><td align="right" class='awrnc'>704.22</td><td align="right" class='awrnc'>0.59</td><td align="right" headers="perSecond Average" class='awrnclb'>352.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>75.96</td><td align="right" headers="perSecond Min" class='awrnc'>298.40</td><td align="right" headers="perSecond Max" class='awrncrb'>405.82</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>236,552</td><td align="right" class='awrc'>706.94</td><td align="right" class='awrc'>0.59</td><td align="right" headers="perSecond Average" class='awrclb'>353.47</td><td align="right" headers="perSecond StdDev" class='awrc'>84.51</td><td align="right" headers="perSecond Min" class='awrc'>293.71</td><td align="right" headers="perSecond Max" class='awrcrb'>413.23</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>107,734</td><td align="right" class='awrnc'>321.97</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>160.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>160.73</td><td align="right" headers="perSecond Max" class='awrncrb'>161.24</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>2,843,381</td><td align="right" class='awrc'>8,497.50</td><td align="right" class='awrc'>7.13</td><td align="right" headers="perSecond Average" class='awrclb'>4,248.75</td><td align="right" headers="perSecond StdDev" class='awrc'>327.24</td><td align="right" headers="perSecond Min" class='awrc'>4,017.36</td><td align="right" headers="perSecond Max" class='awrcrb'>4,480.14</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>1,022,413</td><td align="right" class='awrnc'>3,055.50</td><td align="right" class='awrnc'>2.56</td><td align="right" headers="perSecond Average" class='awrnclb'>1,527.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>391.04</td><td align="right" headers="perSecond Min" class='awrnc'>1,251.24</td><td align="right" headers="perSecond Max" class='awrncrb'>1,804.25</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>4,996,788</td><td align="right" class='awrc'>14,933.02</td><td align="right" class='awrc'>12.52</td><td align="right" headers="perSecond Average" class='awrclb'>7,466.51</td><td align="right" headers="perSecond StdDev" class='awrc'>147.13</td><td align="right" headers="perSecond Min" class='awrc'>7,362.47</td><td align="right" headers="perSecond Max" class='awrcrb'>7,570.55</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>7,848,470</td><td align="right" class='awrnc'>23,455.34</td><td align="right" class='awrnc'>19.67</td><td align="right" headers="perSecond Average" class='awrnclb'>11,727.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>261.89</td><td align="right" headers="perSecond Min" class='awrnc'>11,542.48</td><td align="right" headers="perSecond Max" class='awrncrb'>11,912.85</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>2,148,074</td><td align="right" class='awrc'>6,419.57</td><td align="right" class='awrc'>5.38</td><td align="right" headers="perSecond Average" class='awrclb'>3,209.78</td><td align="right" headers="perSecond StdDev" class='awrc'>23.60</td><td align="right" headers="perSecond Min" class='awrc'>3,193.10</td><td align="right" headers="perSecond Max" class='awrcrb'>3,226.47</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>3,578,056</td><td align="right" class='awrnc'>10,693.09</td><td align="right" class='awrnc'>8.97</td><td align="right" headers="perSecond Average" class='awrnclb'>5,346.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>434.47</td><td align="right" headers="perSecond Min" class='awrnc'>5,039.33</td><td align="right" headers="perSecond Max" class='awrncrb'>5,653.76</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>250,063</td><td align="right" class='awrc'>747.32</td><td align="right" class='awrc'>0.63</td><td align="right" headers="perSecond Average" class='awrclb'>373.66</td><td align="right" headers="perSecond StdDev" class='awrc'>67.62</td><td align="right" headers="perSecond Min" class='awrc'>325.84</td><td align="right" headers="perSecond Max" class='awrcrb'>421.48</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>4,773,109</td><td align="right" class='awrnc'>14,264.54</td><td align="right" class='awrnc'>11.96</td><td align="right" headers="perSecond Average" class='awrnclb'>7,132.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>296.59</td><td align="right" headers="perSecond Min" class='awrnc'>6,922.55</td><td align="right" headers="perSecond Max" class='awrncrb'>7,341.99</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>1,854,735,377,096</td><td align="right" class='awrc'>5,542,928,501.90</td><td align="right" class='awrc'>4,647,993.63</td><td align="right" headers="perSecond Average" class='awrclb'>2,771,464,250.95</td><td align="right" headers="perSecond StdDev" class='awrc'>428,015,055.66</td><td align="right" headers="perSecond Min" class='awrc'>2,468,811,902.65</td><td align="right" headers="perSecond Max" class='awrcrb'>3,074,116,599.26</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>342,236</td><td align="right" class='awrnc'>1,022.79</td><td align="right" class='awrnc'>0.86</td><td align="right" headers="perSecond Average" class='awrnclb'>511.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>238.62</td><td align="right" headers="perSecond Min" class='awrnc'>342.66</td><td align="right" headers="perSecond Max" class='awrncrb'>680.12</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>7,848,468</td><td align="right" class='awrc'>23,455.33</td><td align="right" class='awrc'>19.67</td><td align="right" headers="perSecond Average" class='awrclb'>11,727.66</td><td align="right" headers="perSecond StdDev" class='awrc'>261.89</td><td align="right" headers="perSecond Min" class='awrc'>11,542.48</td><td align="right" headers="perSecond Max" class='awrcrb'>11,912.85</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>274,862</td><td align="right" class='awrnc'>821.43</td><td align="right" class='awrnc'>0.69</td><td align="right" headers="perSecond Average" class='awrnclb'>410.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>58.86</td><td align="right" headers="perSecond Min" class='awrnc'>369.10</td><td align="right" headers="perSecond Max" class='awrncrb'>452.33</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>30,902,376</td><td align="right" class='awrc'>92,352.44</td><td align="right" class='awrc'>77.44</td><td align="right" headers="perSecond Average" class='awrclb'>46,176.22</td><td align="right" headers="perSecond StdDev" class='awrc'>316.97</td><td align="right" headers="perSecond Min" class='awrc'>45,952.09</td><td align="right" headers="perSecond Max" class='awrcrb'>46,400.35</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>3,046,894</td><td align="right" class='awrnc'>9,105.70</td><td align="right" class='awrnc'>7.64</td><td align="right" headers="perSecond Average" class='awrnclb'>4,552.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>524.73</td><td align="right" headers="perSecond Min" class='awrnc'>4,181.81</td><td align="right" headers="perSecond Max" class='awrncrb'>4,923.89</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>4,996,548</td><td align="right" class='awrc'>14,932.29</td><td align="right" class='awrc'>12.52</td><td align="right" headers="perSecond Average" class='awrclb'>7,466.14</td><td align="right" headers="perSecond StdDev" class='awrc'>306.09</td><td align="right" headers="perSecond Min" class='awrc'>7,249.71</td><td align="right" headers="perSecond Max" class='awrcrb'>7,682.58</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages received</td><td align="right" class='awrnc'>1,901,738</td><td align="right" class='awrnc'>5,683.39</td><td align="right" class='awrnc'>4.77</td><td align="right" headers="perSecond Average" class='awrnclb'>2,841.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>174.13</td><td align="right" headers="perSecond Min" class='awrnc'>2,718.57</td><td align="right" headers="perSecond Max" class='awrncrb'>2,964.82</td></tr>
<tr><td scope="row" class='awrc'>process batch messages sent</td><td align="right" class='awrc'>2,124,246</td><td align="right" class='awrc'>6,348.35</td><td align="right" class='awrc'>5.32</td><td align="right" headers="perSecond Average" class='awrclb'>3,174.18</td><td align="right" headers="perSecond StdDev" class='awrc'>284.45</td><td align="right" headers="perSecond Min" class='awrc'>2,973.04</td><td align="right" headers="perSecond Max" class='awrcrb'>3,375.31</td></tr>
<tr><td scope="row" class='awrnc'>receiver cycle time</td><td align="right" class='awrnc'>1,135,348</td><td align="right" class='awrnc'>3,393.01</td><td align="right" class='awrnc'>2.85</td><td align="right" headers="perSecond Average" class='awrnclb'>1,696.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.91</td><td align="right" headers="perSecond Min" class='awrnc'>1,690.91</td><td align="right" headers="perSecond Max" class='awrncrb'>1,702.10</td></tr>
<tr><td scope="row" class='awrc'>receiver loop count</td><td align="right" class='awrc'>4,926,621</td><td align="right" class='awrc'>14,723.30</td><td align="right" class='awrc'>12.35</td><td align="right" headers="perSecond Average" class='awrclb'>7,361.65</td><td align="right" headers="perSecond StdDev" class='awrc'>816.25</td><td align="right" headers="perSecond Min" class='awrc'>6,784.47</td><td align="right" headers="perSecond Max" class='awrcrb'>7,938.83</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>294</td><td align="right" headers="Sessions End" class='awrc'>141</td><td align="right" headers="OpenCursors Begin" class='awrclb'>795</td><td align="right" headers="OpenCursors End" class='awrc'>112</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>31,924</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>32,330</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>243</td><td align="right" headers="Sessions End" class='awrnc'>139</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>634</td><td align="right" headers="OpenCursors End" class='awrnc'>112</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>30,871</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>31,025</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>537</td><td align="right" class='awrct'>280</td><td align="right" class='awrclbt'>1,429</td><td align="right" class='awrct'>224</td><td align="right" class='awrclbt'>62,795</td><td align="right" class='awrcrbt'>63,355</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>269</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnclb'>715</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnclb'>31,398</td><td align="right" class='awrncrb'>31,678</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>36</td><td align="right" class='awrc'>1</td><td align="right" class='awrclb'>114</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>745</td><td align="right" class='awrcrb'>923</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>125,178.36</td><td align="right" class='awrc'>120,974.86</td><td align="right" class='awrc'>4,203.50</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>125,025.85</td><td align="right" class='awrnc'>120,953.23</td><td align="right" class='awrnc'>4,072.62</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>79.85</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>79.85</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>985.95</td><td align="right" class='awrc'>949.60</td><td align="right" class='awrc'>36.36</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>977.90</td><td align="right" class='awrnc'>944.98</td><td align="right" class='awrnc'>32.92</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>3.25</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.25</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>125,171.12</td><td align="right" class='awrc'>120,956.99</td><td align="right" class='awrc'>4,214.13</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>125,168.27</td><td align="right" class='awrnc'>120,956.97</td><td align="right" class='awrnc'>4,211.29</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>2.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.84</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>40,767,252</td><td align="right" headers="Requests IOs/s" class='awrc'>121,816.92</td><td align="right" headers="Requests Reads/s" class='awrc'>117,706.99</td><td align="right" headers="Requests Writes/s" class='awrc'>4,109.94</td><td align="right" headers="MB Total" class='awrclb'>321,032</td><td align="right" headers="MB IOMB/s" class='awrc'>959.28</td><td align="right" headers="MB ReadMB/s" class='awrc'>923.74</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>35.54</td><td align="right" class='awrc'>39.4M</td><td align="right" class='awrc'>467.49us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>39,386,334</td><td align="right" headers="Requests IOs/s" class='awrnc'>117,690.59</td><td align="right" headers="Requests Reads/s" class='awrnc'>117,690.59</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>307,625</td><td align="right" headers="MB IOMB/s" class='awrnc'>919.22</td><td align="right" headers="MB ReadMB/s" class='awrnc'>919.22</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>39.4M</td><td align="right" class='awrnc'>454.08us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>1,332,652</td><td align="right" headers="Requests IOs/s" class='awrc'>3,982.11</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>3,982.11</td><td align="right" headers="MB Total" class='awrclb'>10,762</td><td align="right" headers="MB IOMB/s" class='awrc'>32.16</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>32.16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>6,221</td><td align="right" headers="Requests IOs/s" class='awrnc'>18.59</td><td align="right" headers="Requests Reads/s" class='awrnc'>16.39</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.20</td><td align="right" headers="MB Total" class='awrnclb'>1,530</td><td align="right" headers="MB IOMB/s" class='awrnc'>4.57</td><td align="right" headers="MB ReadMB/s" class='awrnc'>4.52</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.05</td><td align="right" class='awrnc'>3431</td><td align="right" class='awrnc'>6.88ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>41,936</td><td align="right" headers="Requests IOs/s" class='awrc'>125.31</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>125.31</td><td align="right" headers="MB Total" class='awrclb'>1,113</td><td align="right" headers="MB IOMB/s" class='awrc'>3.33</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>3.33</td><td align="right" class='awrc'>26.3K</td><td align="right" class='awrc'>19.71ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>109</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.33</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.33</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>20,306,534</td><td align="right" headers="Requests IOs/s" class='awrct'>60,678.10</td><td align="right" headers="Requests Reads/s" class='awrct'>58,660.26</td><td align="right" headers="Requests Writes/s" class='awrct'>2,017.84</td><td align="right" headers="MB Total" class='awrclbt'>159,910</td><td align="right" headers="MB IOMB/s" class='awrct'>477.83</td><td align="right" headers="MB ReadMB/s" class='awrct'>460.36</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>17.47</td><td align="right" class='awrct'>19.6M</td><td align="right" class='awrct'>198.72us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>19,628,506</td><td align="right" headers="Requests IOs/s" class='awrnc'>58,652.08</td><td align="right" headers="Requests Reads/s" class='awrnc'>58,652.08</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>153,308</td><td align="right" headers="MB IOMB/s" class='awrnc'>458.10</td><td align="right" headers="MB ReadMB/s" class='awrnc'>458.10</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>19.6M</td><td align="right" class='awrnc'>185.04us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>655,344</td><td align="right" headers="Requests IOs/s" class='awrc'>1,958.24</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>1,958.24</td><td align="right" headers="MB Total" class='awrclb'>5,290</td><td align="right" headers="MB IOMB/s" class='awrc'>15.81</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>15.81</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>3,124</td><td align="right" headers="Requests IOs/s" class='awrnc'>9.33</td><td align="right" headers="Requests Reads/s" class='awrnc'>8.18</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.15</td><td align="right" headers="MB Total" class='awrnclb'>764</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.28</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.26</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.03</td><td align="right" class='awrnc'>1720</td><td align="right" class='awrnc'>7.21ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>19,507</td><td align="right" headers="Requests IOs/s" class='awrc'>58.29</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>58.29</td><td align="right" headers="MB Total" class='awrclb'>547</td><td align="right" headers="MB IOMB/s" class='awrc'>1.63</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>1.63</td><td align="right" class='awrc'>12.2K</td><td align="right" class='awrc'>21.16ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>53</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.16</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.16</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>20,460,718</td><td align="right" headers="Requests IOs/s" class='awrct'>61,138.82</td><td align="right" headers="Requests Reads/s" class='awrct'>59,046.72</td><td align="right" headers="Requests Writes/s" class='awrct'>2,092.10</td><td align="right" headers="MB Total" class='awrclbt'>161,122</td><td align="right" headers="MB IOMB/s" class='awrct'>481.45</td><td align="right" headers="MB ReadMB/s" class='awrct'>463.38</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>18.07</td><td align="right" class='awrct'>19.7M</td><td align="right" class='awrct'>734.88us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>19,757,828</td><td align="right" headers="Requests IOs/s" class='awrnc'>59,038.51</td><td align="right" headers="Requests Reads/s" class='awrnc'>59,038.51</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>154,317</td><td align="right" headers="MB IOMB/s" class='awrnc'>461.12</td><td align="right" headers="MB ReadMB/s" class='awrnc'>461.12</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>19.7M</td><td align="right" class='awrnc'>721.77us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>677,308</td><td align="right" headers="Requests IOs/s" class='awrc'>2,023.87</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>2,023.87</td><td align="right" headers="MB Total" class='awrclb'>5,472</td><td align="right" headers="MB IOMB/s" class='awrc'>16.35</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>16.35</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>3,097</td><td align="right" headers="Requests IOs/s" class='awrnc'>9.25</td><td align="right" headers="Requests Reads/s" class='awrnc'>8.21</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.04</td><td align="right" headers="MB Total" class='awrnclb'>766</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.29</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.27</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.02</td><td align="right" class='awrnc'>1711</td><td align="right" class='awrnc'>6.55ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>22,429</td><td align="right" headers="Requests IOs/s" class='awrc'>67.02</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>67.02</td><td align="right" headers="MB Total" class='awrclb'>566</td><td align="right" headers="MB IOMB/s" class='awrc'>1.69</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>1.69</td><td align="right" class='awrc'>14K</td><td align="right" class='awrc'>18.46ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>56</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.17</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.17</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>40,754,849</td><td align="right" headers="Requests IOs/s" class='awrc'>121,779.86</td><td align="right" headers="Requests Reads/s" class='awrc'>117,670.70</td><td align="right" headers="Requests Writes/s" class='awrc'>4,109.16</td><td align="right" headers="MB Total" class='awrclb'>321,292</td><td align="right" headers="MB IOMB/s" class='awrc'>960.05</td><td align="right" headers="MB ReadMB/s" class='awrc'>924.52</td><td align="right" headers="MB WriteMB/s" class='awrc'>35.53</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>525.63us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1778.74ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>40,706,508</td><td align="right" headers="Requests IOs/s" class='awrnc'>121,635.42</td><td align="right" headers="Requests Reads/s" class='awrnc'>117,653.87</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,981.55</td><td align="right" headers="MB Total" class='awrnclb'>318,652</td><td align="right" headers="MB IOMB/s" class='awrnc'>952.17</td><td align="right" headers="MB ReadMB/s" class='awrnc'>919.99</td><td align="right" headers="MB WriteMB/s" class='awrnc'>32.17</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>525.64us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>428.57us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>43,515</td><td align="right" headers="Requests IOs/s" class='awrc'>130.03</td><td align="right" headers="Requests Reads/s" class='awrc'>4.78</td><td align="right" headers="Requests Writes/s" class='awrc'>125.25</td><td align="right" headers="MB Total" class='awrclb'>2,566</td><td align="right" headers="MB IOMB/s" class='awrc'>7.67</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.34</td><td align="right" headers="MB WriteMB/s" class='awrc'>3.33</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>2.48ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1787.32ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,516</td><td align="right" headers="Requests IOs/s" class='awrnc'>13.49</td><td align="right" headers="Requests Reads/s" class='awrnc'>11.59</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.91</td><td align="right" headers="MB Total" class='awrnclb'>70</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.21</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.18</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>369.52us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>310</td><td align="right" headers="Requests IOs/s" class='awrc'>0.93</td><td align="right" headers="Requests Reads/s" class='awrc'>0.47</td><td align="right" headers="Requests Writes/s" class='awrc'>0.46</td><td align="right" headers="MB Total" class='awrclb'>4</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>331.21us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>20,298,928</td><td align="right" headers="Requests IOs/s" class='awrnct'>60,655.38</td><td align="right" headers="Requests Reads/s" class='awrnct'>58,637.68</td><td align="right" headers="Requests Writes/s" class='awrnct'>2,017.70</td><td align="right" headers="MB Total" class='awrnclbt'>160,138</td><td align="right" headers="MB IOMB/s" class='awrnct'>478.51</td><td align="right" headers="MB ReadMB/s" class='awrnct'>461.04</td><td align="right" headers="MB WriteMB/s" class='awrnct'>17.47</td><td align="right" headers="ServiceTime Small|Read" class='awrnclbt'>783.26us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrbt'>1773.20ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Data File</td><td align="right" headers="Requests Total" class='awrclb'>20,276,172</td><td align="right" headers="Requests IOs/s" class='awrc'>60,587.38</td><td align="right" headers="Requests Reads/s" class='awrc'>58,629.21</td><td align="right" headers="Requests Writes/s" class='awrc'>1,958.16</td><td align="right" headers="MB Total" class='awrclb'>158,828</td><td align="right" headers="MB IOMB/s" class='awrc'>474.60</td><td align="right" headers="MB ReadMB/s" class='awrc'>458.78</td><td align="right" headers="MB WriteMB/s" class='awrc'>15.82</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>783.28us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>500.00us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Log File</td><td align="right" headers="Requests Total" class='awrnclb'>20,298</td><td align="right" headers="Requests IOs/s" class='awrnc'>60.65</td><td align="right" headers="Requests Reads/s" class='awrnc'>2.38</td><td align="right" headers="Requests Writes/s" class='awrnc'>58.27</td><td align="right" headers="MB Total" class='awrnclb'>1,272</td><td align="right" headers="MB IOMB/s" class='awrnc'>3.80</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.17</td><td align="right" headers="MB WriteMB/s" class='awrnc'>1.63</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>3.16ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>1787.89ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Control File</td><td align="right" headers="Requests Total" class='awrclb'>2,272</td><td align="right" headers="Requests IOs/s" class='awrc'>6.79</td><td align="right" headers="Requests Reads/s" class='awrc'>5.80</td><td align="right" headers="Requests Writes/s" class='awrc'>0.99</td><td align="right" headers="MB Total" class='awrclb'>36</td><td align="right" headers="MB IOMB/s" class='awrc'>0.11</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>490.21us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>186</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.56</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.28</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.27</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>547.37us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>20,455,921</td><td align="right" headers="Requests IOs/s" class='awrct'>61,124.49</td><td align="right" headers="Requests Reads/s" class='awrct'>59,033.02</td><td align="right" headers="Requests Writes/s" class='awrct'>2,091.46</td><td align="right" headers="MB Total" class='awrclbt'>161,154</td><td align="right" headers="MB IOMB/s" class='awrct'>481.55</td><td align="right" headers="MB ReadMB/s" class='awrct'>463.48</td><td align="right" headers="MB WriteMB/s" class='awrct'>18.06</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>269.73us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1784.29ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>20,430,336</td><td align="right" headers="Requests IOs/s" class='awrnc'>61,048.04</td><td align="right" headers="Requests Reads/s" class='awrnc'>59,024.65</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,023.38</td><td align="right" headers="MB Total" class='awrnclb'>159,824</td><td align="right" headers="MB IOMB/s" class='awrnc'>477.57</td><td align="right" headers="MB ReadMB/s" class='awrnc'>461.21</td><td align="right" headers="MB WriteMB/s" class='awrnc'>16.36</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>269.73us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>23,217</td><td align="right" headers="Requests IOs/s" class='awrc'>69.37</td><td align="right" headers="Requests Reads/s" class='awrc'>2.40</td><td align="right" headers="Requests Writes/s" class='awrc'>66.98</td><td align="right" headers="MB Total" class='awrclb'>1,294</td><td align="right" headers="MB IOMB/s" class='awrc'>3.87</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.18</td><td align="right" headers="MB WriteMB/s" class='awrc'>1.69</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>1.80ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1786.74ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>2,244</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.71</td><td align="right" headers="Requests Reads/s" class='awrnc'>5.79</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.91</td><td align="right" headers="MB Total" class='awrnclb'>34</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.10</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>248.71us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>124</td><td align="right" headers="Requests IOs/s" class='awrc'>0.37</td><td align="right" headers="Requests Reads/s" class='awrc'>0.19</td><td align="right" headers="Requests Writes/s" class='awrc'>0.19</td><td align="right" headers="MB Total" class='awrclb'>2</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>.00ns</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	26.3% of Total Logical Reads:	   67,710,542</li>
<li class="awr">Captured Segments account for	39.0% of Total Physical Reads:	    40,479,465</li>
<li class="awr">Captured Segments account for	39.0% of Total Physical Read Requests:	    40,478,209</li>
<li class="awr">Captured Segments account for	39.0% of Total UnOptimized Read Requests:      40,478,209</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		    1</li>
<li class="awr">Captured Segments account for	34.4% of Total Physical Writes:       1,410,301</li>
<li class="awr">Captured Segments account for	35.4% of Total Physical Write Requests:       1,362,943</li>
<li class="awr">Captured Segments account for	42.4% of Total Direct Physical Writes:		   950</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  2</li>
<li class="awr">Captured Segments account for	15.2% of Total CR Blocks Received:	     1,581</li>
<li class="awr">Captured Segments account for	22.2% of Total Current Blocks Received: 	  9,329</li>
<li class="awr">Captured Segments account for	15.0% of Total CR Blocks Served:	   1,600</li>
<li class="awr">Captured Segments account for	21.9% of Total Current Blocks Served:		9,449</li>
<li class="awr">Captured Segments account for	56.6% of Total Global Cache Remote Grants:	 2,314,244</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>USER78</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>12,816</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>22.20</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER91</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73762</td><td align="right" class='awrnc'>73767</td><td align="right" class='awrnc'>11,424</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.79</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER73</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73675</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>11,328</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.62</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>11,184</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.37</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER47</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73538</td><td align="right" class='awrc'>73564</td><td align="right" class='awrc'>10,976</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.01</td></tr>
<tr><td class='awrnc'>gc cr blocks received</td><td class='awrnc'>USER13</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73373</td><td align="right" class='awrnc'>73381</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>28.74</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER9</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73356</td><td align="right" class='awrc'>73372</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>3.04</td><td align="right" class='awrc'>27.59</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER12</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73370</td><td align="right" class='awrnc'>73392</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>2.02</td><td align="right" class='awrnc'>18.39</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SYSSTAT</td><td class='awrc'>WRH$_SYSSTAT_1451622190_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73011</td><td align="right" class='awrc'>73011</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>16.09</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER42</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73517</td><td align="right" class='awrnc'>73534</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>9.20</td></tr>
<tr><td class='awrc'>gc cr blocks served</td><td class='awrc'>USER13</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>73381</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>28.74</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER9</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73356</td><td align="right" class='awrnc'>73372</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>27.59</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73370</td><td align="right" class='awrc'>73392</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>18.39</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SYSSTAT</td><td class='awrnc'>WRH$_SYSSTAT_1451622190_0</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>73011</td><td align="right" class='awrnc'>73011</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>16.09</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER42</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73517</td><td align="right" class='awrc'>73534</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>9.20</td></tr>
<tr><td class='awrnc'>gc cu blocks received</td><td class='awrnc'>USER80</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73710</td><td align="right" class='awrnc'>73722</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>1.84</td><td align="right" class='awrnc'>21.74</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER91</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73762</td><td align="right" class='awrc'>73767</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>21.24</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER66</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73649</td><td align="right" class='awrnc'>73661</td><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>20.61</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER78</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>152</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>19.22</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER75</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73687</td><td align="right" class='awrnc'>73694</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>17.19</td></tr>
<tr><td class='awrc'>gc cu blocks served</td><td class='awrc'>USER80</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73710</td><td align="right" class='awrc'>73722</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>1.82</td><td align="right" class='awrc'>21.74</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER91</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73762</td><td align="right" class='awrnc'>73767</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>21.24</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER66</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73649</td><td align="right" class='awrc'>73661</td><td align="right" class='awrc'>163</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>20.61</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73698</td><td align="right" class='awrnc'>73719</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>19.22</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER75</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73687</td><td align="right" class='awrc'>73694</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>17.19</td></tr>
<tr><td class='awrnc'>gc remote grants</td><td class='awrnc'>USER256</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74580</td><td align="right" class='awrnc'>74596</td><td align="right" class='awrnc'>35,622</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>21.34</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER15</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73383</td><td align="right" class='awrc'>73415</td><td align="right" class='awrc'>34,897</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>20.91</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER175</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74184</td><td align="right" class='awrnc'>74204</td><td align="right" class='awrnc'>32,751</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>19.62</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER169</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74156</td><td align="right" class='awrc'>74162</td><td align="right" class='awrc'>32,165</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>19.27</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER182</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74214</td><td align="right" class='awrnc'>74236</td><td align="right" class='awrnc'>31,482</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>18.86</td></tr>
<tr><td class='awrc'>logical reads</td><td class='awrc'>USER73</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73675</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>377,632</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>20.51</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>375,664</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>20.41</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER47</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73538</td><td align="right" class='awrc'>73564</td><td align="right" class='awrc'>366,112</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>19.89</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73566</td><td align="right" class='awrnc'>73586</td><td align="right" class='awrnc'>360,832</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>19.60</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER1</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>360,672</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>19.59</td></tr>
<tr><td class='awrnc'>physical reads</td><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73698</td><td align="right" class='awrnc'>73719</td><td align="right" class='awrnc'>339,903</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>20.12</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER67</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>338,704</td><td align="right" class='awrc'>0.84</td><td align="right" class='awrc'>20.04</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73566</td><td align="right" class='awrnc'>73586</td><td align="right" class='awrnc'>337,660</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>19.98</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER1</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>336,961</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>19.94</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>336,523</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>19.92</td></tr>
<tr><td class='awrc'>physical read requests</td><td class='awrc'>USER78</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>339,903</td><td align="right" class='awrc'>0.84</td><td align="right" class='awrc'>20.12</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>338,704</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>20.04</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73566</td><td align="right" class='awrc'>73586</td><td align="right" class='awrc'>337,660</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>19.98</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73299</td><td align="right" class='awrnc'>73301</td><td align="right" class='awrnc'>336,961</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>19.94</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER7</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>336,523</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'>physical writes</td><td class='awrnc'>USER73</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73675</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>10,743</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.17</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER57</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>10,681</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.06</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER47</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73538</td><td align="right" class='awrnc'>73564</td><td align="right" class='awrnc'>10,631</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.96</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER78</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>10,610</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73299</td><td align="right" class='awrnc'>73301</td><td align="right" class='awrnc'>10,591</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.89</td></tr>
<tr><td class='awrc'>physical writes direct</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_1451622190_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>393</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>97.52</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes direct</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P223</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.48</td></tr>
<tr><td class='awrc'>physical write requests</td><td class='awrc'>USER78</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>10,539</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>20.12</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>10,488</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>20.03</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER1</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>10,457</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>19.97</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73566</td><td align="right" class='awrnc'>73586</td><td align="right" class='awrnc'>10,452</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>19.96</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER7</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>10,436</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>19.93</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>422</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>1,208</td><td align="right" class='awrc'>13.25</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>195</td><td align="right" class='awrc'>1,151</td><td align="right" class='awrc'>1,151</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>13.13</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>28.28</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>QUEUE</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>790</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>3,645</td><td align="right" class='awrc'>35.64</td><td align="right" class='awrc'>13,316,042</td><td align="right" class='awrc'>-0.19</td><td align="right" class='awrc'>185</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>572</td><td align="right" class='awrnc'>83.22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>473</td><td align="right" class='awrc'>95.77</td><td align="right" class='awrc'>473</td><td align="right" class='awrc'>95.77</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>3,078</td><td align="right" class='awrnc'>20.14</td><td align="right" class='awrnc'>10,545</td><td align="right" class='awrnc'>14.05</td><td align="right" class='awrnc'>314</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4,133</td><td align="right" class='awrnc'>7,290</td><td align="right" class='awrnc'>7,290</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>4,174.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>4,174.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>1,306.16</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,991.34</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>3,375.21</td><td align="right" headers="PGAMemAlloc End" class='awrc'>2,254.19</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>417.39</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>417.39</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>4,174.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>4,174.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>1,696.89</td><td align="right" headers="AutoPGATarget End" class='awrnc'>2,200.75</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>2,774.15</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>2,095.21</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>417.39</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>417.39</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>336.19</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.51</td><td align="right" class='awrc'>5.07</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>134</td><td align="right" class='awrc'>134</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1882.67</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.43</td><td align="right" class='awrnc'>5.41</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>425</td><td align="right" class='awrnc'>425</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>83.36</td><td align="right" class='awrc'>80.96</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>297</td><td align="right" class='awrc'>295</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>49.66</td><td align="right" class='awrnc'>36.55</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>226</td><td align="right" class='awrnc'>191</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2351.88</td><td align="right" class='awrc'>117.50</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>11.18</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>1082</td><td align="right" class='awrc'>1045</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>153.75</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.75</td><td align="right" class='awrnc'>7.81</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>41</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1060.22</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.90</td><td align="right" class='awrc'>6.77</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>272</td><td align="right" class='awrc'>272</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>12.08</td><td align="right" class='awrnc'>10.79</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>142</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>4.24</td><td align="right" class='awrc'>2.26</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>41</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1230.29</td><td align="right" class='awrnc'>13.06</td><td align="right" class='awrnc'>7.79</td><td align="right" class='awrnc'>15.09</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>530</td><td align="right" class='awrnc'>496</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>302.06</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>6.05</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>151</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1602.02</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.28</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>374</td><td align="right" class='awrnc'>374</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>55.89</td><td align="right" class='awrc'>53.91</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>246</td><td align="right" class='awrc'>244</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>46.32</td><td align="right" class='awrnc'>35.05</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>146</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2006.30</td><td align="right" class='awrc'>88.96</td><td align="right" class='awrc'>6.77</td><td align="right" class='awrc'>13.55</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>947</td><td align="right" class='awrc'>915</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>237.88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.06</td><td align="right" class='awrnc'>10.22</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>47</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1077.59</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.99</td><td align="right" class='awrc'>8.07</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>270</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>5.57</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>140</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>5.07</td><td align="right" class='awrc'>2.92</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>37</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1327.32</td><td align="right" class='awrnc'>8.50</td><td align="right" class='awrnc'>9.17</td><td align="right" class='awrnc'>18.67</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>531</td><td align="right" class='awrnc'>494</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p30sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199,	+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P30S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p30sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>805306368000</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p30sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>4376756224</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>5120</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>*</td><td class='awrc'>21474836480</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>*</td><td class='awrnc'>3221225472</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">thread</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>1</td><td class='awrc'>UNDOTBS1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">undo_tablespace</div></td><td class='awrnc'>2</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0fxpq9z2j2zyu"></a>0fxpq9z2j2zyu</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '191';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrnc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0u5gbpqpjtcbb"></a>0u5gbpqpjtcbb</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '182';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="311ar1kvtsj1u"></a>311ar1kvtsj1u</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '190';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="47rm3ra5qrvzk"></a>47rm3ra5qrvzk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '256';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4c3z7x1gkcdup"></a>4c3z7x1gkcdup</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="53saa2zkr6wc3"></a>53saa2zkr6wc3</td><td class='awrc'><pre_sqltext class="awr">select intcol#, nvl(pos#, 0), col#, nvl(spare1, 0) from ccol$ where con#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5m9kb3cpp792u"></a>5m9kb3cpp792u</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '174';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5t5va0wzy46cz"></a>5t5va0wzy46cz</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '87';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6thask7s4zxhn"></a>6thask7s4zxhn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '186';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7a4r7h7dtp9uk"></a>7a4r7h7dtp9uk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '96';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7s9avvsud7a92"></a>7s9avvsud7a92</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8td9ta6n97dbm"></a>8td9ta6n97dbm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '193';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8wqq6m9va6xs1"></a>8wqq6m9va6xs1</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '176';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9tgj4g8y4rwy8"></a>9tgj4g8y4rwy8</td><td class='awrc'><pre_sqltext class="awr">select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr,  NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="akay050h1s6c4"></a>akay050h1s6c4</td><td class='awrc'><pre_sqltext class="awr">SELECT MAX(CUSTID) FROM CF1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="b2rbrgpu3jxh1"></a>b2rbrgpu3jxh1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b86uad51uut0p"></a>b86uad51uut0p</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhydnmhhkhhdy"></a>bhydnmhhkhhdy</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '183';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="c45q6fupzf7tg"></a>c45q6fupzf7tg</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '192';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cbkautz3zg33t"></a>cbkautz3zg33t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="djbfhkquyuyab"></a>djbfhkquyuyab</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '47';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f7s68cgfrpfx5"></a>f7s68cgfrpfx5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '79';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f90ww8cyy5gy0"></a>f90ww8cyy5gy0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '67';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fcfy9turtx376"></a>fcfy9turtx376</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '58';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fgw43xkd3k8vd"></a>fgw43xkd3k8vd</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fpt7knftv3a5x"></a>fpt7knftv3a5x</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '73';
v_update_pct PLS_INTEGER := '3';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>6406</td><td align="right" class='awrc'>83.56</td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>50.88</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>48.31</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">6406</div></td><td align="right" class='awrnc'><div class="hidden">83.56306892067620286085825747724317295189</div></td>
<td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>27.32</td><td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>15.53</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">6406</div></td><td align="right" class='awrc'><div class="hidden">83.56306892067620286085825747724317295189</div></td>
<td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>5.29</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>3.09</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>558</td><td align="right" class='awrnc'>7.97</td>
<td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>2.74</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>2.74</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">558</div></td><td align="right" class='awrc'><div class="hidden">7.9713914174252275682704811443433029909</div></td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>1.78</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>1.70</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">558</div></td><td align="right" class='awrnc'><div class="hidden">7.9713914174252275682704811443433029909</div></td>
<td class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>1.22</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>1.22</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>6406</td><td align="right" class='awrc'>83.56</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>63.22</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>48.31</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">6406</div></td><td align="right" class='awrnc'><div class="hidden">83.56306892067620286085825747724317295189</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>18.58</td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>15.53</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">6406</div></td><td align="right" class='awrc'><div class="hidden">83.56306892067620286085825747724317295189</div></td>
<td class='awrc'>SELECT STATEMENT</td><td align="right" class='awrc'>1.53</td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>1.53</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>558</td><td align="right" class='awrnc'>7.97</td>
<td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>6.57</td><td class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>2.74</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>8.41</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>8.36</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>52.67</td><td align="right" class='awrc'>121.26</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>27.76</td><td align="right" class='awrnc'>63.92</td></tr>
<tr><td scope="row" class='awrc'>CPU + Wait for CPU</td><td class='awrc'>CPU</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>7.00</td><td align="right" class='awrc'>16.11</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td class='awrnc'>System I/O</td><td class='awrnc'>BACKGROUND</td>
<td align="right" class='awrnc'>4.25</td><td align="right" class='awrnc'>9.79</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>2.76</td><td align="right" class='awrc'>6.35</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>52.68</td><td align="right" class='awrc'>&quot;9&quot;,&quot;128484619&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>4.25</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrnc'>1.78</td>
<td class='awrnc'>requests</td><td class='awrnc'>interrupt</td><td class='awrnc'>timeout</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>09:17:49   (2.2 min)</td><td align="right" class='awrc'>3,851</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,995</td><td align="right" class='awrc'>25.94</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:17:49   (2.2 min)</div></td><td align="right" class='awrnc'><div class="hidden">3851</div></td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>1,100</td><td align="right" class='awrnc'>14.30</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:17:49   (2.2 min)</div></td><td align="right" class='awrc'><div class="hidden">3851</div></td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>320</td><td align="right" class='awrc'>4.16</td></tr>
<tr><td align="right" class='awrnc'>09:20:00   (3.4 min)</td><td align="right" class='awrnc'>3,839</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,056</td><td align="right" class='awrnc'>26.74</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:20:00   (3.4 min)</div></td><td align="right" class='awrc'><div class="hidden">3839</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1,035</td><td align="right" class='awrc'>13.46</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:20:00   (3.4 min)</div></td><td align="right" class='awrnc'><div class="hidden">3839</div></td><td class='awrnc'>CPU + Wait for CPU</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>4.07</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:1451622190_46</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:1451622190_46&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 45 to 46.
Time period starts at 17-FEB-20 09.17.49 AM
Time period ends at 17-FEB-20 09.23.24 AM

Analysis Target
---------------
Database &apos;P30SDB&apos; with DB ID 1451622190.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 68323 seconds.
The average number of active sessions was 203.95.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       203.95 | 100	   1
2  Top SQL Statements	      200.37 | 98.24	   2
3  &quot;User I/O&quot; wait Class	117.69 | 57.7	     0
4  Global Cache Messaging     65.38 | 32.06	   1
5  Buffer Busy - Hot Objects  58.16 | 28.52	   0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 204.56 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 54310 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 5338 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  59.05	     ADDM:1451622190_1_46
    2	    p30sdb2  40.95	     ADDM:1451622190_2_46

   Recommendation 1: Host Configuration
   Estimated benefit is 203.95 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 65.38 active sessions, 32.06% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 67.75 active sessions, 33.22% of total activity.


Finding 2: Top SQL Statements
Impact is 200.97 active sessions, 98.24% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  59.72	     ADDM:1451622190_1_46
    2	    p30sdb2  40.28	     ADDM:1451622190_2_46

   Recommendation 1: SQL Tuning
   Estimated benefit is 182.91 active sessions, 89.68% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 12295996 times
      and had an average elapsed time of 0.0047 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 15.75 active sessions, 7.72% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 90% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 380305 times and
      had an average elapsed time of 0.013 seconds.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 118.04 active sessions, 57.7% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  63.93	     ADDM:1451622190_1_46
    2	    p30sdb2  36.07	     ADDM:1451622190_2_46

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 65.58 active sessions, 32.06% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  54 	     ADDM:1451622190_1_46
    2	    p30sdb2  46 	     ADDM:1451622190_2_46

   Recommendation 1: Application Analysis
   Estimated benefit is 65.38 active sessions, 32.06% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 91% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 67.75 active sessions, 33.22% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 58.34 active sessions, 28.52% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  80.33	     ADDM:1451622190_2_46
    1	    p30sdb1  19.67	     ADDM:1451622190_1_46

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 58.16 active sessions, 28.52% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 65.38 active sessions, 32.06% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 67.75 active sessions, 33.22% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p30sdb1  mcracpoc1.example.com  120.78	     59.05
    2	    p30sdb2  mcracpoc2.example.com  83.77	     40.95

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.17-09:23:40 : Compressing file: "awr.html".
NOTIFY  : 2020.02.17-09:23:40 : Compressing file: "awr_rac.html".
