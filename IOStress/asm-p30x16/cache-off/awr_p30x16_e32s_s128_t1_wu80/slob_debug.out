
































































































































PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 10:24:57 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 10:24:57 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Wed Feb 12 2020 10:24:47 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Wed Feb 12 2020 10:24:57 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		1 p60sdb1

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: text

   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		1 p60sdb1

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report





Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Type Specified: html


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
  3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex


Using 3889879926 for database Id
Using 3889879926 for database Id
Using	       1 for instance number
Using	       1 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb1      P60SDB		 48  12 Feb 2020 09:57	  1
				 49  12 Feb 2020 09:59	  1
				 50  12 Feb 2020 10:10	  1
				 51  12 Feb 2020 10:14	  1
				 52  12 Feb 2020 10:24	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 51

End   Snapshot Id specified: 52




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_51_52.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.

Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb1      P60SDB		 48  12 Feb 2020 09:57	  1
				 49  12 Feb 2020 09:59	  1
				 50  12 Feb 2020 10:10	  1
				 51  12 Feb 2020 10:14	  1
				 52  12 Feb 2020 10:24	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 51

End   Snapshot Id specified: 52



Using the report name awr.txt

Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_51_52.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.html

<html lang="en"><head><title>AWR Report for DB: P60SDB, Inst: p60sdb1, Snaps: 51-52</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P60SDB</td><td align="right" class='awrnc'>3889879926</td><td class='awrnc'>p60sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p60sdb1</td><td align="right" class='awrnc'>1</td><td class='awrnc'>12-Feb-20 09:46</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc1.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>  16</td><td align="right" class='awrnc'>	1</td><td align="right" class='awrnc'>	251.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>51</td><td align="center" class='awrnc'>12-Feb-20 10:14:13</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>      1.8</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>52</td><td align="center" class='awrc'>12-Feb-20 10:24:47</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>	 .7</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		   10.58 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	       623.30 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>58.99</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_1_52</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>58.99</td><td align="right" class='awrnc'>99.79</td><td scope="row" class='awrnc'>ADDM:3889879926_1_52</td><td class='awrnc'>12-Feb-20 10:14</td><td class='awrnc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>58.99</td><td align="right" class='awrc'>79.22</td><td scope="row" class='awrc'>ADDM:3889879926_1_52</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>58.99</td><td align="right" class='awrnc'>13.79</td><td scope="row" class='awrnc'>ADDM:3889879926_1_52</td><td class='awrnc'>12-Feb-20 10:14</td><td class='awrnc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>58.99</td><td align="right" class='awrc'>9.67</td><td scope="row" class='awrc'>ADDM:3889879926_1_52</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	      58.9</td><td align="right" class='awrc'>		     1.1</td><td align="right" class='awrc'>	  0.17</td><td align="right" class='awrc'>     68.00</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		4.0</td><td align="right" class='awrnc'>	       0.1</td><td align="right" class='awrnc'>      0.01</td><td align="right" class='awrnc'>	    4.55</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      2.2</td><td align="right" class='awrc'>		    0.0</td><td align="right" class='awrc'>	 0.01</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	3,344,131.3</td><td align="right" class='awrnc'>	  64,947.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	     28,725.3</td><td align="right" class='awrc'>	      557.9</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		8,430.8</td><td align="right" class='awrnc'>		 163.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      26,956.3</td><td align="right" class='awrc'>	       523.5</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  4,229.8</td><td align="right" class='awrnc'>		    82.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		26,955.0</td><td align="right" class='awrc'>		 523.5</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    4,051.6</td><td align="right" class='awrnc'>	      78.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       210.6</td><td align="right" class='awrc'>	       4.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   33.1</td><td align="right" class='awrnc'>		   0.6</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		 6.6</td><td align="right" class='awrc'>	       0.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		14.4</td><td align="right" class='awrnc'>		0.3</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       0.9</td><td align="right" class='awrc'>		     0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		   7.3</td><td align="right" class='awrnc'>		  0.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      0.1</td><td align="right" class='awrc'>		    0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.3</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.1</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>		 351.0</td><td align="right" class='awrc'>		 6.8</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>		51.5</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		 99.99</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	    6.16</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 99.93</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 99.20</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      97.92</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.98</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     46.05</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.99</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>3,099,030</td><td align="right" class='awrc'>23.5K</td><td align="right" class='awrc'>7.59ms</td><td align="right" class='awrc'>62.9</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>184,668</td><td align="right" class='awrnc'>6084.2</td><td align="right" class='awrnc'>32.95ms</td><td align="right" class='awrnc'>16.3</td><td class='awrnc'>User I/O</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2504.7</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.7</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>384,078</td><td align="right" class='awrnc'>2172.2</td><td align="right" class='awrnc'>5.66ms</td><td align="right" class='awrnc'>5.8</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>58,389</td><td align="right" class='awrc'>1180.4</td><td align="right" class='awrc'>20.22ms</td><td align="right" class='awrc'>3.2</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>139,096</td><td align="right" class='awrnc'>877.7</td><td align="right" class='awrnc'>6.31ms</td><td align="right" class='awrnc'>2.3</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>563.8</td><td align="right" class='awrc'>524.92ms</td><td align="right" class='awrc'>1.5</td><td class='awrc'>Concurrency</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>68,513</td><td align="right" class='awrnc'>413.6</td><td align="right" class='awrnc'>6.04ms</td><td align="right" class='awrnc'>1.1</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>66,765</td><td align="right" class='awrc'>296.9</td><td align="right" class='awrc'>4.45ms</td><td align="right" class='awrc'>.8</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>316</td><td align="right" class='awrnc'>292.2</td><td align="right" class='awrnc'>924.83ms</td><td align="right" class='awrnc'>.8</td><td class='awrnc'>Configuration</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>3,480,985</td><td align="right" class='awrc'>29,650</td><td align="right" class='awrc'>8.52ms</td><td align="right" class='awrc'>79.3</td><td align="right" class='awrc'>46.7</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>741,320</td><td align="right" class='awrnc'>5,465</td><td align="right" class='awrnc'>7.37ms</td><td align="right" class='awrnc'>14.6</td><td align="right" class='awrnc'>8.6</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,505</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.7</td><td align="right" class='awrc'>3.9</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>288,606</td><td align="right" class='awrnc'>1,650</td><td align="right" class='awrnc'>5.72ms</td><td align="right" class='awrnc'>4.4</td><td align="right" class='awrnc'>2.6</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>115,411</td><td align="right" class='awrc'>761</td><td align="right" class='awrc'>6.59ms</td><td align="right" class='awrc'>2.0</td><td align="right" class='awrc'>1.2</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>5,694</td><td align="right" class='awrnc'>568</td><td align="right" class='awrnc'>99.67ms</td><td align="right" class='awrnc'>1.5</td><td align="right" class='awrnc'>0.9</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>866</td><td align="right" class='awrc'>358</td><td align="right" class='awrc'>412.85ms</td><td align="right" class='awrc'>1.0</td><td align="right" class='awrc'>0.6</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>19.16ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>21.31ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Administrative</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>100.98ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Network</td><td align="right" class='awrc'>1,145</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>88.49us</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>   16</td><td align="right" class='awrc'>	 1</td><td align="right" class='awrc'>	21.65</td><td align="right" class='awrc'>  19.43</td><td align="right" class='awrc'>   7.4</td><td align="right" class='awrc'>	12.4</td><td align="right" class='awrc'>  37.0</td><td align="right" class='awrc'>  71.9</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 20.9</td><td align="right" class='awrc'>      74.3</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      31,098.8</td><td align="right" class='awrc'>	    26,964.4</td><td align="right" class='awrc'>	   4,134.4</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   31,006.6</td><td align="right" class='awrnc'>	  26,955.0</td><td align="right" class='awrnc'> 	  4,051.6</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		   82.7</td><td align="right" class='awrnc'>		   2.6</td><td align="right" class='awrnc'>		 80.1</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     249.7</td><td align="right" class='awrc'>		   213.0</td><td align="right" class='awrc'>		  36.7</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  243.6</td><td align="right" class='awrnc'>		 210.6</td><td align="right" class='awrnc'>		 33.1</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		5.6</td><td align="right" class='awrnc'>	       2.3</td><td align="right" class='awrnc'> 	      3.3</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 31,186.2</td><td align="right" class='awrc'>	       26,956.3</td><td align="right" class='awrc'>	      4,229.8</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   31,185.4</td><td align="right" class='awrnc'>	  26,956.3</td><td align="right" class='awrnc'> 	  4,229.1</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    0.7</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		0.7</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'>   257,947.8</td><td align="right" class='awrc'>   257,947.8</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	 9,664.0</td><td align="right" class='awrnc'>	  9,664.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     2,100.1</td><td align="right" class='awrc'>     1,647.3</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    4.56</td><td align="right" class='awrc'>	 4.39</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	 7,872M</td><td align="right" class='awrnc'>	 7,872M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   1,071M</td><td align="right" class='awrc'>	  1,087M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	 20,612K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		87.95</td><td align="right" class='awrc'>	     86.12</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      87.08</td><td align="right" class='awrnc'>	    80.18</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      82.71</td><td align="right" class='awrc'> 	   81.01</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>37,396.22</td><td align="right" class='awrc'>99.99</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>2,504.75</td><td align="right" class='awrnc'>6.70</td><td align="right" class='awrnc'>64.28</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>14.26</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse elapsed time</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>connection management call elapsed time</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>repeated bind elapsed time</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>37,398.28</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background elapsed time</td><td align="right" class='awrc'>3,168.97</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background cpu time</td><td align="right" class='awrnc'>1,392.01</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>35.72</td></tr>
<tr><td scope="row" class='awrc'>total CPU time</td><td align="right" class='awrc'>3,896.75</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>126,813,159,424</td><td align="right" class='awrc'>127,960,059,904</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,712,009,216</td><td align="right" class='awrnc'>1,704,935,424</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>524,778</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>1,343,242</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>691,726</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SYS_TIME</td><td align="right" class='awrnc'>231,674</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>USER_TIME</td><td align="right" class='awrc'>138,375</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LOAD</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>19</td></tr>
<tr><td scope="row" class='awrc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrc'>270,477,918,208</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPUS</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_CORES</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_SOCKETS</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrc'>87,380</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>6,291,456</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrnc'>16,384</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 10:14:13</td><td align="right" class='awrc'>21.65</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>12-Feb 10:24:47</td><td align="right" class='awrnc'>19.43</td><td align="right" class='awrnc'>28.09</td><td align="right" class='awrnc'>7.41</td><td align="right" class='awrnc'>12.40</td><td align="right" class='awrnc'>71.91</td><td align="right" class='awrnc'>37.03</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  104.2%  of Total DB time	37,398.28 (s)</li>
<li class="awr">Total FG Wait Time:	       36,462.63 (s)  DB CPU time:	 2,504.75 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>3,284,482</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>29,627</td><td align="right" class='awrc'>9.02ms</td><td align="right" class='awrc'>79.22</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>740,353</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5,455</td><td align="right" class='awrnc'>7.37ms</td><td align="right" class='awrnc'>14.59</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,505</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.70</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>1,484</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>564</td><td align="right" class='awrnc'>380.20ms</td><td align="right" class='awrnc'>1.51</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>15,516</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>451</td><td align="right" class='awrc'>29.04ms</td><td align="right" class='awrc'>1.20</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>784</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>356</td><td align="right" class='awrnc'>453.82ms</td><td align="right" class='awrnc'>0.95</td></tr>
<tr><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>1,092</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>8.81ms</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.90ms</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Administrative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.53ms</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>183</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11.67us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>3,099,030</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>23,536</td><td align="right" class='awrc'>7.59ms</td><td align="right" class='awrc'>94.86</td><td align="right" class='awrc'>62.93</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>184,668</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6,084</td><td align="right" class='awrnc'>32.95ms</td><td align="right" class='awrnc'>5.65</td><td align="right" class='awrnc'>16.27</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>384,078</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,172</td><td align="right" class='awrc'>5.66ms</td><td align="right" class='awrc'>11.76</td><td align="right" class='awrc'>5.81</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>58,389</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,180</td><td align="right" class='awrnc'>20.22ms</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>3.16</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>139,096</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>878</td><td align="right" class='awrc'>6.31ms</td><td align="right" class='awrc'>4.26</td><td align="right" class='awrc'>2.35</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1,074</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>564</td><td align="right" class='awrnc'>524.92ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>1.51</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>68,513</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>414</td><td align="right" class='awrc'>6.04ms</td><td align="right" class='awrc'>2.10</td><td align="right" class='awrc'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>66,765</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>297</td><td align="right" class='awrnc'>4.45ms</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>0.79</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>292</td><td align="right" class='awrc'>924.83ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.78</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>422</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>224</td><td align="right" class='awrnc'>530.59ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.60</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>285</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>541.74ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>2,425</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>61.17ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.40</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>2,630</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>48.66ms</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>1,495</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>67.80ms</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>468</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>135.80ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>18,022</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>2.96ms</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>0.14</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>183</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>209.13ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>2,553</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>14.98ms</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>1,087</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>27.27ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>132.73ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>183.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>892</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6.47ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>Data file init write</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>54.00ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>480</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>7.98ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>21.87ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>1,405</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1.83ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>1,077</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.87ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>820</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2.07ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>183</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7.31ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file single write</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.67ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>15.28ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>209.91ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>16.90ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>395</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.80ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>618.62ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>26.63ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: CT - state</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>14.34ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>1,445</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>394.17us</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9.95ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10.23ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.87ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>305</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>902.15us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>719.63us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.71ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>367</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>414.77us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.48ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.98ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>702.23us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.76ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>491</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>142.11us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.20ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>186</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>344.70us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>356.42us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>318.78us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>391</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>115.27us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>155</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>247.55us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>711</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>44.08us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.72ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>datafile move cleanup during resize</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>572.93us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>426</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46.40us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.00ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39.56us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: RP - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.02ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>192.28us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>914.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.32ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.97ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: MV - datafile move</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.53ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.14ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.67ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>865.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>837.33us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>301.88us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges enter server mode</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11.98us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.36us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges ipc enter server mode</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>34.54us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: SW - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.41ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.01ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1,055</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3,165</td><td align="right" class='awrc'>3000.06ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>76.36ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>59.15ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>171</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.67ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>620.96us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>195,859</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>934</td><td align="right" class='awrc'>4.77ms</td><td align="right" class='awrc'>5.99</td><td align="right" class='awrc'>29.47</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>26,644</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>677</td><td align="right" class='awrnc'>25.41ms</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>21.37</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>11,533</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>15.81ms</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>5.75</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>6,647</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>7.88ms</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>1.65</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>3,841</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>5.25ms</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.64</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>1,447</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>12.46ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.57</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>418</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>39.75ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.52</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>841</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>10.27ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>28.07ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>2,974</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>2.64ms</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.25</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1,896</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>3.90ms</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1,292</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>5.60ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>193,744</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>35.02us</td><td align="right" class='awrc'>5.93</td><td align="right" class='awrc'>0.21</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>3,750</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>1.70ms</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.20</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>102.33ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1,191</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2.05ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>549</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3.57ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>35.29ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>3,519</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>504.16us</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>565.08ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>6.04ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>226</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>6.97ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>41,757</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>33.93us</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>349.72ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>469</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.88ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>432</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.11ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>22.15ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>45.88ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>77.18ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>79</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12.31ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.80ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>1,850</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>518.01us</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>346</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.11ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>60,401</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10.77us</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>720</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>900.23us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>47.05ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>228</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2.47ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7.39ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.15ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>465.70ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>461.77ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>64.54ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>459</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>698.53us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>JS kgl get object wait</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>149.70ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.10ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.98ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>7,391</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>31.38us</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.51ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>32.58ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6,301</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>35.66us</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>445</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>444.00us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>687.99us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>4,001</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39.64us</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.72ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.94ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>218</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>524.89us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.07ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.99ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>894</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>110.36us</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.13ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>900.05us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>762.90us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.10ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.21ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.26ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.13ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>3,368</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11.23us</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.89ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>437.96us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>638</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>50.62us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10.75ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>406.57us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>865.08us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>388.01us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27.90ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>468.80us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.03ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.93ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>508</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>38.13us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>895.81us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.37ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.90ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.22ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13.19ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.05ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>373.56us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.26ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.88ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>349.95us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>432.36us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.98ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.90ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>309.33us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>130.68us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>376.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>831.60us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>587.40us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.35ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: MW - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.41ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>395.83us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>395.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>656.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>907.50us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges ipc enter server mode</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.95us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>297.20us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.19ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>551.50us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.03ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40,978</td><td align="right" class='awrc'>1707.41 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>9,513</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>37,111</td><td align="right" class='awrnc'>3901.10ms</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>91,637</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>16,451</td><td align="right" class='awrc'>179.53ms</td><td align="right" class='awrc'>2.80</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>8,318</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>4,525</td><td align="right" class='awrnc'>544.05ms</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>969</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,896</td><td align="right" class='awrc'>1956.33ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>187,976</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,893</td><td align="right" class='awrnc'>10.07ms</td><td align="right" class='awrnc'>5.75</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>66,650</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>1,884</td><td align="right" class='awrc'>28.26ms</td><td align="right" class='awrc'>2.04</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>2,032,416</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,341</td><td align="right" class='awrnc'>659.57us</td><td align="right" class='awrnc'>62.21</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>421</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,263</td><td align="right" class='awrc'>3000.00ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR sleep</td><td align="right" class='awrnc'>4,199</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,262</td><td align="right" class='awrnc'>300.50ms</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>33,817</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,261</td><td align="right" class='awrc'>37.28ms</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>8,664</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>1,260</td><td align="right" class='awrnc'>145.48ms</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>60.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>212</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>634</td><td align="right" class='awrnc'>2988.52ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>211</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>633</td><td align="right" class='awrc'>3000.13ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pman timer</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>633</td><td align="right" class='awrnc'>2999.75ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>632</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>632</td><td align="right" class='awrc'>1000.23ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>632</td><td align="right" class='awrnc'>57.44 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>2,718</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>631</td><td align="right" class='awrc'>232.19ms</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>519</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>1214.45ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>360</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>630</td><td align="right" class='awrc'>1750.48ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>30.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>6,355</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>628</td><td align="right" class='awrc'>98.78ms</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>616</td><td align="right" class='awrnc'>28.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>616</td><td align="right" class='awrc'>14.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>60.01 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>300.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>600.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group idle</td><td align="right" class='awrc'>19,377</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>526</td><td align="right" class='awrc'>27.13ms</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>jobq slave wait</td><td align="right" class='awrnc'>280</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>494.02ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>61.87ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.47ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>801.77us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>1,065</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>40.79us</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>448.30us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6293</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>85.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>193.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>ASM background starting</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>3991</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>19.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.8</td></tr>
<tr><td scope="row" class='awrc'>AWR Flush</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>7382</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>76.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>64</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>35.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>157</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>78.3</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>192</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>68.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>17.2</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>228</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.0</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>1492</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.0</td></tr>
<tr><td scope="row" class='awrnc'>Data file init write</td><td align="right" class='awrnc'>80</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>893</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>939</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.3</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>84.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>89.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1896</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>38.2</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>938</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>40.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>2.3</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>696</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>81.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>6.3</td></tr>
<tr><td scope="row" class='awrnc'>JS kgl get object wait</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>1924</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>33.1</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1673</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>41.3</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>421</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>11.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>252</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>40.1</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>6613</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.0</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>903</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>28.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>36.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>3.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>92.3</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>76.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>42.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>208</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>89.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>54</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>83</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>75.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>1078</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.5</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>404</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>4738</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.2</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>datafile move cleanup during resize</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>62.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>37.5</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>60.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>92.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>184.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>195.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.5</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>74</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>3.1M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file single write</td><td align="right" class='awrc'>80</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>80</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>65.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>3.8</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.5</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>30</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>126</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>2935</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.5</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>329</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>93.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: MV - datafile move</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: MW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>29</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>89.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>82.7</td></tr>
<tr><td scope="row" class='awrc'>enq: RP - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: SW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>2633</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>43.4</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>143</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>88.1</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>286</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>82</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>96.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>18K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>86.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>138.9K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.1</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>183</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>58.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>186</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>482</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.4</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>1582</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>86.6</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>423</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>68.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.2</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>381.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>2554</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>66.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.8</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>178</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.4</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>3474</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>27.4</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>91.7</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource directory to be unfrozen</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>129</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>82.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>509</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.3</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>248</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>87.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>47</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.2</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>90.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.0</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>86</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.3</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>51</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>35.3</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>3969</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>84.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>3778</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>57.9</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>42.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>26.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>11.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>454</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>34.4</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>2005</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>26.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>77</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>32.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>20.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>1458</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>21.5</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>382</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>47.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>1796</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>27.3</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>178</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>20.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: kjci process context latch</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>40.0</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>82</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>24.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>157</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>40.1</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>585</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>26.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>17.7</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>152</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>13.8</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3371</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>95.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>346</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>90.8</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>349</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.5</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>426</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>73.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.9</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>26.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>462</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>39.2</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>54</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.1</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>1094</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>66.7</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>466</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>82.4</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM background timer</td><td align="right" class='awrnc'>2725</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>82.4</td></tr>
<tr><td scope="row" class='awrc'>ASM cluster membership changes</td><td align="right" class='awrc'>362</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>8654</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.1</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>4194</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>19.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>187.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>210</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>519</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>47.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>149</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>26.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>32.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>30.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>53.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>69</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>82.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>171</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>67.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>92.3</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>23</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>1068</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>56.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>1.0</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>6347</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>209</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>48.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>34.9</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>9521</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.2</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>39.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>52.2</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>8311</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>88.9</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>2M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>31.3</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>66.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.1</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>33.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>88.4</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>631</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>jobq slave wait</td><td align="right" class='awrc'>280</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>210</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>210</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>421</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>91.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>72.0</td></tr>
<tr><td scope="row" class='awrnc'>smon timer</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>968</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>watchdog main loop</td><td align="right" class='awrnc'>1050</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>5847</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>85.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>7.1</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>176.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>9.0</td></tr>
<tr><td scope="row" class='awrc'>ASM background starting</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>2561</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>35.8</td></tr>
<tr><td scope="row" class='awrc'>AWR Flush</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>6893</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>76.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>6.6</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>35.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>51.6</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>30</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>80.9</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>159</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>67.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>17.2</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>98.4</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>429</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>54.3</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group query</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>84.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group update</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>89.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>388</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>79.5</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>523</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>40.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>44.2</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>594</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>81.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>14.7</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>383</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>80.1</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>434</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>74.1</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.8</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>87.7</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>160</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>97.6</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>754</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>36.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>16.5</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>76.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>23.1</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>61.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>39.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>6.7</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>207</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>89.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>55.6</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>83</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>75.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.4</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>840</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>82.3</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>59.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>92.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>7027</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>96.4</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>184</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>93.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>126</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>698</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>79.9</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>91.7</td></tr>
<tr><td scope="row" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges enter server mode</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>82.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>3.1</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>243</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>87.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>90.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>53.1</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>98.8</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.6</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>3618</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>84.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>8.8</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>298</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>92.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>89.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>94.4</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>61</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>86.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>317</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>84.2</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>77.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>317</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>78.3</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>92.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>338</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.2</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>35</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>80.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>85.4</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>91.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>102</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>82.6</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>89.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.6</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3316</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>379</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>73.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>11.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>137</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.3</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>70.4</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>85.0</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>35</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>1385</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>635</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.9</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>39.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>123</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>21.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>52.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>82.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>211</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>1352</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.4</td></tr>
<tr><td scope="row" class='awrnc'>Data file init write</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>41.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>51.3</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>819</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>43.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>8.3</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>97</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>89.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>660</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>61.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.4</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>93.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>307</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>66.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>17.2</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>657</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>58.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>268</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>36.3</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>10.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.3</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>101</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>59.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>5865</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.4</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>96.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>7.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>46.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>206</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>33.3</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>152</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>5.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>80.4</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>341</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>35.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>21.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>15.6</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>3419</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>24.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>41.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.1</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>datafile move cleanup during resize</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>62.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>89</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>94.9K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>48.4</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>144.8K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>24.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.5</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>71</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>51.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.1</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>3M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>51.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.5</td></tr>
<tr><td scope="row" class='awrc'>db file single write</td><td align="right" class='awrc'>73</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>36.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>8.8</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>96.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.5</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>30</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>63.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>36.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>115</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>2309</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>19.4</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.5</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>80.5</td></tr>
<tr><td scope="row" class='awrnc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: MV - datafile move</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: MW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>10.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>44.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>17.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.9</td></tr>
<tr><td scope="row" class='awrc'>enq: RP - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: SW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>7.1</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>731</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>56.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>15.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>81.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>126</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>11.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>36.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>16.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>15.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>13.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>134.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.5</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>176</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>48.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>56.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>120</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>35.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>430</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>10.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>1368</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>13.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>64.7K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>371.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>2423</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>35.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>65.9K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.9</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>98.3</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>951</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>72.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>41.7</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>482</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>17.0</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>76</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>43.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>7.0</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>64.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>2174</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>42.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>73.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>88.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>156</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>65.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>537</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>73.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>79.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>313</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>78.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>180</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>52.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>468</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>72.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>37</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>79.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>60.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>75.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>59.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>153</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>73.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>82.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>86.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>311</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>9.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>37.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.9</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>315</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>20.4K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>44.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>23.1</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>181</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>60.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>47</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>42.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>11.1</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>57.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>42.9</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>1033</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>42.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.6</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>63.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>141</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>17.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>52.1</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>37</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>Data file init write</td><td align="right" class='awrnc'>41</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>48.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>74</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>91.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>64</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS kgl get object wait</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>330</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>82.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>34</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>153</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>63.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>841</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>92.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>156</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>806</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>19.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>5.7</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>63</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>84.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>146</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>89.2K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>51.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>2994</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>108.3K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file single write</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>91.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>92.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>566</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>80.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>217</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>19.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>14.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>92.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>403</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>84.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>84.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>286</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>45.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>54.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr failure</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>2071</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>1945</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>66</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>64.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>423</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>50.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>49.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>559</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>3893</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>131</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>598</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>175</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>41.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>58.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>41.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>83.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>93.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>6134</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>76.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>88.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>57.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>60</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>243</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>47.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>61</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>94.3</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>85.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td><td align="right" class='awrc'>37,256</td><td align="right" class='awrc'>2,497</td><td align="right" class='awrc'>17,029</td><td align="right" class='awrc'>18,101</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>47</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>p60sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td>
<td align="right" class='awrc'>3269032</td><td align="right" class='awrc'>29553</td><td align="right" class='awrc'>1468</td><td align="right" class='awrc'>527</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>180</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>195990</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>4158</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>889</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>32</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.42ms</td></tr>
<tr><td scope="row" class='awrnc'>obj broadcast channel</td>
<td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.97ms</td></tr>
<tr><td scope="row" class='awrc'>RBR channel</td>
<td align="right" class='awrc'>1,079</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>27.02ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>29,587.93</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>5,437.63</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>673.69</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>539.19</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>446.73</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>307.66</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>237.64</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>234.97</td></tr>
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>232.44</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>230.54</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>198.91</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>52.31</td></tr>
<tr><td scope="row" class='awrc'>MZ</td><td scope="row" class='awrc'>MMON slave class 2</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>18.96</td></tr>
<tr><td scope="row" class='awrnc'>CKPT</td><td scope="row" class='awrnc'>checkpoint</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>14.86</td></tr>
<tr><td scope="row" class='awrc'>RMS0</td><td scope="row" class='awrc'>rac management server</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>9.89</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>9.51</td></tr>
<tr><td scope="row" class='awrc'>LMON</td><td scope="row" class='awrc'>global enqueue service monitor</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>8.33</td></tr>
<tr><td scope="row" class='awrnc'>W</td><td scope="row" class='awrnc'>space management slave pool</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>7.64</td></tr>
<tr><td scope="row" class='awrc'>O</td><td scope="row" class='awrc'>ASM Connection Pool</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>5.95</td></tr>
<tr><td scope="row" class='awrnc'>IMR</td><td scope="row" class='awrnc'>CGS IMR Slave</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>5.57</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>2,497.38</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>961.38</td></tr>
<tr><td scope="row" class='awrc'>DBW2</td><td scope="row" class='awrc'>db writer process 2</td><td align="right" class='awrc'>73.58</td></tr>
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td align="right" class='awrnc'>73.48</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td align="right" class='awrc'>73.29</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td align="right" class='awrnc'>73.18</td></tr>
<tr><td scope="row" class='awrc'>VKTM</td><td scope="row" class='awrc'>Virtual Keeper of TiMe process</td><td align="right" class='awrc'>68.87</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td align="right" class='awrnc'>26.74</td></tr>
<tr><td scope="row" class='awrc'>CR*</td><td scope="row" class='awrc'>GCS CR Slave</td><td align="right" class='awrc'>16.63</td></tr>
<tr><td scope="row" class='awrnc'>RS*</td><td scope="row" class='awrnc'>GCS RM Slave</td><td align="right" class='awrnc'>16.57</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td align="right" class='awrc'>13.33</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td align="right" class='awrnc'>10.38</td></tr>
<tr><td scope="row" class='awrc'>P</td><td scope="row" class='awrc'>Parallel query slave</td><td align="right" class='awrc'>9.52</td></tr>
<tr><td scope="row" class='awrnc'>GCR</td><td scope="row" class='awrnc'>GCR Slaves (LMHB)</td><td align="right" class='awrnc'>6.01</td></tr>
<tr><td scope="row" class='awrc'>IPC0</td><td scope="row" class='awrc'>IPC Service 0</td><td align="right" class='awrc'>5.92</td></tr>
<tr><td scope="row" class='awrnc'>LMD0</td><td scope="row" class='awrnc'>global enqueue service daemon 0</td><td align="right" class='awrnc'>5.57</td></tr>
<tr><td scope="row" class='awrc'>SCM</td><td scope="row" class='awrc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrc'>4.61</td></tr>
<tr><td scope="row" class='awrnc'>LMD1</td><td scope="row" class='awrnc'>global enqueue service daemon 1</td><td align="right" class='awrnc'>3.96</td></tr>
<tr><td scope="row" class='awrc'>DIA0</td><td scope="row" class='awrc'>diagnosibility process 0</td><td align="right" class='awrc'>3.93</td></tr>
<tr><td scope="row" class='awrnc'>RMS0</td><td scope="row" class='awrnc'>rac management server</td><td align="right" class='awrnc'>3.10</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   98.8% of Total DB Time (s):		37,398</li>
<li class="awr">Captured PL/SQL account for   69.2% of Total DB Time (s):	   37,398</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>23,920.67</td><td align="right" class='awrc'>32,223</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>63.96</td><td align="right" class='awrc'>4.93</td><td align="right" class='awrc'>79.72</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>13,030.44</td><td align="right" class='awrnc'>182,935</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>34.84</td><td align="right" class='awrnc'>9.58</td><td align="right" class='awrnc'>80.10</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>564.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.18</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>64.27</td><td scope="row" class='awrc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.30</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.71</td><td align="right" class='awrnc'>92.06</td><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.10</td><td align="right" class='awrc'>62.27</td><td scope="row" class='awrc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.25</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.60</td><td align="right" class='awrnc'>88.54</td><td scope="row" class='awrnc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.18</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>65.40</td><td scope="row" class='awrc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.14</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.14</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.95</td><td align="right" class='awrnc'>92.99</td><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.10</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>93.22</td><td scope="row" class='awrc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.06</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.06</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.73</td><td align="right" class='awrnc'>92.69</td><td scope="row" class='awrnc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.49</td><td align="right" class='awrc'>61.85</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.04</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.04</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.30</td><td align="right" class='awrnc'>62.83</td><td scope="row" class='awrnc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.01</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.70</td><td align="right" class='awrc'>89.06</td><td scope="row" class='awrc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.99</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.99</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.52</td><td align="right" class='awrnc'>64.58</td><td scope="row" class='awrnc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.68</td><td align="right" class='awrc'>90.09</td><td scope="row" class='awrc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.97</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.97</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.83</td><td align="right" class='awrnc'>91.51</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>64.55</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.88</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.88</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>6.57</td><td align="right" class='awrnc'>64.39</td><td scope="row" class='awrnc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.83</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.83</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.21</td><td align="right" class='awrc'>63.14</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.69</td><td align="right" class='awrnc'>88.68</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.80</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.80</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.74</td><td align="right" class='awrc'>63.23</td><td scope="row" class='awrc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.79</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.79</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>65.86</td><td scope="row" class='awrnc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.77</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.77</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>94.20</td><td scope="row" class='awrc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>5.95</td><td align="right" class='awrnc'>61.12</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.76</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.63</td><td align="right" class='awrc'>63.35</td><td scope="row" class='awrc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.75</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>93.11</td><td scope="row" class='awrnc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.69</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.69</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>94.92</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.88</td><td align="right" class='awrnc'>94.04</td><td scope="row" class='awrnc'><a class="awr" href="#aduz7424c35kn">aduz7424c35kn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.67</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.67</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>90.49</td><td scope="row" class='awrc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.66</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.66</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.85</td><td align="right" class='awrnc'>65.77</td><td scope="row" class='awrnc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.56</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.56</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.78</td><td align="right" class='awrc'>90.05</td><td scope="row" class='awrc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.55</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.55</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.89</td><td align="right" class='awrnc'>64.81</td><td scope="row" class='awrnc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.53</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.53</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>91.18</td><td scope="row" class='awrc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.49</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.77</td><td align="right" class='awrnc'>64.41</td><td scope="row" class='awrnc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.46</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.46</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.78</td><td align="right" class='awrc'>91.89</td><td scope="row" class='awrc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.26</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.26</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.91</td><td align="right" class='awrnc'>66.37</td><td scope="row" class='awrnc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>90.36</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.17</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>94.14</td><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.15</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.92</td><td align="right" class='awrc'>94.96</td><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.12</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.93</td><td align="right" class='awrnc'>90.14</td><td scope="row" class='awrnc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.11</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.99</td><td align="right" class='awrc'>67.54</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.09</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>91.80</td><td scope="row" class='awrnc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>561.98</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>561.98</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.81</td><td align="right" class='awrc'>94.11</td><td scope="row" class='awrc'><a class="awr" href="#9qptdf46kwuqs">9qptdf46kwuqs</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>561.93</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>561.93</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.86</td><td align="right" class='awrnc'>92.63</td><td scope="row" class='awrnc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>561.87</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>561.87</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>95.65</td><td scope="row" class='awrc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>561.86</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>561.86</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.79</td><td align="right" class='awrnc'>93.71</td><td scope="row" class='awrnc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>561.78</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>561.78</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>6.94</td><td align="right" class='awrc'>65.86</td><td scope="row" class='awrc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>561.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>561.41</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>90.73</td><td scope="row" class='awrnc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   97.0% of Total CPU Time (s): 	  2,505</li>
<li class="awr">Captured PL/SQL account for   69.6% of Total CPU Time (s):	     2,505</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,248.10</td><td align="right" class='awrc'>182,935</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>49.83</td><td align="right" class='awrc'>13,030.44</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>80.10</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,178.44</td><td align="right" class='awrnc'>32,223</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>47.05</td><td align="right" class='awrnc'>23,920.67</td><td align="right" class='awrnc'>4.93</td><td align="right" class='awrnc'>79.72</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>39.32</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>39.32</td><td align="right" class='awrc'>1.57</td><td align="right" class='awrc'>562.11</td><td align="right" class='awrc'>6.99</td><td align="right" class='awrc'>67.54</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>39.31</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>39.31</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>562.17</td><td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>94.14</td><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>39.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>39.11</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>563.14</td><td align="right" class='awrc'>6.95</td><td align="right" class='awrc'>92.99</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>39.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>39.01</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>561.78</td><td align="right" class='awrnc'>6.94</td><td align="right" class='awrnc'>65.86</td><td scope="row" class='awrnc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.95</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.95</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>562.12</td><td align="right" class='awrc'>6.93</td><td align="right" class='awrc'>90.14</td><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.88</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.88</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>562.15</td><td align="right" class='awrnc'>6.92</td><td align="right" class='awrnc'>94.96</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.84</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>6.91</td><td align="right" class='awrc'>66.37</td><td scope="row" class='awrc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.79</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.79</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>562.77</td><td align="right" class='awrnc'>6.89</td><td align="right" class='awrnc'>94.20</td><td scope="row" class='awrnc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.74</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.74</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>562.55</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>64.81</td><td scope="row" class='awrc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.71</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.71</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>6.88</td><td align="right" class='awrnc'>94.04</td><td scope="row" class='awrnc'><a class="awr" href="#aduz7424c35kn">aduz7424c35kn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.52</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.52</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>561.93</td><td align="right" class='awrc'>6.86</td><td align="right" class='awrc'>92.63</td><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.51</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.51</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>562.66</td><td align="right" class='awrnc'>6.85</td><td align="right" class='awrnc'>65.77</td><td scope="row" class='awrnc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.49</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>562.79</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>65.86</td><td scope="row" class='awrc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.49</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>563.18</td><td align="right" class='awrnc'>6.83</td><td align="right" class='awrnc'>65.40</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.48</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.48</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>91.51</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.46</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>562.53</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>91.18</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.39</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.39</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>64.55</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.39</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.39</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>563.10</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>93.22</td><td scope="row" class='awrnc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.38</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.38</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>561.41</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>90.73</td><td scope="row" class='awrc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.38</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>561.87</td><td align="right" class='awrnc'>6.83</td><td align="right" class='awrnc'>95.65</td><td scope="row" class='awrnc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.37</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.37</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>562.75</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>93.11</td><td scope="row" class='awrc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.30</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>561.98</td><td align="right" class='awrnc'>6.81</td><td align="right" class='awrnc'>94.11</td><td scope="row" class='awrnc'><a class="awr" href="#9qptdf46kwuqs">9qptdf46kwuqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.17</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>90.36</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.16</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.56</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>90.05</td><td scope="row" class='awrnc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.15</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>561.86</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>93.71</td><td scope="row" class='awrc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.13</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.46</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>91.89</td><td scope="row" class='awrnc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.10</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>562.09</td><td align="right" class='awrc'>6.78</td><td align="right" class='awrc'>91.80</td><td scope="row" class='awrc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.09</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.49</td><td align="right" class='awrnc'>6.77</td><td align="right" class='awrnc'>64.41</td><td scope="row" class='awrnc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>38.06</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.06</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>562.69</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>94.92</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.05</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>38.05</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>6.76</td><td align="right" class='awrnc'>90.49</td><td scope="row" class='awrnc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.94</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>37.94</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>564.18</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>64.27</td><td scope="row" class='awrc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.93</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>37.93</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>6.74</td><td align="right" class='awrnc'>63.23</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>37.92</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>563.06</td><td align="right" class='awrc'>6.73</td><td align="right" class='awrc'>92.69</td><td scope="row" class='awrc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.78</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>37.78</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>563.30</td><td align="right" class='awrnc'>6.71</td><td align="right" class='awrnc'>92.06</td><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.73</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>37.73</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>563.01</td><td align="right" class='awrc'>6.70</td><td align="right" class='awrc'>89.06</td><td scope="row" class='awrc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.64</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>37.64</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>6.69</td><td align="right" class='awrnc'>88.68</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.60</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>37.60</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>6.68</td><td align="right" class='awrc'>90.09</td><td scope="row" class='awrc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.31</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>37.31</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>6.63</td><td align="right" class='awrnc'>63.35</td><td scope="row" class='awrnc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>37.16</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>563.25</td><td align="right" class='awrc'>6.60</td><td align="right" class='awrc'>88.54</td><td scope="row" class='awrc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>36.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>36.96</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>562.88</td><td align="right" class='awrnc'>6.57</td><td align="right" class='awrnc'>64.39</td><td scope="row" class='awrnc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>36.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>36.70</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>562.99</td><td align="right" class='awrc'>6.52</td><td align="right" class='awrc'>64.58</td><td scope="row" class='awrc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>36.52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>36.52</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>563.04</td><td align="right" class='awrnc'>6.49</td><td align="right" class='awrnc'>61.85</td><td scope="row" class='awrnc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>35.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>35.45</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>6.30</td><td align="right" class='awrc'>62.83</td><td scope="row" class='awrc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>34.92</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>34.92</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>562.83</td><td align="right" class='awrnc'>6.21</td><td align="right" class='awrnc'>63.14</td><td scope="row" class='awrnc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>34.34</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>34.34</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>6.10</td><td align="right" class='awrc'>62.27</td><td scope="row" class='awrc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>33.46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>33.46</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>5.95</td><td align="right" class='awrnc'>61.12</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   99.5% of Total User I/O Wait Time (s):	   29,650</li>
<li class="awr">Captured PL/SQL account for   70.4% of Total User I/O Wait Time (s):	      29,650</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>19,069.53</td><td align="right" class='awrc'>32,223</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>64.31</td><td align="right" class='awrc'>23,920.67</td><td align="right" class='awrc'>4.93</td><td align="right" class='awrc'>79.72</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>10,436.98</td><td align="right" class='awrnc'>182,935</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>35.20</td><td align="right" class='awrnc'>13,030.44</td><td align="right" class='awrnc'>9.58</td><td align="right" class='awrnc'>80.10</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>537.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>537.41</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>561.87</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>95.65</td><td scope="row" class='awrc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>534.08</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>534.08</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>562.69</td><td align="right" class='awrnc'>6.76</td><td align="right" class='awrnc'>94.92</td><td scope="row" class='awrnc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>533.81</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>533.81</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>562.15</td><td align="right" class='awrc'>6.92</td><td align="right" class='awrc'>94.96</td><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>530.12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>530.12</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>562.77</td><td align="right" class='awrnc'>6.89</td><td align="right" class='awrnc'>94.20</td><td scope="row" class='awrnc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>529.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>529.24</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>562.17</td><td align="right" class='awrc'>6.99</td><td align="right" class='awrc'>94.14</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>529.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>529.13</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>6.88</td><td align="right" class='awrnc'>94.04</td><td scope="row" class='awrnc'><a class="awr" href="#aduz7424c35kn">aduz7424c35kn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>528.86</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>528.86</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>561.98</td><td align="right" class='awrc'>6.81</td><td align="right" class='awrc'>94.11</td><td scope="row" class='awrc'><a class="awr" href="#9qptdf46kwuqs">9qptdf46kwuqs</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>526.51</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>526.51</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>561.86</td><td align="right" class='awrnc'>6.79</td><td align="right" class='awrnc'>93.71</td><td scope="row" class='awrnc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>524.90</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>524.90</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>563.10</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>93.22</td><td scope="row" class='awrc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>523.98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>523.98</td><td align="right" class='awrnc'>1.77</td><td align="right" class='awrnc'>562.75</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>93.11</td><td scope="row" class='awrnc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>523.66</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>523.66</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>563.14</td><td align="right" class='awrc'>6.95</td><td align="right" class='awrc'>92.99</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>521.87</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>521.87</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>563.06</td><td align="right" class='awrnc'>6.73</td><td align="right" class='awrnc'>92.69</td><td scope="row" class='awrnc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>520.52</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>520.52</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>561.93</td><td align="right" class='awrc'>6.86</td><td align="right" class='awrc'>92.63</td><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>518.55</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>518.55</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>563.30</td><td align="right" class='awrnc'>6.71</td><td align="right" class='awrnc'>92.06</td><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>516.83</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>516.83</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>562.46</td><td align="right" class='awrc'>6.78</td><td align="right" class='awrc'>91.89</td><td scope="row" class='awrc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>515.98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>515.98</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>562.09</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>91.80</td><td scope="row" class='awrnc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>515.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>515.15</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>91.51</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>512.92</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>512.92</td><td align="right" class='awrnc'>1.73</td><td align="right" class='awrnc'>562.53</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>91.18</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>509.34</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>509.34</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>561.41</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>90.73</td><td scope="row" class='awrc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>509.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>509.17</td><td align="right" class='awrnc'>1.72</td><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>6.76</td><td align="right" class='awrnc'>90.49</td><td scope="row" class='awrnc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>508.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>508.08</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>90.36</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>507.18</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>507.18</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>562.97</td><td align="right" class='awrnc'>6.68</td><td align="right" class='awrnc'>90.09</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>506.67</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>506.67</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>562.12</td><td align="right" class='awrc'>6.93</td><td align="right" class='awrc'>90.14</td><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>506.60</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>506.60</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>562.56</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>90.05</td><td scope="row" class='awrnc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>501.39</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>501.39</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>563.01</td><td align="right" class='awrc'>6.70</td><td align="right" class='awrc'>89.06</td><td scope="row" class='awrc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>499.12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>499.12</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>6.69</td><td align="right" class='awrnc'>88.68</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>498.69</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>498.69</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>563.25</td><td align="right" class='awrc'>6.60</td><td align="right" class='awrc'>88.54</td><td scope="row" class='awrc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>379.65</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>379.65</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>562.11</td><td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>67.54</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>373.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>373.17</td><td align="right" class='awrc'>1.26</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>6.91</td><td align="right" class='awrc'>66.37</td><td scope="row" class='awrc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>370.68</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>370.68</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>562.79</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>65.86</td><td scope="row" class='awrnc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>370.06</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>370.06</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>562.66</td><td align="right" class='awrc'>6.85</td><td align="right" class='awrc'>65.77</td><td scope="row" class='awrc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>370.00</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>370.00</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>561.78</td><td align="right" class='awrnc'>6.94</td><td align="right" class='awrnc'>65.86</td><td scope="row" class='awrnc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>368.30</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>368.30</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>563.18</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>65.40</td><td scope="row" class='awrc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>364.60</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>364.60</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>562.55</td><td align="right" class='awrnc'>6.89</td><td align="right" class='awrnc'>64.81</td><td scope="row" class='awrnc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>363.60</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>363.60</td><td align="right" class='awrc'>1.23</td><td align="right" class='awrc'>562.99</td><td align="right" class='awrc'>6.52</td><td align="right" class='awrc'>64.58</td><td scope="row" class='awrc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>363.39</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>363.39</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>562.97</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>64.55</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>362.60</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>362.60</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>564.18</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>64.27</td><td scope="row" class='awrc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>362.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>362.41</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>562.88</td><td align="right" class='awrnc'>6.57</td><td align="right" class='awrnc'>64.39</td><td scope="row" class='awrnc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>362.33</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>362.33</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>562.49</td><td align="right" class='awrc'>6.77</td><td align="right" class='awrc'>64.41</td><td scope="row" class='awrc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>356.53</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>356.53</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>6.63</td><td align="right" class='awrnc'>63.35</td><td scope="row" class='awrnc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>355.84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>355.84</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>562.80</td><td align="right" class='awrc'>6.74</td><td align="right" class='awrc'>63.23</td><td scope="row" class='awrc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>355.39</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>355.39</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>562.83</td><td align="right" class='awrnc'>6.21</td><td align="right" class='awrnc'>63.14</td><td scope="row" class='awrnc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>353.77</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>353.77</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>6.30</td><td align="right" class='awrc'>62.83</td><td scope="row" class='awrc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>350.77</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>350.77</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>563.29</td><td align="right" class='awrnc'>6.10</td><td align="right" class='awrnc'>62.27</td><td scope="row" class='awrnc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>348.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>348.23</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>6.49</td><td align="right" class='awrc'>61.85</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>343.98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>343.98</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>5.95</td><td align="right" class='awrnc'>61.12</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:	18,226,551</li>
<li class="awr">Captured SQL account for   99.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>15,031,759</td><td align="right" class='awrc'>182,935</td><td align="right" class='awrc'>82.17</td><td align="right" class='awrc'>82.47</td><td align="right" class='awrc'>13,030.44</td><td class='awrc'>9.6</td><td class='awrc'>80.1</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,984,306</td><td align="right" class='awrnc'>32,223</td><td align="right" class='awrnc'>92.61</td><td align="right" class='awrnc'>16.37</td><td align="right" class='awrnc'>23,920.67</td><td class='awrnc'>4.9</td><td class='awrnc'>79.7</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>351,222</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>351,222.00</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>562.17</td><td class='awrc'>7</td><td class='awrc'>94.1</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>344,090</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>344,090.00</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>562.77</td><td class='awrnc'>6.9</td><td class='awrnc'>94.2</td><td scope="row" class='awrnc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>344,087</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>344,087.00</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>563.14</td><td class='awrc'>6.9</td><td class='awrc'>93</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>343,932</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>343,932.00</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>562.67</td><td class='awrnc'>6.9</td><td class='awrnc'>94</td><td scope="row" class='awrnc'><a class="awr" href="#aduz7424c35kn">aduz7424c35kn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>343,814</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>343,814.00</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>562.15</td><td class='awrc'>6.9</td><td class='awrc'>95</td><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>341,289</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>341,289.00</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>561.87</td><td class='awrnc'>6.8</td><td class='awrnc'>95.6</td><td scope="row" class='awrnc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>339,131</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>339,131.00</td><td align="right" class='awrc'>1.86</td><td align="right" class='awrc'>562.69</td><td class='awrc'>6.8</td><td class='awrc'>94.9</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>337,554</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>337,554.00</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>563.30</td><td class='awrnc'>6.7</td><td class='awrnc'>92.1</td><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>336,886</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>336,886.00</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>561.98</td><td class='awrc'>6.8</td><td class='awrc'>94.1</td><td scope="row" class='awrc'><a class="awr" href="#9qptdf46kwuqs">9qptdf46kwuqs</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>336,588</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>336,588.00</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>561.93</td><td class='awrnc'>6.9</td><td class='awrnc'>92.6</td><td scope="row" class='awrnc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>335,011</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>335,011.00</td><td align="right" class='awrc'>1.84</td><td align="right" class='awrc'>561.86</td><td class='awrc'>6.8</td><td class='awrc'>93.7</td><td scope="row" class='awrc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>334,778</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>334,778.00</td><td align="right" class='awrnc'>1.84</td><td align="right" class='awrnc'>563.10</td><td class='awrnc'>6.8</td><td class='awrnc'>93.2</td><td scope="row" class='awrnc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>333,955</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>333,955.00</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>562.75</td><td class='awrc'>6.8</td><td class='awrc'>93.1</td><td scope="row" class='awrc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>332,718</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>332,718.00</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>562.09</td><td class='awrnc'>6.8</td><td class='awrnc'>91.8</td><td scope="row" class='awrnc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>328,622</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>328,622.00</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>562.46</td><td class='awrc'>6.8</td><td class='awrc'>91.9</td><td scope="row" class='awrc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>327,667</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>327,667.00</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>562.53</td><td class='awrnc'>6.8</td><td class='awrnc'>91.2</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>327,287</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>327,287.00</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>563.06</td><td class='awrc'>6.7</td><td class='awrc'>92.7</td><td scope="row" class='awrc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>326,809</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>326,809.00</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>562.97</td><td class='awrnc'>6.8</td><td class='awrnc'>91.5</td><td scope="row" class='awrnc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>326,305</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>326,305.00</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>562.12</td><td class='awrc'>6.9</td><td class='awrc'>90.1</td><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>325,343</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>325,343.00</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>561.41</td><td class='awrnc'>6.8</td><td class='awrnc'>90.7</td><td scope="row" class='awrnc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>324,363</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>324,363.00</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>562.67</td><td class='awrc'>6.8</td><td class='awrc'>90.5</td><td scope="row" class='awrc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>324,301</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>324,301.00</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>562.97</td><td class='awrnc'>6.7</td><td class='awrnc'>90.1</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>321,859</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>321,859.00</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>562.26</td><td class='awrc'>6.8</td><td class='awrc'>90.4</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>320,429</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>320,429.00</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>563.01</td><td class='awrnc'>6.7</td><td class='awrnc'>89.1</td><td scope="row" class='awrnc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>320,003</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>320,003.00</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>562.56</td><td class='awrc'>6.8</td><td class='awrc'>90.1</td><td scope="row" class='awrc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>319,193</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>319,193.00</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>562.80</td><td class='awrnc'>6.7</td><td class='awrnc'>88.7</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>318,770</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>318,770.00</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>563.25</td><td class='awrc'>6.6</td><td class='awrc'>88.5</td><td scope="row" class='awrc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>216,547</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>216,547.00</td><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>562.11</td><td class='awrnc'>7</td><td class='awrnc'>67.5</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>214,296</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>214,296.00</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>561.78</td><td class='awrc'>6.9</td><td class='awrc'>65.9</td><td scope="row" class='awrc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>210,983</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>210,983.00</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>563.18</td><td class='awrnc'>6.8</td><td class='awrnc'>65.4</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>210,907</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>210,907.00</td><td align="right" class='awrc'>1.16</td><td align="right" class='awrc'>562.26</td><td class='awrc'>6.9</td><td class='awrc'>66.4</td><td scope="row" class='awrc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>210,107</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>210,107.00</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>562.79</td><td class='awrnc'>6.8</td><td class='awrnc'>65.9</td><td scope="row" class='awrnc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>208,821</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>208,821.00</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>562.97</td><td class='awrc'>6.8</td><td class='awrc'>64.5</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>208,819</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>208,819.00</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>562.66</td><td class='awrnc'>6.8</td><td class='awrnc'>65.8</td><td scope="row" class='awrnc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>204,298</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>204,298.00</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>562.80</td><td class='awrc'>6.7</td><td class='awrc'>63.2</td><td scope="row" class='awrc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>204,101</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>204,101.00</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>562.55</td><td class='awrnc'>6.9</td><td class='awrnc'>64.8</td><td scope="row" class='awrnc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>203,828</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>203,828.00</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>562.49</td><td class='awrc'>6.8</td><td class='awrc'>64.4</td><td scope="row" class='awrc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>202,354</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>202,354.00</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>562.88</td><td class='awrnc'>6.6</td><td class='awrnc'>64.4</td><td scope="row" class='awrnc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>201,807</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>201,807.00</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>562.99</td><td class='awrc'>6.5</td><td class='awrc'>64.6</td><td scope="row" class='awrc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>201,686</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>201,686.00</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>562.83</td><td class='awrnc'>6.2</td><td class='awrnc'>63.1</td><td scope="row" class='awrnc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>201,252</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>201,252.00</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>563.04</td><td class='awrc'>6.3</td><td class='awrc'>62.8</td><td scope="row" class='awrc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>200,854</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>200,854.00</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>564.18</td><td class='awrnc'>6.7</td><td class='awrnc'>64.3</td><td scope="row" class='awrnc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>197,791</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>197,791.00</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>562.76</td><td class='awrc'>6.6</td><td class='awrc'>63.4</td><td scope="row" class='awrc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>194,687</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>194,687.00</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>563.29</td><td class='awrnc'>6.1</td><td class='awrnc'>62.3</td><td scope="row" class='awrnc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>194,501</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>194,501.00</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>563.04</td><td class='awrc'>6.5</td><td class='awrc'>61.8</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>188,653</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>188,653.00</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>562.76</td><td class='awrnc'>5.9</td><td class='awrnc'>61.1</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:      17,104,107</li>
<li class="awr">Captured SQL account for   99.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>14,448,612</td><td align="right" class='awrc'>182,935</td><td align="right" class='awrc'>78.98</td><td align="right" class='awrc'>84.47</td><td align="right" class='awrc'>13,030.44</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>80.10</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,542,144</td><td align="right" class='awrnc'>32,223</td><td align="right" class='awrnc'>78.89</td><td align="right" class='awrnc'>14.86</td><td align="right" class='awrnc'>23,920.67</td><td align="right" class='awrnc'>4.93</td><td align="right" class='awrnc'>79.72</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>326,852</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>326,852.00</td><td align="right" class='awrc'>1.91</td><td align="right" class='awrc'>562.17</td><td align="right" class='awrc'>6.99</td><td align="right" class='awrc'>94.14</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>323,111</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>323,111.00</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>562.15</td><td align="right" class='awrnc'>6.92</td><td align="right" class='awrnc'>94.96</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>322,872</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>322,872.00</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>562.77</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>94.20</td><td scope="row" class='awrc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>321,093</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>321,093.00</td><td align="right" class='awrnc'>1.88</td><td align="right" class='awrnc'>562.67</td><td align="right" class='awrnc'>6.88</td><td align="right" class='awrnc'>94.04</td><td scope="row" class='awrnc'><a class="awr" href="#aduz7424c35kn">aduz7424c35kn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>320,281</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>320,281.00</td><td align="right" class='awrc'>1.87</td><td align="right" class='awrc'>563.14</td><td align="right" class='awrc'>6.95</td><td align="right" class='awrc'>92.99</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>319,367</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>319,367.00</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>561.87</td><td align="right" class='awrnc'>6.83</td><td align="right" class='awrnc'>95.65</td><td scope="row" class='awrnc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>317,739</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>317,739.00</td><td align="right" class='awrc'>1.86</td><td align="right" class='awrc'>562.69</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>94.92</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>316,896</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>316,896.00</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>563.30</td><td align="right" class='awrnc'>6.71</td><td align="right" class='awrnc'>92.06</td><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>316,744</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>316,744.00</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>561.93</td><td align="right" class='awrc'>6.86</td><td align="right" class='awrc'>92.63</td><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>315,895</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>315,895.00</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>561.98</td><td align="right" class='awrnc'>6.81</td><td align="right" class='awrnc'>94.11</td><td scope="row" class='awrnc'><a class="awr" href="#9qptdf46kwuqs">9qptdf46kwuqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>314,981</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>314,981.00</td><td align="right" class='awrc'>1.84</td><td align="right" class='awrc'>563.10</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>93.22</td><td scope="row" class='awrc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>313,515</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>313,515.00</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>562.75</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>93.11</td><td scope="row" class='awrnc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>313,466</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>313,466.00</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>561.86</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>93.71</td><td scope="row" class='awrc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>311,791</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>311,791.00</td><td align="right" class='awrnc'>1.82</td><td align="right" class='awrnc'>562.09</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>91.80</td><td scope="row" class='awrnc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>309,547</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>309,547.00</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>563.06</td><td align="right" class='awrc'>6.73</td><td align="right" class='awrc'>92.69</td><td scope="row" class='awrc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>307,709</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>307,709.00</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>562.46</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>91.89</td><td scope="row" class='awrnc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>307,548</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>307,548.00</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>562.12</td><td align="right" class='awrc'>6.93</td><td align="right" class='awrc'>90.14</td><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>307,042</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>307,042.00</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>562.53</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>91.18</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>306,887</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>306,887.00</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>91.51</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>305,740</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>305,740.00</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>561.41</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>90.73</td><td scope="row" class='awrnc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>304,556</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>304,556.00</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>562.67</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>90.49</td><td scope="row" class='awrc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>303,611</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>303,611.00</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>562.97</td><td align="right" class='awrnc'>6.68</td><td align="right" class='awrnc'>90.09</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>303,495</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>303,495.00</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>90.36</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>301,565</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>301,565.00</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>562.56</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>90.05</td><td scope="row" class='awrnc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>300,114</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>300,114.00</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>563.01</td><td align="right" class='awrc'>6.70</td><td align="right" class='awrc'>89.06</td><td scope="row" class='awrc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>298,900</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>298,900.00</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>563.25</td><td align="right" class='awrnc'>6.60</td><td align="right" class='awrnc'>88.54</td><td scope="row" class='awrnc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>298,390</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>298,390.00</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>562.80</td><td align="right" class='awrc'>6.69</td><td align="right" class='awrc'>88.68</td><td scope="row" class='awrc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>205,386</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>205,386.00</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>562.11</td><td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>67.54</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>202,676</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>202,676.00</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>561.78</td><td align="right" class='awrc'>6.94</td><td align="right" class='awrc'>65.86</td><td scope="row" class='awrc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>199,908</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>199,908.00</td><td align="right" class='awrnc'>1.17</td><td align="right" class='awrnc'>562.26</td><td align="right" class='awrnc'>6.91</td><td align="right" class='awrnc'>66.37</td><td scope="row" class='awrnc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>199,082</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>199,082.00</td><td align="right" class='awrc'>1.16</td><td align="right" class='awrc'>562.79</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>65.86</td><td scope="row" class='awrc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>198,860</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>198,860.00</td><td align="right" class='awrnc'>1.16</td><td align="right" class='awrnc'>563.18</td><td align="right" class='awrnc'>6.83</td><td align="right" class='awrnc'>65.40</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>197,284</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>197,284.00</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>562.66</td><td align="right" class='awrc'>6.85</td><td align="right" class='awrc'>65.77</td><td scope="row" class='awrc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>196,924</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>196,924.00</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>562.97</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>64.55</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>194,166</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>194,166.00</td><td align="right" class='awrc'>1.14</td><td align="right" class='awrc'>562.55</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>64.81</td><td scope="row" class='awrc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>193,964</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>193,964.00</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>6.74</td><td align="right" class='awrnc'>63.23</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>193,032</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>193,032.00</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>562.49</td><td align="right" class='awrc'>6.77</td><td align="right" class='awrc'>64.41</td><td scope="row" class='awrc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>191,954</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>191,954.00</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>562.88</td><td align="right" class='awrnc'>6.57</td><td align="right" class='awrnc'>64.39</td><td scope="row" class='awrnc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>191,691</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>191,691.00</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>562.83</td><td align="right" class='awrc'>6.21</td><td align="right" class='awrc'>63.14</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>191,668</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>191,668.00</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>562.99</td><td align="right" class='awrnc'>6.52</td><td align="right" class='awrnc'>64.58</td><td scope="row" class='awrnc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>191,299</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>191,299.00</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>6.30</td><td align="right" class='awrc'>62.83</td><td scope="row" class='awrc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>190,249</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>190,249.00</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>564.18</td><td align="right" class='awrnc'>6.72</td><td align="right" class='awrnc'>64.27</td><td scope="row" class='awrnc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>187,860</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>187,860.00</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>562.76</td><td align="right" class='awrc'>6.63</td><td align="right" class='awrc'>63.35</td><td scope="row" class='awrc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>184,303</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>184,303.00</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>563.29</td><td align="right" class='awrnc'>6.10</td><td align="right" class='awrnc'>62.27</td><td scope="row" class='awrnc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>183,934</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>183,934.00</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>6.49</td><td align="right" class='awrc'>61.85</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>179,339</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>179,339.00</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>5.95</td><td align="right" class='awrnc'>61.12</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	   17,103,250</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      17,103,250</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>326,875</td><td align="right" class='awrc'>326,875</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>326,875.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.91</td><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>323,157</td><td align="right" class='awrnc'>323,157</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>323,157.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.89</td><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>322,872</td><td align="right" class='awrc'>322,872</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>322,872.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.89</td><td scope="row" class='awrc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>321,116</td><td align="right" class='awrnc'>321,116</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>321,116.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.88</td><td scope="row" class='awrnc'><a class="awr" href="#aduz7424c35kn">aduz7424c35kn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>320,327</td><td align="right" class='awrc'>320,327</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>320,327.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.87</td><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>319,367</td><td align="right" class='awrnc'>319,367</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>319,367.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.87</td><td scope="row" class='awrnc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>317,739</td><td align="right" class='awrc'>317,739</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>317,739.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.86</td><td scope="row" class='awrc'><a class="awr" href="#4asnrz2aymyu8">4asnrz2aymyu8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>316,896</td><td align="right" class='awrnc'>316,896</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>316,896.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.85</td><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>316,744</td><td align="right" class='awrc'>316,744</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>316,744.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.85</td><td scope="row" class='awrc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>315,918</td><td align="right" class='awrnc'>315,918</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>315,918.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.85</td><td scope="row" class='awrnc'><a class="awr" href="#9qptdf46kwuqs">9qptdf46kwuqs</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>314,981</td><td align="right" class='awrc'>314,981</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>314,981.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.84</td><td scope="row" class='awrc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>313,515</td><td align="right" class='awrnc'>313,515</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>313,515.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.83</td><td scope="row" class='awrnc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>313,512</td><td align="right" class='awrc'>313,512</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>313,512.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.83</td><td scope="row" class='awrc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>311,791</td><td align="right" class='awrnc'>311,791</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>311,791.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.82</td><td scope="row" class='awrnc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>309,570</td><td align="right" class='awrc'>309,570</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>309,570.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.81</td><td scope="row" class='awrc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>307,755</td><td align="right" class='awrnc'>307,755</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>307,755.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.80</td><td scope="row" class='awrnc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>307,548</td><td align="right" class='awrc'>307,548</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>307,548.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.80</td><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>307,042</td><td align="right" class='awrnc'>307,042</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>307,042.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.80</td><td scope="row" class='awrnc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>306,910</td><td align="right" class='awrc'>306,910</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>306,910.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.79</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>305,763</td><td align="right" class='awrnc'>305,763</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>305,763.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.79</td><td scope="row" class='awrnc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>304,556</td><td align="right" class='awrc'>304,556</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>304,556.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.78</td><td scope="row" class='awrc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>303,657</td><td align="right" class='awrnc'>303,657</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>303,657.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.78</td><td scope="row" class='awrnc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>303,495</td><td align="right" class='awrc'>303,495</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>303,495.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.77</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>301,611</td><td align="right" class='awrnc'>301,611</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>301,611.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.76</td><td scope="row" class='awrnc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>300,137</td><td align="right" class='awrc'>300,137</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>300,137.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.75</td><td scope="row" class='awrc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>298,923</td><td align="right" class='awrnc'>298,923</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>298,923.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.75</td><td scope="row" class='awrnc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>298,436</td><td align="right" class='awrc'>298,436</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>298,436.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.74</td><td scope="row" class='awrc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>205,386</td><td align="right" class='awrnc'>205,386</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>205,386.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.20</td><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>202,676</td><td align="right" class='awrc'>202,676</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>202,676.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.19</td><td scope="row" class='awrc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>199,931</td><td align="right" class='awrnc'>199,931</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>199,931.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.17</td><td scope="row" class='awrnc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>199,082</td><td align="right" class='awrc'>199,082</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>199,082.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.16</td><td scope="row" class='awrc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>198,883</td><td align="right" class='awrnc'>198,883</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>198,883.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.16</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>197,284</td><td align="right" class='awrc'>197,284</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>197,284.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.15</td><td scope="row" class='awrc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>196,993</td><td align="right" class='awrnc'>196,993</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>196,993.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.15</td><td scope="row" class='awrnc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>194,166</td><td align="right" class='awrc'>194,166</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>194,166.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.14</td><td scope="row" class='awrc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>193,987</td><td align="right" class='awrnc'>193,987</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>193,987.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.13</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>193,032</td><td align="right" class='awrc'>193,032</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>193,032.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.13</td><td scope="row" class='awrc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>191,977</td><td align="right" class='awrnc'>191,977</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>191,977.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.12</td><td scope="row" class='awrnc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>191,691</td><td align="right" class='awrc'>191,691</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>191,691.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.12</td><td scope="row" class='awrc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>191,668</td><td align="right" class='awrnc'>191,668</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>191,668.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.12</td><td scope="row" class='awrnc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>191,299</td><td align="right" class='awrc'>191,299</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>191,299.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.12</td><td scope="row" class='awrc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>190,249</td><td align="right" class='awrnc'>190,249</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>190,249.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.11</td><td scope="row" class='awrnc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>187,883</td><td align="right" class='awrc'>187,883</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>187,883.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.10</td><td scope="row" class='awrc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>184,303</td><td align="right" class='awrnc'>184,303</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>184,303.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.08</td><td scope="row" class='awrnc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>183,957</td><td align="right" class='awrc'>183,957</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>183,957.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.08</td><td scope="row" class='awrc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>179,339</td><td align="right" class='awrnc'>179,339</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>179,339.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.05</td><td scope="row" class='awrnc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:	  222,738</li>
<li class="awr">Captured SQL account for   98.4% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>182,935</td><td align="right" class='awrc'>182,955</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>13,030.44</td><td class='awrc'>9.6</td><td class='awrc'>80.1</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>32,223</td><td align="right" class='awrnc'>2,545,617</td><td align="right" class='awrnc'>79.00</td><td align="right" class='awrnc'>23,920.67</td><td class='awrnc'>4.9</td><td class='awrnc'>79.7</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>2,096</td><td align="right" class='awrc'>2,036</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>0.23</td><td class='awrc'>98.5</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>608</td><td align="right" class='awrnc'>608</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.13</td><td class='awrnc'>98.1</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#86708bvah4akq">86708bvah4akq</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select name from undo$ where f...</td></tr>
<tr><td align="right" class='awrc'>234</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.58</td><td class='awrc'>21.2</td><td class='awrc'>2.3</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.19</td><td class='awrnc'>24.8</td><td class='awrnc'>25.2</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>104</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.30</td><td class='awrc'>13.9</td><td class='awrc'>1.7</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.38</td><td class='awrnc'>6.2</td><td class='awrnc'>1.2</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>70</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td class='awrc'>92.3</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.05</td><td class='awrnc'>34.3</td><td class='awrnc'>58.7</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	     4,622</li>
<li class="awr">Captured SQL account for   82.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>2,096</td><td align="right" class='awrc'>2,096</td><td align="right" class='awrc'>45.35</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>608</td><td align="right" class='awrnc'>608</td><td align="right" class='awrnc'>13.15</td><td scope="row" class='awrnc'><a class="awr" href="#86708bvah4akq">86708bvah4akq</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select name from undo$ where f...</td></tr>
<tr><td align="right" class='awrc'>234</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>5.06</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>2.25</td><td scope="row" class='awrnc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrc'>94</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>2.03</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>1.49</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>66</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>1.43</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>1.30</td><td scope="row" class='awrnc'><a class="awr" href="#7hc9uvs2016m6">7hc9uvs2016m6</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into svcobj_access$(nam...</td></tr>
<tr><td align="right" class='awrc'>55</td><td align="right" class='awrc'>152</td><td align="right" class='awrc'>1.19</td><td scope="row" class='awrc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>1.19</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,231,841</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1.16</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>4,172,668</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.37</td><td scope="row" class='awrnc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrc'>3,900,968</td><td align="right" class='awrc'>32,223</td><td align="right" class='awrc'>0.34</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>3,426,367</td><td align="right" class='awrnc'>182,935</td><td align="right" class='awrnc'>0.30</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>117</td><td align="right" class='awrc'>32,223</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>182,935</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	       5,465</li>
<li class="awr">Captured SQL account for   99.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>3,225.83</td><td align="right" class='awrc'>32,223</td><td align="right" class='awrc'>59.03</td><td align="right" class='awrc'>23,920.67</td><td align="right" class='awrc'>13.49</td><td align="right" class='awrc'>4.93</td><td align="right" class='awrc'>79.72</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>2,186.64</td><td align="right" class='awrnc'>182,935</td><td align="right" class='awrnc'>40.01</td><td align="right" class='awrnc'>13,030.44</td><td align="right" class='awrnc'>16.78</td><td align="right" class='awrnc'>9.58</td><td align="right" class='awrnc'>80.10</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>192.06</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.51</td><td align="right" class='awrc'>562.76</td><td align="right" class='awrc'>34.13</td><td align="right" class='awrc'>5.95</td><td align="right" class='awrc'>61.12</td><td scope="row" class='awrc'><a class="awr" href="#1dw84yqn5xjf6">1dw84yqn5xjf6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>182.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.33</td><td align="right" class='awrnc'>563.04</td><td align="right" class='awrnc'>32.35</td><td align="right" class='awrnc'>6.49</td><td align="right" class='awrnc'>61.85</td><td scope="row" class='awrnc'><a class="awr" href="#arusphb7uppr5">arusphb7uppr5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>180.54</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.30</td><td align="right" class='awrc'>563.04</td><td align="right" class='awrc'>32.06</td><td align="right" class='awrc'>6.30</td><td align="right" class='awrc'>62.83</td><td scope="row" class='awrc'><a class="awr" href="#1bz3czz4jjj42">1bz3czz4jjj42</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>180.10</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.30</td><td align="right" class='awrnc'>562.83</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>6.21</td><td align="right" class='awrnc'>63.14</td><td scope="row" class='awrnc'><a class="awr" href="#bpy4xf8bfgtjp">bpy4xf8bfgtjp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>175.73</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.22</td><td align="right" class='awrc'>562.49</td><td align="right" class='awrc'>31.24</td><td align="right" class='awrc'>6.77</td><td align="right" class='awrc'>64.41</td><td scope="row" class='awrc'><a class="awr" href="#da3a63tnfzztu">da3a63tnfzztu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>175.37</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.21</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>31.16</td><td align="right" class='awrnc'>6.74</td><td align="right" class='awrnc'>63.23</td><td scope="row" class='awrnc'><a class="awr" href="#6kvyh9k0yg876">6kvyh9k0yg876</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>174.58</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.19</td><td align="right" class='awrc'>564.18</td><td align="right" class='awrc'>30.94</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>64.27</td><td scope="row" class='awrc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>174.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.19</td><td align="right" class='awrnc'>563.29</td><td align="right" class='awrnc'>30.92</td><td align="right" class='awrnc'>6.10</td><td align="right" class='awrnc'>62.27</td><td scope="row" class='awrnc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>173.97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.18</td><td align="right" class='awrc'>562.88</td><td align="right" class='awrc'>30.91</td><td align="right" class='awrc'>6.57</td><td align="right" class='awrc'>64.39</td><td scope="row" class='awrc'><a class="awr" href="#7c7tj4y4fs2sx">7c7tj4y4fs2sx</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>171.04</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.13</td><td align="right" class='awrnc'>562.76</td><td align="right" class='awrnc'>30.39</td><td align="right" class='awrnc'>6.63</td><td align="right" class='awrnc'>63.35</td><td scope="row" class='awrnc'><a class="awr" href="#10k9hqm5kftvd">10k9hqm5kftvd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>170.64</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.12</td><td align="right" class='awrc'>562.55</td><td align="right" class='awrc'>30.33</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>64.81</td><td scope="row" class='awrc'><a class="awr" href="#4r329twa9rbb2">4r329twa9rbb2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>166.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>562.99</td><td align="right" class='awrnc'>29.57</td><td align="right" class='awrnc'>6.52</td><td align="right" class='awrnc'>64.58</td><td scope="row" class='awrnc'><a class="awr" href="#4ygra552dfxxx">4ygra552dfxxx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>165.96</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3.04</td><td align="right" class='awrc'>561.78</td><td align="right" class='awrc'>29.54</td><td align="right" class='awrc'>6.94</td><td align="right" class='awrc'>65.86</td><td scope="row" class='awrc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>163.97</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>562.26</td><td align="right" class='awrnc'>29.16</td><td align="right" class='awrnc'>6.91</td><td align="right" class='awrnc'>66.37</td><td scope="row" class='awrnc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>163.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>562.66</td><td align="right" class='awrc'>28.98</td><td align="right" class='awrc'>6.85</td><td align="right" class='awrc'>65.77</td><td scope="row" class='awrc'><a class="awr" href="#db7t40j603g1d">db7t40j603g1d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>162.88</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>563.18</td><td align="right" class='awrnc'>28.92</td><td align="right" class='awrnc'>6.83</td><td align="right" class='awrnc'>65.40</td><td scope="row" class='awrnc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>162.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>28.79</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>64.55</td><td scope="row" class='awrc'><a class="awr" href="#8g9692jjz865t">8g9692jjz865t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>160.83</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2.94</td><td align="right" class='awrnc'>562.79</td><td align="right" class='awrnc'>28.58</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>65.86</td><td scope="row" class='awrnc'><a class="awr" href="#8h692kb83szmc">8h692kb83szmc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>155.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>562.11</td><td align="right" class='awrc'>27.74</td><td align="right" class='awrc'>6.99</td><td align="right" class='awrc'>67.54</td><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>25.07</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>563.01</td><td align="right" class='awrnc'>4.45</td><td align="right" class='awrnc'>6.70</td><td align="right" class='awrnc'>89.06</td><td scope="row" class='awrnc'><a class="awr" href="#czcqz0vzf0sbx">czcqz0vzf0sbx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>23.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>562.53</td><td align="right" class='awrc'>4.21</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>91.18</td><td scope="row" class='awrc'><a class="awr" href="#3q9qpxjx8mtpr">3q9qpxjx8mtpr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>23.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>562.12</td><td align="right" class='awrnc'>4.16</td><td align="right" class='awrnc'>6.93</td><td align="right" class='awrnc'>90.14</td><td scope="row" class='awrnc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>21.85</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.40</td><td align="right" class='awrc'>562.26</td><td align="right" class='awrc'>3.89</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>90.36</td><td scope="row" class='awrc'><a class="awr" href="#bzc6y6q6k2uj5">bzc6y6q6k2uj5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>21.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>561.41</td><td align="right" class='awrnc'>3.85</td><td align="right" class='awrnc'>6.84</td><td align="right" class='awrnc'>90.73</td><td scope="row" class='awrnc'><a class="awr" href="#966682317run1">966682317run1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>21.53</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>3.82</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>91.51</td><td scope="row" class='awrc'><a class="awr" href="#fd7ncyq8wrtcp">fd7ncyq8wrtcp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>21.23</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>562.80</td><td align="right" class='awrnc'>3.77</td><td align="right" class='awrnc'>6.69</td><td align="right" class='awrnc'>88.68</td><td scope="row" class='awrnc'><a class="awr" href="#f4rq0sufc25j7">f4rq0sufc25j7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>21.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>562.67</td><td align="right" class='awrc'>3.76</td><td align="right" class='awrc'>6.76</td><td align="right" class='awrc'>90.49</td><td scope="row" class='awrc'><a class="awr" href="#53zh5qv04rybn">53zh5qv04rybn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>20.58</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>562.56</td><td align="right" class='awrnc'>3.66</td><td align="right" class='awrnc'>6.78</td><td align="right" class='awrnc'>90.05</td><td scope="row" class='awrnc'><a class="awr" href="#4vm7gtb0xuaqp">4vm7gtb0xuaqp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>19.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>562.97</td><td align="right" class='awrc'>3.40</td><td align="right" class='awrc'>6.68</td><td align="right" class='awrc'>90.09</td><td scope="row" class='awrc'><a class="awr" href="#1fhabrgp6k1fh">1fhabrgp6k1fh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>18.62</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>563.25</td><td align="right" class='awrnc'>3.31</td><td align="right" class='awrnc'>6.60</td><td align="right" class='awrnc'>88.54</td><td scope="row" class='awrnc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>12.83</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>562.46</td><td align="right" class='awrc'>2.28</td><td align="right" class='awrc'>6.78</td><td align="right" class='awrc'>91.89</td><td scope="row" class='awrc'><a class="awr" href="#db24xbnnyz072">db24xbnnyz072</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>11.93</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>563.06</td><td align="right" class='awrnc'>2.12</td><td align="right" class='awrnc'>6.73</td><td align="right" class='awrnc'>92.69</td><td scope="row" class='awrnc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>11.60</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>562.09</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>6.78</td><td align="right" class='awrc'>91.80</td><td scope="row" class='awrc'><a class="awr" href="#7t71jqahkgfua">7t71jqahkgfua</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>7.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>563.10</td><td align="right" class='awrnc'>1.26</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>93.22</td><td scope="row" class='awrnc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>6.06</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>562.75</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>93.11</td><td scope="row" class='awrc'><a class="awr" href="#fumugnjxgxhkj">fumugnjxgxhkj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>3.97</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>563.14</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>6.95</td><td align="right" class='awrnc'>92.99</td><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.85</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>561.86</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>6.79</td><td align="right" class='awrc'>93.71</td><td scope="row" class='awrc'><a class="awr" href="#atadc5ncuxh43">atadc5ncuxh43</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>3.06</td><td align="right" class='awrnc'>19.59</td><td align="right" class='awrnc'>7.01</td><td align="right" class='awrnc'>30.90</td><td scope="row" class='awrnc'><a class="awr" href="#8fgdzmkchnn1a">8fgdzmkchnn1a</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT /*+ APPEND LEADING(@&quot;SE...</td></tr>
<tr><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>561.87</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>95.65</td><td scope="row" class='awrc'><a class="awr" href="#1juyrwu05gda4">1juyrwu05gda4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>234</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>74.69</td><td align="right" class='awrnc'>21.22</td><td align="right" class='awrnc'>2.35</td><td scope="row" class='awrnc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.40</td><td align="right" class='awrc'>97.73</td><td align="right" class='awrc'>3.35</td><td align="right" class='awrc'>0.15</td><td scope="row" class='awrc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>94.36</td><td align="right" class='awrnc'>6.22</td><td align="right" class='awrnc'>1.19</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>84.45</td><td align="right" class='awrc'>13.94</td><td align="right" class='awrc'>1.67</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>48.61</td><td align="right" class='awrnc'>24.79</td><td align="right" class='awrnc'>25.23</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>55.38</td><td align="right" class='awrc'>17.02</td><td align="right" class='awrc'>32.96</td><td scope="row" class='awrc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>23.36</td><td align="right" class='awrnc'>6.25</td><td align="right" class='awrnc'>73.95</td><td scope="row" class='awrnc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>47.69</td><td align="right" class='awrc'>22.90</td><td align="right" class='awrc'>37.58</td><td scope="row" class='awrc'><a class="awr" href="#42mkua34ay6bc">42mkua34ay6bc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_addm_fdg ...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>562.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>94.14</td><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>12.21</td><td align="right" class='awrc'>34.27</td><td align="right" class='awrc'>58.69</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>561.93</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>6.86</td><td align="right" class='awrnc'>92.63</td><td scope="row" class='awrnc'><a class="awr" href="#bk0nwr6ducbsw">bk0nwr6ducbsw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0fq8myny00n70"></a>0fq8myny00n70</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '128';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="10k9hqm5kftvd"></a>10k9hqm5kftvd</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '91';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1bz3czz4jjj42"></a>1bz3czz4jjj42</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '2';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1dw84yqn5xjf6"></a>1dw84yqn5xjf6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '20';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1fhabrgp6k1fh"></a>1fhabrgp6k1fh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '60';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1juyrwu05gda4"></a>1juyrwu05gda4</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '101';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1vbnx1nmxh6g5"></a>1vbnx1nmxh6g5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2p9fv35c7zxtg"></a>2p9fv35c7zxtg</td><td class='awrc'><pre_sqltext class="awr">select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ 	   nvl(m.inserts,  0) ins,  nvl(m.updates,  0) upd,  nvl(m.deletes,  0) del,	       nvl(m.drop_segments,  0) dropseg,  nvl(m.flags,	0) flags,			 nvl(rowcnt,  0) rowcnt,  o.pobjn pobjn 					 from									       (select :objn objn,  0 pobjn,  rowcnt						from tab$ t								      where t.obj# = :objn							    union all									  select :objn objn,  tp.bo# pobjn,  rowcnt					  from tabpart$ tp								where tp.obj# = :objn							      union all 								    select :objn objn,	tcp.bo# pobjn,	rowcnt					    from tabcompart$ tcp							  where tcp.obj# = :objn							union all								      select :objn objn,  tsp.pobj# pobjn,  rowcnt				      from tabsubpart$ tsp							    where tsp.obj# = :objn) o,	sys.mon_mods_all$ m				  where o.objn = m.obj#(+) and rownum &lt; 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m			using dual								   on (m.obj# = :objn and							  (:pobjn = 0 or							      m.obj# = :pobjn or							 m.obj# in (select obj# 							       from tabpart$								  where bo# = :pobjn and obj# = :objn					     union all									select obj#								   from tabcompart$							      where bo# = :pobjn and obj# = :objn					 union all								    select tsp.obj#							       from tabsubpart$ tsp,  tabcompart$ tcp					   where tsp.pobj# = tcp.obj#							and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				   and tsp.obj# = :objn)))				    when matched then								 update 								    set inserts = decode(:reset,  1,  0,  inserts) + :ins,			       updates = decode(:reset,  1,  0,  updates) + :upd,			      deletes = decode(:reset,	1,  0,	deletes) + :del,			     flags =  decode(:reset,  1,  0,  flags - bitand(flags,  :flag)) + :flag,	     drop_segments = decode(:reset,  1,  0,  drop_segments) + :dropseg, 	    timestamp = :time							 when NOT matched then							      insert (obj#,  inserts,  updates,  deletes,					     timestamp,  flags,  drop_segments) 				  values (:objn,  :ins,  :upd,	:del,  :time,  :flag,  :dropseg)		   where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3q9qpxjx8mtpr"></a>3q9qpxjx8mtpr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3scs6w7r6f9xa"></a>3scs6w7r6f9xa</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '34';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="42mkua34ay6bc"></a>42mkua34ay6bc</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_addm_fdg ( TASK_ID,  FINDING_ID,  RULE_ID,	ADDM_FDG_ID,  ADDM_SEQ,    DATABASE_TIME,  ACTIVE_SESSIONS,  PERC_ACTIVE_SESS,	  IS_AGGREGATE,  METER_LEVEL,	 QUERY_TYPE,  QUERY_IS_APPROX,	QUERY_ARGS) VALUES ( :tid,  :kea_id,  :rid,  :fdg_id,  :keh_id,  :dbt,		 round(:dbt / (1000000 * :sint) ,  2),		 round(((:dbt * 100) / :total_dbt) ,  2),	    'N',  NULL, 	  :aqt,  decode(:aqa,  0,  'N',  'Y'),		 decode(:aqargs,  ' ',	NULL,  :aqargs)) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4asnrz2aymyu8"></a>4asnrz2aymyu8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '67';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4r329twa9rbb2"></a>4r329twa9rbb2</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4vm7gtb0xuaqp"></a>4vm7gtb0xuaqp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '9';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4ygra552dfxxx"></a>4ygra552dfxxx</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '107';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="53zh5qv04rybn"></a>53zh5qv04rybn</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '121';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.bucket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned					    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,						  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5nz6b4v9qbsbr"></a>5nz6b4v9qbsbr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '68';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5q9x3sz49jcja"></a>5q9x3sz49jcja</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '41';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="63fqcgaztwa1q"></a>63fqcgaztwa1q</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6kvyh9k0yg876"></a>6kvyh9k0yg876</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '95';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6wvzvgvg6qsyb"></a>6wvzvgvg6qsyb</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_findings (id,  task_id,  type,  parent,  obj_id,  impact_msg_id,  impact_val,  msg_id,  more_info_id,  name_msg_code,  flags,  exec_name) VALUES (:1,  :2,  :3,  :4,	:5,  :6,  :7, :8,  :9,	:10,  :11,  :12) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7c7tj4y4fs2sx"></a>7c7tj4y4fs2sx</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '79';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7hc9uvs2016m6"></a>7hc9uvs2016m6</td><td class='awrc'><pre_sqltext class="awr">insert into svcobj_access$(name,  pdb,  tsn,  objid,  accesses,  inc_no) values (:1,  :2,	:3,  :4,  :5,  :6)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7t71jqahkgfua"></a>7t71jqahkgfua</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '59';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="86708bvah4akq"></a>86708bvah4akq</td><td class='awrc'><pre_sqltext class="awr">select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and       status$ != 1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8fgdzmkchnn1a"></a>8fgdzmkchnn1a</td><td class='awrnc'><pre_sqltext class="awr">INSERT /*+ APPEND  LEADING(@&quot;SEL$F5BB74E1&quot; &quot;H&quot;@&quot;SEL$2&quot; &quot;A&quot;@&quot;SEL$1&quot;)  USE_NL(@&quot;SEL$F5BB74E1&quot; &quot;A&quot;@&quot;SEL$1&quot;) 	*/ INTO  WRH$_ACTIVE_SESSION_HISTORY  ( snap_id,  dbid,  instance_number ,  sample_id,	sample_time, sample_time_utc,  usecs_per_row ,	session_id,  session_serial#,  session_type ,  flags ,	user_id ,  sql_id,  sql_child_number,  sql_opcode,  force_matching_signature ,	top_level_sql_id,  top_level_sql_opcode ,  sql_plan_hash_value,  sql_full_plan_hash_value ,  sql_adaptive_plan_resolved ,  sql_plan_line_id ,  sql_plan_operation#,  sql_plan_options# ,  sql_exec_id,	sql_exec_start ,  plsql_entry_object_id,  plsql_entry_subprogram_id ,  plsql_object_id,        plsql_subprogram_id ,  qc_instance_id,  qc_session_id,  qc_session_serial#,  px_flags ,	event_id,  seq#,  p1,  p2,  p3 ,  wait_time,  time_waited ,  blocking_session,	blocking_session_serial#,  blocking_inst_id ,  current_obj#,  current_file#,  current_block#,  current_row# ,  top_level_call#,  consumer_group_id,  xid,  remote_instance#,  time_model ,  service_hash,  program,  module,  action,  client_id,  machine,  port,    ecid ,  dbreplay_file_id,  dbreplay_call_counter ,  con_dbid,  per_pdb ,	tm_delta_time,	tm_delta_cpu_time,  tm_delta_db_time,  delta_time,  delta_read_io_requests,  delta_write_io_requests,  delta_read_io_bytes,  delta_write_io_bytes,  delta_interconnect_io_bytes,  pga_allocated,  temp_space_allocated ,  dbop_name,  dbop_exec_id  )  (SELECT /*+ PARAM('_module_action_old_length', 0) */:snap_id,  :dbid,  :instance_number ,  a.sample_id,	a.sample_time, a.sample_time_utc ,  a.usecs_per_row * :disk_filter_ratio ,  a.session_id,  a.session_serial#,  a.session_type ,  decode(a.flags,  0,  to_number(NULL),	a.flags) ,  a.user_id ,  a.sql_id,  a.sql_child_number,  a.sql_opcode,	a.force_matching_signature ,  a.top_level_sql_id,  a.top_level_sql_opcode ,  a.sql_plan_hash_value,  a.sql_full_plan_hash_value ,  a.sql_adaptive_plan_resolved ,  a.sql_plan_line_id ,  a.sql_plan_operation#,  a.sql_plan_options# ,	a.sql_exec_id,	a.sql_exec_start ,  a.plsql_entry_object_id,  a.plsql_entry_subprogram_id ,  a.plsql_object_id,        a.plsql_subprogram_id ,	a.qc_instance_id,  a.qc_session_id,  a.qc_session_serial#,  a.px_flags ,  a.event_id,  a.seq#,	a.p1,  a.p2,  a.p3 ,  a.wait_time,  a.time_waited ,  a.blocking_session,  a.blocking_session_serial#,  a.blocking_inst_id ,  a.current_obj#,  a.current_file#,	a.current_block#,  a.current_row# ,  a.top_level_call#,  a.consumer_group_id,  a.xid,  a.remote_instance# ,  a.time_model ,  a.service_hash ,  substrb(a.program,  1,  64) ,  a.module,  a.action,  a.client_id,  a.machine,  a.port,  a.ecid ,  a.dbreplay_file_id,  a.dbreplay_call_counter ,  a.con_dbid,  a.con_id ,  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_cpu_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_db_time),  decode(a.delta_time,  0,  to_number(null),	    a.delta_time),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_read_io_requests,  0,  to_number(null), 		 a.delta_read_io_requests)),  decode(a.delta_time,  0,	to_number(null),	   decode(a.delta_write_io_requests,  0,  to_number(null),		    a.delta_write_io_requests)),  decode(a.delta_time,	0,  to_number(null),	       decode(a.delta_read_io_bytes,  0,  to_number(null),		    a.delta_read_io_bytes)),  decode(a.delta_time,  0,	to_number(null),	   decode(a.delta_write_io_bytes,  0,  to_number(null), 		 a.delta_write_io_bytes)),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_interconnect_io_bytes,	0,  to_number(null),		      a.delta_interconnect_io_bytes)),	decode(a.pga_allocated,  0,  to_number(null),  a.pga_allocated),  decode(a.pga_allocated,  0,  to_number(null), 	  decode(a.temp_space_allocated,  0,  to_number(null),			a.temp_space_allocated)) ,  a.dbop_name,  a.dbop_exec_id FROM	   x$ash a,	      (SELECT h.sample_addr,  h.sample_id	    FROM   x$kewash h	       WHERE		      ( (h.sample_id &gt;= :begin_flushing) and 		  (h.sample_id &lt;  :latest_sample_id) )	      and (nlssort(h.is_awr_sample, 'nls_sort=BINARY') =		  nlssort('Y',	'nls_sort=BINARY'))	      ) shdr  WHERE (1 = 1)	and shdr.sample_addr	 = a.sample_addr     and shdr.sample_id       = a.sample_id	and nlssort(a.need_awr_sample,	'nls_sort=BINARY') =	     nlssort('Y',  'nls_sort=BINARY')) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8g9692jjz865t"></a>8g9692jjz865t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '15';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8h692kb83szmc"></a>8h692kb83szmc</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '74';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="944mdaa2ps4z4"></a>944mdaa2ps4z4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '14';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="966682317run1"></a>966682317run1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '28';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9j9p88t9arm28"></a>9j9p88t9arm28</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '116';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9n7n07rfgj5y8"></a>9n7n07rfgj5y8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '22';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9qptdf46kwuqs"></a>9qptdf46kwuqs</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '39';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,	SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,	DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,  SQL_TEXT,  PX_SERVER#,  PX_SERVER_GROUP,	PX_SERVER_SET,	PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,	USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,  FETCHES,	BUFFER_GETS,  IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,	PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,  PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,  0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,  IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,	IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,	ACTION,  SERVICE_NAME,	CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,  PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,	NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,  NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),	'00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,	TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,  CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,  MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,	DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,	MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,	MAX_PROGRAM,  MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,	QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,  MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,  MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,  MAX_SQL_EXEC_ID,	MAX_LAST_REFRESH_TIME,	MAX_DBOP_NAME,	MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,	NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,	SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,  MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,  SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,  SUM_WRITE_BYTES,	SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,  DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,	1,  'platform_name',  SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,  0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,  MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,	SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,	MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,	MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,	MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,	MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,  MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,  MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,	MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,	MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,	MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,  SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,	SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,  SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,	NVL(SUM(READ_BYTES),  0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES) S
UM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,  MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,  MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),  ASH_DATA AS (SELECT AD0.INST_ID,	AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,  AD0.DBOP_NAME,  AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,	AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,  AD0.CPU_COUNT,  AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,	AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,  AD0.DFO_MOST_ACTIVE_SID,	(CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,	AD0.BUCKET_DISTINCT_SAMPLES,  AD0.SQL_BUCKET_DISTINCT_SAMPLES,	CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,	CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,	ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,  ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,	ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,	TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,  ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,  MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,	ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,	MD.SID,  MD.SESSION_SERIAL#,  MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,  GVTF.SESSION_ID,	GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,  GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,	GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,  GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,  MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,  GVTF.PX_STEP_ID,	GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID,  GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,	GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,  CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,  ASH2.IS_MONITORED_SQL,  ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,	ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,  0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,  ASH2.PX_MIN_DOP,	:B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,  :B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,  ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,  SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,  MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,  MAX(ASH1.PX_DOP) PX_DOP,	MIN(ASH1.PX_DOP) PX_MIN_DOP,  MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,	ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,	ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,  ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL UNI
ON ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,	ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,  DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,	NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,	:B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,  NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,	NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,	ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,	ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,	ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,  ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,  ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,  TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),  RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,  ADH.SQL,	ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,  NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,	'PX Server(s) - Sampling Child DFO',  4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',	7,  'QC - Initializing Objects',  8,  'QC - Flushing Objects',	9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,	'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,	'PX Server(s) - Preparing Transaction',  14,  'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,  'PX Server(s) - Aborting Transaction',  17,  'QC - Executing Child DFO',	18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,  ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,	ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,  ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),	'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  ADH.DFO_PAIR_CPU_HEIGHT,	ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,  (
CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,	(CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,	AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,	(AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,	(AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,	NULL,  NULL,  SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,	AD01.ACTIVITY_COUNT,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,  :B27 ,  MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,	AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,	MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,	MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,	NULL,  NULL,  AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,	MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS
&quot;sql_id&quot;,  :B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,	:B52 AS &quot;session_serial&quot;,  TO_CHAR(:B51 ,  :B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',	:B48 ,	NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),  CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,	NULL,  XMLFOREST( DECODE(:B4 ,	1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,	:B2 AS &quot;server_set&quot;,	:B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,	XMLFOREST(:B11 AS &quot;instance_id_low&quot;,	:B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,  (SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,	NULL,  :B9 ) AS &quot;sql_id&quot;,  NVL2(:B6 ,  NULL,	TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,  NVL2(:B6 ,  :B6 ,	NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,  :B5 ,  NULL) AS &quot;dbop_exec_id&quot;,	NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,  MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,	NULL,  SUM_SERVERS_ALLOCATED),	NULL),	NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,  XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,  XMLELEMENT( &quot;con_id&quot;,  NULL,  MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,  MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,  MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,	MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,  NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,  NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,  NULL,  MAX_PL_PROGID),  NULL),  NVL2(MAX_PL_NAME,	XMLELEMENT( &quot;plsql_name&quot;,  NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,  'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,  XMLELEMENT( &quot;status&quot;,  NULL,  MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,  GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,	20))),	CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),	DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),  DECODE(NVL(SUM_READ_REQS,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),	SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE
 XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,	0,  1,	SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="aduz7424c35kn"></a>aduz7424c35kn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '112';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="arusphb7uppr5"></a>arusphb7uppr5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '4';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="atadc5ncuxh43"></a>atadc5ncuxh43</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '97';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bbp00h54hyg9h"></a>bbp00h54hyg9h</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '53';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bk0nwr6ducbsw"></a>bk0nwr6ducbsw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '31';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bpy4xf8bfgtjp"></a>bpy4xf8bfgtjp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '17';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="btxhvgkudmtmh"></a>btxhvgkudmtmh</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bu2cwsvp2u0hx"></a>bu2cwsvp2u0hx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '77';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bzc6y6q6k2uj5"></a>bzc6y6q6k2uj5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '16';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cfqgzkaxqzg38"></a>cfqgzkaxqzg38</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '123';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;

v_sharing_schema BOOLEAN := FALSE;
WORKLOAD REPOSITORY report for
v_seed VARCHAR2(128);

DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
v_home_schema_str VARCHAR2(80);
------------ ----------- ----------- ---------------- ------- ---------- --- ---
P60SDB	      3889879926 p60sdb      PRIMARY	      EE      19.0.0.0.0 YES NO

Instance     Inst Num Startup Time
------------ -------- ---------------
p60sdb1 	    1 12-Feb-20 09:46

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
---------------- -------------------------------- ---- ----- ------- ----------
mcracpoc1.exampl Linux x86 64-bit		    32	  16	   1	 251.90

	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
Begin Snap:	   51 12-Feb-20 10:14:13       207	 1.8	     2
  End Snap:	   52 12-Feb-20 10:24:47       143	  .7	     2
   Elapsed:		  10.58 (mins)
   DB Time:		 623.30 (mins)

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
---------------------------------------- ------- ------ ------------------------
Interconnect Latency			   58.99 1.E+02 ADDM:3889879926_1_52
Top SQL Statements			   58.99  99.79 ADDM:3889879926_1_52
"User I/O" wait Class			   58.99  79.22 ADDM:3889879926_1_52
Global Cache Messaging			   58.99  13.79 ADDM:3889879926_1_52
Buffer Busy - Hot Objects		   58.99   9.67 ADDM:3889879926_1_52
Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
	     DB Time(s):	      58.9		 1.1	  0.17	   68.00
	      DB CPU(s):	       4.0		 0.1	  0.01	    4.55
      Background CPU(s):	       2.2		 0.0	  0.01	    0.00
      Redo size (bytes):       3,344,131.3	    64,947.2
  Logical read (blocks):	  28,725.3	       557.9
	  Block changes:	   8,430.8	       163.7
 Physical read (blocks):	  26,956.3	       523.5
Physical write (blocks):	   4,229.8		82.2
       Read IO requests:	  26,955.0	       523.5
      Write IO requests:	   4,051.6		78.7
	   Read IO (MB):	     210.6		 4.1
	  Write IO (MB):	      33.1		 0.6
	   IM scan rows:	       0.0		 0.0
Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	       6.6		 0.1
   RAC GC blocks served:	      14.4		 0.3
	     User calls:	       0.9		 0.0
	   Parses (SQL):	       7.3		 0.1
      Hard parses (SQL):	       0.1		 0.0
     SQL Work Area (MB):	       0.3		 0.0
		 Logons:	       0.1		 0.0
	    User logons:	       0.0		 0.0
	 Executes (SQL):	     351.0		 6.8
	      Rollbacks:	       0.0		 0.0
	   Transactions:	      51.5

Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    Buffer Nowait %:   99.99	   Redo NoWait %:  100.00
	    Buffer  Hit   %:	6.16	In-memory Sort %:  100.00
	    Library Hit   %:   99.93	    Soft Parse %:   99.20
	 Execute to Parse %:   97.92	     Latch Hit %:   99.98
Parse CPU to Parse Elapsd %:   46.05	 % Non-Parse CPU:   99.99
	  Flash Cache Hit %:	0.00

Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
Event				     Waits Time (sec)	   Wait   time Class
------------------------------ ----------- ---------- --------- ------ --------
db file sequential read 	 3,099,030	23.5K	 7.59ms   62.9 User I/O
db file parallel read		   184,668     6084.2	32.95ms   16.3 User I/O
DB CPU					       2504.7		   6.7
gc current grant busy		   384,078     2172.2	 5.66ms    5.8 Cluster
gc cr multi block grant 	    58,389     1180.4	20.22ms    3.2 Cluster
gc cr grant busy		   139,096	877.7	 6.31ms    2.3 Cluster
buffer busy waits		     1,074	563.8  524.92ms    1.5 Concurre
gc current grant 2-way		    68,513	413.6	 6.04ms    1.1 Cluster
gc current grant read-mostly i	    66,765	296.9	 4.45ms     .8 Cluster
enq: HW - contention		       316	292.2  924.83ms     .8 Configur

Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							  Avg		  Avg
					Total Wait	 Wait	% DB   Active
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------
User I/O		3,480,985	    29,650     8.52ms	79.3	 46.7
Cluster 		  741,320	     5,465     7.37ms	14.6	  8.6
DB CPU					     2,505		 6.7	  3.9
System I/O		  288,606	     1,650     5.72ms	 4.4	  2.6
Other			  115,411	       761     6.59ms	 2.0	  1.2
Concurrency		    5,694	       568    99.67ms	 1.5	  0.9
Configuration		      866	       358   412.85ms	 1.0	  0.6
Application		       66		 1    19.16ms	  .0	  0.0
Commit			       54		 1    21.31ms	  .0	  0.0
Administrative			3		 0   100.98ms	  .0	  0.0
Network 		    1,145		 0    88.49us	  .0	  0.0

Host CPU
~~~~~~~~		  Load Average
v_scratch VARCHAR2(200) ;
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
----- ----- ------- --------- --------- --------- --------- --------- ---------

   32	 16	  1	21.65	  19.43       7.4      12.4	 37.0	   71.9

Instance CPU
v_cpu_pct NUMBER(6, 3);
~~~~~~~~~~~~
	      % of total CPU for Instance:	20.9
v_my_serial NUMBER(16);
	      % of busy  CPU for Instance:	74.3
  %DB time waiting for CPU - Resource Mgr:	 0.0


IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
BEGIN
~~~~~~~~~~		    ----------------- --------------- ---------------
	    Total Requests:	     31,098.8	     26,964.4	      4,134.4

	 Database Requests:	     31,006.6	     26,955.0	      4,051.6
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		 82.7		  2.6		 80.1
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
		Total (MB):		249.7		213.0		 36.7
	     Database (MB):		243.6		210.6		 33.1
EXECUTE IMMEDIATE v_home_schema_str;
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  5.6		  2.3		  3.3

	 Database (blocks):	     31,186.2	     26,956.3	      4,229.8
 Via Buffer Cache (blocks):	     31,185.4	     26,956.3	      4,229.1

	   Direct (blocks):		  0.7		  0.0		  0.7

Memory Statistics
IF ( v_hot_schema_modulus != 0 ) THEN
~~~~~~~~~~~~~~~~~			Begin	       End
				 ------------ ------------
	v_do_hot_schema := TRUE;
		  Host Mem (MB):    257,947.8	 257,947.8
		   SGA use (MB):      9,664.0	   9,664.0
END IF;
		   PGA use (MB):      2,100.1	   1,647.3
    % Host Mem used for SGA+PGA:	 4.56	      4.39


Cache Sizes			  Begin        End
IF ( v_sleep_modulus != 0 )	  THEN
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	 7,872M     7,872M  Std Block Size:	    8K
	v_do_sleeps := TRUE;
	   Shared Pool Size:	 1,071M     1,087M	Log Buffer:    20,612K
END IF;
	     In-Memory Area:	     0M 	0M

 Shared Pool Statistics        Begin	End

~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
	     Memory Usage %:   87.95   86.12
IF ( v_max_loop_iterations &gt; 0 )  THEN
    % SQL with executions>1:   87.08   80.18
  % Memory for SQL w/exec>1:   82.71   81.01
	v_loop_control := TRUE ;


END IF;
Time Model Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> DB Time represents total time in user calls

-> DB CPU represents CPU time of foreground processes
-> Total CPU Time represents foreground and background processes
IF ( v_update_pct = 0 ) 	  THEN
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
	v_select_only_workload := TRUE;
-> Ordered by % of DB time in descending order, followed by Statistic Name

END IF;
								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time

------------------------------------------ ------------------ ------- ----------
sql execute elapsed time			     37,396.2	100.0
IF ( v_update_pct = 100 )	  THEN
DB CPU						      2,504.7	  6.7	    64.3
PL/SQL execution elapsed time				 14.3	   .0
	v_update_only_workload := TRUE;
parse time elapsed					  1.2	   .0
hard parse (sharing criteria) elapsed time		  1.1	   .0
END IF;
hard parse elapsed time 				  1.1	   .0
connection management call elapsed time 		  0.0	   .0

hard parse (bind mismatch) elapsed time 		  0.0	   .0
repeated bind elapsed time				  0.0	   .0
DB time 					     37,398.3
IF ( v_scan_query_pct = 0 ) 	THEN
background elapsed time 			      3,169.0
background cpu time				      1,392.0		    35.7
	v_random_workload_only := TRUE;
total CPU time					      3,896.8
			  ------------------------------------------------------
END IF;


Operating System Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
IF ( v_scan_query_pct = 100 ) 	THEN
-> *TIME statistic values are diffed.
   All others display actual values.  End Value is displayed if different
	v_scan_workload_only := TRUE;
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name

END IF;
Statistic				   Value	End Value
------------------------- ---------------------- ----------------

FREE_MEMORY_BYTES		 126,813,159,424  127,960,059,904
INACTIVE_MEMORY_BYTES		   1,712,009,216    1,704,935,424
BUSY_TIME				 524,778
v_seconds_to_run := v_seconds_to_run * 100 ;
IDLE_TIME			       1,343,242
IOWAIT_TIME				 691,726

SYS_TIME				 231,674
USER_TIME				 138,375
LOAD					      22	       19
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
PHYSICAL_MEMORY_BYTES		 270,477,918,208
NUM_CPUS				      32
NUM_CPU_CORES				      16

NUM_CPU_SOCKETS 			       1
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
TCP_RECEIVE_SIZE_MAX		       6,291,456
-- DBMS_RANDOM.seed (val =&gt; v_seed);
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384

TCP_SEND_SIZE_MAX		       4,194,304
TCP_SEND_SIZE_MIN			   4,096
v_begin_time := DBMS_UTILITY.GET_TIME();
			  ------------------------------------------------------

Operating System Statistics - Detail	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_now := v_begin_time ;

Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
v_brick_wall := v_now + v_seconds_to_run ;
--------------- -------- -------- -------- -------- -------- --------
12-Feb 10:14:13     21.6      N/A      N/A	N/A	 N/A	  N/A
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
12-Feb 10:24:47     19.4     28.1      7.4     12.4	71.9	 37.0
			  ------------------------------------------------------


Foreground Wait Class			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
----------------------------------------------------------------------------------------------------------------------
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> ordered by wait time desc, waits desc
-- The following WHILE loop is the master work loop control
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
-> Captured Time accounts for	     104.2%  of Total DB time	   37,398.28 (s)
----------------------------------------------------------------------------------------------------------------------
-> Total FG Wait Time:		  36,462.63 (s)  DB CPU time:	    2,504.75 (s)

				     %Time	Total Wait
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time

-------------------- --------------- ----- --------------- ---------- ---------
User I/O		   3,284,482	 0	    29,627     9.02ms	   79.2
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
Cluster 		     740,353	 0	     5,455     7.37ms	   14.6
DB CPU						     2,505		    6.7
Concurrency		       1,484	 0	       564   380.20ms	    1.5
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
Other			      15,516	 7	       451    29.04ms	    1.2
Configuration			 784	59	       356   453.82ms	    1.0
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
System I/O		       1,092	 0		10     8.81ms	    0.0
Commit				  49	 0		 1    16.90ms	    0.0
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
Administrative			   1	 0		 0     3.53ms	    0.0
Network 			 183	 0		 0    11.67us	    0.0
Application			   0			 0		    0.0
			DBMS_LOCK.SLEEP(v_num_tmp);
			  ------------------------------------------------------

		END IF;

Foreground Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	END IF;
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown

-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
						Total
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
-------------------------- ----------- ----- -------- --------- -------- ------
db file sequential read      3,099,030	       23,536	 7.59ms     94.9   62.9
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
db file parallel read	       184,668		6,084	32.95ms      5.7   16.3
gc current grant busy	       384,078		2,172	 5.66ms     11.8    5.8
			v_sharing_schema := TRUE ;
gc cr multi block grant 	58,389		1,180	20.22ms      1.8    3.2
gc cr grant busy	       139,096		  878	 6.31ms      4.3    2.3
		ELSE
buffer busy waits		 1,074		  564  524.92ms      0.0    1.5
gc current grant 2-way		68,513		  414	 6.04ms      2.1    1.1
			IF ( v_sharing_schema = TRUE ) THEN
gc current grant read-most	66,765		  297	 4.45ms      2.0     .8
enq: HW - contention		   316		  292  924.83ms      0.0     .8
				EXECUTE IMMEDIATE v_home_schema_str;
gc current block lost		   422		  224  530.59ms      0.0     .6
gc cr block lost		   285		  154  541.74ms      0.0     .4
				v_sharing_schema := FALSE;
enq: CR - block range reus	 2,425		  148	61.17ms      0.1     .4
enq: US - contention		 2,630		  128	48.66ms      0.1     .3
			END IF;
KJC: Wait for msg sends to	 1,495		  101	67.80ms      0.0     .3
undo segment extension		   468	  99	   64  135.80ms      0.0     .2
		END IF;
gc cr grant 2-way		18,022		   53	 2.96ms      0.6     .1
gc cr multi block mixed 	   183		   38  209.13ms      0.0     .1
	END IF;
gc current grant congested	 2,553		   38	14.98ms      0.1     .1
reliable message		 1,087		   30	27.27ms      0.0     .1

gcs drm freeze in enter se	   179		   24  132.73ms      0.0     .1
DLM cross inst call comple	    44		    8  183.11ms      0.0     .0
	-- Choose the random block. The v_do_hotspot handler that follows can override.
control file sequential re	   892		    6	 6.47ms      0.0     .0
Data file init write		    80		    4	54.00ms      0.0     .0
KSV master wait 		   480		    4	 7.98ms      0.0     .0
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
control file parallel writ	   120		    3	21.87ms      0.0     .0

gc current block busy		 1,405		    3	 1.83ms      0.0     .0
latch: gcs resource hash	 1,077		    2	 1.87ms      0.0     .0
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
latch free			   820		    2	 2.07ms      0.0     .0
gc cr grant congested		   183		    1	 7.31ms      0.0     .0
db file single write		    80		    1	16.67ms      0.0     .0
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
kfk: async disk IO		    80		    1	15.28ms      0.0     .0
gc current retry		     4		    1  209.91ms      0.0     .0
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
log file sync			    49		    1	16.90ms      0.0     .0
gc current block 2-way		   395		    1	 1.80ms      0.0     .0
gc cr failure			     1		    1  618.62ms      0.0     .0
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
PX Deq: Slave Session Stat	    23		    1	26.63ms      0.0     .0
enq: CT - state 		    40		    1	14.34ms      0.0     .0
	END IF;
latch: enqueue hash chains	 1,445		    1  394.17us      0.0     .0
Disk file Mirror Read		    53		    1	 9.95ms      0.0     .0

enq: CF - contention		    48		    0	10.23ms      0.0     .0
CSS initialization		    62		    0	 6.87ms      0.0     .0
----------------------------------------------------------------------------------------------------------------------
latch: gc element		   305		    0  902.15us      0.0     .0
latch: cache buffers chain	   375		    0  719.63us      0.0     .0
row cache mutex 		    25		    0	 6.71ms      0.0     .0
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
latch: redo allocation		   367		    0  414.77us      0.0     .0
CSS operation: action		    93		    0	 1.48ms      0.0     .0
----------------------------------------------------------------------------------------------------------------------
gc cr block 2-way		    53		    0	 1.98ms      0.0     .0
latch: object queue header	   121		    0  702.23us      0.0     .0

ges inquiry response		    40		    0	 1.76ms      0.0     .0
Disk file operations I/O	   491		    0  142.11us      0.0     .0
	IF  ( v_select_only_workload = TRUE ) THEN
IPC send completion sync	    58		    0	 1.20ms      0.0     .0
CSS operation: query		   186		    0  344.70us      0.0     .0
latch: ges resource hash l	   165		    0  356.42us      0.0     .0
		-- handle case where user specified zero pct updates (a SELECT-only workload)
latch: undo global data 	   150		    0  318.78us      0.0     .0
PGA memory operation		   391		    0  115.27us      0.0     .0
		v_do_update := FALSE;
		v_update_quota := TRUE ;
latch: cache buffers lru c	   155		    0  247.55us      0.0     .0
	ELSE
PX Deq: reap credit		   711	 100	    0	44.08us      0.0     .0
enq: PS - contention		    18	   6	    0	 1.72ms      0.0     .0
		IF ( v_update_only_workload = TRUE ) THEN
datafile move cleanup duri	    40		    0  572.93us      0.0     .0
lock deadlock retry		   426	 100	    0	46.40us      0.0     .0

			-- handle case where user specified 100% updates
Foreground Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
			v_do_update := TRUE;
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
			v_update_quota := FALSE;
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
		ELSE
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
-------------------------- ----------- ----- -------- --------- -------- ------
gc current block congested	     4		    0	 4.00ms      0.0     .0
ASM file metadata operatio	   240		    0	39.56us      0.0     .0
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
enq: RP - contention		     1		    0	 8.02ms      0.0     .0
direct path sync		    40		    0  192.28us      0.0     .0
			IF ( v_update_quota = FALSE ) THEN
enq: WF - contention		     6		    0  914.67us      0.0     .0
cursor: pin S			     3		    0	 1.32ms      0.0     .0
gc buffer busy release		     2		    0	 1.97ms      0.0     .0
				-- Handle case where user has set UPDATE_PCT to a valid value
enq: MV - datafile move 	     1		    0	 3.53ms      0.0     .0
				--
wait list latch free		     3		    0	 1.14ms      0.0     .0
name-service call wait		     2		    0	 1.67ms      0.0     .0
				-- We are doing updates during this run and quota has not been met yet
library cache pin		     3		    0  865.00us      0.0     .0
library cache lock		     3		    0  837.33us      0.0     .0
latch: messages 		     8		    0  301.88us      0.0     .0
				-- We still vacillate until update quota has been met
ges enter server mode		   127		    0	11.98us      0.0     .0
SQL*Net message to client	   140		    0	10.36us      0.0     .0

ges ipc enter server mode	    41		    0	34.54us      0.0     .0
enq: SW - contention		     1		    0	 1.41ms      0.0     .0
				IF ( MOD(v_random_block,  2) = 0 ) THEN
enq: FD - Flashback logica	     1		    0	 1.01ms      0.0     .0
watchdog main loop		 1,055		3,165 3000.06ms      0.0
					v_do_update := TRUE;
PX Deq: Execution Msg		    69		    5	76.36ms      0.0
PX Deq Credit: send blkd	    84		    5	59.15ms      0.0
PX Deq: Msg Fragment		   171		    0	 1.67ms      0.0
				ELSE
SQL*Net message from clien	   140		    0  620.96us      0.0
			  ------------------------------------------------------
					v_do_update := FALSE;


Background Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
				END IF;
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
			ELSE
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
				-- UPDATE quota has been filled,  force drain some SELECTs
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
				v_do_update := FALSE;
db file parallel write	       195,859	   0	  934	 4.77ms      6.0   29.5
log file parallel write 	26,644	   0	  677	25.41ms      0.8   21.4
			END IF;
LGWR any worker group		11,533	   0	  182	15.81ms      0.4    5.8
LGWR worker group ordering	 6,647	   0	   52	 7.88ms      0.2    1.7
		END IF;
control file sequential re	 3,841	   0	   20	 5.25ms      0.1     .6
DLM cross inst call comple	 1,447	   0	   18	12.46ms      0.0     .6
	END IF;
LGWR all worker groups		   418	   0	   17	39.75ms      0.0     .5
Disk file Mirror Read		   841	   0	    9	10.27ms      0.0     .3

control file parallel writ	   289	   0	    8	28.07ms      0.0     .3
latch free			 2,974	   0	    8	 2.64ms      0.1     .2
IMR slave acknowledgement	 1,896	   0	    7	 3.90ms      0.1     .2
----------------------------------------------------------------------------------------------------------------------
db file sequential read 	 1,292	   0	    7	 5.60ms      0.0     .2
ASM IO for non-blocking po     193,744	   0	    7	35.02us      5.9     .2
-- The type of SQL is now determined...execute it in the following section
ASM file metadata operatio	 3,750	   0	    6	 1.70ms      0.1     .2
gc current block 2-way		    30	   0	    3  102.33ms      0.0     .1
KSV master wait 		 1,191	  41	    2	 2.05ms      0.0     .1
----------------------------------------------------------------------------------------------------------------------
enq: CR - block range reus	   549	   0	    2	 3.57ms      0.0     .1
Sync ASM rebalance		    54	   0	    2	35.29ms      0.0     .1

gcs log flush sync		 3,519	   0	    2  504.16us      0.1     .1
enq: HW - contention		     3	   0	    2  565.08ms      0.0     .1
	IF ( v_do_update != TRUE ) THEN
gc current grant busy		   270	   0	    2	 6.04ms      0.0     .1
gc cr grant busy		   226	   0	    2	 6.97ms      0.0     .0
		--
PX Deq: reap credit		41,757	 100	    1	33.93us      1.3     .0
buffer busy waits		     4	   0	    1  349.72ms      0.0     .0
ges inquiry response		   469	   0	    1	 2.88ms      0.0     .0
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
KJC: Wait for msg sends to	   432	  75	    1	 3.11ms      0.0     .0
enq: RO - fast object reus	    52	   0	    1	22.15ms      0.0     .0
			v_do_scan_query := FALSE;
gc cr block busy		    25	   0	    1	45.88ms      0.0     .0
			v_scan_query_quota := TRUE ;
PX Deq: Slave Session Stat	    13	   0	    1	77.18ms      0.0     .0
enq: CF - contention		    79	  51	    1	12.31ms      0.0     .0
library cache lock		   343	   3	    1	 2.80ms      0.0     .0
		ELSE
latch: cache buffers lru c	 1,850	   0	    1  518.01us      0.1     .0
library cache pin		   346	   0	    1	 2.11ms      0.0     .0
			IF ( v_scan_workload_only = TRUE ) THEN
ges lms sync during dynami	    47	  38	    1	15.17ms      0.0     .0
db file async I/O submit	60,401	   0	    1	10.77us      1.8     .0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
latch: gcs resource hash	   720	   0	    1  900.23us      0.0     .0
gcs remastering wait for r	    12	   0	    1	47.05ms      0.0     .0
DFS lock handle 		   228	 100	    1	 2.47ms      0.0     .0
				v_do_scan_query := TRUE;
db file scattered read		    74	   0	    1	 7.39ms      0.0     .0
gc current block busy		   152	   0	    0	 3.15ms      0.0     .0
				v_scan_query_quota := FALSE;
gc current block lost		     1	   0	    0  465.70ms      0.0     .0
gc cr block lost		     1	   0	    0  461.77ms      0.0     .0
			ELSE
log file sync			     5	   0	    0	64.54ms      0.0     .0
log file sequential read	   459	   0	    0  698.53us      0.0     .0
JS kgl get object wait		     2	   0	    0  149.70ms      0.0     .0
				IF ( v_scan_query_quota = FALSE ) THEN
gc cr disk read 		    82	   0	    0	 3.10ms      0.0     .0
reliable message		    22	   0	    0	10.98ms      0.0     .0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
CGS wait for IPC msg		 7,391	 100	    0	31.38us      0.2     .0
direct path write		    22	   0	    0	10.51ms      0.0     .0
oracle thread bootstrap 	     7	   0	    0	32.58ms      0.0     .0
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
AQ: RAC AQ Network		 6,301	 100	    0	35.66us      0.2     .0
Disk file operations I/O	   445	   0	    0  444.00us      0.0     .0
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
LGWR wait for redo copy 	   252	   0	    0  687.99us      0.0     .0
ksxr poll remote instances	 4,001	 100	    0	39.64us      0.1     .0
						v_do_scan_query := TRUE;
gc cr block 2-way		    91	   0	    0	 1.72ms      0.0     .0
direct path write temp		    30	   0	    0	 3.94ms      0.0     .0
latch: redo allocation		   218	   0	    0  524.89us      0.0     .0
					ELSE
enq: TM - contention		    14	   0	    0	 8.07ms      0.0     .0
gc current grant 2-way		    50	   0	    0	 1.99ms      0.0     .0
						v_do_scan_query := FALSE;
IPC group service call		   894	   0	    0  110.36us      0.0     .0

Background Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
					END IF;
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
				ELSE
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
					-- Scan quota has been filled,	force drain some random access SELECTS
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
					v_do_scan_query := FALSE;
-------------------------- ----------- ----- -------- --------- -------- ------
CSS operation: action		    64	   0	    0	 1.13ms      0.0     .0
latch: cache buffers chain	    80	   0	    0  900.05us      0.0     .0
				END IF;
latch: gc element		    77	   0	    0  762.90us      0.0     .0
row cache lock			    27	 100	    0	 2.10ms      0.0     .0
			END IF;
gc cr multi block grant 	    24	   0	    0	 2.21ms      0.0     .0
wait list latch free		    35	   0	    0	 1.26ms      0.0     .0
		END IF;
CSS operation: data query	    19	   0	    0	 2.13ms      0.0     .0

libcache interrupt action	 3,368	   0	    0	11.23us      0.1     .0

PX Deq: Join ACK		    13	   0	    0	 2.89ms      0.0     .0
latch: checkpoint queue la	    77	   0	    0  437.96us      0.0     .0
		IF ( v_do_scan_query != TRUE ) THEN
IPC send completion sync	   638	  99	    0	50.62us      0.0     .0
			SELECT COUNT(c2) INTO v_rowcnt
enq: US - contention		     3	   0	    0	10.75ms      0.0     .0
latch: redo writing		    79	   0	    0  406.57us      0.0     .0
latch: object queue header	    36	   0	    0  865.08us      0.0     .0
			FROM cf1
latch: messages 		    80	   0	    0  388.01us      0.0     .0
gc buffer busy release		     1	   0	    0	27.90ms      0.0     .0
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
kjctssqmg: quick message s	    51	 100	    0  468.80us      0.0     .0
enq: CO - master slave det	    10	 100	    0	 2.03ms      0.0     .0
row cache mutex 		     2	   0	    0	 9.93ms      0.0     .0

PGA memory operation		   508	   0	    0	38.13us      0.0     .0
CSS operation: data update	    21	   0	    0  895.81us      0.0     .0
os thread creation		     7	   0	    0	 2.37ms      0.0     .0
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
CSS initialization		     2	   0	    0	 6.90ms      0.0     .0
enq: PS - contention		    11	  36	    0	 1.22ms      0.0     .0
		ELSE
gc current multi block req	     1	   0	    0	13.19ms      0.0     .0
enq: DW - contention		     3	 100	    0	 4.05ms      0.0     .0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
ges2 LMON to wake up LMD -	    32	   0	    0  373.56us      0.0     .0
enq: TT - contention		     4	  50	    0	 2.66ms      0.0     .0
enq: FB - contention		     7	   0	    0	 1.26ms      0.0     .0

gc cr multi block mixed 	     3	   0	    0	 2.88ms      0.0     .0
latch: MGA shared context	    19	   0	    0  349.95us      0.0     .0
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
latch: ges resource hash l	    14	   0	    0  432.36us      0.0     .0
enq: JS - job run lock - s	     2	 100	    0	 2.98ms      0.0     .0

gc current grant congested	     2	   0	    0	 2.90ms      0.0     .0
latch: MGA shared context	    18	   0	    0  309.33us      0.0     .0
direct path sync		    40	   0	    0  130.68us      0.0     .0
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
latch: enqueue hash chains	    12	   0	    0  376.67us      0.0     .0
enq: WF - contention		     5	   0	    0  831.60us      0.0     .0
				v_scan_query_quota := TRUE;
enq: TO - contention		     5	   0	    0  587.40us      0.0     .0
enq: SM -  contention		     2	   0	    0	 1.35ms      0.0     .0
enq: MW - contention		     1	   0	    0	 2.41ms      0.0     .0
			END IF;
kfk: async disk IO		     6	   0	    0  395.83us      0.0     .0
CSS operation: query		     6	   0	    0  395.00us      0.0     .0
		END IF;
gc quiesce			     3	   0	    0  656.00us      0.0     .0
enq: TA - contention		     2	   0	    0  907.50us      0.0     .0

ges ipc enter server mode	   207	   0	    0	 7.95us      0.0     .0
latch: kjci process contex	     5	   0	    0  297.20us      0.0     .0
name-service call wait		     1	   0	    0	 1.19ms      0.0     .0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
gc cr grant 2-way		     2	   0	    0  551.50us      0.0     .0
enq: TD - KTF dump entries	     1	   0	    0	 1.03ms      0.0     .0
	ELSE
PX Idle Wait			    24	   0   40,978 1707.41 s      0.0
Space Manager: slave idle	 9,513	   0   37,111 3901.10ms      0.3
rdbms ipc message		91,637	  13   16,451  179.53ms      2.8
		--
class slave wait		 8,318	  74	4,525  544.05ms      0.3
wait for unread message on	   969	 100	1,896 1956.33ms      0.0
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
LMS CR slave timer	       187,976	   0	1,893	10.07ms      5.8
END LOOP;
gcs yield cpu			66,650	  99	1,884	28.26ms      2.0

gcs remote message	     2,032,416	   0	1,341  659.57us     62.2
pmon timer			   421	 100	1,263 3000.00ms      0.0
v_end_time := v_now ;
GCR sleep			 4,199	   0	1,262  300.50ms      0.1

Background Wait Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_now := DBMS_UTILITY.GET_TIME();
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0


v_total_time := v_end_time - v_begin_time ;
						Total
				       %Time	 Wait		   Waits   % bg
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
ges remote message		33,817	   0	1,261	37.28ms      1.0
DIAG idle wait			 8,664	  81	1,260  145.48ms      0.3
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
Data Guard: Gap Manager 	    11	   0	  660	60.00 s      0.0
lreg timer			   212	 100	  634 2988.52ms      0.0

OFS idle			   211	 100	  633 3000.13ms      0.0
pman timer			   211	 100	  633 2999.75ms      0.0
END;</pre_sqltext></td></tr>
heartbeat redo informer 	   632	   0	  632 1000.23ms      0.0
REPL Capture/Apply: RAC AQ	    11	 100	  632	57.44 s      0.0
<tr><td scope="row" class='awrnc'><a class="awr" name="cgymr2xd94y9m"></a>cgymr2xd94y9m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
ASM background timer		 2,718	   0	  631  232.19ms      0.1
PING				   519	  20	  630 1214.45ms      0.0
v_default_schema_number PLS_INTEGER := '127';
ASM cluster membership cha	   360	  87	  630 1750.48ms      0.0
AQPC idle			    21	 100	  630	30.00 s      0.0
v_update_pct PLS_INTEGER := '15';
SCM slave idle			 6,355	   0	  628	98.78ms      0.2
Streams AQ: qmn slave idle	    22	   0	  616	28.00 s      0.0
v_max_loop_iterations PLS_INTEGER := '0';
Streams AQ: qmn coordinato	    44	   0	  616	14.00 s      0.0
dispatcher timer		    10	 100	  600	60.01 s      0.0
v_seconds_to_run PLS_INTEGER := '600';
smon timer			     2	 100	  600  300.00 s      0.0
Data Guard: Timer		     1	   0	  600  600.00 s      0.0
v_scale PLS_INTEGER := '1048576';
LGWR worker group idle		19,377	   0	  526	27.13ms      0.6
jobq slave wait 		   280	  98	  138  494.02ms      0.0
v_work_unit PLS_INTEGER := '80' ;
PX Deq: Parse Reply		    13	   0	    1	61.87ms      0.0
PX Deq: Execute Reply		    13	   0	    0	 5.47ms      0.0
v_redo_stress  VARCHAR2(12) := 'LITE';
PX Deq Credit: send blkd	    65	   0	    0  801.77us      0.0
RMA: IPC0 completion sync	 1,065	   0	    0	40.79us      0.0
v_hot_schema_modulus PLS_INTEGER := '0';
SQL*Net message from clien	    69	   0	    0  448.30us      0.0
			  ------------------------------------------------------
v_do_hotspot   VARCHAR(7) := 'FALSE';


v_hotspot_mb  NUMBER := '8';
Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_hotspot_offset_mb NUMBER := '16';
-> Units for % of Total Waits:
   us is microseconds
v_hotspot_modulus  PLS_INTEGER := '3';
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0

-> Ordered by Event (idle events last)

v_sleep_modulus PLS_INTEGER := '0';
						 % of Total Waits
				 -----------------------------------------------
v_sleep_min NUMBER := '.1';
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
v_sleep_max NUMBER := '.5';
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    6293	      85.9   7.0   4.0	 1.8	.7    .6
v_scan_query_pct PLS_INTEGER := '0';
ASM IO for non-blocking p 193.7K    .1	66.7  18.4   5.8   4.2	 2.8   1.4    .7
v_obfuscate VARCHAR(5)	:= 'FALSE';
ASM background starting        1 100.0
ASM file metadata operati   3991  19.3	 1.4  29.5  14.0   7.4	 7.0   4.6  16.8

AWR Flush		       4 100.0
CGS wait for IPC msg	    7382	11.6  76.3   5.4   3.5	 2.1	.7    .4

CSS initialization	      64	10.9  35.9   1.6   1.6		    50.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
CSS operation: action	     157	17.2   1.9	    .6	       1.9  78.3
CSS operation: data query     19					   100.0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
CSS operation: data updat     21					   100.0
CSS operation: query	     192  68.2	13.0   1.0    .5		    17.2

DFS lock handle 	     228			    .4	  .4   6.1  93.0
DLM cross inst call compl   1492	  .2   1.2    .2    .1	  .3   4.0  94.0
v_num_tmp NUMBER := 0;
Data file init write	      80					   100.0
Disk file Mirror Read	     893					   100.0

Disk file operations I/O     939   2.8	 9.7  12.8  20.4   4.5	19.2  20.3  10.3
v_loop_cnt PLS_INTEGER := 0;
GCR CSS group query	      19	84.2  10.5   5.3
v_rowcnt PLS_INTEGER := 0;
GCR CSS group update	      19	89.5   5.3   5.3
IMR slave acknowledgement   1896	 6.1  10.9   3.5  13.1	19.0   9.2  38.2
v_updates_cnt PLS_INTEGER := 0;
IPC group service call	     938   2.1	 4.6   8.8  40.2  31.1	 7.2   3.5   2.3
IPC send completion sync     696	      81.9   3.4   2.7	 3.2   2.4   6.3
v_selects_cnt PLS_INTEGER := 0;
JS kgl get object wait	       2					   100.0

KJC: Wait for msg sends t   1924	 4.1   5.1  10.7  30.3	 9.9   6.8  33.1
KSV master wait 	    1673    .2	 8.1  14.6   3.1   2.3	20.1  10.3  41.3
v_random_access_queries_cnt PLS_INTEGER := 0;
LGWR all worker groups	     421					   100.0
LGWR any worker group	   11.5K	  .1	      .0    .4	  .7   1.7  97.0
v_scan_queries_cnt PLS_INTEGER := 0;
LGWR wait for redo copy      252   3.2	 3.2	.8   5.2  10.3	17.1  20.2  40.1
LGWR worker group orderin   6613    .5	  .5	.3   1.2   2.1	 2.1   2.3  91.0

PGA memory operation	     903  28.3	36.0  15.3   3.9   5.8	 5.4   1.6   3.8
v_do_scan_query BOOLEAN :=FALSE;
PX Deq: Join ACK	      13				       7.7  92.3
PX Deq: Signal ACK EXT	      13	      76.9	  15.4	 7.7
v_scan_query_quota  BOOLEAN := FALSE;
PX Deq: Slave Session Sta     36	13.9  25.0	   5.6	 8.3  22.2  25.0
PX Deq: reap credit	   42.4K	  .9  87.1   5.3   3.8	 1.6	.7    .5
v_scan_workload_only BOOLEAN := FALSE;
SQL*Net message to client    208  89.4	 5.8   1.0   3.4		.5
Sync ASM rebalance	      54	35.2   7.4   1.9	       5.6  50.0
v_random_workload_only BOOLEAN := FALSE;
asynch descriptor resize      83  75.9	20.5	     3.6

buffer busy waits	    1078	  .3	.3    .1   1.3	 1.9   1.6  94.5
control file parallel wri    404					   100.0

control file sequential r   4738	 5.1  11.7    .9    .5	 3.4   3.1  75.2
cursor: pin S		       3					   100.0
v_random_block PLS_INTEGER := 1;
datafile move cleanup dur     40				      62.5  37.5
v_tmp PLS_INTEGER;
db file async I/O submit   60.4K  92.7	 2.5   1.0   1.8   1.1	  .6	.2    .1
db file parallel read	  184.1K					   100.0
v_now PLS_INTEGER;
db file parallel write	  195.8K	  .0	.3   3.3   4.3	 6.7   9.9  75.5
db file scattered read	      74					   100.0
v_brick_wall PLS_INTEGER;
db file sequential read     3.1M					   100.0
db file single write	      80					   100.0

v_begin_time PLS_INTEGER;
direct path sync	      80			  65.0	22.5   8.8   3.8
direct path write	      22				       4.5  95.5
v_end_time PLS_INTEGER;
direct path write temp	      30					   100.0
enq: CF - contention	     126					.8  99.2
v_total_time PLS_INTEGER;
enq: CO - master slave de     10					   100.0
enq: CR - block range reu   2935				  .1   1.9  98.1
v_begin_cpu_tm PLS_INTEGER;
enq: CT - state 	      40				       2.5  97.5
enq: DR - contention	       1					   100.0
v_end_cpu_tm PLS_INTEGER;
enq: DW - contention	       3					   100.0
enq: FB - contention	       2					   100.0
v_total_cpu_tm PLS_INTEGER;
enq: FD - Flashback logic      1					   100.0
enq: HW - contention	     329			    .9	 2.1   3.0  93.9

enq: JS - job run lock -       2					   100.0

v_do_sleeps BOOLEAN := FALSE;
Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_loop_control BOOLEAN := FALSE;
-> Units for % of Total Waits:
   us is microseconds
v_update_quota BOOLEAN := FALSE;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
v_select_only_workload BOOLEAN := FALSE;
-> Ordered by Event (idle events last)

						 % of Total Waits
v_update_only_workload BOOLEAN := FALSE;
				 -----------------------------------------------
			   Total
v_do_update BOOLEAN := FALSE;
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
v_do_hot_schema BOOLEAN := FALSE;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: MV - datafile move        1					   100.0
v_stop_immediate BOOLEAN := FALSE;
enq: MW - contention	       1					   100.0
enq: PS - contention	      29				      10.3  89.7
v_sharing_schema BOOLEAN := FALSE;
enq: RO - fast object reu     52				      17.3  82.7
enq: RP - contention	       1					   100.0
v_seed VARCHAR2(128);
enq: SM -  contention	       2					   100.0
enq: SW - contention	       1					   100.0
v_home_schema_str VARCHAR2(80);
enq: TA - contention	       2					   100.0
enq: TD - KTF dump entrie      1					   100.0
v_scratch VARCHAR2(200) ;
enq: TM - contention	      14					   100.0
enq: TO - contention	       5				      20.0  80.0

enq: TT - contention	       4					   100.0
enq: US - contention	    2633	 3.5   1.3   2.2  13.5	19.4  16.7  43.4
v_cpu_pct NUMBER(6, 3);
enq: WF - contention	      11					   100.0
gc buffer busy release	       2					   100.0
v_my_serial NUMBER(16);
gc cr block 2-way	     143				  .7  11.2  88.1
gc cr block busy	      25					   100.0

gc cr block lost	     286					   100.0
gc cr disk read 	      82				       3.7  96.3
BEGIN
gc cr failure		       1					   100.0
gc cr grant 2-way	     18K		      .1    .3	  .6  12.5  86.5

gc cr grant busy	  138.9K		.0    .0    .0	  .1   1.8  98.1
gc cr grant congested	     183			    .5		    99.5
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
gc cr multi block grant    58.3K		.0	    .0	  .0	.1  99.9
gc cr multi block mixed      186					   100.0
EXECUTE IMMEDIATE v_home_schema_str;
gc current block 2-way	     482			    .2	  .6   9.8  89.4
gc current block busy	    1582		      .1	  .4  12.9  86.6

gc current block congeste      4					   100.0
gc current block lost	     423					   100.0

gc current grant 2-way	   68.5K		      .1    .1	  .3   4.3  95.2
gc current grant busy	  381.6K	  .0	.0    .0    .0	  .1   1.6  98.2
IF ( v_hot_schema_modulus != 0 ) THEN
gc current grant congeste   2554					   100.0
gc current grant read-mos  66.6K		.0    .0    .0	  .0	.2  99.8
	v_do_hot_schema := TRUE;
gc current multi block re      1					   100.0
gc current retry	       4					   100.0
END IF;
gc quiesce		       3				33.3	    66.7
gcs drm freeze in enter s    178					.6  99.4

gcs log flush sync	    3474	 2.5   4.0  13.6  15.7	17.6  19.3  27.4
gcs remastering wait for      12		     8.3		    91.7
IF ( v_sleep_modulus != 0 )	  THEN
gcs resource directory to      1 100.0
ges enter server mode	     129  82.9	 7.0   2.3   4.7    .8	 2.3
	v_do_sleeps := TRUE;
ges inquiry response	     509				  .2   4.5  95.3
ges ipc enter server mode    248  87.9	 7.3   2.4    .4	 1.2	.4    .4
END IF;
ges lms sync during dynam     47			   2.1	 2.1   8.5  87.2
ges resource directory to     10  90.0	10.0

ges2 LMON to wake up LMD      32	 6.3  28.1  12.5   6.3	18.8   3.1  25.0
kfk: async disk IO	      86	 1.2			 1.2   2.3  95.3
IF ( v_max_loop_iterations &gt; 0 )  THEN
kjctssqmg: quick message      51	 2.0  23.5   3.9   9.8	 5.9  19.6  35.3
ksxr poll remote instance   3969	      84.6   6.6   5.1	 2.2   1.0    .6
	v_loop_control := TRUE ;
latch free		    3778	 5.5	.9   1.6   7.1	14.3  12.8  57.9
latch: MGA heap latch	       2	50.0  50.0
END IF;
latch: MGA shared context     19	 5.3	     5.3  10.5	42.1  10.5  26.3

latch: MGA shared context     18	       5.6	  11.1	33.3  38.9  11.1
latch: cache buffers chai    454	 9.5   1.3   2.6  12.3	22.0  17.8  34.4
IF ( v_update_pct = 0 ) 	  THEN
latch: cache buffers lru    2005	11.0   1.4   3.4  13.6	23.1  20.7  26.8
latch: call allocation	       1			 100.0
	v_select_only_workload := TRUE;
latch: checkpoint queue l     77	14.3   5.2   2.6   9.1	32.5  15.6  20.8
latch: enqueue hash chain   1458	14.7   2.3   4.7  13.9	22.6  20.4  21.5
END IF;
latch: gc element	     382	 4.5   1.3   1.3   8.9	16.2  20.7  47.1
latch: gcs resource hash    1796	12.6   3.0   3.2  12.8	20.2  20.9  27.3


Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
IF ( v_update_pct = 100 )	  THEN
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
	v_update_only_workload := TRUE;
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
END IF;
   value of null is truly 0
-> Ordered by Event (idle events last)


						 % of Total Waits
				 -----------------------------------------------
			   Total
IF ( v_scan_query_pct = 0 ) 	THEN
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
	v_random_workload_only := TRUE;
latch: ges resource hash     178	12.4   1.1   6.2  16.9	20.2  22.5  20.8
latch: kjci process conte      5			  40.0	20.0	    40.0
END IF;
latch: messages 	      82	11.0   1.2   2.4  19.5	26.8  14.6  24.4
latch: object queue heade    157	 5.1   1.9   1.3  10.8	19.1  21.7  40.1

latch: redo allocation	     585	11.8   2.1   3.6  14.5	23.9  17.9  26.2
latch: redo writing	      79	 8.9	     1.3  11.4	30.4  30.4  17.7
IF ( v_scan_query_pct = 100 ) 	THEN
latch: shared pool	       1			 100.0
latch: undo global data      152	 6.6   2.6   7.2  15.1	29.6  25.0  13.8
	v_scan_workload_only := TRUE;
libcache interrupt action   3371  95.1	 1.1	.7   1.4    .7	  .4	.3    .2
library cache lock	     346				  .9   8.4  90.8
END IF;
library cache pin	     349				  .3   9.2  90.5
lock deadlock retry	     426	 8.7  73.5   6.8   4.7	 4.9	.5    .9

log file parallel write    26.6K					   100.0
log file sequential read     462		.9  28.8   2.6	18.8   9.7  39.2
v_seconds_to_run := v_seconds_to_run * 100 ;
log file sync		      54				 1.9	    98.1
name-service call wait	       3					   100.0

oracle thread bootstrap        7					   100.0
os thread creation	       7					   100.0
reliable message	    1094					   100.0
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
row cache lock		      29					   100.0
row cache mutex 	      27	14.8   7.4   7.4	 3.7	    66.7

undo segment extension	     466	 7.7   5.6   1.7   1.9		.6  82.4
undo_retention publish re      2  50.0	50.0
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
wait list latch free	      38					   100.0
AQPC idle		      21					   100.0
-- DBMS_RANDOM.seed (val =&gt; v_seed);

ASM background timer	    2725				 8.7   9.0  82.4
ASM cluster membership ch    362					   100.0
v_begin_time := DBMS_UTILITY.GET_TIME();
DIAG idle wait		    8654		      .2    .7	  .4	.7  98.1
Data Guard: Gap Manager       11					   100.0
v_now := v_begin_time ;
Data Guard: Timer	       1					   100.0
GCR sleep		    4194					   100.0
v_brick_wall := v_now + v_seconds_to_run ;
LGWR worker group idle	   19.3K   2.2	 1.9	.8   3.3   6.9	 5.9   4.0  75.0
LMS CR slave timer	  187.7K					.0 100.0
OFS idle		     210					   100.0
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
PING			     519		.4  15.4  14.5	11.8  11.0  47.0

PX Deq Credit: send blkd     149	      26.2   3.4   4.0	 3.4  32.2  30.9
PX Deq: Execute Reply	      13	15.4  15.4		      15.4  53.8
----------------------------------------------------------------------------------------------------------------------
PX Deq: Execution Msg	      69	       1.4   1.4	 2.9  11.6  82.6
PX Deq: Msg Fragment	     171   7.0		.6   5.3   4.1	 2.9  12.3  67.8
-- The following WHILE loop is the master work loop control
PX Deq: Parse Reply	      13	 7.7				    92.3
PX Idle Wait		      23					   100.0
REPL Capture/Apply: RAC A     11					   100.0
----------------------------------------------------------------------------------------------------------------------
RMA: IPC0 completion sync   1068	26.4  56.7   5.2   6.5	 3.1   1.0   1.0
SCM slave idle		    6347					   100.0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
SQL*Net message from clie    209			    .5	16.3  48.3  34.9
Space Manager: slave idle   9521	  .3	.1    .2    .5	  .4	.3  98.2

Streams AQ: qmn coordinat     46				39.1   8.7  52.2
Streams AQ: qmn slave idl     23					   100.0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
class slave wait	    8311	 2.3	.3   1.3   2.9	 2.6   1.7  88.9
dispatcher timer	      10					   100.0
gcs remote message	      2M	 1.6   3.4  12.8  15.2	16.0  19.7  31.3
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
gcs yield cpu		   66.6K	 3.8	.3    .2    .2	  .1	.3  95.1
ges remote message	   33.7K	 1.5   1.7    .7    .9	 2.0   4.8  88.4
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
heartbeat redo informer      631					   100.0
jobq slave wait 	     280					   100.0
lreg timer		     210					   100.0
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
pman timer		     210					   100.0
pmon timer		     421					   100.0
			DBMS_LOCK.SLEEP(v_num_tmp);
rdbms ipc message	   91.2K    .0	15.7	.9   1.9   3.5	 3.1   3.0  72.0
smon timer		       2					   100.0

		END IF;
Wait Event Histogram			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
	END IF;
-> Units for % of Total Waits:
   us is microseconds

-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

						 % of Total Waits
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
				 -----------------------------------------------
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
wait for unread message o    968					   100.0
			v_sharing_schema := TRUE ;
watchdog main loop	    1050					   100.0
			  ------------------------------------------------------

		ELSE

Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
			IF ( v_sharing_schema = TRUE ) THEN
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
				EXECUTE IMMEDIATE v_home_schema_str;
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
				v_sharing_schema := FALSE;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
			END IF;

						 % of Total Waits
		END IF;
				 -----------------------------------------------
			   Waits
			    1us
	END IF;
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----

AQ: RAC AQ Network	    5847				85.9   7.0   7.1
ASM IO for non-blocking p 176.2K		      .1  66.7	18.4   5.8   9.0
	-- Choose the random block. The v_do_hotspot handler that follows can override.
ASM background starting        1		   100.0
ASM file metadata operati   2561		.1  19.3   1.4	29.5  14.0  35.8
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
AWR Flush		       4		   100.0
CGS wait for IPC msg	    6893			  11.6	76.3   5.4   6.6

CSS initialization	      31			  10.9	35.9   1.6  51.6
CSS operation: action	      30			  17.2	 1.9	    80.9
CSS operation: query	     159	       1.0  67.2  13.0	 1.0	.5  17.2
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
DLM cross inst call compl     24			    .2	 1.2	.2  98.4
Disk file operations I/O     429		     2.8   9.7	12.8  20.4  54.3
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
GCR CSS group query	      19			  84.2	10.5   5.3
GCR CSS group update	      19			  89.5	 5.3   5.3
IMR slave acknowledgement    388			   6.1	10.9   3.5  79.5
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
IPC group service call	     523		     2.1   4.6	 8.8  40.2  44.2
IPC send completion sync     594				81.9   3.4  14.7
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
KJC: Wait for msg sends t    383			   4.1	 5.1  10.7  80.1
KSV master wait 	     434		      .2   8.1	14.6   3.1  74.1
LGWR any worker group	      20			    .1		.0  99.8
	END IF;
LGWR wait for redo copy       31		     3.2   3.2	  .8   5.2  87.7
LGWR worker group orderin    160		      .5    .5	  .3   1.2  97.6

PGA memory operation	     754		    28.3  36.0	15.3   3.9  16.5
PX Deq: Signal ACK EXT	      10				76.9	    23.1
----------------------------------------------------------------------------------------------------------------------
PX Deq: Slave Session Sta     14			  13.9	25.0	    61.1
PX Deq: reap credit	   39.6K			    .9	87.1   5.3   6.7
SQL*Net message to client    207		    89.4   5.8	 1.0   3.4    .5
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
Sync ASM rebalance	      24			  35.2	 7.4   1.9  55.6
asynch descriptor resize      83		    75.9  20.5	       3.6
----------------------------------------------------------------------------------------------------------------------
buffer busy waits	       7			    .3	  .3	.1  99.4
control file sequential r    840			   5.1	11.7	.9  82.3

db file async I/O submit   59.2K		.0  92.7   2.5	 1.0   1.8   2.0
db file parallel write	    7027			    .0	  .3   3.3  96.4
enq: US - contention	     184			   3.5	 1.3   2.2  93.0
	IF  ( v_select_only_workload = TRUE ) THEN
gc cr grant 2-way	      25					.1  99.9
gc cr grant busy	      31				  .0	.0 100.0
		-- handle case where user specified zero pct updates (a SELECT-only workload)
gc cr multi block grant        3				  .0	   100.0
gc current block busy	       2					.1  99.9
gc current grant 2-way	      39					.1  99.9
		v_do_update := FALSE;
gc current grant busy	     126			    .0	  .0	.0 100.0
gc current grant read-mos      7				  .0	.0 100.0
		v_update_quota := TRUE ;
gcs log flush sync	     698			   2.5	 4.0  13.6  79.9
gcs remastering wait for       1				       8.3  91.7
	ELSE
gcs resource directory to      1		   100.0
ges enter server mode	     125		    82.9   7.0	 2.3   4.7   3.1
ges ipc enter server mode    243		    87.9   7.3	 2.4	.4   2.0
		IF ( v_update_only_workload = TRUE ) THEN
ges resource directory to     10		    90.0  10.0
ges2 LMON to wake up LMD      15			   6.3	28.1  12.5  53.1
			-- handle case where user specified 100% updates
kfk: async disk IO	       1			   1.2		    98.8
kjctssqmg: quick message      15			   2.0	23.5   3.9  70.6
			v_do_update := TRUE;
ksxr poll remote instance   3618				84.6   6.6   8.8
latch free		     298			   5.5	  .9   1.6  92.1
			v_update_quota := FALSE;
latch: MGA heap latch	       2			  50.0	50.0
latch: MGA shared context      2			   5.3	       5.3  89.5
latch: MGA shared context      1				 5.6	    94.4
		ELSE
latch: cache buffers chai     61			   9.5	 1.3   2.6  86.6
latch: cache buffers lru     317			  11.0	 1.4   3.4  84.2
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
latch: checkpoint queue l     17			  14.3	 5.2   2.6  77.9
latch: enqueue hash chain    317			  14.7	 2.3   4.7  78.3
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
latch: gc element	      27			   4.5	 1.3   1.3  92.9
latch: gcs resource hash     338			  12.6	 3.0   3.2  81.2
			IF ( v_update_quota = FALSE ) THEN

Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
				-- Handle case where user has set UPDATE_PCT to a valid value
-> Units for % of Total Waits:
   us is microseconds
				--
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
				-- We are doing updates during this run and quota has not been met yet
   value of null is truly 0
				-- We still vacillate until update quota has been met
-> Ordered by Event (only non-idle events are displayed)


						 % of Total Waits
				 -----------------------------------------------
			   Waits
				IF ( MOD(v_random_block,  2) = 0 ) THEN
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
					v_do_update := TRUE;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
latch: ges resource hash      35			  12.4	 1.1   6.2  80.3
latch: messages 	      12			  11.0	 1.2   2.4  85.4
				ELSE
latch: object queue heade     13			   5.1	 1.9   1.3  91.7
latch: redo allocation	     102			  11.8	 2.1   3.6  82.6
					v_do_update := FALSE;
latch: redo writing	       8			   8.9	       1.3  89.9
latch: undo global data       25			   6.6	 2.6   7.2  83.6
				END IF;
libcache interrupt action   3316		.5  94.7   1.1	  .7   1.4   1.6
lock deadlock retry	     379			   8.7	73.5   6.8  11.0
log file sequential read     137				  .9  28.8  70.3
			ELSE
row cache mutex 	       8			  14.8	 7.4   7.4  70.4
undo segment extension	      70			   7.7	 5.6   1.7  85.0
				-- UPDATE quota has been filled,  force drain some SELECTs
undo_retention publish re      2		    50.0  50.0
			  ------------------------------------------------------

				v_do_update := FALSE;

Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
			END IF;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
		END IF;
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
	END IF;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)


						 % of Total Waits
				 -----------------------------------------------
----------------------------------------------------------------------------------------------------------------------
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
-- The type of SQL is now determined...execute it in the following section
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	      35  99.4	  .4	.2    .0
----------------------------------------------------------------------------------------------------------------------
ASM IO for non-blocking p   1385  99.3	  .5	.2    .0    .0	  .0
ASM file metadata operati    635  83.2	 1.4   1.5   4.5   4.7	 3.1	.7    .9

CGS wait for IPC msg	      26  99.6	  .3	.1
CSS initialization	      32  50.0				39.1  10.9
	IF ( v_do_update != TRUE ) THEN
CSS operation: action	     123  21.7	15.3  50.3   9.6   2.5	  .6
CSS operation: data query     19	52.6  10.5  26.3   5.3	 5.3
CSS operation: data updat     21	57.1  42.9
		--
CSS operation: query	      33  82.8	  .5  10.9   4.7   1.0
DFS lock handle 	     211   7.0	30.7  33.8  22.4   5.3		.4    .4
		-- Do a SELECT statement
DLM cross inst call compl   1352   6.0	31.4  34.5  19.6   4.4	  .6	.1   3.4
Data file init write	      39				 7.5  41.3  51.3
		-- Work out scan or random
Disk file Mirror Read	     819		    43.6  25.4	11.2  11.5   8.3
Disk file operations I/O      97  89.7	 6.4   2.1   1.0    .6	  .1	.1
IMR slave acknowledgement    660  61.8	 3.2	.9  11.1  11.8	 4.1   3.7   3.4
		IF  ( v_random_workload_only = TRUE ) THEN
IPC group service call	      22  97.7	 1.1   1.0    .2    .1
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
IPC send completion sync      44  93.7	 1.9   2.4   1.6    .4
KJC: Wait for msg sends t    307  66.9	 6.0   5.1   4.0    .8		    17.2
			v_do_scan_query := FALSE;
KSV master wait 	     657  58.7	 4.0   3.8  10.6  11.2	 8.0   1.6   2.0
LGWR all worker groups	     268		     3.8  10.2	28.0  21.6  36.3
LGWR any worker group	   10.3K   3.0	 3.3   7.1  20.6  19.0	22.2  17.4   7.3
			v_scan_query_quota := TRUE ;
LGWR wait for redo copy      101  59.9	21.4  13.1   3.2   2.4
LGWR worker group orderin   5865   9.0	 3.8   7.5  41.2  19.8	 7.3   9.0   2.4
		ELSE
PGA memory operation	      34  96.2	 2.2   1.2    .3
PX Deq: Join ACK	      12   7.7	30.8	    46.2   7.7	 7.7
			IF ( v_scan_workload_only = TRUE ) THEN
PX Deq: Slave Session Sta      7  75.0	13.9   2.8   2.8		     5.6
PX Deq: reap credit	     206  99.5	  .4	.1    .0    .0	  .0
Sync ASM rebalance	       9  50.0	 5.6  11.1			    33.3
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
buffer busy waits	     152   5.5	 1.9   1.3   1.0   1.5	 2.0   6.3  80.4
control file parallel wri    341		     6.7  35.6	20.5  21.5  15.6
				v_do_scan_query := TRUE;
control file sequential r   3419  24.8	 1.5	.8  41.9  18.4	 4.1   5.5   3.1
cursor: pin S		       3	     100.0
datafile move cleanup dur     15  62.5	25.0  12.5
				v_scan_query_quota := FALSE;
db file async I/O submit      89  99.9	  .1	.0    .0    .0	  .0
db file parallel read	   94.9K		      .0   5.9	21.0  24.6  48.4
			ELSE
db file parallel write	  144.8K  24.5	15.9  19.3  19.7  10.8	 5.3   2.8   1.5
db file scattered read	      71		    31.1  51.4	 9.5   4.1   4.1
				IF ( v_scan_query_quota = FALSE ) THEN
db file sequential read       3M		    51.1  30.3	 6.8   8.2   3.5
db file single write	      73		    18.8  36.3	21.3  15.0   8.8
direct path sync	       3  96.3	 2.5   1.3
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
direct path write	      20   4.5	 4.5   4.5  22.7  18.2	27.3  13.6   4.5
direct path write temp	      30		    63.3  36.7
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
enq: CF - contention	     115    .8	28.6  38.1  17.5   3.2	 3.2	.8   7.9
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
enq: CO - master slave de     10	40.0  20.0  30.0  10.0
		-- so reset flags and counters
enq: CR - block range reu   2309   1.9	12.8  25.3  19.6   6.3	 5.7   8.9  19.4
enq: CT - state 	      38   2.5	37.5  27.5  22.5   7.5		     2.5
enq: DR - contention	       1       100.0
		v_scan_query_quota := FALSE;
enq: DW - contention	       3		    66.7  33.3
enq: FB - contention	       2	50.0  50.0
enq: FD - Flashback logic      1       100.0
		v_scan_queries_cnt := 0;
enq: HW - contention	      44   6.1	 4.6   1.8   2.7    .3	 1.2   2.7  80.5
enq: JS - job run lock -       2	50.0		  50.0
enq: MV - datafile move        1		   100.0
		v_random_access_queries_cnt := 0;
enq: MW - contention	       1		   100.0
enq: PS - contention	      26  10.3	44.8  31.0   6.9   6.9
enq: RO - fast object reu     42  17.3	44.2  17.3  15.4   3.8		     1.9
	END IF;
enq: RP - contention	       1			 100.0
enq: SM -  contention	       2	50.0  50.0
enq: SW - contention	       1	     100.0

enq: TA - contention	       2       100.0

Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	v_loop_cnt := v_loop_cnt + 1 ;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
	v_now := DBMS_UTILITY.GET_TIME();
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0

-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
		-- If this is a fixed-iteration count test cycle and we've hit the number of
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: TD - KTF dump entrie      1	     100.0
enq: TM - contention	      13	28.6  42.9  14.3   7.1		     7.1
enq: TO - contention	       4  20.0	80.0
		-- iterations then set exit flag
enq: TT - contention	       4	      25.0  75.0
		v_stop_immediate := TRUE ;
enq: US - contention	     731  56.6	12.0   5.8   3.3   1.4	 1.4   3.9  15.7
enq: WF - contention	      11	81.8  18.2
gc buffer busy release	       2				     100.0
	END IF;
gc cr block 2-way	     126  11.9	24.5  33.6  21.7   7.7	  .7
gc cr block busy	      21		     4.0  24.0	36.0  20.0  16.0
gc cr disk read 	      79   3.7	15.9  20.7  34.1  20.7	 4.9
END LOOP;
gc cr grant 2-way	   15.6K  13.5	27.2  31.9  20.4   5.9	  .8	.1    .1
gc cr grant busy	  134.2K   1.9	16.1  28.8  30.1  15.9	 4.7   1.0   1.5
gc cr grant congested	     176    .5	       7.1  48.6  27.3	12.0   1.1   3.3

gc cr multi block grant    56.3K    .1	 2.7  14.6  34.6  31.5	11.2   1.9   3.3
gc cr multi block mixed      120	 4.3   9.7  14.0  17.2	13.4   5.9  35.5
v_end_time := v_now ;
gc current block 2-way	     430  10.6	33.0  30.7  19.3   5.4	  .8	      .2
gc current block busy	    1368  13.4	30.0  28.7  17.6   7.8	 1.8	.6    .1
gc current block congeste      4	      25.0  50.0	25.0
v_now := DBMS_UTILITY.GET_TIME();
gc current grant 2-way	   64.7K   4.8	10.2  21.1  28.4  23.3	 9.6   1.8    .8
gc current grant busy	  371.1K   1.8	15.5  29.8  30.9  15.8	 4.3	.8   1.0
gc current grant congeste   2423		.6  10.8  37.1	35.6  10.8   5.1
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
gc current grant read-mos  65.9K    .2	 9.5  27.1  33.2  20.8	 6.8   1.4    .9
gc current multi block re      1			       100.0
gc quiesce		       2  33.3	33.3  33.3

gcs drm freeze in enter s      2    .6				       1.1  98.3
gcs log flush sync	     951  72.6	14.5   8.4   3.0    .8	  .3	.3
gcs remastering wait for       6   8.3	 8.3   8.3	   8.3	 8.3  16.7  41.7
v_total_time := v_end_time - v_begin_time ;
ges inquiry response	     482   4.7	28.9  34.4  26.3   4.5	  .6	      .6
ges ipc enter server mode      1  99.6	  .4
ges lms sync during dynam     33  12.8	 2.1  12.8   8.5  19.1	27.7	    17.0
ges2 LMON to wake up LMD       8  75.0	 9.4  15.6
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
kfk: async disk IO	      76   4.7	 2.3	    43.0  19.8	 9.3  14.0   7.0
kjctssqmg: quick message      18  64.7	27.5   5.9   2.0
ksxr poll remote instance     22  99.4	  .4	.1	    .1
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
latch free		    2174  42.1	 9.2  12.0  16.0  14.3	 6.0	.0    .3
latch: MGA shared context      5  73.7	26.3
latch: MGA shared context      2  88.9	11.1
latch: cache buffers chai    156  65.6	14.3  11.5   5.9   2.0	  .7
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
latch: cache buffers lru     537  73.2	13.2   9.3   3.4    .9
latch: checkpoint queue l     16  79.2	 9.1   6.5   5.2
latch: enqueue hash chain    313  78.5	13.9   5.5   1.5    .2	  .4

latch: gc element	     180  52.9	19.1  18.3   8.6    .5	  .5
latch: gcs resource hash     468  72.7	14.2   7.6   3.1    .8	  .2	.1   1.3
latch: ges resource hash      37  79.2	14.0   4.5   2.2
END;</pre_sqltext></td></tr>
latch: kjci process conte      2  60.0	40.0
latch: messages 	      20  75.6	14.6   9.8
latch: object queue heade     63  59.9	19.1  12.1   6.4   2.5
latch: redo allocation	     153  73.8	14.7   7.4   3.6    .5
<tr><td scope="row" class='awrc'><a class="awr" name="cpwuynd81c18b"></a>cpwuynd81c18b</td><td class='awrc'><pre_sqltext class="awr">DECLARE
latch: redo writing	      14  82.3	 6.3  10.1   1.3
latch: undo global data       21  86.2	11.2   1.3   1.3
libcache interrupt action      8  99.8	  .1	.1	    .0
v_default_schema_number PLS_INTEGER := '56';
library cache lock	     311   9.2	31.2  37.3  15.0   5.8	  .6	      .9
library cache pin	     315   9.5	35.2  26.6  22.3   4.9	 1.1	      .3
lock deadlock retry	       4  99.1	  .7	      .2
v_update_pct PLS_INTEGER := '15';
log file parallel write    20.4K		      .6   8.9	44.3  23.1  23.1
log file sequential read     181  60.8	10.2  22.9   5.0    .9		.2
log file sync		      47   1.9		     1.9   9.3	42.6  33.3  11.1
v_max_loop_iterations PLS_INTEGER := '0';
name-service call wait	       3	     100.0
oracle thread bootstrap        4				      57.1  42.9
os thread creation	       7	      57.1  28.6  14.3

v_seconds_to_run PLS_INTEGER := '600';
Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_scale PLS_INTEGER := '1048576';
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
v_work_unit PLS_INTEGER := '80' ;
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
v_redo_stress  VARCHAR2(12) := 'LITE';
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
v_hot_schema_modulus PLS_INTEGER := '0';
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_do_hotspot   VARCHAR(7) := 'FALSE';
reliable message	    1033	  .2	.5  10.3  42.1	37.0   4.3   5.6
row cache lock		      29	31.0  34.5  27.6   6.9
row cache mutex 	      18  33.3				63.0   3.7
v_hotspot_mb  NUMBER := '8';
undo segment extension	     141  17.6				14.6  15.7  52.1
wait list latch free	      38	     100.0
			  ------------------------------------------------------

v_hotspot_offset_mb NUMBER := '16';

Wait Event Histogram (up to 2 sec)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_hotspot_modulus  PLS_INTEGER := '3';
-> Units for % of Total Waits:
   ms is milliseconds
   s is 1024 milliseconds (approximately 1 second)

-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
v_sleep_modulus PLS_INTEGER := '0';

						 % of Total Waits
				 -----------------------------------------------
			   Waits
v_sleep_min NUMBER := '.1';
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_sleep_max NUMBER := '.5';
ASM file metadata operati     37  99.1	  .6	.3    .1
DFS lock handle 	       1  99.6		      .4
DLM cross inst call compl     46  96.6	  .7   1.1    .7    .1	  .2	.1    .3
Data file init write	      41  48.8	28.8  16.3   3.8   2.5
v_scan_query_pct PLS_INTEGER := '0';
Disk file Mirror Read	      74  91.7	 8.2	.1
IMR slave acknowledgement     64  96.6	 3.3	.1
JS kgl get object wait	       2	      50.0  50.0
v_obfuscate VARCHAR(5)	:= 'FALSE';
KJC: Wait for msg sends t    330  82.8			  17.0	  .1
KSV master wait 	      34  98.0	 1.3	.5    .2
LGWR all worker groups	     153  63.7	28.0   3.8   2.1   2.1	  .2

LGWR any worker group	     841  92.7	 4.7	.3   2.3    .1	  .0
LGWR worker group orderin    156  97.6	 1.5	.0    .7    .1
PX Deq: Slave Session Sta      2  94.4				 5.6

Sync ASM rebalance	      18  66.7	 1.9  24.1   7.4
buffer busy waits	     806  19.6	 9.8  10.1  14.4  17.0	16.5   7.0   5.7
control file parallel wri     63  84.4	 8.7   1.7   4.5    .7
control file sequential r    146  96.9	 3.0	.1
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
db file parallel read	   89.2K  51.6	42.9   5.6    .0
db file parallel write	    2994  98.5	  .4	.3    .8    .0
db file scattered read	       3  95.9	 4.1
db file sequential read   108.3K  96.5	 3.4	.1    .0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
db file single write	       7  91.3	 5.0   1.3   2.5
direct path write	       1  95.5	 4.5
enq: CF - contention	      10  92.1	 3.2   1.6   3.2

enq: CR - block range reu    566  80.6	 6.4   2.5   5.2   3.2	 1.4	.5    .1
enq: CT - state 	       1  97.5			   2.5
enq: HW - contention	     217  19.5	 6.1  10.6   8.8  13.1	14.0  13.4  14.6
enq: RO - fast object reu      1  98.1				       1.9
v_num_tmp NUMBER := 0;
enq: TM - contention	       1  92.9	       7.1
enq: US - contention	     403  84.3	 5.5   2.2   3.2   2.0	 2.1	.4    .4
gc cr block busy	       4  84.0	 4.0	     8.0   4.0

gc cr block lost	     286			  45.8	54.2
gc cr failure		       1			       100.0
gc cr grant 2-way	      23  99.9		.0		  .1
v_loop_cnt PLS_INTEGER := 0;
gc cr grant busy	    2071  98.5	  .4	.8    .0	  .2	.0
gc cr grant congested	       6  96.7	 1.6   1.1    .5
gc cr multi block grant     1945  96.7	  .4   1.6    .0	 1.2	.1    .0
v_rowcnt PLS_INTEGER := 0;
gc cr multi block mixed       66  64.5	       4.8   1.1   3.8	25.8
gc current block busy	       2  99.9	  .1
gc current block lost	     423			  50.8	49.2
gc current grant 2-way	     559  99.2	  .3	.4    .0    .0	  .1	.0    .0
v_updates_cnt PLS_INTEGER := 0;
gc current grant busy	    3893  99.0	  .2	.6    .0	  .2	.0    .0
gc current grant congeste    131  94.9	 1.5   3.0    .5    .0	  .2
gc current grant read-mos    598  99.1	  .3	.5    .0	  .0
v_selects_cnt PLS_INTEGER := 0;
gc current retry	       4	      25.0  50.0  25.0
gcs drm freeze in enter s    175   1.7	 5.1  50.0  41.0   2.2
gcs remastering wait for       5  58.3	      41.7

ges inquiry response	       3  99.4		      .6
ges lms sync during dynam      8  83.0	14.9   2.1
kfk: async disk IO	       6  93.0	 3.5   1.2   1.2   1.2
latch free		      12  99.7		.3
v_random_access_queries_cnt PLS_INTEGER := 0;
latch: gcs resource hash      23  98.7	  .2   1.1
library cache lock	       3  99.1		.6    .3
library cache pin	       1  99.7		      .3
log file parallel write     6134  76.9	20.3	.8   1.8    .2	  .0
v_scan_queries_cnt PLS_INTEGER := 0;
log file sync		       6  88.9	 7.4   1.9   1.9
oracle thread bootstrap        3  57.1	42.9
reliable message	      60  94.4	 1.2   1.0   1.0   1.9	  .3	.1    .1

undo segment extension	     243  47.9	14.6  11.8   9.9   6.4	 9.4
			  ------------------------------------------------------


v_do_scan_query BOOLEAN :=FALSE;
Wait Event Histogram (up to 2 min)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
v_scan_query_quota  BOOLEAN := FALSE;
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
v_scan_workload_only BOOLEAN := FALSE;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
v_random_workload_only BOOLEAN := FALSE;
				 -----------------------------------------------
			   Waits
			    4s
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m

------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
DLM cross inst call compl      5  99.7	  .3
buffer busy waits	      61  94.3	 4.6   1.0

enq: CR - block range reu      3  99.9	  .1
enq: HW - contention	      48  85.4	10.6   2.1   1.8
enq: US - contention	      10  99.6	  .4
gc cr multi block grant        1 100.0	  .0
v_random_block PLS_INTEGER := 1;
gc current block 2-way	       1  99.8	  .2
gc current grant 2-way	       1 100.0		.0
gc current grant busy	       1 100.0		.0
reliable message	       1  99.9	  .1
v_tmp PLS_INTEGER;
			  ------------------------------------------------------


Wait Event Histogram (up to 1 hr)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_now PLS_INTEGER;

		  No data exists for this section of the report.
			  ------------------------------------------------------


Service Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_brick_wall PLS_INTEGER;
-> ordered by DB Time

							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)

---------------------------- ------------ ------------ ------------ ------------
p60sdb.example.com		   37,256	 2,497	     17,029	  18,101
SYS$BACKGROUND				2	     2		  2	      47
SYS$USERS				0	     0		  0	       1
p60sdbXDB				0	     0		  0	       0
v_begin_time PLS_INTEGER;
			  ------------------------------------------------------

Service Wait Class Stats		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_end_time PLS_INTEGER;
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds

Service Name
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------
v_total_time PLS_INTEGER;
p60sdb.example.com
  3269032     29553	 1468	    527 	1	  0	  180	      0
SYS$BACKGROUND
   195990	 22	 4158	      3 	0	  0	  889	      0
v_begin_cpu_tm PLS_INTEGER;
SYS$USERS
       32	  0	   22	      0 	2	  0	    7	      0
			  ------------------------------------------------------

v_end_cpu_tm PLS_INTEGER;
Top 10 Channel Waits			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top 10 Channel Waits by wait time

Channel
v_total_cpu_tm PLS_INTEGER;
----------------------------------------------------------------
	       Total
		Wait
      Waits Time (s)  Avg Wait

----------- -------- ---------
kxfp control signal channel
	  7	   0	1.42ms
obj broadcast channel
	 10	   0	2.97ms
v_do_sleeps BOOLEAN := FALSE;
RBR channel
      1,079	  29   27.02ms
			  ------------------------------------------------------

v_loop_control BOOLEAN := FALSE;

Top Process Types by Wait Class 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> This table displays top process types ordered by wait class

v_update_quota BOOLEAN := FALSE;
Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi User I/O		    29,587.9
      Others (foregrounds + unclassi Cluster		     5,437.6
v_select_only_workload BOOLEAN := FALSE;
LG    Log Writer Slave		     System I/O 	       673.7
      Others (foregrounds + unclassi Concurrency	       539.2
      Others (foregrounds + unclassi Other		       446.7
      Others (foregrounds + unclassi Configuration	       307.7
v_update_only_workload BOOLEAN := FALSE;
DBW0  db writer process 0	     System I/O 	       237.6
DBW3  db writer process 3	     System I/O 	       235.0
DBW1  db writer process 1	     System I/O 	       232.4
DBW2  db writer process 2	     System I/O 	       230.5
v_do_update BOOLEAN := FALSE;
LGWR  Redo etc. 		     Other		       198.9
LG    Log Writer Slave		     Other			52.3
MZ    MMON slave class 2	     Other			19.0
CKPT  checkpoint		     System I/O 		14.9
v_do_hot_schema BOOLEAN := FALSE;
RMS0  rac management server	     System I/O 		 9.9
      Others (foregrounds + unclassi System I/O 		 9.5
LMON  global enqueue service monitor Other			 8.3
W     space management slave pool    Other			 7.6
v_stop_immediate BOOLEAN := FALSE;
O     ASM Connection Pool	     Other			 5.9
IMR   CGS IMR Slave		     User I/O			 5.6
			  ------------------------------------------------------

v_sharing_schema BOOLEAN := FALSE;

Top Process Types by CPU Used		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> This table displays top process types ordered by CPU time

v_seed VARCHAR2(128);
Proces Description		      CPU Time (sec)
v_home_schema_str VARCHAR2(80);
------ ------------------------------ --------------
       Others (foregrounds + unclassi	     2,497.4
LM     global cache service process	       961.4
v_scratch VARCHAR2(200) ;
DBW2   db writer process 2			73.6
DBW1   db writer process 1			73.5
DBW0   db writer process 0			73.3
DBW3   db writer process 3			73.2

VKTM   Virtual Keeper of TiMe process		68.9
LG     Log Writer Slave 			26.7
CR*    GCS CR Slave				16.6
RS*    GCS RM Slave				16.6
v_cpu_pct NUMBER(6, 3);
M      MMON slave class 1			13.3
LGWR   Redo etc.				10.4
P      Parallel query slave			 9.5
v_my_serial NUMBER(16);
GCR    GCR Slaves (LMHB)			 6.0
IPC0   IPC Service 0				 5.9
LMD0   global enqueue service daemon		 5.6
SCM    DLM Statistics Collection and		 4.6

LMD1   global enqueue service daemon		 4.0
DIA0   diagnosibility process 0 		 3.9
RMS0   rac management server			 3.1
			  ------------------------------------------------------
BEGIN


SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL

   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total DB Time (s):	   37,398
-> Captured PL/SQL account for	 69.2% of Total DB Time (s):	      37,398
EXECUTE IMMEDIATE v_home_schema_str;

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------

	23,920.7	 32,223 	 0.74	64.0	4.9   79.7 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


	13,030.4	182,935 	 0.07	34.8	9.6   80.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
IF ( v_hot_schema_modulus != 0 ) THEN

	   564.2	      1        564.18	 1.5	6.7   64.3 9j9p88t9arm28
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
	v_do_hot_schema := TRUE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

END IF;
	   563.3	      1        563.30	 1.5	6.7   92.1 5q9x3sz49jcja
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.3	      1        563.29	 1.5	6.1   62.3 9n7n07rfgj5y8
IF ( v_sleep_modulus != 0 )	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	v_do_sleeps := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.2	      1        563.25	 1.5	6.6   88.5 cfqgzkaxqzg38
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	   563.2	      1        563.18	 1.5	6.8   65.4 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
IF ( v_max_loop_iterations &gt; 0 )  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_loop_control := TRUE ;
	   563.1	      1        563.14	 1.5	6.9   93.0 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   563.1	      1        563.10	 1.5	6.8   93.2 944mdaa2ps4z4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_update_pct = 0 ) 	  THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.1	      1        563.06	 1.5	6.7   92.7 cgymr2xd94y9m
	v_select_only_workload := TRUE;
Module: SQL*Plus

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
END IF;
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time

-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total DB Time (s):	   37,398
-> Captured PL/SQL account for	 69.2% of Total DB Time (s):	      37,398
IF ( v_update_pct = 100 )	  THEN

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	v_update_only_workload := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
END IF;

	   563.0	      1        563.04	 1.5	6.5   61.8 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=

'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

IF ( v_scan_query_pct = 0 ) 	THEN
	   563.0	      1        563.04	 1.5	6.3   62.8 1bz3czz4jjj42
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_random_workload_only := TRUE;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   563.0	      1        563.01	 1.5	6.7   89.1 czcqz0vzf0sbx
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.0	      1        562.99	 1.5	6.5   64.6 4ygra552dfxxx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
IF ( v_scan_query_pct = 100 ) 	THEN
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	v_scan_workload_only := TRUE;
	   563.0	      1        562.97	 1.5	6.7   90.1 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   563.0	      1        562.97	 1.5	6.8   91.5 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_seconds_to_run := v_seconds_to_run * 100 ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.0	      1        562.97	 1.5	6.8   64.5 8g9692jjz865t
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
	   562.9	      1        562.88	 1.5	6.6   64.4 7c7tj4y4fs2sx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);
SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL

   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
v_begin_time := DBMS_UTILITY.GET_TIME();
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total DB Time (s):	   37,398
-> Captured PL/SQL account for	 69.2% of Total DB Time (s):	      37,398

v_now := v_begin_time ;
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------

v_brick_wall := v_now + v_seconds_to_run ;
	   562.8	      1        562.83	 1.5	6.2   63.1 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.8	      1        562.80	 1.5	6.7   88.7 f4rq0sufc25j7
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

	   562.8	      1        562.80	 1.5	6.7   63.2 6kvyh9k0yg876
				IF ( MOD(v_random_block,  2) = 0 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_update := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.8	      1        562.79	 1.5	6.8   65.9 8h692kb83szmc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.8	      1        562.77	 1.5	6.9   94.2 63fqcgaztwa1q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   562.8	      1        562.76	 1.5	5.9   61.1 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.8	      1        562.76	 1.5	6.6   63.4 10k9hqm5kftvd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.7	      1        562.75	 1.5	6.8   93.1 fumugnjxgxhkj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
				ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.7	      1        562.69	 1.5	6.8   94.9 4asnrz2aymyu8
					v_do_update := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=

				END IF;
SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
			ELSE
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
				-- UPDATE quota has been filled,  force drain some SELECTs
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total DB Time (s):	   37,398
				v_do_update := FALSE;
-> Captured PL/SQL account for	 69.2% of Total DB Time (s):	      37,398

	Elapsed 		 Elapsed Time
			END IF;
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	END IF;
	   562.7	      1        562.67	 1.5	6.9   94.0 aduz7424c35kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	   562.7	      1        562.67	 1.5	6.8   90.5 53zh5qv04rybn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

----------------------------------------------------------------------------------------------------------------------
	   562.7	      1        562.66	 1.5	6.8   65.8 db7t40j603g1d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
-- The type of SQL is now determined...execute it in the following section
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
	   562.6	      1        562.56	 1.5	6.8   90.1 4vm7gtb0xuaqp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=

'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
	IF ( v_do_update != TRUE ) THEN
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   562.5	      1        562.55	 1.5	6.9   64.8 4r329twa9rbb2
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Do a SELECT statement
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.5	      1        562.53	 1.5	6.8   91.2 3q9qpxjx8mtpr
		-- Work out scan or random
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF  ( v_random_workload_only = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.5	      1        562.49	 1.5	6.8   64.4 da3a63tnfzztu
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			v_do_scan_query := FALSE;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			v_scan_query_quota := TRUE ;
	   562.5	      1        562.46	 1.5	6.8   91.9 db24xbnnyz072
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
		ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			IF ( v_scan_workload_only = TRUE ) THEN

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
				v_do_scan_query := TRUE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total DB Time (s):	   37,398
-> Captured PL/SQL account for	 69.2% of Total DB Time (s):	      37,398

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
				v_scan_query_quota := FALSE;
---------------- -------------- ------------- ------ ------ ------ -------------
	   562.3	      1        562.26	 1.5	6.9   66.4 bu2cwsvp2u0hx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.3	      1        562.26	 1.5	6.8   90.4 bzc6y6q6k2uj5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
				IF ( v_scan_query_quota = FALSE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.2	      1        562.17	 1.5	7.0   94.1 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.2	      1        562.15	 1.5	6.9   95.0 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.1	      1        562.12	 1.5	6.9   90.1 0fq8myny00n70
Module: SQL*Plus
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	   562.1	      1        562.11	 1.5	7.0   67.5 cpwuynd81c18b
						v_do_scan_query := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

					ELSE
	   562.1	      1        562.09	 1.5	6.8   91.8 7t71jqahkgfua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
						v_do_scan_query := FALSE;

	   562.0	      1        561.98	 1.5	6.8   94.1 9qptdf46kwuqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
					END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   561.9	      1        561.93	 1.5	6.9   92.6 bk0nwr6ducbsw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

				ELSE
SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
					-- Scan quota has been filled,	force drain some random access SELECTS
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total DB Time (s):	   37,398
-> Captured PL/SQL account for	 69.2% of Total DB Time (s):	      37,398

					v_do_scan_query := FALSE;
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
				END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   561.9	      1        561.87	 1.5	6.8   95.6 1juyrwu05gda4
			END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
		END IF;

	   561.9	      1        561.86	 1.5	6.8   93.7 atadc5ncuxh43
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   561.8	      1        561.78	 1.5	6.9   65.9 1vbnx1nmxh6g5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   561.4	      1        561.41	 1.5	6.8   90.7 966682317run1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
		IF ( v_do_scan_query != TRUE ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------


			SELECT COUNT(c2) INTO v_rowcnt
SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			FROM cf1
-> Captured SQL account for   97.0% of Total CPU Time (s):	     2,505
-> Captured PL/SQL account for	 69.6% of Total CPU Time (s):		2,505

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   1,248.1	182,935       0.01   49.8   13,030.4	9.6   80.1 bhdvtsvjhgvrh
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

   1,178.4	 32,223       0.04   47.0   23,920.7	4.9   79.7 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


      39.3	      1      39.32    1.6      562.1	7.0   67.5 cpwuynd81c18b
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      39.3	      1      39.31    1.6      562.2	7.0   94.1 5nz6b4v9qbsbr
		ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      39.1	      1      39.11    1.6      563.1	6.9   93.0 bbp00h54hyg9h

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      39.0	      1      39.01    1.6      561.8	6.9   65.9 1vbnx1nmxh6g5
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      39.0	      1      38.95    1.6      562.1	6.9   90.1 0fq8myny00n70
Module: SQL*Plus
				v_scan_query_quota := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
			END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.9	      1      38.88    1.6      562.2	6.9   95.0 3scs6w7r6f9xa
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.8	      1      38.84    1.6      562.3	6.9   66.4 bu2cwsvp2u0hx
Module: SQL*Plus
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.8	      1      38.79    1.5      562.8	6.9   94.2 63fqcgaztwa1q
Module: SQL*Plus
		--

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		-- Do an UPDATE statement
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		--
-> Captured SQL account for   97.0% of Total CPU Time (s):	     2,505
-> Captured PL/SQL account for	 69.6% of Total CPU Time (s):		2,505

    CPU 		  CPU per	    Elapsed

  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
		v_my_serial := v_my_serial + v_loop_cnt ;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


      38.7	      1      38.74    1.5      562.5	6.9   64.8 4r329twa9rbb2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.7	      1      38.71    1.5      562.7	6.9   94.0 aduz7424c35kn
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
		-- Increment count of UPDATES and set UPDATE quota flag if needed
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.5	      1      38.52    1.5      561.9	6.9   92.6 bk0nwr6ducbsw
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_updates_cnt := v_updates_cnt + 1;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.5	      1      38.51    1.5      562.7	6.8   65.8 db7t40j603g1d
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN

      38.5	      1      38.49    1.5      562.8	6.8   65.9 8h692kb83szmc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
			v_update_quota := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		END IF;

      38.5	      1      38.49    1.5      563.2	6.8   65.4 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
	END IF ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
      38.5	      1      38.48    1.5      563.0	6.8   91.5 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.5	      1      38.46    1.5      562.5	6.8   91.2 3q9qpxjx8mtpr
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		--
-> Captured SQL account for   97.0% of Total CPU Time (s):	     2,505
-> Captured PL/SQL account for	 69.6% of Total CPU Time (s):		2,505

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
---------- ------------ ---------- ------ ---------- ------ ------ -------------

      38.4	      1      38.39    1.5      563.0	6.8   64.5 8g9692jjz865t
Module: SQL*Plus
		-- so reset flags and counters before continuing
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
      38.4	      1      38.39    1.5      563.1	6.8   93.2 944mdaa2ps4z4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_update_quota := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.4	      1      38.38    1.5      561.4	6.8   90.7 966682317run1
		v_updates_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_selects_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.4	      1      38.38    1.5      561.9	6.8   95.6 1juyrwu05gda4
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.4	      1      38.37    1.5      562.7	6.8   93.1 fumugnjxgxhkj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.3	      1      38.30    1.5      562.0	6.8   94.1 9qptdf46kwuqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- so reset flags and counters
      38.2	      1      38.17    1.5      562.3	6.8   90.4 bzc6y6q6k2uj5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_scan_query_quota := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.2	      1      38.16    1.5      562.6	6.8   90.1 4vm7gtb0xuaqp
		v_scan_queries_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
		v_random_access_queries_cnt := 0;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

      38.2	      1      38.15    1.5      561.9	6.8   93.7 atadc5ncuxh43
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL

   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	v_loop_cnt := v_loop_cnt + 1 ;
-> Captured SQL account for   97.0% of Total CPU Time (s):	     2,505
-> Captured PL/SQL account for	 69.6% of Total CPU Time (s):		2,505

    CPU 		  CPU per	    Elapsed
	v_now := DBMS_UTILITY.GET_TIME();
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.1	      1      38.13    1.5      562.5	6.8   91.9 db24xbnnyz072
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- If this is a fixed-iteration count test cycle and we've hit the number of
      38.1	      1      38.10    1.5      562.1	6.8   91.8 7t71jqahkgfua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- iterations then set exit flag
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.1	      1      38.09    1.5      562.5	6.8   64.4 da3a63tnfzztu
Module: SQL*Plus
		v_stop_immediate := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      38.1	      1      38.06    1.5      562.7	6.8   94.9 4asnrz2aymyu8
Module: SQL*Plus
END LOOP;
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      38.0	      1      38.05    1.5      562.7	6.8   90.5 53zh5qv04rybn
Module: SQL*Plus
v_end_time := v_now ;
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_now := DBMS_UTILITY.GET_TIME();

      37.9	      1      37.94    1.5      564.2	6.7   64.3 9j9p88t9arm28
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


      37.9	      1      37.93    1.5      562.8	6.7   63.2 6kvyh9k0yg876
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_time := v_end_time - v_begin_time ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      37.9	      1      37.92    1.5      563.1	6.7   92.7 cgymr2xd94y9m
Module: SQL*Plus
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;


SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   97.0% of Total CPU Time (s):	     2,505
-> Captured PL/SQL account for	 69.6% of Total CPU Time (s):		2,505


    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
END;</pre_sqltext></td></tr>
      37.8	      1      37.78    1.5      563.3	6.7   92.1 5q9x3sz49jcja
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
<tr><td scope="row" class='awrnc'><a class="awr" name="czcqz0vzf0sbx"></a>czcqz0vzf0sbx</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_default_schema_number PLS_INTEGER := '98';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;
      37.7	      1      37.73    1.5      563.0	6.7   89.1 czcqz0vzf0sbx
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_cpu_pct NUMBER(6, 3);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      37.6	      1      37.64    1.5      562.8	6.7   88.7 f4rq0sufc25j7
v_my_serial NUMBER(16);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

BEGIN
      37.6	      1      37.60    1.5      563.0	6.7   90.1 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      37.3	      1      37.31    1.5      562.8	6.6   63.4 10k9hqm5kftvd
EXECUTE IMMEDIATE v_home_schema_str;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      37.2	      1      37.16    1.5      563.2	6.6   88.5 cfqgzkaxqzg38
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
IF ( v_hot_schema_modulus != 0 ) THEN
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
	v_do_hot_schema := TRUE;

      37.0	      1      36.96    1.5      562.9	6.6   64.4 7c7tj4y4fs2sx
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

IF ( v_sleep_modulus != 0 )	  THEN
      36.7	      1      36.70    1.5      563.0	6.5   64.6 4ygra552dfxxx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
	v_do_sleeps := TRUE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
END IF;

      36.5	      1      36.52    1.5      563.0	6.5   61.8 arusphb7uppr5
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

IF ( v_max_loop_iterations &gt; 0 )  THEN
SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
	v_loop_control := TRUE ;
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
END IF;
-> Captured SQL account for   97.0% of Total CPU Time (s):	     2,505
-> Captured PL/SQL account for	 69.6% of Total CPU Time (s):		2,505


    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
IF ( v_update_pct = 0 ) 	  THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	v_select_only_workload := TRUE;
      35.5	      1      35.45    1.4      563.0	6.3   62.8 1bz3czz4jjj42
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
END IF;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


      34.9	      1      34.92    1.4      562.8	6.2   63.1 bpy4xf8bfgtjp
Module: SQL*Plus
IF ( v_update_pct = 100 )	  THEN
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	v_update_only_workload := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      34.3	      1      34.34    1.4      563.3	6.1   62.3 9n7n07rfgj5y8
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

IF ( v_scan_query_pct = 0 ) 	THEN
      33.5	      1      33.46    1.3      562.8	5.9   61.1 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
	v_random_workload_only := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
END IF;

			  ------------------------------------------------------



SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
IF ( v_scan_query_pct = 100 ) 	THEN
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	v_scan_workload_only := TRUE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   99.5% of Total User I/O Wait Time (s):	      29
-> Captured PL/SQL account for	 70.4% of Total User I/O Wait Time (s):
END IF;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id

---------- ------------ ---------- ------ ---------- ------ ------ -------------
  19,069.5	 32,223       0.59   64.3   23,920.7	4.9   79.7 35dumc2tpr9dv
Module: SQL*Plus
v_seconds_to_run := v_seconds_to_run * 100 ;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

  10,437.0	182,935       0.06   35.2   13,030.4	9.6   80.1 bhdvtsvjhgvrh

Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     537.4	      1     537.41    1.8      561.9	6.8   95.6 1juyrwu05gda4
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
     534.1	      1     534.08    1.8      562.7	6.8   94.9 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
-- DBMS_RANDOM.seed (val =&gt; v_seed);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     533.8	      1     533.81    1.8      562.2	6.9   95.0 3scs6w7r6f9xa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     530.1	      1     530.12    1.8      562.8	6.9   94.2 63fqcgaztwa1q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     529.2	      1     529.24    1.8      562.2	7.0   94.1 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     529.1	      1     529.13    1.8      562.7	6.9   94.0 aduz7424c35kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     528.9	      1     528.86    1.8      562.0	6.8   94.1 9qptdf46kwuqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     526.5	      1     526.51    1.8      561.9	6.8   93.7 atadc5ncuxh43
Module: SQL*Plus

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   99.5% of Total User I/O Wait Time (s):	      29
-> Captured PL/SQL account for	 70.4% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     524.9	      1     524.90    1.8      563.1	6.8   93.2 944mdaa2ps4z4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     524.0	      1     523.98    1.8      562.7	6.8   93.1 fumugnjxgxhkj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     523.7	      1     523.66    1.8      563.1	6.9   93.0 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     521.9	      1     521.87    1.8      563.1	6.7   92.7 cgymr2xd94y9m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     520.5	      1     520.52    1.8      561.9	6.9   92.6 bk0nwr6ducbsw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     518.5	      1     518.55    1.7      563.3	6.7   92.1 5q9x3sz49jcja
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     516.8	      1     516.83    1.7      562.5	6.8   91.9 db24xbnnyz072
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     516.0	      1     515.98    1.7      562.1	6.8   91.8 7t71jqahkgfua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   99.5% of Total User I/O Wait Time (s):	      29
-> Captured PL/SQL account for	 70.4% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------

     515.2	      1     515.15    1.7      563.0	6.8   91.5 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     512.9	      1     512.92    1.7      562.5	6.8   91.2 3q9qpxjx8mtpr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     509.3	      1     509.34    1.7      561.4	6.8   90.7 966682317run1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     509.2	      1     509.17    1.7      562.7	6.8   90.5 53zh5qv04rybn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     508.1	      1     508.08    1.7      562.3	6.8   90.4 bzc6y6q6k2uj5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
v_begin_time := DBMS_UTILITY.GET_TIME();
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     507.2	      1     507.18    1.7      563.0	6.7   90.1 1fhabrgp6k1fh
v_now := v_begin_time ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_brick_wall := v_now + v_seconds_to_run ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     506.7	      1     506.67    1.7      562.1	6.9   90.1 0fq8myny00n70
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


     506.6	      1     506.60    1.7      562.6	6.8   90.1 4vm7gtb0xuaqp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     501.4	      1     501.39    1.7      563.0	6.7   89.1 czcqz0vzf0sbx
Module: SQL*Plus
-- The following WHILE loop is the master work loop control
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
----------------------------------------------------------------------------------------------------------------------
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
-> Captured SQL account for   99.5% of Total User I/O Wait Time (s):	      29
-> Captured PL/SQL account for	 70.4% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed

  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     499.1	      1     499.12    1.7      562.8	6.7   88.7 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
     498.7	      1     498.69    1.7      563.2	6.6   88.5 cfqgzkaxqzg38
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     379.7	      1     379.65    1.3      562.1	7.0   67.5 cpwuynd81c18b
Module: SQL*Plus
			DBMS_LOCK.SLEEP(v_num_tmp);
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     373.2	      1     373.17    1.3      562.3	6.9   66.4 bu2cwsvp2u0hx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     370.7	      1     370.68    1.3      562.8	6.8   65.9 8h692kb83szmc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
     370.1	      1     370.06    1.2      562.7	6.8   65.8 db7t40j603g1d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     370.0	      1     370.00    1.2      561.8	6.9   65.9 1vbnx1nmxh6g5
Module: SQL*Plus
			v_sharing_schema := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     368.3	      1     368.30    1.2      563.2	6.8   65.4 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
			IF ( v_sharing_schema = TRUE ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


				EXECUTE IMMEDIATE v_home_schema_str;
SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
				v_sharing_schema := FALSE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   99.5% of Total User I/O Wait Time (s):	      29
-> Captured PL/SQL account for	 70.4% of Total User I/O Wait Time (s):
			END IF;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
		END IF;
     364.6	      1     364.60    1.2      562.5	6.9   64.8 4r329twa9rbb2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     363.6	      1     363.60    1.2      563.0	6.5   64.6 4ygra552dfxxx

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	-- Choose the random block. The v_do_hotspot handler that follows can override.
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     363.4	      1     363.39    1.2      563.0	6.8   64.5 8g9692jjz865t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     362.6	      1     362.60    1.2      564.2	6.7   64.3 9j9p88t9arm28
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     362.4	      1     362.41    1.2      562.9	6.6   64.4 7c7tj4y4fs2sx
Module: SQL*Plus
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;

     362.3	      1     362.33    1.2      562.5	6.8   64.4 da3a63tnfzztu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     356.5	      1     356.53    1.2      562.8	6.6   63.4 10k9hqm5kftvd
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     355.8	      1     355.84    1.2      562.8	6.7   63.2 6kvyh9k0yg876
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     355.4	      1     355.39    1.2      562.8	6.2   63.1 bpy4xf8bfgtjp
Module: SQL*Plus
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
----------------------------------------------------------------------------------------------------------------------
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Captured SQL account for   99.5% of Total User I/O Wait Time (s):	      29
-> Captured PL/SQL account for	 70.4% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
	IF  ( v_select_only_workload = TRUE ) THEN
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- handle case where user specified zero pct updates (a SELECT-only workload)
     353.8	      1     353.77    1.2      563.0	6.3   62.8 1bz3czz4jjj42
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_do_update := FALSE;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     350.8	      1     350.77    1.2      563.3	6.1   62.3 9n7n07rfgj5y8
Module: SQL*Plus
		v_update_quota := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	ELSE

     348.2	      1     348.23    1.2      563.0	6.5   61.8 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_update_only_workload = TRUE ) THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     344.0	      1     343.98    1.2      562.8	5.9   61.1 1dw84yqn5xjf6
Module: SQL*Plus
			-- handle case where user specified 100% updates
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			v_do_update := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------


			v_update_quota := FALSE;
SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
		ELSE
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   18,226,551
-> Captured SQL account for   99.0% of Total

     Buffer		    Gets	      Elapsed
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
 15,031,759	182,935 	82.2   82.5   13,030.4	 9.6  80.1 bhdvtsvjhgvrh
Module: SQL*Plus
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  2,984,306	 32,223 	92.6   16.4   23,920.7	 4.9  79.7 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
			IF ( v_update_quota = FALSE ) THEN
< :B1 )

    351,222	      1    351,222.0	1.9	 562.2	   7  94.1 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
				-- Handle case where user has set UPDATE_PCT to a valid value
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    344,090	      1    344,090.0	1.9	 562.8	 6.9  94.2 63fqcgaztwa1q
				--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
				-- We are doing updates during this run and quota has not been met yet
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    344,087	      1    344,087.0	1.9	 563.1	 6.9	93 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
				-- We still vacillate until update quota has been met
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    343,932	      1    343,932.0	1.9	 562.7	 6.9	94 aduz7424c35kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	ELSE
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    343,814	      1    343,814.0	1.9	 562.2	 6.9	95 3scs6w7r6f9xa
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- Do an UPDATE statement
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    341,289	      1    341,289.0	1.9	 561.9	 6.8  95.6 1juyrwu05gda4
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    339,131	      1    339,131.0	1.9	 562.7	 6.8  94.9 4asnrz2aymyu8
		v_my_serial := v_my_serial + v_loop_cnt ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);

    337,554	      1    337,554.0	1.9	 563.3	 6.7  92.1 5q9x3sz49jcja
Module: SQL*Plus

		--
SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		--
-> Total Buffer Gets:	   18,226,551
-> Captured SQL account for   99.0% of Total

     Buffer		    Gets	      Elapsed
		v_updates_cnt := v_updates_cnt + 1;
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN

    336,886	      1    336,886.0	1.8	 562.0	 6.8  94.1 9qptdf46kwuqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
			v_update_quota := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		END IF;

    336,588	      1    336,588.0	1.8	 561.9	 6.9  92.6 bk0nwr6ducbsw
Module: SQL*Plus
	END IF ;
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
----------------------------------------------------------------------------------------------------------------------

    335,011	      1    335,011.0	1.8	 561.9	 6.8  93.7 atadc5ncuxh43
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
    334,778	      1    334,778.0	1.8	 563.1	 6.8  93.2 944mdaa2ps4z4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
    333,955	      1    333,955.0	1.8	 562.7	 6.8  93.1 fumugnjxgxhkj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
		--
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
    332,718	      1    332,718.0	1.8	 562.1	 6.8  91.8 7t71jqahkgfua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
		-- so reset flags and counters before continuing
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		--
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    328,622	      1    328,622.0	1.8	 562.5	 6.8  91.9 db24xbnnyz072
Module: SQL*Plus
		v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_updates_cnt := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    327,667	      1    327,667.0	1.8	 562.5	 6.8  91.2 3q9qpxjx8mtpr
		v_selects_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   18,226,551
-> Captured SQL account for   99.0% of Total
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
		-- so reset flags and counters

    327,287	      1    327,287.0	1.8	 563.1	 6.7  92.7 cgymr2xd94y9m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
		v_scan_query_quota := FALSE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
		v_scan_queries_cnt := 0;

    326,809	      1    326,809.0	1.8	 563.0	 6.8  91.5 fd7ncyq8wrtcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
		v_random_access_queries_cnt := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    326,305	      1    326,305.0	1.8	 562.1	 6.9  90.1 0fq8myny00n70
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	v_loop_cnt := v_loop_cnt + 1 ;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    325,343	      1    325,343.0	1.8	 561.4	 6.8  90.7 966682317run1
Module: SQL*Plus
	v_now := DBMS_UTILITY.GET_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    324,363	      1    324,363.0	1.8	 562.7	 6.8  90.5 53zh5qv04rybn
Module: SQL*Plus
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
		-- If this is a fixed-iteration count test cycle and we've hit the number of
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    324,301	      1    324,301.0	1.8	 563.0	 6.7  90.1 1fhabrgp6k1fh
Module: SQL*Plus
		-- iterations then set exit flag
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		v_stop_immediate := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    321,859	      1    321,859.0	1.8	 562.3	 6.8  90.4 bzc6y6q6k2uj5
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
END LOOP;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    320,429	      1    320,429.0	1.8	 563.0	 6.7  89.1 czcqz0vzf0sbx

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_end_time := v_now ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    320,003	      1    320,003.0	1.8	 562.6	 6.8  90.1 4vm7gtb0xuaqp
v_now := DBMS_UTILITY.GET_TIME();
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets

-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   18,226,551
-> Captured SQL account for   99.0% of Total
v_total_time := v_end_time - v_begin_time ;

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
    319,193	      1    319,193.0	1.8	 562.8	 6.7  88.7 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    318,770	      1    318,770.0	1.7	 563.2	 6.6  88.5 cfqgzkaxqzg38
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
END;</pre_sqltext></td></tr>
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    216,547	      1    216,547.0	1.2	 562.1	   7  67.5 cpwuynd81c18b
<tr><td scope="row" class='awrc'><a class="awr" name="da3a63tnfzztu"></a>da3a63tnfzztu</td><td class='awrc'><pre_sqltext class="awr">DECLARE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_default_schema_number PLS_INTEGER := '105';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    214,296	      1    214,296.0	1.2	 561.8	 6.9  65.9 1vbnx1nmxh6g5
v_update_pct PLS_INTEGER := '15';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_max_loop_iterations PLS_INTEGER := '0';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    210,983	      1    210,983.0	1.2	 563.2	 6.8  65.4 btxhvgkudmtmh
Module: SQL*Plus
v_seconds_to_run PLS_INTEGER := '600';
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_scale PLS_INTEGER := '1048576';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    210,907	      1    210,907.0	1.2	 562.3	 6.9  66.4 bu2cwsvp2u0hx
Module: SQL*Plus
v_work_unit PLS_INTEGER := '80' ;
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_redo_stress  VARCHAR2(12) := 'LITE';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    210,107	      1    210,107.0	1.2	 562.8	 6.8  65.9 8h692kb83szmc
Module: SQL*Plus
v_hot_schema_modulus PLS_INTEGER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_do_hotspot   VARCHAR(7) := 'FALSE';

    208,821	      1    208,821.0	1.1	 563.0	 6.8  64.5 8g9692jjz865t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
v_hotspot_mb  NUMBER := '8';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_hotspot_offset_mb NUMBER := '16';

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_hotspot_modulus  PLS_INTEGER := '3';
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Total Buffer Gets:	   18,226,551
-> Captured SQL account for   99.0% of Total

     Buffer		    Gets	      Elapsed
v_sleep_modulus PLS_INTEGER := '0';
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
    208,819	      1    208,819.0	1.1	 562.7	 6.8  65.8 db7t40j603g1d
Module: SQL*Plus
v_sleep_min NUMBER := '.1';
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_sleep_max NUMBER := '.5';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    204,298	      1    204,298.0	1.1	 562.8	 6.7  63.2 6kvyh9k0yg876
Module: SQL*Plus
v_scan_query_pct PLS_INTEGER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_obfuscate VARCHAR(5)	:= 'FALSE';
    204,101	      1    204,101.0	1.1	 562.5	 6.9  64.8 4r329twa9rbb2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    203,828	      1    203,828.0	1.1	 562.5	 6.8  64.4 da3a63tnfzztu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    202,354	      1    202,354.0	1.1	 562.9	 6.6  64.4 7c7tj4y4fs2sx
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    201,807	      1    201,807.0	1.1	 563.0	 6.5  64.6 4ygra552dfxxx
Module: SQL*Plus
v_num_tmp NUMBER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r

edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_loop_cnt PLS_INTEGER := 0;
    201,686	      1    201,686.0	1.1	 562.8	 6.2  63.1 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_rowcnt PLS_INTEGER := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    201,252	      1    201,252.0	1.1	 563.0	 6.3  62.8 1bz3czz4jjj42
v_updates_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
v_selects_cnt PLS_INTEGER := 0;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    200,854	      1    200,854.0	1.1	 564.2	 6.7  64.3 9j9p88t9arm28
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_random_access_queries_cnt PLS_INTEGER := 0;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_scan_queries_cnt PLS_INTEGER := 0;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   18,226,551
-> Captured SQL account for   99.0% of Total


     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
v_do_scan_query BOOLEAN :=FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    197,791	      1    197,791.0	1.1	 562.8	 6.6  63.4 10k9hqm5kftvd
Module: SQL*Plus
v_scan_query_quota  BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_scan_workload_only BOOLEAN := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    194,687	      1    194,687.0	1.1	 563.3	 6.1  62.3 9n7n07rfgj5y8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
v_random_workload_only BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    194,501	      1    194,501.0	1.1	 563.0	 6.5  61.8 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=

'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_random_block PLS_INTEGER := 1;
    188,653	      1    188,653.0	1.0	 562.8	 5.9  61.1 1dw84yqn5xjf6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_tmp PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------

v_now PLS_INTEGER;

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_brick_wall PLS_INTEGER;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  17,104,107
-> Captured SQL account for   99.3% of Total


   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
v_begin_time PLS_INTEGER;
 14,448,612	182,935       79.0   84.5   13,030.4	9.6   80.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

v_end_time PLS_INTEGER;
  2,542,144	 32,223       78.9   14.9   23,920.7	4.9   79.7 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

v_total_time PLS_INTEGER;
    326,852	      1  326,852.0    1.9      562.2	7.0   94.1 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_begin_cpu_tm PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    323,111	      1  323,111.0    1.9      562.2	6.9   95.0 3scs6w7r6f9xa
v_end_cpu_tm PLS_INTEGER;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_total_cpu_tm PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    322,872	      1  322,872.0    1.9      562.8	6.9   94.2 63fqcgaztwa1q
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
v_do_sleeps BOOLEAN := FALSE;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    321,093	      1  321,093.0    1.9      562.7	6.9   94.0 aduz7424c35kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
v_loop_control BOOLEAN := FALSE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_update_quota BOOLEAN := FALSE;
    320,281	      1  320,281.0    1.9      563.1	6.9   93.0 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_select_only_workload BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    319,367	      1  319,367.0    1.9      561.9	6.8   95.6 1juyrwu05gda4
Module: SQL*Plus
v_update_only_workload BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
v_do_update BOOLEAN := FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    317,739	      1  317,739.0    1.9      562.7	6.8   94.9 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
v_do_hot_schema BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_stop_immediate BOOLEAN := FALSE;
    316,896	      1  316,896.0    1.9      563.3	6.7   92.1 5q9x3sz49jcja
Module: SQL*Plus

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Physical Reads as a percentage of Total Disk Reads
v_sharing_schema BOOLEAN := FALSE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  17,104,107
-> Captured SQL account for   99.3% of Total
v_seed VARCHAR2(128);

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
v_home_schema_str VARCHAR2(80);
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_scratch VARCHAR2(200) ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    316,744	      1  316,744.0    1.9      561.9	6.9   92.6 bk0nwr6ducbsw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_cpu_pct NUMBER(6, 3);
    315,895	      1  315,895.0    1.8      562.0	6.8   94.1 9qptdf46kwuqs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_my_serial NUMBER(16);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    314,981	      1  314,981.0    1.8      563.1	6.8   93.2 944mdaa2ps4z4
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
BEGIN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    313,515	      1  313,515.0    1.8      562.7	6.8   93.1 fumugnjxgxhkj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
    313,466	      1  313,466.0    1.8      561.9	6.8   93.7 atadc5ncuxh43
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
EXECUTE IMMEDIATE v_home_schema_str;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    311,791	      1  311,791.0    1.8      562.1	6.8   91.8 7t71jqahkgfua
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    309,547	      1  309,547.0    1.8      563.1	6.7   92.7 cgymr2xd94y9m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
IF ( v_hot_schema_modulus != 0 ) THEN
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	v_do_hot_schema := TRUE;
    307,709	      1  307,709.0    1.8      562.5	6.8   91.9 db24xbnnyz072
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  17,104,107
-> Captured SQL account for   99.3% of Total
IF ( v_sleep_modulus != 0 )	  THEN

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
	v_do_sleeps := TRUE;

    307,548	      1  307,548.0    1.8      562.1	6.9   90.1 0fq8myny00n70
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
END IF;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


    307,042	      1  307,042.0    1.8      562.5	6.8   91.2 3q9qpxjx8mtpr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
IF ( v_max_loop_iterations &gt; 0 )  THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    306,887	      1  306,887.0    1.8      563.0	6.8   91.5 fd7ncyq8wrtcp
Module: SQL*Plus
	v_loop_control := TRUE ;
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
END IF;

    305,740	      1  305,740.0    1.8      561.4	6.8   90.7 966682317run1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    304,556	      1  304,556.0    1.8      562.7	6.8   90.5 53zh5qv04rybn
IF ( v_update_pct = 0 ) 	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	v_select_only_workload := TRUE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    303,611	      1  303,611.0    1.8      563.0	6.7   90.1 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    303,495	      1  303,495.0    1.8      562.3	6.8   90.4 bzc6y6q6k2uj5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		END IF;
    301,565	      1  301,565.0    1.8      562.6	6.8   90.1 4vm7gtb0xuaqp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=
	END IF;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red

o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    300,114	      1  300,114.0    1.8      563.0	6.7   89.1 czcqz0vzf0sbx
Module: SQL*Plus
	-- Choose the random block. The v_do_hotspot handler that follows can override.
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Physical Reads as a percentage of Total Disk Reads
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  17,104,107

-> Captured SQL account for   99.3% of Total

   Physical		 Reads		    Elapsed
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    298,900	      1  298,900.0    1.7      563.2	6.6   88.5 cfqgzkaxqzg38
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );

    298,390	      1  298,390.0    1.7      562.8	6.7   88.7 f4rq0sufc25j7
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    205,386	      1  205,386.0    1.2      562.1	7.0   67.5 cpwuynd81c18b
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    202,676	      1  202,676.0    1.2      561.8	6.9   65.9 1vbnx1nmxh6g5
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    199,908	      1  199,908.0    1.2      562.3	6.9   66.4 bu2cwsvp2u0hx
Module: SQL*Plus
	IF  ( v_select_only_workload = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- handle case where user specified zero pct updates (a SELECT-only workload)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    199,082	      1  199,082.0    1.2      562.8	6.8   65.9 8h692kb83szmc
		v_do_update := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_update_quota := TRUE ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    198,860	      1  198,860.0    1.2      563.2	6.8   65.4 btxhvgkudmtmh
	ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_update_only_workload = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    197,284	      1  197,284.0    1.2      562.7	6.8   65.8 db7t40j603g1d
			-- handle case where user specified 100% updates
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_do_update := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


			v_update_quota := FALSE;
SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
		ELSE
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  17,104,107
-> Captured SQL account for   99.3% of Total
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
----------- ----------- ---------- ------ ---------- ------ ------ -------------
    196,924	      1  196,924.0    1.2      563.0	6.8   64.5 8g9692jjz865t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
			IF ( v_update_quota = FALSE ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				-- Handle case where user has set UPDATE_PCT to a valid value

    194,166	      1  194,166.0    1.1      562.5	6.9   64.8 4r329twa9rbb2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
				--
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				-- We are doing updates during this run and quota has not been met yet

    193,964	      1  193,964.0    1.1      562.8	6.7   63.2 6kvyh9k0yg876
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
				-- We still vacillate until update quota has been met
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    193,032	      1  193,032.0    1.1      562.5	6.8   64.4 da3a63tnfzztu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
				IF ( MOD(v_random_block,  2) = 0 ) THEN
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
					v_do_update := TRUE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    191,954	      1  191,954.0    1.1      562.9	6.6   64.4 7c7tj4y4fs2sx
Module: SQL*Plus
				ELSE
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
					v_do_update := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    191,691	      1  191,691.0    1.1      562.8	6.2   63.1 bpy4xf8bfgtjp
Module: SQL*Plus
				END IF;
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    191,668	      1  191,668.0    1.1      563.0	6.5   64.6 4ygra552dfxxx
Module: SQL*Plus
				-- UPDATE quota has been filled,  force drain some SELECTs
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
				v_do_update := FALSE;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    191,299	      1  191,299.0    1.1      563.0	6.3   62.8 1bz3czz4jjj42
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
		END IF;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    190,249	      1  190,249.0    1.1      564.2	6.7   64.3 9j9p88t9arm28
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :


SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
----------------------------------------------------------------------------------------------------------------------
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  17,104,107
-> Captured SQL account for   99.3% of Total

-- The type of SQL is now determined...execute it in the following section
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
----------------------------------------------------------------------------------------------------------------------
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    187,860	      1  187,860.0    1.1      562.8	6.6   63.4 10k9hqm5kftvd

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_do_update != TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    184,303	      1  184,303.0    1.1      563.3	6.1   62.3 9n7n07rfgj5y8
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Do a SELECT statement
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- Work out scan or random
    183,934	      1  183,934.0    1.1      563.0	6.5   61.8 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF  ( v_random_workload_only = TRUE ) THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    179,339	      1  179,339.0    1.0      562.8	5.9   61.1 1dw84yqn5xjf6
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_do_scan_query := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------
			v_scan_query_quota := TRUE ;


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> UnOptimized Read Reqs = Physical Read Reqs -
		ELSE
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
			IF ( v_scan_workload_only = TRUE ) THEN
-> Total Physical Read Requests:      17,103,250
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 17,103,250
-> Captured SQL account for    0.0% of Total
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
				v_do_scan_query := TRUE;
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
    326,875	326,875 	 1    326,875.0    0.0	  1.9 5nz6b4v9qbsbr
Module: SQL*Plus
				v_scan_query_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    323,157	323,157 	 1    323,157.0    0.0	  1.9 3scs6w7r6f9xa
Module: SQL*Plus
				IF ( v_scan_query_quota = FALSE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT

    322,872	322,872 	 1    322,872.0    0.0	  1.9 63fqcgaztwa1q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN

    321,116	321,116 	 1    321,116.0    0.0	  1.9 aduz7424c35kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '112'; v_update_pct PLS_INTEGER :
						v_do_scan_query := TRUE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
					ELSE

    320,327	320,327 	 1    320,327.0    0.0	  1.9 bbp00h54hyg9h
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
						v_do_scan_query := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

					END IF;
    319,367	319,367 	 1    319,367.0    0.0	  1.9 1juyrwu05gda4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
				ELSE
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

					-- Scan quota has been filled,	force drain some random access SELECTS
    317,739	317,739 	 1    317,739.0    0.0	  1.9 4asnrz2aymyu8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_scan_query := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    316,896	316,896 	 1    316,896.0    0.0	  1.9 5q9x3sz49jcja
				END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    316,744	316,744 	 1    316,744.0    0.0	  1.9 bk0nwr6ducbsw
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)

-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      17,103,250
-> Captured SQL account for    0.0% of Total
		IF ( v_do_scan_query != TRUE ) THEN
-> Total UnOptimized Read Requests:	 17,103,250
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total
			SELECT COUNT(c2) INTO v_rowcnt

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
			FROM cf1
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    315,918	315,918 	 1    315,918.0    0.0	  1.8 9qptdf46kwuqs
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '39'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    314,981	314,981 	 1    314,981.0    0.0	  1.8 944mdaa2ps4z4
Module: SQL*Plus
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		ELSE
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    313,515	313,515 	 1    313,515.0    0.0	  1.8 fumugnjxgxhkj
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    313,512	313,512 	 1    313,512.0    0.0	  1.8 atadc5ncuxh43
Module: SQL*Plus
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    311,791	311,791 	 1    311,791.0    0.0	  1.8 7t71jqahkgfua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				v_scan_query_quota := TRUE;
    309,570	309,570 	 1    309,570.0    0.0	  1.8 cgymr2xd94y9m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			END IF;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    307,755	307,755 	 1    307,755.0    0.0	  1.8 db24xbnnyz072
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    307,548	307,548 	 1    307,548.0    0.0	  1.8 0fq8myny00n70
Module: SQL*Plus
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	ELSE
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    307,042	307,042 	 1    307,042.0    0.0	  1.8 3q9qpxjx8mtpr

		--
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
		-- Do an UPDATE statement
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      17,103,250
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 17,103,250
		--
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total


UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
Module: SQL*Plus
		v_my_serial := v_my_serial + v_loop_cnt ;
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    306,910	306,910 	 1    306,910.0    0.0	  1.8 fd7ncyq8wrtcp
Module: SQL*Plus
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		--

    305,763	305,763 	 1    305,763.0    0.0	  1.8 966682317run1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    304,556	304,556 	 1    304,556.0    0.0	  1.8 53zh5qv04rybn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    303,657	303,657 	 1    303,657.0    0.0	  1.8 1fhabrgp6k1fh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    303,495	303,495 	 1    303,495.0    0.0	  1.8 bzc6y6q6k2uj5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    301,611	301,611 	 1    301,611.0    0.0	  1.8 4vm7gtb0xuaqp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    300,137	300,137 	 1    300,137.0    0.0	  1.8 czcqz0vzf0sbx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    298,923	298,923 	 1    298,923.0    0.0	  1.7 cfqgzkaxqzg38
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- Increment count of UPDATES and set UPDATE quota flag if needed
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
		--
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      17,103,250
-> Captured SQL account for    0.0% of Total
		v_updates_cnt := v_updates_cnt + 1;
-> Total UnOptimized Read Requests:	 17,103,250
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total


UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    298,436	298,436 	 1    298,436.0    0.0	  1.7 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
			v_update_quota := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		END IF;
    205,386	205,386 	 1    205,386.0    0.0	  1.2 cpwuynd81c18b
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    202,676	202,676 	 1    202,676.0    0.0	  1.2 1vbnx1nmxh6g5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    199,931	199,931 	 1    199,931.0    0.0	  1.2 bu2cwsvp2u0hx
Module: SQL*Plus
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
----------------------------------------------------------------------------------------------------------------------

    199,082	199,082 	 1    199,082.0    0.0	  1.2 8h692kb83szmc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    198,883	198,883 	 1    198,883.0    0.0	  1.2 btxhvgkudmtmh
Module: SQL*Plus
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		--

    197,284	197,284 	 1    197,284.0    0.0	  1.2 db7t40j603g1d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    196,993	196,993 	 1    196,993.0    0.0	  1.2 8g9692jjz865t
Module: SQL*Plus
		-- so reset flags and counters before continuing
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		--
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    194,166	194,166 	 1    194,166.0    0.0	  1.1 4r329twa9rbb2
Module: SQL*Plus

		v_update_quota := FALSE;
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
		v_updates_cnt := 0;
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      17,103,250
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 17,103,250
		v_selects_cnt := 0;
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

	END IF;
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    193,987	193,987 	 1    193,987.0    0.0	  1.1 6kvyh9k0yg876
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    193,032	193,032 	 1    193,032.0    0.0	  1.1 da3a63tnfzztu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
		-- so reset flags and counters
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

		v_scan_query_quota := FALSE;
    191,977	191,977 	 1    191,977.0    0.0	  1.1 7c7tj4y4fs2sx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_scan_queries_cnt := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    191,691	191,691 	 1    191,691.0    0.0	  1.1 bpy4xf8bfgtjp
Module: SQL*Plus
		v_random_access_queries_cnt := 0;
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	END IF;

    191,668	191,668 	 1    191,668.0    0.0	  1.1 4ygra552dfxxx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    191,299	191,299 	 1    191,299.0    0.0	  1.1 1bz3czz4jjj42
	v_loop_cnt := v_loop_cnt + 1 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="db24xbnnyz072"></a>db24xbnnyz072</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '49';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_loop_cnt PLS_INTEGER := 0;
    190,249	190,249 	 1    190,249.0    0.0	  1.1 9j9p88t9arm28
Module: SQL*Plus
v_rowcnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_updates_cnt PLS_INTEGER := 0;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
v_selects_cnt PLS_INTEGER := 0;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


    187,883	187,883 	 1    187,883.0    0.0	  1.1 10k9hqm5kftvd
Module: SQL*Plus
v_random_access_queries_cnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
v_scan_queries_cnt PLS_INTEGER := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> UnOptimized Read Reqs = Physical Read Reqs -
v_do_scan_query BOOLEAN :=FALSE;
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
v_scan_query_quota  BOOLEAN := FALSE;
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      17,103,250
-> Captured SQL account for    0.0% of Total
v_scan_workload_only BOOLEAN := FALSE;
-> Total UnOptimized Read Requests:	 17,103,250
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total
v_random_workload_only BOOLEAN := FALSE;

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id

----------- ----------- ---------- ------------ ------ ------ -------------

    184,303	184,303 	 1    184,303.0    0.0	  1.1 9n7n07rfgj5y8

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_random_block PLS_INTEGER := 1;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_tmp PLS_INTEGER;
    183,957	183,957 	 1    183,957.0    0.0	  1.1 arusphb7uppr5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
v_now PLS_INTEGER;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
v_brick_wall PLS_INTEGER;

    179,339	179,339 	 1    179,339.0    0.0	  1.0 1dw84yqn5xjf6
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_begin_time PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------

v_end_time PLS_INTEGER;

SQL ordered by Executions		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_total_time PLS_INTEGER;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	     222,738
-> Captured SQL account for   98.4% of Total

v_begin_cpu_tm PLS_INTEGER;
					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
v_end_cpu_tm PLS_INTEGER;
     182,935	     182,955		1.0   13,030.4	 9.6  80.1 bhdvtsvjhgvrh
Module: SQL*Plus
v_total_cpu_tm PLS_INTEGER;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

      32,223	   2,545,617	       79.0   23,920.7	 4.9  79.7 35dumc2tpr9dv

Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

v_do_sleeps BOOLEAN := FALSE;
       2,096	       2,036		1.0	   0.2	98.5	 0 24djtk7r8fz33
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4
v_loop_control BOOLEAN := FALSE;

	 608		 608		1.0	   0.1	98.1	 0 86708bvah4akq
select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and status$
 != 1
v_update_quota BOOLEAN := FALSE;

	 234		 234		1.0	   0.6	21.2   2.3 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
v_select_only_workload BOOLEAN := FALSE;
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

v_update_only_workload BOOLEAN := FALSE;
	 152		 152		1.0	   0.2	24.8  25.2 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
v_do_update BOOLEAN := FALSE;
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	 104		 104		1.0	   0.3	13.9   1.7 5cu0x10yu88sw
v_do_hot_schema BOOLEAN := FALSE;
merge into sys.wri$_index_usage iu us
ing dual on (
iu.obj# = :objn) when mat
v_stop_immediate BOOLEAN := FALSE;
ched then update

	  94		  94		1.0	   0.4	 6.2   1.2 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
v_sharing_schema BOOLEAN := FALSE;
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)
v_seed VARCHAR2(128);

	  70		   0		0.0	   0.0	92.3	 0 0gx3b09qrx9f5
select obj#,index# from oid$ where user#=:1 and oid$=:2

v_home_schema_str VARCHAR2(80);
	  69		  69		1.0	   0.1	34.3  58.7 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)
v_scratch VARCHAR2(200) ;

			  ------------------------------------------------------



SQL ordered by Parse Calls		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Parse Calls:		4,622
-> Captured SQL account for   82.3% of Total
v_cpu_pct NUMBER(6, 3);

			    % Total
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
v_my_serial NUMBER(16);
       2,096	    2,096     45.35 24djtk7r8fz33
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4


	 608	      608     13.15 86708bvah4akq
BEGIN
select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and status$
 != 1


	 234	      234      5.06 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
 or m.obj# = :pobjn

	 104	      104      2.25 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us
EXECUTE IMMEDIATE v_home_schema_str;
ing dual on (
iu.obj# = :objn) when mat
ched then update

	  94	       94      2.03 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)



IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
	  69	       69      1.49 fn5s5p6hr6702
END IF;
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	  66	       66      1.43 9babjv8yq8ru3

Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

	  60	       60      1.30 7hc9uvs2016m6
IF ( v_update_pct = 0 ) 	  THEN
insert into svcobj_access$(name, pdb, tsn, objid, accesses, inc_no) values (:1,
:2, :3, :4, :5, :6)

	v_select_only_workload := TRUE;
	  55	      152      1.19 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
END IF;
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	  55	       55      1.19 f80h0xb1qvbsk

SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

			  ------------------------------------------------------

IF ( v_update_pct = 100 )	  THEN

SQL ordered by Sharable Memory		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Only Statements with Sharable Memory greater than 1048576 are displayed

Sharable Mem (b)  Executions   % Total	  SQL Id
	v_update_only_workload := TRUE;
---------------- ------------ -------- -------------
      13,231,841	    5	  1.16 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
END IF;
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX


       4,172,668	    5	  0.37 atwuyuvqkf27w
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
IF ( v_scan_query_pct = 0 ) 	THEN
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

	v_random_workload_only := TRUE;
       3,900,968       32,223	  0.34 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
END IF;
< :B1 )

       3,426,367      182,935	  0.30 bhdvtsvjhgvrh
Module: SQL*Plus

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  ------------------------------------------------------

IF ( v_scan_query_pct = 100 ) 	THEN

SQL ordered by Version Count		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Only Statements with Version Count greater than 20 are displayed
	v_scan_workload_only := TRUE;

 Version
  Count   Executions	 SQL Id
-------- ------------ -------------
END IF;
     117       32,223 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID

< :B1 )

     117      182,935 bhdvtsvjhgvrh
Module: SQL*Plus
v_seconds_to_run := v_seconds_to_run * 100 ;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  ------------------------------------------------------



SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported

-> Total Cluster Wait Time (s): 	  5,465
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
       3,225.8	     32,223   59.0   23,920.7	13.5	4.9   79.7 35dumc2tpr9dv
-- DBMS_RANDOM.seed (val =&gt; v_seed);
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


       2,186.6	    182,935   40.0   13,030.4	16.8	9.6   80.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

v_begin_time := DBMS_UTILITY.GET_TIME();
	 192.1		  1    3.5	562.8	34.1	5.9   61.1 1dw84yqn5xjf6
Module: SQL*Plus
v_now := v_begin_time ;
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
v_brick_wall := v_now + v_seconds_to_run ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 182.1		  1    3.3	563.0	32.4	6.5   61.8 arusphb7uppr5
Module: SQL*Plus
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red

o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 180.5		  1    3.3	563.0	32.1	6.3   62.8 1bz3czz4jjj42
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
-- The following WHILE loop is the master work loop control

	 180.1		  1    3.3	562.8	32.0	6.2   63.1 bpy4xf8bfgtjp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
	 175.7		  1    3.2	562.5	31.2	6.8   64.4 da3a63tnfzztu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
	 175.4		  1    3.2	562.8	31.2	6.7   63.2 6kvyh9k0yg876
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
	 174.6		  1    3.2	564.2	30.9	6.7   64.3 9j9p88t9arm28
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			DBMS_LOCK.SLEEP(v_num_tmp);
	 174.2		  1    3.2	563.3	30.9	6.1   62.3 9n7n07rfgj5y8
Module: SQL*Plus

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		END IF;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	END IF;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  5,465
-> Captured SQL account for   99.1% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 174.0		  1    3.2	562.9	30.9	6.6   64.4 7c7tj4y4fs2sx
Module: SQL*Plus
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			v_sharing_schema := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 171.0		  1    3.1	562.8	30.4	6.6   63.4 10k9hqm5kftvd
Module: SQL*Plus
		ELSE
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			IF ( v_sharing_schema = TRUE ) THEN

	 170.6		  1    3.1	562.5	30.3	6.9   64.8 4r329twa9rbb2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
				EXECUTE IMMEDIATE v_home_schema_str;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				v_sharing_schema := FALSE;
	 166.5		  1    3.0	563.0	29.6	6.5   64.6 4ygra552dfxxx
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '107'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		END IF;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
	END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 166.0		  1    3.0	561.8	29.5	6.9   65.9 1vbnx1nmxh6g5

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	-- Choose the random block. The v_do_hotspot handler that follows can override.
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 164.0		  1    3.0	562.3	29.2	6.9   66.4 bu2cwsvp2u0hx
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
	 163.1		  1    3.0	562.7	29.0	6.8   65.8 db7t40j603g1d
Module: SQL*Plus
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	 162.9		  1    3.0	563.2	28.9	6.8   65.4 btxhvgkudmtmh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
----------------------------------------------------------------------------------------------------------------------
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  5,465
-> Captured SQL account for   99.1% of Total
-- The following section governs what the SQL execution will be (UPDATE or SELECT)

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------

----------------------------------------------------------------------------------------------------------------------
	 162.1		  1    3.0	563.0	28.8	6.8   64.5 8g9692jjz865t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	IF  ( v_select_only_workload = TRUE ) THEN
	 160.8		  1    2.9	562.8	28.6	6.8   65.9 8h692kb83szmc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '74'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- handle case where user specified zero pct updates (a SELECT-only workload)
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 155.9		  1    2.9	562.1	27.7	7.0   67.5 cpwuynd81c18b
		v_do_update := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_update_quota := TRUE ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  25.1		  1    0.5	563.0	 4.5	6.7   89.1 czcqz0vzf0sbx
	ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '98'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
		IF ( v_update_only_workload = TRUE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  23.7		  1    0.4	562.5	 4.2	6.8   91.2 3q9qpxjx8mtpr
Module: SQL*Plus
			-- handle case where user specified 100% updates
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_do_update := TRUE;

	  23.4		  1    0.4	562.1	 4.2	6.9   90.1 0fq8myny00n70
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
			v_update_quota := FALSE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

		ELSE
	  21.9		  1    0.4	562.3	 3.9	6.8   90.4 bzc6y6q6k2uj5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  21.6		  1    0.4	561.4	 3.9	6.8   90.7 966682317run1
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			IF ( v_update_quota = FALSE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  21.5		  1    0.4	563.0	 3.8	6.8   91.5 fd7ncyq8wrtcp
Module: SQL*Plus
				-- Handle case where user has set UPDATE_PCT to a valid value
DECLARE v_default_schema_number PLS_INTEGER := '85'; v_update_pct PLS_INTEGER :=

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
				--
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
				-- We are doing updates during this run and quota has not been met yet
-> Total Cluster Wait Time (s): 	  5,465
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
				-- We still vacillate until update quota has been met
-------------- ------------ ------ ---------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  21.2		  1    0.4	562.8	 3.8	6.7   88.7 f4rq0sufc25j7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
				IF ( MOD(v_random_block,  2) = 0 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
					v_do_update := TRUE;

	  21.2		  1    0.4	562.7	 3.8	6.8   90.5 53zh5qv04rybn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '121'; v_update_pct PLS_INTEGER :
				ELSE
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

					v_do_update := FALSE;
	  20.6		  1    0.4	562.6	 3.7	6.8   90.1 4vm7gtb0xuaqp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				END IF;
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	  19.1		  1    0.3	563.0	 3.4	6.7   90.1 1fhabrgp6k1fh
			ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				-- UPDATE quota has been filled,  force drain some SELECTs
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  18.6		  1    0.3	563.2	 3.3	6.6   88.5 cfqgzkaxqzg38
Module: SQL*Plus
				v_do_update := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
			END IF;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	  12.8		  1    0.2	562.5	 2.3	6.8   91.9 db24xbnnyz072
Module: SQL*Plus
		END IF;
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
	END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	  11.9		  1    0.2	563.1	 2.1	6.7   92.7 cgymr2xd94y9m
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

----------------------------------------------------------------------------------------------------------------------
	  11.6		  1    0.2	562.1	 2.1	6.8   91.8 7t71jqahkgfua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '59'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
-- The type of SQL is now determined...execute it in the following section
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
----------------------------------------------------------------------------------------------------------------------
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  5,465
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
	IF ( v_do_update != TRUE ) THEN
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
		--
	   7.1		  1    0.1	563.1	 1.3	6.8   93.2 944mdaa2ps4z4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		-- Do a SELECT statement

	   6.1		  1    0.1	562.7	 1.1	6.8   93.1 fumugnjxgxhkj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '40'; v_update_pct PLS_INTEGER :=
		-- Work out scan or random
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   4.0		  1    0.1	563.1	 0.7	6.9   93.0 bbp00h54hyg9h
		IF  ( v_random_workload_only = TRUE ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	    .8		  1    0.0	561.9	 0.2	6.8   93.7 atadc5ncuxh43
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '97'; v_update_pct PLS_INTEGER :=
			v_do_scan_query := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_scan_query_quota := TRUE ;
	    .6		 13    0.0	  3.1	19.6	7.0   30.9 8fgdzmkchnn1a
INSERT /*+ APPEND LEADING(@"SEL$F5BB74E1" "H"@"SEL$2" "A"@"SEL$1") USE_NL(@"SE
L$F5BB74E1" "A"@"SEL$1") */ INTO WRH$_ACTIVE_SESSION_HISTORY ( snap_id
		ELSE
, dbid, instance_number , sample_id, sample_time,sample_time_utc, usecs_per_row
, session_id, session_serial#, session_type , flags , user_id , sql_id, sql_chil

	    .6		  1    0.0	561.9	 0.1	6.8   95.6 1juyrwu05gda4
Module: SQL*Plus
			IF ( v_scan_workload_only = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	    .4		234    0.0	  0.6	74.7   21.2    2.3 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
				v_do_scan_query := TRUE;
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

	    .4		 16    0.0	  0.4	97.7	3.3	.1 2p9fv35c7zxtg
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
				v_scan_query_quota := FALSE;
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
wcnt, 0) rowcnt, o.pobjn pobjn from

			ELSE
	    .4		 94    0.0	  0.4	94.4	6.2    1.2 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

				IF ( v_scan_query_quota = FALSE ) THEN
	    .3		104    0.0	  0.3	84.4   13.9    1.7 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
-> Total Cluster Wait Time (s): 	  5,465
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
-------------- ------------ ------ ---------- ------ ------ ------ -------------
ing dual on (
iu.obj# = :objn) when mat
ched then update

						v_do_scan_query := TRUE;
	    .1		152    0.0	  0.2	48.6   24.8   25.2 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
					ELSE
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	    .0		 17    0.0	  0.0	55.4   17.0   33.0 6wvzvgvg6qsyb
INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
						v_do_scan_query := FALSE;
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)

	    .0		  3    0.0	  0.1	23.4	6.3   73.9 03guhbfpak0w7
					END IF;
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
 obj#=:1 and part=:2 and version=:3 order by piece#

		-- so reset flags and counters before continuing
	    .0		 16    0.0	  0.0	47.7   22.9   37.6 42mkua34ay6bc
INSERT INTO wri$_adv_addm_fdg ( TASK_ID, FINDING_ID, RULE_ID, ADDM_FDG_ID, ADDM_
SEQ, DATABASE_TIME, ACTIVE_SESSIONS, PERC_ACTIVE_SESS, IS_AGGREGATE, METER_L
		--
EVEL, QUERY_TYPE, QUERY_IS_APPROX, QUERY_ARGS) VALUES ( :tid, :kea_id, :rid, :
fdg_id, :keh_id, :dbt, round(:dbt / (1000000 * :sint) , 2), ro

		v_update_quota := FALSE;
	    .0		  1    0.0	562.2	 0.0	7.0   94.1 5nz6b4v9qbsbr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
		v_updates_cnt := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		v_selects_cnt := 0;

	    .0		 69    0.0	  0.1	12.2   34.3   58.7 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
	END IF;
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	    .0		  1    0.0	561.9	 0.0	6.9   92.6 bk0nwr6ducbsw

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '31'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,

			  ------------------------------------------------------


		-- so reset flags and counters
Key Instance Activity Stats		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by statistic name

		v_scan_query_quota := FALSE;
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block changes			  5,349,421	   8,430.8	   163.7
		v_scan_queries_cnt := 0;
execute count				    222,738	     351.0	     6.8
gc cr block receive time		      1,322	       2.1	     0.0
gc cr blocks received			      1,857	       2.9	     0.1
		v_random_access_queries_cnt := 0;
gc current block receive time			770	       1.2	     0.0
gc current blocks received		      2,328	       3.7	     0.1
logons cumulative				 35	       0.1	     0.0
	END IF;
opened cursors cumulative		    255,469	     402.6	     7.8
parse count (total)			      4,622	       7.3	     0.1
parse time elapsed				 76	       0.1	     0.0

physical reads				 17,104,107	  26,956.3	   523.5
physical writes 			  2,683,877	   4,229.8	    82.2
redo size			      2,121,891,412    3,344,131.3	64,947.2
	v_loop_cnt := v_loop_cnt + 1 ;
session cursor cache hits		    254,327	     400.8	     7.8
session logical reads			 18,226,551	  28,725.3	   557.9
user calls					550	       0.9	     0.0
	v_now := DBMS_UTILITY.GET_TIME();
user commits				     32,671	      51.5	     1.0
workarea executions - optimal			589	       0.9	     0.0
			  ------------------------------------------------------



Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by statistic name
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
		-- If this is a fixed-iteration count test cycle and we've hit the number of
ASSM bg: segment fix monitor			  1	       0.0	     0.0
ASSM cbk:blocks examined			646	       1.0	     0.0
ASSM cbk:blocks marked full			167	       0.3	     0.0
		-- iterations then set exit flag
ASSM gsp:L1 bitmaps examined			508	       0.8	     0.0
ASSM gsp:L2 bitmap full 			  8	       0.0	     0.0
ASSM gsp:L2 bitmaps examined			145	       0.2	     0.0
		v_stop_immediate := TRUE ;
ASSM gsp:Search all				 11	       0.0	     0.0
ASSM gsp:Search hint				  8	       0.0	     0.0
ASSM gsp:Search steal				  2	       0.0	     0.0
	END IF;
ASSM gsp:bump HWM				  2	       0.0	     0.0
ASSM gsp:get free block 			481	       0.8	     0.0
ASSM gsp:get free data block			371	       0.6	     0.0
END LOOP;
ASSM gsp:get free index block			110	       0.2	     0.0
ASSM gsp:good hint				375	       0.6	     0.0
ASSM rsv:fill reserve				  0	       0.0	     0.0

ASSM wasted db state change			  2	       0.0	     0.0
Batched IO (bound) vector count 		  6	       0.0	     0.0
Batched IO (full) vector count			  0	       0.0	     0.0
v_end_time := v_now ;
Batched IO block miss count		 14,019,361	  22,094.7	   429.1
Batched IO buffer defrag count			  0	       0.0	     0.0
Batched IO double miss count		    202,481	     319.1	     6.2
v_now := DBMS_UTILITY.GET_TIME();
Batched IO same unit count			 12	       0.0	     0.0
Batched IO single block count			 59	       0.1	     0.0
Batched IO vector block count		 14,019,999	  22,095.7	   429.1
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Batched IO vector read count		    184,432	     290.7	     5.7

Block Cleanout Optim referenced 		 11	       0.0	     0.0
CCursor + sql area evicted			 83	       0.1	     0.0
v_total_time := v_end_time - v_begin_time ;
CPU used by this session		    352,868	     556.1	    10.8
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
CPU used when call started		    266,956	     420.7	     8.2
CR blocks created				935	       1.5	     0.0
Cached Commit SCN referenced		 14,362,089	  22,634.9	   439.6
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
Client Advertised Receive Window		462	       0.7	     0.0
Client Advertised Send Window			462	       0.7	     0.0
Client Path Maximum Transmission	  4,325,310	   6,816.8	   132.4
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
Client Send Congestion Window			660	       1.0	     0.0
Client Time (usec) Last Ack Rece		 34	       0.1	     0.0
Client Time (usec) Last Data Rec		 34	       0.1	     0.0

Client Time (usec) Last Data Sen		165	       0.3	     0.0
Client Time (usec) Round Trip Ti	    118,706	     187.1	     3.6
END;</pre_sqltext></td></tr>
Client Time (usec) Round Trip Ti	    133,024	     209.7	     4.1
Client Total Bytes Acked		  1,044,726	   1,646.5	    32.0
Client Total Bytes Received		    403,605	     636.1	    12.4
<tr><td scope="row" class='awrc'><a class="awr" name="db7t40j603g1d"></a>db7t40j603g1d</td><td class='awrc'><pre_sqltext class="awr">DECLARE
Client Total Number of Retransmi		  0	       0.0	     0.0
v_default_schema_number PLS_INTEGER := '30';
Commit SCN cached				  1	       0.0	     0.0
DBWR checkpoint buffers written 	     25,572	      40.3	     0.8
v_update_pct PLS_INTEGER := '15';
DBWR checkpoints			      1,570	       2.5	     0.1
DBWR fusion writes				159	       0.3	     0.0
v_max_loop_iterations PLS_INTEGER := '0';
DBWR object drop buffers written		 20	       0.0	     0.0
DBWR thread checkpoint buffers w		  0	       0.0	     0.0
DBWR transaction table writes			230	       0.4	     0.0
v_seconds_to_run PLS_INTEGER := '600';
DBWR undo block writes			    114,678	     180.7	     3.5
DFO trees parallelized				  7	       0.0	     0.0
Effective IO time				  0	       0.0	     0.0
HSC Heap Segment Block Changes		  2,569,510	   4,049.6	    78.7
v_scale PLS_INTEGER := '1048576';
Heap Segment Array Inserts			166	       0.3	     0.0
Heap Segment Array Updates			 13	       0.0	     0.0
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
v_work_unit PLS_INTEGER := '80' ;
KTFB alloc req				      1,326	       2.1	     0.0
KTFB alloc space (block)	      1,232,142,336    1,941,874.0	37,713.6
KTFB alloc time (ms)			413,953,889	 652,397.3	12,670.4
v_redo_stress  VARCHAR2(12) := 'LITE';

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by statistic name

v_hot_schema_modulus PLS_INTEGER := '0';
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
KTFB apply req				      2,412	       3.8	     0.1
v_do_hotspot   VARCHAR(7) := 'FALSE';
KTFB apply time (ms)			    237,784	     374.8	     7.3
KTFB free req				      1,084	       1.7	     0.0
KTFB free space (block) 		    124,016	     195.5	     3.8
v_hotspot_mb  NUMBER := '8';
KTFB free time (ms)			104,279,926	 164,346.7	 3,191.8
LOB table id lookup cache misses		  0	       0.0	     0.0
PX local messages recv'd			 84	       0.1	     0.0
PX local messages sent				 84	       0.1	     0.0
v_hotspot_offset_mb NUMBER := '16';
PX remote messages recv'd			159	       0.3	     0.0
PX remote messages sent 			192	       0.3	     0.0
v_hotspot_modulus  PLS_INTEGER := '3';
Parallel operations not downgrad		  7	       0.0	     0.0
Requests to/from client 			205	       0.3	     0.0
SQL*Net roundtrips to/from clien		140	       0.2	     0.0

TBS Extension: tasks created			 40	       0.1	     0.0
TBS Extension: tasks executed			  0	       0.0	     0.0
active txn count during cleanout		234	       0.4	     0.0
v_sleep_modulus PLS_INTEGER := '0';
auto extends on undo tablespace 		 40	       0.1	     0.0
background checkpoints completed		  0	       0.0	     0.0
background checkpoints started			  0	       0.0	     0.0
background timeouts			      6,462	      10.2	     0.2
v_sleep_min NUMBER := '.1';
blocks cleaned out using minact 	    640,679	   1,009.7	    19.6
branch node splits				  0	       0.0	     0.0
v_sleep_max NUMBER := '.5';
buffer is not pinned count		 42,988,809	  67,751.0	 1,315.8
buffer is pinned count			 16,991,909	  26,779.5	   520.1
bytes received via SQL*Net from 	     67,944	     107.1	     2.1
v_scan_query_pct PLS_INTEGER := '0';
bytes sent via SQL*Net to client	     38,446	      60.6	     1.2
calls to get snapshot scn: kcmgs	    264,787	     417.3	     8.1
calls to kcmgas 			     63,207	      99.6	     1.9
calls to kcmgcs 			      9,237	      14.6	     0.3
v_obfuscate VARCHAR(5)	:= 'FALSE';
cell physical IO interconnect by    190,576,305,664  300,350,987.3   5,833,194.8
change write time			      6,695	      10.6	     0.2
cleanout - number of ktugct call	      2,246	       3.5	     0.1

cleanouts and rollbacks - consis		  8	       0.0	     0.0
cleanouts only - consistent read		 28	       0.0	     0.0
cluster key scan block gets			173	       0.3	     0.0

cluster key scans				163	       0.3	     0.0
commit batch/immediate performed		  2	       0.0	     0.0
commit batch/immediate requested		  2	       0.0	     0.0
commit cleanout failures: block 		  2	       0.0	     0.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
commit cleanout failures: buffer		 18	       0.0	     0.0
commit cleanout failures: callba		 24	       0.0	     0.0
commit cleanout failures: cannot		  0	       0.0	     0.0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
commit cleanouts			  2,571,120	   4,052.1	    78.7
commit cleanouts successfully co	  2,571,076	   4,052.1	    78.7
commit immediate performed			  2	       0.0	     0.0

commit immediate requested			  2	       0.0	     0.0
commit txn count during cleanout		160	       0.3	     0.0
consistent changes			      6,263	       9.9	     0.2
consistent gets 			 15,260,802	  24,051.2	   467.1
v_num_tmp NUMBER := 0;
consistent gets examination		    443,867	     699.5	    13.6
consistent gets examination (fas	    443,571	     699.1	    13.6
consistent gets from cache		 15,260,802	  24,051.2	   467.1

consistent gets pin			 14,816,935	  23,351.7	   453.5
consistent gets pin (fastpath)		 14,064,438	  22,165.8	   430.5
cursor authentications				 91	       0.1	     0.0
v_loop_cnt PLS_INTEGER := 0;
cursor reload failures				  0	       0.0	     0.0
data blocks consistent reads - u		 17	       0.0	     0.0
db block changes			  5,349,421	   8,430.8	   163.7
db block gets				  2,965,660	   4,673.9	    90.8
v_rowcnt PLS_INTEGER := 0;
db block gets direct				316	       0.5	     0.0

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_updates_cnt PLS_INTEGER := 0;
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
v_selects_cnt PLS_INTEGER := 0;
-------------------------------- ------------------ -------------- -------------
db block gets from cache		  2,965,343	   4,673.4	    90.8
db block gets from cache (fastpa	    277,796	     437.8	     8.5

deferred (CURRENT) block cleanou	    650,095	   1,024.6	    19.9
dirty buffers inspected 		  2,445,193	   3,853.7	    74.8
enqueue conversions			     32,804	      51.7	     1.0
enqueue releases			    174,732	     275.4	     5.4
v_random_access_queries_cnt PLS_INTEGER := 0;
enqueue requests			    174,601	     275.2	     5.3
enqueue timeouts				 63	       0.1	     0.0
enqueue waits				      6,249	       9.9	     0.2
exchange deadlocks				  0	       0.0	     0.0
v_scan_queries_cnt PLS_INTEGER := 0;
execute count				    222,738	     351.0	     6.8
file io service time		      1,347,912,591    2,124,329.6	41,257.2
free buffer inspected			 17,300,747	  27,266.2	   529.5

free buffer requested			 17,224,268	  27,145.7	   527.2
gc blocks compressed			      7,228	      11.4	     0.2
gc blocks lost				      1,200	       1.9	     0.0
gc cleanout applied				  0	       0.0	     0.0
v_do_scan_query BOOLEAN :=FALSE;
gc cleanout saved				  0	       0.0	     0.0
gc cr anti locks created		    100,883	     159.0	     3.1
gc cr anti locks expanded			 43	       0.1	     0.0
v_scan_query_quota  BOOLEAN := FALSE;
gc cr anti locks shrunk 			 60	       0.1	     0.0
gc cr block build time				 29	       0.1	     0.0
gc cr block flush time				227	       0.4	     0.0
gc cr block receive time		      1,322	       2.1	     0.0
v_scan_workload_only BOOLEAN := FALSE;
gc cr blocks built			      2,811	       4.4	     0.1
gc cr blocks flushed				 90	       0.1	     0.0
gc cr blocks received			      1,857	       2.9	     0.1
gc cr blocks served			      4,063	       6.4	     0.1
v_random_workload_only BOOLEAN := FALSE;
gc cr multiblock grant time		  2,788,799	   4,395.2	    85.4
gc cr multiblock grants received	  2,248,054	   3,543.0	    68.8
gc current block flush time			 56	       0.1	     0.0

gc current block pin time			  0	       0.0	     0.0
gc current block receive time			770	       1.2	     0.0
gc current blocks flushed			 24	       0.0	     0.0
gc current blocks pinned			  1	       0.0	     0.0

gc current blocks received		      2,328	       3.7	     0.1
gc current blocks served		      5,061	       8.0	     0.2
gc force cr read cr				106	       0.2	     0.0
v_random_block PLS_INTEGER := 1;
gc force cr read current			 10	       0.0	     0.0
gc kbytes saved 			     32,341	      51.0	     1.0
gc kbytes sent				     40,652	      64.1	     1.2
gc local grants 			 14,312,373	  22,556.5	   438.1
v_tmp PLS_INTEGER;
gc merge pi bg					  0	       0.0	     0.0
gc merge pi fg					 34	       0.1	     0.0
gc no change made				 29	       0.1	     0.0
gc read time waited				  0	       0.0	     0.0
v_now PLS_INTEGER;
gc read wait timeouts				  0	       0.0	     0.0
gc read waits					  0	       0.0	     0.0
gc reader bypass grants 			 24	       0.0	     0.0
v_brick_wall PLS_INTEGER;
gc reader bypass waits				  9	       0.0	     0.0
gc remote grants			  2,928,021	   4,614.6	    89.6
gc status messages received		     51,982	      81.9	     1.6

gc status messages sent 		     33,585	      52.9	     1.0
gcs affinity lock failures		      5,837	       9.2	     0.2
gcs affinity lock grants		 13,581,481	  21,404.6	   415.7
gcs anti-locks created			    100,908	     159.0	     3.1
v_begin_time PLS_INTEGER;
gcs data block access records		 17,122,160	  26,984.8	   524.1
gcs messages sent			 10,694,914	  16,855.3	   327.4
gcs read-mostly lock failures		    112,755	     177.7	     3.5
v_end_time PLS_INTEGER;
gcs read-mostly lock grants		    638,257	   1,005.9	    19.5

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by statistic name
v_total_time PLS_INTEGER;

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
gcs stats management (SCM) proce		  7	       0.0	     0.0
v_begin_cpu_tm PLS_INTEGER;
ges messages sent			     15,588	      24.6	     0.5
global enqueue get time 		     65,474	     103.2	     2.0
global enqueue gets async			  0	       0.0	     0.0
v_end_cpu_tm PLS_INTEGER;
global enqueue gets sync		    303,390	     478.2	     9.3
global enqueue releases 		    271,978	     428.6	     8.3
heap block compress			      9,767	      15.4	     0.3
hot buffers moved to head of LRU	    138,912	     218.9	     4.3
v_total_cpu_tm PLS_INTEGER;
immediate (CR) block cleanout ap		 36	       0.1	     0.0
immediate (CURRENT) block cleano		390	       0.6	     0.0
index crx upgrade (positioned)			  0	       0.0	     0.0

index fast full scans (full)			  1	       0.0	     0.0
index fetch by key			      4,459	       7.0	     0.1
index range scans			    217,385	     342.6	     6.7
index reclamation/extension swit		  0	       0.0	     0.0
v_do_sleeps BOOLEAN := FALSE;
leaf node 90-10 splits				  4	       0.0	     0.0
leaf node splits				110	       0.2	     0.0
lob reads					331	       0.5	     0.0
lob writes				      3,215	       5.1	     0.1
v_loop_control BOOLEAN := FALSE;
lob writes unaligned			      3,215	       5.1	     0.1
logical read bytes from cache	    149,308,579,840  235,312,460.4   4,570,064.6
logons cumulative				 35	       0.1	     0.0
max cf enq hold time			      3,585	       5.7	     0.1
v_update_quota BOOLEAN := FALSE;
messages received			    253,593	     399.7	     7.8
messages sent				    253,593	     399.7	     7.8
min active SCN optimization appl		  0	       0.0	     0.0
v_select_only_workload BOOLEAN := FALSE;
no work - consistent read gets		 14,799,802	  23,324.7	   453.0
non-idle wait count			  5,425,442	   8,550.6	   166.1
opened cursors cumulative		    255,469	     402.6	     7.8
parse count (describe)				  0	       0.0	     0.0
v_update_only_workload BOOLEAN := FALSE;
parse count (failures)				  0	       0.0	     0.0
parse count (hard)				 37	       0.1	     0.0
parse count (total)			      4,622	       7.3	     0.1
parse time cpu					 35	       0.1	     0.0
v_do_update BOOLEAN := FALSE;
parse time elapsed				 76	       0.1	     0.0
physical read IO requests		 17,103,250	  26,955.0	   523.5
physical read bytes		    140,116,836,352  220,826,141.0   4,288,722.0
v_do_hot_schema BOOLEAN := FALSE;
physical read total IO requests 	 17,109,230	  26,964.4	   523.7
physical read total bytes	    141,730,705,920  223,369,622.5   4,338,119.6
physical read total multi block 	      1,474	       2.3	     0.1
v_stop_immediate BOOLEAN := FALSE;
physical reads				 17,104,107	  26,956.3	   523.5
physical reads cache			 17,104,107	  26,956.3	   523.5
physical reads cache prefetch		 13,816,302	  21,774.7	   422.9
physical reads direct				  0	       0.0	     0.0
v_sharing_schema BOOLEAN := FALSE;
physical reads direct (lob)			  0	       0.0	     0.0
physical reads direct temporary 		  0	       0.0	     0.0
physical reads prefetch warmup			  0	       0.0	     0.0
physical write IO requests		  2,570,778	   4,051.6	    78.7
v_seed VARCHAR2(128);
physical write bytes		     21,986,320,384   34,650,755.8     672,961.4
physical write total IO requests	  2,623,340	   4,134.4	    80.3
physical write total bytes	     24,417,081,856   38,481,670.7     747,362.6
v_home_schema_str VARCHAR2(80);
physical write total multi block	      7,622	      12.0	     0.2
physical writes 			  2,683,877	   4,229.8	    82.2
physical writes direct				462	       0.7	     0.0
physical writes direct (lob)			146	       0.2	     0.0
v_scratch VARCHAR2(200) ;
physical writes direct temporary		 97	       0.2	     0.0
physical writes from cache		  2,683,415	   4,229.1	    82.1
physical writes non checkpoint		  2,679,793	   4,223.4	    82.0
pinned buffers inspected		      1,575	       2.5	     0.1

prefetch warmup blocks aged out 		  0	       0.0	     0.0

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by statistic name
v_cpu_pct NUMBER(6, 3);

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
prefetched blocks aged out befor		  0	       0.0	     0.0
v_my_serial NUMBER(16);
process last non-idle time			665	       1.1	     0.0
queries parallelized				  0	       0.0	     0.0
recursive calls 			    325,847	     513.5	    10.0
recursive cpu usage			    344,242	     542.5	    10.5

redo KB read				    876,544	   1,381.5	    26.8
redo blocks checksummed by FG (e	  1,573,795	   2,480.3	    48.2
redo blocks written			  4,307,051	   6,788.0	   131.8
BEGIN
redo blocks written (group 0)		  2,866,812	   4,518.1	    87.8
redo blocks written (group 1)		  1,440,239	   2,269.8	    44.1
redo entries				  2,836,270	   4,470.0	    86.8
redo size			      2,121,891,412    3,344,131.3	64,947.2

redo size for direct writes			900	       1.4	     0.0
redo subscn max counts				215	       0.3	     0.0
redo synch long waits				  0	       0.0	     0.0
redo synch time 				118	       0.2	     0.0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
redo synch time (usec)			  1,152,001	   1,815.6	    35.3
redo synch time overhead (usec) 	      6,253	       9.9	     0.2
redo synch time overhead count (		 54	       0.1	     0.0
redo synch time overhead count (		  0	       0.0	     0.0
EXECUTE IMMEDIATE v_home_schema_str;
redo synch time overhead count (		  0	       0.0	     0.0
redo synch writes				 72	       0.1	     0.0
redo wastage				 12,454,844	  19,629.0	   381.2

redo write active strands		     50,964	      80.3	     1.6
redo write broadcast ack count			  3	       0.0	     0.0
redo write broadcast ack time		     61,223	      96.5	     1.9

redo write finish time			727,306,097    1,146,244.8	22,261.5
redo write gather time			 48,739,489	  76,814.1	 1,491.8
redo write info find				 54	       0.1	     0.0
redo write schedule time		 49,300,496	  77,698.3	 1,509.0
IF ( v_hot_schema_modulus != 0 ) THEN
redo write size count (   4KB)			849	       1.3	     0.0
redo write size count (   8KB)			956	       1.5	     0.0
redo write size count (  16KB)		      2,180	       3.4	     0.1
redo write size count (  32KB)		      4,262	       6.7	     0.1
	v_do_hot_schema := TRUE;
redo write size count ( 128KB)		     13,879	      21.9	     0.4
redo write size count ( 256KB)		      3,749	       5.9	     0.1
redo write size count ( 512KB)			445	       0.7	     0.0
redo write size count (1024KB)			234	       0.4	     0.0
END IF;
redo write size count (inf)			 63	       0.1	     0.0
redo write time 			     72,884	     114.9	     2.2
redo write time (usec)			728,839,243    1,148,661.1	22,308.5

redo write total time			782,785,493    1,233,681.2	23,959.6
redo write worker delay (usec)		 45,503,067	  71,713.5	 1,392.8
redo write worker delay count		     26,615	      42.0	     0.8
redo writes				     26,615	      42.0	     0.8
IF ( v_sleep_modulus != 0 )	  THEN
redo writes (group 0)			     14,838	      23.4	     0.5
redo writes (group 1)			     11,777	      18.6	     0.4
redo writes adaptive all		     26,615	      42.0	     0.8
redo writes adaptive worker		     26,615	      42.0	     0.8
	v_do_sleeps := TRUE;
rollback changes - undo records 		  0	       0.0	     0.0
rollbacks only - consistent read		  9	       0.0	     0.0
root node splits				  0	       0.0	     0.0
rows fetched via callback		      1,318	       2.1	     0.0
END IF;
saved cleanouts 				  0	       0.0	     0.0
saved cleanouts successfully com		  0	       0.0	     0.0
securefile allocation bytes		  1,196,032	   1,885.0	    36.6
securefile allocation chunks			 53	       0.1	     0.0

securefile bytes non-transformed	  1,007,805	   1,588.3	    30.9
securefile direct read bytes			  0	       0.0	     0.0
securefile direct read ops			  0	       0.0	     0.0

IF ( v_max_loop_iterations &gt; 0 )  THEN
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
	v_loop_control := TRUE ;
securefile direct write bytes		  1,196,032	   1,885.0	    36.6
securefile direct write ops			 52	       0.1	     0.0
securefile number of non-transfo		 52	       0.1	     0.0
segment cfs allocations 			  0	       0.0	     0.0
END IF;
segment chunks allocation from d		 53	       0.1	     0.0
segment dispenser allocations			 52	       0.1	     0.0
segment dispenser load empty			  1	       0.0	     0.0
segment dispenser load tasks			  1	       0.0	     0.0

segment prealloc ops				 13	       0.0	     0.0
segment prealloc tasks				  9	       0.0	     0.0
segment prealloc time (ms)		      7,875	      12.4	     0.2
IF ( v_update_pct = 0 ) 	  THEN
segment total chunk allocation			  0	       0.0	     0.0
session connect time				673	       1.1	     0.0
session cursor cache hits		    254,327	     400.8	     7.8
session logical reads			 18,226,551	  28,725.3	   557.9
	v_select_only_workload := TRUE;
shared hash latch upgrades - no 	  5,173,611	   8,153.7	   158.4
shared hash latch upgrades - wai		 26	       0.0	     0.0
shared io pool buffer get succes		 52	       0.1	     0.0
sorts (memory)					411	       0.7	     0.0
END IF;
sorts (rows)				     70,270	     110.8	     2.2
sql area evicted				100	       0.2	     0.0
sql area purged 				  3	       0.0	     0.0
summed dirty queue length		 15,944,621	  25,129.0	   488.0

switch current caused by our pin		310	       0.5	     0.0
switch current to new buffer			316	       0.5	     0.0
table fetch by rowid			 28,563,039	  45,015.8	   874.3
table fetch continued row			  1	       0.0	     0.0
IF ( v_update_pct = 100 )	  THEN
table scan blocks gotten		      4,017	       6.3	     0.1
table scan disk non-IMC rows got	    259,645	     409.2	     8.0
table scan rows gotten			    259,645	     409.2	     8.0
table scans (short tables)		      1,213	       1.9	     0.0
	v_update_only_workload := TRUE;
temp space allocated (bytes)		  1,048,576	   1,652.6	    32.1
total cf enq hold time			     15,814	      24.9	     0.5
total number of cf enq holders			399	       0.6	     0.0
total number of times SMON poste		  0	       0.0	     0.0
END IF;
transaction lock background get 		  0	       0.0	     0.0
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
transaction rollbacks				  0	       0.0	     0.0

transaction tables consistent re	      1,863	       2.9	     0.1
undo change vector size 		880,760,912    1,388,091.8	26,958.5
user calls					550	       0.9	     0.0
user commits				     32,671	      51.5	     1.0
IF ( v_scan_query_pct = 0 ) 	THEN
user logons cumulative				  1	       0.0	     0.0
user logouts cumulative 			 66	       0.1	     0.0
workarea executions - optimal			589	       0.9	     0.0
write clones created in backgrou		  0	       0.0	     0.0
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
write clones created in foregrou		455	       0.7	     0.0
			  ------------------------------------------------------


Instance Activity Stats - Absolute ValuesDB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Statistics with absolute values (should not be diffed)

Statistic			     Begin Value       End Value
-------------------------------- --------------- ---------------
logons current				     207	     143
opened cursors current			     363	      98
session cursor cache count		   8,409	   8,883
session pga memory		   1,007,851,224     627,230,872
session pga memory max		   1,171,941,688     753,571,672
session uga memory		     464,061,656     346,370,760
session uga memory max		   1,897,305,360   2,174,713,824
			  ------------------------------------------------------

Instance Activity Stats - Thread ActivityDB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour
-------------------------------- ------------------ ---------
log switches (derived)				  0	  .00
			  ------------------------------------------------------

IOStat by Function summary		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc

		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time
--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re  129.8G 2.7E+04 209.408      0M     0.0      0M    3.3M   9.07ms
DBWR		     4M     0.4   .006M   20.4G  4045.9 32.997M     240   7.60ms
LGWR		     0M     0.0      0M      2G    80.2  3.295M   26.5K  25.48ms
Others		   1.5G     9.8  2.425M    217M     2.2   .342M    4449   8.81ms
Direct Writes	     0M     0.0      0M      1M     0.1   .002M       0
TOTAL:		 131.3G 2.7E+04 211.84M   22.7G  4128.4 36.636M    3.3M   9.20ms
			  ------------------------------------------------------

IOStat by Filetype summary		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc

		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
-------------- ------- ------- ------- ------- ------- ------- -------- --------
Data File	129.8G 2.7E+04 209.397	 20.5G	4046.0 33.003M	 1.31ms  12.50ms
Log File	  1.4G	   2.6	2.314M	    2G	  80.1	3.294M 169.93us 1690.86m
Control File	   74M	   7.5	 .117M	   13M	   1.3	  .02M	 5.10ms
Other		    0M	   0.0	    0M	    2M	   0.4	 .003M
Temp File	    1M	   0.1	 .002M	    1M	   0.1	 .002M	 3.58ms
TOTAL:		131.3G 2.7E+04 211.829	 22.5G	4127.9 36.322M	 1.31ms 1684.03m
			  ------------------------------------------------------

IOStat by Function/Filetype summary	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Ordered by (Data Read + Write) desc for each function

  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
  129.7G 2.7E+04 209.374      0M     0.0      0M    3.1M     7.64ms
 Buffer Cache Reads (Data File)
  129.7G 2.7E+04 209.372      0M     0.0      0M    3.1M     7.64ms
 Buffer Cache Reads (Temp File)
      1M     0.1   .002M      0M     0.0      0M      50     4.04ms
DBWR
      4M     0.4   .006M   20.4G  4044.0 32.981M     240     7.60ms
 DBWR (Data File)
      0M     0.0      0M   20.4G  4044.0  32.98M       0
 DBWR (Control File)
      4M     0.4   .006M      0M     0.0      0M     240     7.60ms
 DBWR (Temp File)
      0M     0.0      0M      1M     0.0   .002M       0
 LGWR (Log File)
      0M     0.0      0M      2G    80.1  3.294M       0
LGWR
      0M     0.0      0M      2G    80.1  3.294M       0
Others
    1.5G     9.8  2.425M    215M     1.9   .339M    3921     6.68ms
 Others (Log File)
    1.4G     2.6  2.314M      0M     0.0      0M     153   468.56us
 Others (Data File)
      1M     0.1   .002M    202M     0.5   .318M     168    11.74ms
 Others (Control File)
     70M     7.1    .11M     13M     1.3    .02M    3600     6.71ms
 Others (Temp File)
      0M     0.0      0M      0M     0.0      0M       0
 Direct Writes (Data File)
      0M     0.0      0M      1M     0.1   .002M       0
Direct Writes
      0M     0.0      0M      1M     0.1   .002M       0
TOTAL:
  131.2G 2.7E+04 211.805   22.7G  4126.0 36.616M    3.1M     7.64ms
			  ------------------------------------------------------


			IF ( v_sharing_schema = TRUE ) THEN
Tablespace IO Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------
				EXECUTE IMMEDIATE v_home_schema_str;


File IO Stats				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

				v_sharing_schema := FALSE;
		  No data exists for this section of the report.
			  ------------------------------------------------------


			END IF;
Buffer Pool Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Standard block size Pools  D: default,  K: keep,  R: recycle
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k
		END IF;

							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
	END IF;
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
D      917,088	  6   18,236,952   17,113,050	2,683,383      0      0    1,698

			  ------------------------------------------------------

Checkpoint Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Physical Writes:		     2,683,877

					  Other    Autotune	 Thread
	-- Choose the random block. The v_do_hotspot handler that follows can override.
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
     Writes	 Writes      Writes	 Writes      Writes	 Writes
----------- ----------- ----------- ----------- ----------- -----------
	  0	      0 	  0	      0      25,571	      0
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
			  ------------------------------------------------------

Instance Recovery Stats 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> B: Begin Snapshot,  E: End Snapshot

									    Estd
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
B     0    41	 58659	 303973 1.70E+07 1.70E+07      N/A	N/A    N/A    14
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
E     0   114	 55389	1903287  5627940 1.70E+07  5627940	N/A    N/A    51
			  ------------------------------------------------------

MTTR Advisory				     DB/Inst: P60SDB/p60sdb1  Snap: 52

		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffer Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 52
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
-> Only rows with estimated physical reads >0 are displayed
-> ordered by Block Size, Buffers For Estimate

				    Est
	END IF;
				   Phys      Estimated			Est
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds

--- -------- ------ ------------ ------ -------------- ------------ -------
D	 768	 .1	      89    1.0 	40,981		  1 6.9E+04
D      1,536	 .2	     179    1.0 	40,902		  1 6.9E+04
D      2,304	 .3	     268    1.0 	40,850		  1 6.9E+04
----------------------------------------------------------------------------------------------------------------------
D      3,072	 .4	     358    1.0 	40,786		  1 6.9E+04
D      3,840	 .5	     447    1.0 	40,716		  1 6.9E+04
D      4,608	 .6	     537    1.0 	40,653		  1 6.8E+04
D      5,376	 .7	     626    1.0 	40,596		  1 6.8E+04
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
D      6,144	 .8	     716    1.0 	40,534		  1 6.8E+04
D      6,912	 .9	     805    1.0 	40,472		  1 6.8E+04
D      7,680	1.0	     895    1.0 	40,415		  1 6.8E+04
----------------------------------------------------------------------------------------------------------------------
D      7,872	1.0	     917    1.0 	40,402		  1 6.8E+04
D      8,448	1.1	     984    1.0 	40,359		  1 6.8E+04
D      9,216	1.2	   1,074    1.0 	40,298		  1 6.8E+04
D      9,984	1.3	   1,163    1.0 	40,233		  1 6.8E+04

D     10,752	1.4	   1,253    1.0 	40,178		  1 6.8E+04
D     11,520	1.5	   1,342    1.0 	40,123		  1 6.8E+04
D     12,288	1.6	   1,432    1.0 	40,068		  1 6.7E+04
	IF  ( v_select_only_workload = TRUE ) THEN
D     13,056	1.7	   1,521    1.0 	40,012		  1 6.7E+04
D     13,824	1.8	   1,610    1.0 	39,955		  1 6.7E+04
D     14,592	1.9	   1,700    1.0 	39,896		  1 6.7E+04
D     15,360	2.0	   1,789    1.0 	39,840		  1 6.7E+04
		-- handle case where user specified zero pct updates (a SELECT-only workload)
			  ------------------------------------------------------


PGA Aggr Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		v_do_update := FALSE;
-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
--------------- ------------------ --------------------------
		v_update_quota := TRUE ;
	  100.0 	       170			    0
			  ------------------------------------------------------

PGA Aggr Target Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	ELSE
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
		IF ( v_update_only_workload = TRUE ) THEN
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt
-> %Man W/A Mem    - percentage of workarea memory under manual control
			-- handle case where user specified 100% updates

						%PGA  %Auto   %Man
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
			v_do_update := TRUE;
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
B      3,215	  1,358    2,100.1	  0.0	  .0	 .0	.0    329,210
E      3,215	  1,617    1,647.3	  0.0	  .0	 .0	.0    329,210
			v_update_quota := FALSE;
			  ------------------------------------------------------

PGA Aggr Target Histogram		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Optimal Executions are purely in-memory operations
		ELSE

  Low	  High
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
------- ------- -------------- -------------- ------------ ------------
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
     2K      4K 	   327		  327		 0	      0
    64K    128K 	    43		   43		 0	      0
   128K    256K 	    38		   38		 0	      0
   256K    512K 	    28		   28		 0	      0
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
   512K   1024K 	    72		   72		 0	      0
     1M      2M 	    79		   79		 0	      0
     2M      4M 	     2		    2		 0	      0
			  ------------------------------------------------------
			IF ( v_update_quota = FALSE ) THEN

PGA Memory Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 52
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0
				-- Handle case where user has set UPDATE_PCT to a valid value

				       Estd Extra    Estd P Estd PGA
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
				--
---------- ------- ---------------- ---------------- ------ -------- -------
       402     0.1	    2,105.2		47.0   98.0	  16 8.8E+06
				-- We are doing updates during this run and quota has not been met yet
       804     0.3	    2,105.2		47.0   98.0	  16 8.8E+06
     1,608     0.5	    2,105.2		 5.0  100.0	   7 8.6E+06
     2,411     0.8	    2,105.2		 0.0  100.0	   0 8.6E+06
     3,215     1.0	    2,105.2		 0.0  100.0	   0 8.6E+06
				-- We still vacillate until update quota has been met
     3,858     1.2	    2,105.2		 0.0  100.0	   0 8.6E+06
     4,501     1.4	    2,105.2		 0.0  100.0	   0 8.6E+06
     5,144     1.6	    2,105.2		 0.0  100.0	   0 8.6E+06
     5,787     1.8	    2,105.2		 0.0  100.0	   0 8.6E+06

     6,430     2.0	    2,105.2		 0.0  100.0	   0 8.6E+06
     9,645     3.0	    2,105.2		 0.0  100.0	   0 8.6E+06
    12,860     4.0	    2,105.2		 0.0  100.0	   0 8.6E+06
				IF ( MOD(v_random_block,  2) = 0 ) THEN
    19,290     6.0	    2,105.2		 0.0  100.0	   0 8.6E+06
    25,720     8.0	    2,105.2		 0.0  100.0	   0 8.6E+06
			  ------------------------------------------------------


					v_do_update := TRUE;
Shared Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 52
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
				ELSE
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

					v_do_update := FALSE;
				       Est LC Est LC  Est LC Est LC
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
				END IF;
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
   1,472   1.0	    128        6,569   10,069	 1.0	 193	1.0	     473
   1,504   1.0	    148        7,486   10,069	 1.0	 193	1.0	     473
			ELSE
   1,536   1.0	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,568   1.1	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,600   1.1	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,632   1.1	    148        7,486   10,069	 1.0	 193	1.0	     473
				-- UPDATE quota has been filled,  force drain some SELECTs
   1,664   1.1	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,696   1.2	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,728   1.2	    148        7,486   10,069	 1.0	 193	1.0	     473
				v_do_update := FALSE;
   1,760   1.2	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,792   1.2	    148        7,486   10,069	 1.0	 193	1.0	     473
   1,952   1.3	    148        7,486   10,069	 1.0	 193	1.0	     473
   2,112   1.4	    148        7,486   10,069	 1.0	 193	1.0	     473
			END IF;
   2,272   1.5	    148        7,486   10,069	 1.0	 193	1.0	     473
   2,432   1.7	    148        7,486   10,069	 1.0	 193	1.0	     473
   2,592   1.8	    148        7,486   10,069	 1.0	 193	1.0	     473
   2,752   1.9	    148        7,486   10,069	 1.0	 193	1.0	     473
		END IF;
   2,912   2.0	    148        7,486   10,069	 1.0	 193	1.0	     473
   3,072   2.1	    148        7,486   10,069	 1.0	 193	1.0	     473
			  ------------------------------------------------------

	END IF;
SGA Target Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 52

SGA Target   SGA Size	    Est DB     Est Physical
  Size (M)     Factor	  Time (s)	      Reads

---------- ---------- ------------ ----------------
     3,624	  0.4	    87,274	 40,903,160
     4,832	  0.5	    87,075	 40,785,994
     6,040	  0.6	    86,954	 40,717,310
----------------------------------------------------------------------------------------------------------------------
     7,248	  0.8	    86,746	 40,596,103
     8,456	  0.9	    86,539	 40,470,857
     9,664	  1.0	    86,418	 40,402,173
    10,872	  1.1	    86,237	 40,297,127
-- The type of SQL is now determined...execute it in the following section
    12,080	  1.3	    86,038	 40,179,961
    13,288	  1.4	    85,943	 40,123,398
    14,496	  1.5	    85,753	 40,010,272
    15,704	  1.6	    85,554	 39,897,146
    16,912	  1.8	    85,459	 39,840,583
----------------------------------------------------------------------------------------------------------------------
    18,120	  1.9	    85,459	 39,840,583
    19,328	  2.0	    85,459	 39,840,583
			  ------------------------------------------------------


Streams Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 52

		  No data exists for this section of the report.
			  ------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
Java Pool Advisory			     DB/Inst: P60SDB/p60sdb1  Snap: 52

		  No data exists for this section of the report.
			  ------------------------------------------------------
		--

Buffer Wait Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> ordered by wait time desc, waits desc

		-- Do a SELECT statement
Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
file header block	 1,642		       528	      322
undo header		    19			 0		0
		-- Work out scan or random
			  ------------------------------------------------------


Enqueue Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> only enqueues with requests are shown
		IF  ( v_random_workload_only = TRUE ) THEN
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
HW-Segment High Water Mark
      52,024	   52,047	    0	      329	   324	       986.26
			v_do_scan_query := FALSE;
CR-Reuse Block Range (block range reuse ckpt)
      12,542	   12,542	    0	    2,935	   153		52.16
US-Undo Segment
      24,856	   24,846	    0	    2,633	   128		48.79
			v_scan_query_quota := TRUE ;
CF-Controlfile Transaction
       1,981	    1,977	    4	      126	     1		11.76
RO-Multiple Object Reuse (fast object reuse)
	 180	      180	    0	       52	     1		22.38
		ELSE
CT-Block Change Tracking (state)
	  40	       40	    0	       40	     1		14.73
TM-DML
      33,460	   33,460	    0	       14	     0		 8.29
PS-PX Process Reservation
			IF ( v_scan_workload_only = TRUE ) THEN
	  63	       63	    0	       29	     0		 1.76
WF-AWR Flush
	  26	       25	    1	       13	     0		 3.85
CO-KTUCLO Master Slave enq (master slave det)
	  10		0	   10	       10	     0		 2.40
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
DW-In memory Dispenser
	  13		5	    8		3	     0		 7.00
TT-Tablespace
      27,110	   27,110	    0		4	     0		 3.00
				v_do_scan_query := TRUE;
JS-Job Scheduler (job run lock - synchronize)
	   4		4	    0		2	     0		 4.50
RP-Resilver / Repair
	  40	       40	    0		1	     0		 8.00
TO-Temp Object
				v_scan_query_quota := FALSE;
	  32	       32	    0		5	     0		 1.00
MV-Online Datafile Move (datafile move)
	  40	       40	    0		1	     0		 4.00
MW-MWIN Schedule
			ELSE
	   1		1	    0		1	     0		 3.00
TA-Instance Undo
	   2		2	    0		2	     0		 1.00
SW-Suspend Writes
	  40	       40	    0		1	     0		 2.00
				IF ( v_scan_query_quota = FALSE ) THEN
FD-Flashback Database (Flashback logical operations)
	  40	       40	    0		1	     0		 1.00
FB-Format Block
	   6		6	    0		1	     0		 1.00
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
DR-Distributed Recovery
	   1		1	    0		1	     0		 1.00
TD-KTF map table enqueue (KTF dump entries)
	   1		1	    0		1	     0		 1.00
TX-Transaction
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
      34,717	   34,677	   40		0	     0		  N/A
JG-Job Scheduler1
       7,386	    7,386	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)
       7,386	    7,386	    0		0	     0		  N/A
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
IS-Instance State
       1,554	    1,554	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
	 702	      702	    0		0	     0		  N/A
DD-ASM Local Disk Group
						v_do_scan_query := TRUE;
	 596	      596	    0		0	     0		  N/A
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
	 500	      497	    0		0	     0		  N/A

					ELSE
Enqueue Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

						v_do_scan_query := FALSE;
Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
					END IF;
BU-Buddy Instance Context (recovery set construct)
	 205	      205	    0		0	     0		  N/A
FP-File Object (global fob contention)
	 193	      193	    0		0	     0		  N/A
				ELSE
XL-ASM Extent Fault Lock (fault extent map)
	  48	       48	    0		0	     0		  N/A
MR-Media Recovery
	  42	       42	    0		0	     0		  N/A
CT-Block Change Tracking (CTWR process start/stop)
					-- Scan quota has been filled,	force drain some random access SELECTS
	  40	       40	    0		0	     0		  N/A
SE-Session Migration
	  40	       40	    0		0	     0		  N/A
CU-Cursor
	  31	       31	    0		0	     0		  N/A
					v_do_scan_query := FALSE;
WT-AWR CDB-Wide Table Lock
	  19	       19	    0		0	     0		  N/A
SH-Active Session History Flushing
	  15	       15	    0		0	     0		  N/A
PW-Buffer Cache PreWarm (flush prewarm buffers)
				END IF;
	  13	       13	    0		0	     0		  N/A
XR-Quiesce / Force Logging (database force logging)
	  13	       13	    0		0	     0		  N/A
TH-Threshold Chain (metric threshold evaluation)
			END IF;
	  10	       10	    0		0	     0		  N/A
AE-Edition Lock (lock)
	   8		8	    0		0	     0		  N/A
AF-Advisor Framework (task serialization)
	   7		7	    0		0	     0		  N/A
		END IF;
PR-Process Startup
	   7		7	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)
	   6		6	    0		0	     0		  N/A
SQ-Sequence Cache

	   6		6	    0		0	     0		  N/A
IT-In-Mem Temp Table Meta Creation
	   4		4	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
	   4		4	    0		0	     0		  N/A

			  ------------------------------------------------------


Undo Segment Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Min/Max TR (mins) - Min and Max Tuned Retention (minutes)
		IF ( v_do_scan_query != TRUE ) THEN
-> STO - Snapshot Too Old count,  OOS - Out of Space count
-> Undo segment block stats:
-> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed
			SELECT COUNT(c2) INTO v_rowcnt
-> eS - expired   Stolen,   eR - expired   Released,   eU - expired   reUsed

Undo   Num Undo       Number of  Max Qry   Max Tx Min/Max   STO/     uS/uR/uU/
 TS# Blocks (K)    Transactions  Len (s) Concurcy TR (mins) OOS      eS/eR/eU
			FROM cf1
---- ---------- --------------- -------- -------- --------- ----- --------------
   2	   67.7 	 23,324      359       66 20/20     0/0   0/0/0/46/42328
			  ------------------------------------------------------

Undo Segment Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
-> Most recent 35 Undostat rows, ordered by Time desc

		Num Undo    Number of Max Qry  Max Tx Tun Ret STO/    uS/uR/uU/
End Time	  Blocks Transactions Len (s)	Concy  (mins) OOS     eS/eR/eU

------------ ----------- ------------ ------- ------- ------- ----- ------------
12-Feb 10:15	  67,741       23,324	  359	   66	   20 0/0   0/0/0/46/423
			  ------------------------------------------------------


			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
		ELSE
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
AQ Background: interrupt	      1    0.0		   0	       22    0.0

AQ Coord jobx_kwsbgsgn l	     21    0.0		   0		0    N/A
AQ Message drive state o	      1    0.0		   0		0    N/A
AQ Sharded master pool l	     21    0.0		   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
ASM Keyed state latch		     80    0.0		   0		0    N/A
ASM allocation			 38,367    0.0		   0		0    N/A
ASM connection state lat	  7,028    0.0		   0		0    N/A
ASM db client latch		  4,063    0.0		   0		0    N/A

ASM map headers 		  1,959    0.0		   0		0    N/A
ASM map load waiting lis	    514    0.0		   0		0    N/A
ASM map operation freeli	  5,190    0.0		   0		0    N/A
ASM map operation hash t     40,731,459    0.0	  0.3	   0		0    N/A
ASM network background l	  6,550    0.0		   0		0    N/A
ASM network state latch 	    480    0.0		   0		0    N/A
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
ASM remote client latch 	     10    0.0		   0		0    N/A
AWR Alerted Metric Eleme	  7,504    0.0		   0		0    N/A
Autotask management		     10    0.0		   0		0    N/A
Change Notification Hash	    253    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
				v_scan_query_quota := TRUE;
Consistent RBA			 26,665    0.1	  0.5	   0		0    N/A
DML lock allocation		 67,462    0.0		   0		0    N/A
Event Group Locks		     44    0.0		   0		0    N/A
FIB s.o chain latch		    386    0.0		   0		0    N/A
			END IF;
FOB consolidated s.o lis	    386    0.0		   0		0    N/A
File IO Stats segmented 	      1    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
		END IF;
Hang Manager wait event 	     42    0.0		   0	    7,463    0.0
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A

ILM Stats main anchor la	    304    0.0		   0		0    N/A
ILM access tracking exte	      1    0.0		   0		0    N/A
ILM activity tracking la	      1    0.0		   0		0    N/A
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
		-- If this is a fixed-iteration count test cycle and we've hit the number of
IM Global dictionary rw 	      1    0.0		   0		0    N/A
IM area sb latch		      1    0.0		   0		0    N/A
IM area scb latch		      1    0.0		   0		0    N/A
		-- iterations then set exit flag
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
IMFS defer write list		      1    0.0		   0		0    N/A
		v_stop_immediate := TRUE ;
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      7    0.0		   0		0    N/A
IPC stats buffer allocat	      1    0.0		   0		0    N/A
	END IF;
In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		    371    0.0		   0		0    N/A
JS broadcast add buf lat	    388    0.0		   0		0    N/A
END LOOP;
JS broadcast drop buf la	    388    0.0		   0		0    N/A
JS broadcast load blnc l	    135    0.0		   0		0    N/A
JS global state obj latc	      4    0.0		   0		0    N/A

JS mem alloc latch		     16    0.0		   0		2    0.0
JS queue access latch		     17    0.0		   0		0    N/A
JS queue state obj latch	 15,570    0.0		   0		0    N/A
v_end_time := v_now ;
JS slv state obj latch		     29    0.0		   0		0    N/A
KCNIBR - invalid block r	      1    0.0		   0		0    N/A
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
v_now := DBMS_UTILITY.GET_TIME();
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0


					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
v_total_time := v_end_time - v_begin_time ;
------------------------ -------------- ------ ------ ------ ------------ ------
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
KDMADO bll latch		      1    0.0		   0		0    N/A
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
KFC Hash Latch			      1    0.0		   0		0    N/A
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
KFIAS cluster latch		      1    0.0		   0		0    N/A
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
KFIAS endpoint latch		      1    0.0		   0		0    N/A
KFIAS node latch		      1    0.0		   0		0    N/A
KFIAS process latch		      1    0.0		   0		0    N/A

KFIAS queue latch		      1    0.0		   0		0    N/A
KFK SGA Libload latch		 13,046    0.0		   0		0    N/A
KFMD SGA			    423    0.0		   0		0    N/A
END;</pre_sqltext></td></tr>
KGNFS-NFS:SHM structure 	      1    0.0		   0		0    N/A
KGNFS-NFS:SVR LIST		    212    0.0		   0		0    N/A
KJC message pool KGH cal	    904    0.0		   0		0    N/A
KJC message pool free li	404,583    0.1	  0.2	   0	  622,454    0.6
KJC message pool pending	      1    0.0		   0		0    N/A
KJCT flow control latch       5,516,687    0.1	  0.1	   0		0    N/A
KMG MMAN ready and start	    211    0.0		   0		0    N/A
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
<tr><td scope="row" class='awrc'><a class="awr" name="f4rq0sufc25j7"></a>f4rq0sufc25j7</td><td class='awrc'><pre_sqltext class="awr">DECLARE
KSFS id table parent lat	      1    0.0		   0		0    N/A
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
v_default_schema_number PLS_INTEGER := '78';
KSGL LS Segment latch		      1    0.0		   0		0    N/A
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
v_update_pct PLS_INTEGER := '15';
KSIPC SGA allocation par	    307    0.0		   0		0    N/A
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A
KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
v_max_loop_iterations PLS_INTEGER := '0';
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A
KSWL SGA anchor latch		      1    0.0		   0		0    N/A
v_seconds_to_run PLS_INTEGER := '600';
KSXR hang analysis phase	  2,388    0.0		   0	       69    0.0
KSXR hang analysis phase	    996    0.0		   0		2    0.0
KSXR large replies		      4    0.0		   0		0    N/A
KTF sga latch			      2    0.0		   0	      296    0.0
v_scale PLS_INTEGER := '1048576';
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
v_work_unit PLS_INTEGER := '80' ;
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
KWQMN job cache list lat	     88    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
Locator state objects po	      1    0.0		   0		0    N/A
v_redo_stress  VARCHAR2(12) := 'LITE';
Lost write change tracki	      1    0.0		   0		0    N/A
Lsod array latch		    416    0.0		   0		0    N/A
MGA asr alloc latch		     10    0.0		   0		0    N/A
v_hot_schema_modulus PLS_INTEGER := '0';
MGA heap latch			    169    2.4	  0.5	   0		0    N/A
MGA shared context latch	  3,035    1.4	  0.5	   0		0    N/A
MGA shared context root 	    170   28.8	  0.4	   0		0    N/A
MQL Tracking Latch		      0    N/A		   0	       12    0.0
v_do_hotspot   VARCHAR(7) := 'FALSE';
Memory Management Latch 	      0    N/A		   0	      211    0.0
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
v_hotspot_mb  NUMBER := '8';

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_hotspot_offset_mb NUMBER := '16';
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_hotspot_modulus  PLS_INTEGER := '3';
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss

------------------------ -------------- ------ ------ ------ ------------ ------
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
v_sleep_modulus PLS_INTEGER := '0';
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A
MinActiveScn Latch		     30    0.0		   0		0    N/A
v_sleep_min NUMBER := '.1';
Mutex				      1    0.0		   0		0    N/A
Mutex Stats			      1    0.0		   0		0    N/A
Nologging Standby SCN Ti	    207    0.0		   0		0    N/A
v_sleep_max NUMBER := '.5';
OS process			    790    0.0		   0		0    N/A
OS process allocation		  1,366    0.0		   0		0    N/A
OS process: request allo	     80    0.0		   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A
v_scan_query_pct PLS_INTEGER := '0';
PDB LRU structure		      5    0.0		   0		0    N/A
PL/SQL warning settings 	     35    0.0		   0		0    N/A
PX hash array latch		      1    0.0		   0		0    N/A
v_obfuscate VARCHAR(5)	:= 'FALSE';
Parent latch for depende	      1    0.0		   0		0    N/A
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
QMT				      1    0.0		   0		0    N/A

Real-time descriptor lat	 10,433    0.0		   0		0    N/A
Report Request stats lat	     45    0.0		   0		0    N/A
Report Request struct la	     15    0.0		   0		0    N/A

Request holder compeltio	     15    0.0		   0		0    N/A
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
SGA Blackbox latch		      2    0.0		   0		0    N/A
SGA IO buffer pool latch	      3    0.0		   0		3    0.0
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
SGA Logging Log Latch		 11,503    0.0		   0		0    N/A
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
SGA heap locks			      1    0.0		   0		0    N/A
SGA pool locks			      1    0.0		   0		0    N/A

SO private so latch		    170    0.0		   0	       17    0.0
SQL memory manager latch	      1    0.0		   0	      210    0.0
SQL memory manager worka	 15,566    0.0		   0		0    N/A
v_num_tmp NUMBER := 0;
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		     11    0.0		   0		0    N/A
Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     23    0.0		   0		0    N/A

Streams Generic 		      1    0.0		   0		0    N/A
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
v_loop_cnt PLS_INTEGER := 0;
Token Manager			      1    0.0		   0		0    N/A
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
v_rowcnt PLS_INTEGER := 0;
UM object latch 		      1    0.0		   0		0    N/A
Undo Hint Latch 		      0    N/A		   0	      526    0.0
WCR: sync			      1    0.0		   0		0    N/A
Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
v_updates_cnt PLS_INTEGER := 0;
XDB NFS Security Latch		      1    0.0		   0		0    N/A
XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
active checkpoint queue 	235,552    0.4	  0.3	   0		0    N/A
v_selects_cnt PLS_INTEGER := 0;
active service list		  8,305    0.0		   0	      844    0.0
archive destination		     22    0.0		   0		0    N/A
begin backup scn array		     67    0.0		   0		0    N/A

buffer pool			      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
v_random_access_queries_cnt PLS_INTEGER := 0;
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_scan_queries_cnt PLS_INTEGER := 0;
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------

business card			     15    0.0		   0		0    N/A
cache buffer handles		    121    0.0		   0		0    N/A
cache buffers chains	    107,349,080    0.0	  0.1	   0   31,390,428    0.0
v_do_scan_query BOOLEAN :=FALSE;
cache buffers lru chain       6,701,188    0.2	  0.1	   1   19,922,866    0.7
cache table scan latch		     74    0.0		   0	       74    0.0
call allocation 		  1,417    0.2	  0.3	   0		0    N/A
change notification clie	      1    0.0		   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
channel handle pool latc	    293    0.0		   0		0    N/A
channel operations paren	 13,688    0.1	  0.1	   0	       72    0.0
checkpoint queue latch	      8,953,723    0.0	  0.2	   0	2,682,326    0.0
client/application info 	    255    0.0		   0		0    N/A
v_scan_workload_only BOOLEAN := FALSE;
compile environment latc	     40    0.0		   0		0    N/A
cp handoff latch		      1    0.0		   0		0    N/A
cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
v_random_workload_only BOOLEAN := FALSE;
cp sga latch			     10    0.0		   0		0    N/A
cp srv type state latch 	    634    0.0		   0		0    N/A
cp srv type wait latch		      1    0.0		   0		0    N/A

cr slave free list		      1    0.0		   0		0    N/A
cvmap freelist lock		      1    0.0		   0		0    N/A
deferred cleanup latch		     10    0.0		   0		0    N/A
dispatcher info 		      6    0.0		   0		0    N/A

dml lock allocation		     10    0.0		   0		0    N/A
done queue latch		      1    0.0		   0		0    N/A
dtp latch			     79    0.0		   0		0    N/A
dummy allocation		    135    0.0		   0		0    N/A
v_random_block PLS_INTEGER := 1;
eighth spare latch - X p	      1    0.0		   0		0    N/A
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	  212,626    0.0
v_tmp PLS_INTEGER;
enqueue hash chains		653,766    2.4	  0.1	   1	    1,458    0.0
enqueues			    322    0.0		   0		0    N/A
error message lists		     33    0.0		   0		0    N/A
fast space usage latch		     52    0.0		   0		0    N/A
v_now PLS_INTEGER;
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		  2,625    0.1	  1.0	   0		0    N/A
first Audit Vault latch 	      1    0.0		   0		0    N/A
flash file access latch 	      1    0.0		   0		0    N/A
v_brick_wall PLS_INTEGER;
flashback copy			      1    0.0		   0		0    N/A
fourteenth spare latch -	      1    0.0		   0		0    N/A
fourth Audit Vault latch	      1    0.0		   0		0    N/A

gc element		     16,976,054    0.0	  0.1	   0	1,156,764    0.1
gc imc list			  1,032    0.0		   0		0    N/A
gc persistent rm		      1    0.0		   0		0    N/A
gc xid list			    114    0.0		   0		0    N/A
v_begin_time PLS_INTEGER;
gcs affinity object free	      3    0.0		   0		1    0.0
gcs commit scn state		      1    0.0		   0		0    N/A
gcs nodemap pool		212,109    0.0	  0.2	   0		0    N/A
gcs opaque info freelist	216,730    0.0	  0.2	   0		0    N/A
v_end_time PLS_INTEGER;
gcs partitioned table ha     26,273,485    0.0	  0.0	   0   14,382,048    0.0
gcs pcm hashed value buc	      1    0.0		   0		0    N/A
gcs remaster request que	 16,240    0.0	  4.8	   0		0    N/A
gcs remastering latch		 62,943    0.6	  0.1	   1	   11,144    0.3
v_total_time PLS_INTEGER;
gcs resource freelist	      4,506,846    0.0	  0.1	   0	  122,152    0.1
gcs resource hash	     33,889,036    0.0	  0.3	   3	      133    0.0
gcs resource scan list		      3    0.0		   0		0    N/A
gcs resource timerq list	      1    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
gcs resource validate li	      1    0.0		   0		0    N/A
gcs shadows freelist	      4,283,963    0.0	  0.2	   0		0    N/A
ges cached resource list	227,227    0.3	  0.1	   0	   37,128    0.0
ges deadlock list		  1,384    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_total_cpu_tm PLS_INTEGER;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct

				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_do_sleeps BOOLEAN := FALSE;
ges domain table		566,924    0.0	  0.0	   0		0    N/A
ges enqueue table freeli	262,653    0.1	  0.2	   0		0    N/A
ges group table 		619,778    0.0		   0		0    N/A
ges process hash list		142,492    0.0	  0.0	   0		0    N/A
v_loop_control BOOLEAN := FALSE;
ges process parent latch      1,159,240    0.0	  0.7	   0		0    N/A
ges process table freeli	     80    0.0		   0		0    N/A
ges remote lock freelist	  1,191    0.0		   0		0    N/A
ges resource hash list		825,858    0.1	  0.2	   0	    4,125    0.2
v_update_quota BOOLEAN := FALSE;
ges resource scan list		  1,415    0.0		   0		0    N/A
ges resource table freel	  6,306    0.0		   0		4    0.0
ges s-lock bitvec freeli	    308    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
ges timeout list		  1,573    0.0		   0	      121    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global KZLD latch for au	      1    0.0		   0		0    N/A
global tx hash mapping		      1    0.0		   0		0    N/A
v_update_only_workload BOOLEAN := FALSE;
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     42    0.0		   0		0    N/A
hash table Sql Plan Find	     20    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
hash table column usage 	    432    0.0		   0	    1,445    0.0
hash table expression us	      1    0.0		   0		0    N/A
hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      404    0.0
v_do_hot_schema BOOLEAN := FALSE;
heartbeat structure mana	      0    N/A		   0	      316    0.0
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
imc hash lat			      1    0.0		   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A
v_sharing_schema BOOLEAN := FALSE;
in-memory columnar segme	      1    0.0		   0		0    N/A
in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
internal temp table obje	      1    0.0		   0		0    N/A
v_seed VARCHAR2(128);
interrupt manipulation		    102    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
io pool granule list		    104    0.0		   0		0    N/A
io pool granule metadata	    209    0.0		   0		0    N/A
v_home_schema_str VARCHAR2(80);
job workq parent latch		      5    0.0		   0		4    0.0
job_queue_processes free	     16    0.0		   0		0    N/A
job_queue_processes para	     11    0.0		   0		0    N/A
jslv pdb context latch		      8    0.0		   0		0    N/A
v_scratch VARCHAR2(200) ;
k2q global data latch		    422    0.0		   0		0    N/A
k2q lock allocation		      1    0.0		   0		0    N/A
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A

kcn buffer chains		      1    0.0		   0		0    N/A
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
kgnfs mount latch		      1    0.0		   0		0    N/A
v_cpu_pct NUMBER(6, 3);
kjbr roi instance map		      1    0.0		   0		0    N/A
kjci objects freelist la	 13,307    0.0		   0		0    N/A
kjci process context lat	 12,233    0.6	  0.1	   0	   75,636    0.0
kjci process list latch 	  5,237    0.0	  0.0	   0		0    N/A
v_my_serial NUMBER(16);
kjci request sequence la	  1,491    0.0		   0		0    N/A
kjcipctx state object fr	     75    0.0		   0		0    N/A
kjoedcso state object fr	     10    0.0		   0		0    N/A
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A

kjoer owner hash bucket 	      1    0.0		   0		0    N/A
kjpm my inst data		     22    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
BEGIN
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests

-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
------------------------ -------------- ------ ------ ------ ------------ ------
kjsc Request obj freelis	    160    0.0		   0		0    N/A
kjsc Ring Buffer obj fre	     80    0.0		   0		0    N/A
kjsc protect control req	     80    0.0		   0	    6,366    0.0
EXECUTE IMMEDIATE v_home_schema_str;
kjsc protect warm up con	  3,151    0.0		   0		0    N/A
kjsca pkey obj freelist 	     31    0.0		   0		0    N/A
kjsca protect pkey hash 	  9,142    0.0		   0		0    N/A
kjsca protect service ha	     23    0.0		   0		0    N/A

kjscpss state object fre	     80    0.0		   0		0    N/A
kokc descriptor allocati	     22    0.0		   0		0    N/A
kpoxft latch			      0    N/A		   0	       65    1.5
krso process			     22    0.0		   0		0    N/A

ksevn object root latch 	    211    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
ksi resource reuse count	      1    0.0		   0		0    N/A
ksim group membership ca	    274    0.0		   0		0    N/A
ksim membership request 	      0    N/A		   0	      469    0.0
IF ( v_hot_schema_modulus != 0 ) THEN
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			      9    0.0		   0		0    N/A
ksuosstats global area		     50    0.0		   0	      242    0.0
ksutcpistat latch		      1    0.0		   0		0    N/A
	v_do_hot_schema := TRUE;
ksv allocation latch		     25    0.0		   0		0    N/A
ksv class latch 		 18,250    0.0	  0.0	   0		0    N/A
ksv instance latch		    128    0.0		   0		0    N/A
ksv msg queue latch		    657    0.0		   0	      656    0.0
END IF;
ksxp shared latch		     80    0.0		   0		0    N/A
ksxp so latch			     80    0.0		   0		0    N/A
ksz_so allocation latch 	     80    0.0		   0		0    N/A
ktfbn latch			    131    0.0		   0		0    N/A

ktm adg jrnls			      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg space			      1    0.0		   0		0    N/A
ktm adg stages			      1    0.0		   0		0    N/A
IF ( v_sleep_modulus != 0 )	  THEN
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		     12    0.0		   0		0    N/A
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
	v_do_sleeps := TRUE;
kwqbsn:qsga			     22    0.0		   0		0    N/A
kwslbmdl: metadata latch	     22    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
END IF;
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	     15    0.0		   0		0    N/A

kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
kxfxscanrate_latch		      1    0.0		   0		0    N/A
lgwr LWN SCN			 27,118    0.2	  0.3	   0		0    N/A
list of block allocation	130,397    0.0		   0		0    N/A
loader state object free	     86    0.0		   0		0    N/A
IF ( v_max_loop_iterations &gt; 0 )  THEN
lob segment dispenser la	    138    0.0		   0		0    N/A
lob segment hash table l	    196    0.0		   0		0    N/A
lob segment query latch 	      1    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
	v_loop_control := TRUE ;
log write info			      0    N/A		   0	   28,096    2.5
log write worker phase		 13,285    0.0		   0		0    N/A
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
END IF;
logminer local			      1    0.0		   0		0    N/A
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
IF ( v_update_pct = 0 ) 	  THEN

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
	v_select_only_workload := TRUE;
------------------------ -------------- ------ ------ ------ ------------ ------
managed standby 		     21    0.0		   0		0    N/A
message bitmap latch		      1    0.0		   0		0    N/A
message pool operations 	  5,302    0.0		   0		0    N/A
messages			659,379    0.2	  0.1	   0		0    N/A
END IF;
msg queue latch 		      1    0.0		   0		0    N/A
multiblock read objects 	369,472    0.0	  0.1	   0		0    N/A
name-service memory obje	    137    0.0		   0		0    N/A
name-service namespace b	  3,510    0.0		   0		0    N/A

name-service pending que	     64    0.0		   0		0    N/A
name-service request		      6    0.0		   0		0    N/A
name-service request que	  6,507    0.0		   0		0    N/A
ncodef allocation latch 	     10    0.0		   0		0    N/A
IF ( v_update_pct = 100 )	  THEN
ninth spare latch - X pa	      1    0.0		   0		0    N/A
object queue header free	  8,011    0.0		   0		0    N/A
object queue header oper     42,578,831    0.0	  0.1	   0	  222,766    0.0
object queue memory		     33    0.0		   0		0    N/A
object stats modificatio	    114    0.0		   0		0    N/A
	v_update_only_workload := TRUE;
parallel query alloc buf	    207    0.0		   0	      380    0.0
parallel query stats		     45    0.0		   0		0    N/A
parallel txn reco latch 	    456    0.0		   0		0    N/A
END IF;
parameter table manageme	    372    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A

peshm				      1    0.0		   0		0    N/A
pesom_free_list 		      1    0.0		   0		0    N/A
pesom_hash_node 		      1    0.0		   0		0    N/A
IF ( v_scan_query_pct = 0 ) 	THEN
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		     10    0.0		   0		0    N/A
	v_random_workload_only := TRUE;
post/wait queue 		114,478    0.1	  0.0	   0	  116,272    0.4
process allocation		  3,179    0.0		   0		0    N/A
process group creation		     80    0.0		   0		0    N/A
END IF;
process memory detail		      1    0.0		   0		0    N/A
process pkey statistics 	      1    0.0		   0		0    N/A
process queue			     99    0.0		   0		0    N/A
process queue reference 	  3,004    0.0		   0	      483    0.0

qmn task queue latch		     88    0.0		   0		0    N/A
quarantine object		     10    0.0		   0		0    N/A
query server freelists		     96    0.0		   0		0    N/A
IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
query server process		    483    0.0		   0		1    0.0
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
queued dump request		      2    0.0		   0		0    N/A
queuing load statistics 	      1    0.0		   0		0    N/A
read-moslty lock queue u	      1    0.0		   0		0    N/A
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
recovery domain hash buc	  3,408    0.0		   0		0    N/A
redo allocation 		108,490    2.3	  0.2	   0	2,836,468    1.1
redo copy			      1    0.0		   0	2,839,713    0.0
	END IF;
redo transport task		      1    0.0		   0		0    N/A
redo writing			331,163    0.1	  0.2	   0		0    N/A
remote tool request latc	     99    0.0		   0		0    N/A

resmgr group change latc	     32    0.0		   0		0    N/A
resmgr:active threads		    142    0.0		   0	       11    0.0
resmgr:actses change gro	     41    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
resmgr:actses change sta	      5    0.0		   0		0    N/A
resmgr:free threads list	    134    0.0		   0		0    N/A
resmgr:plan CPU method		      1    0.0		   0		0    N/A
resmgr:plan change alloc	      1    0.0		   0		0    N/A
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A
resmgr:schema config		      6    0.0		   0	       11    0.0
resmgr:session queuing		      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
resumable state object		    125    0.8	  0.0	   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
	IF  ( v_select_only_workload = TRUE ) THEN
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
		-- handle case where user specified zero pct updates (a SELECT-only workload)
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
rt rmv count latch		      0    N/A		   0	      316    0.0
		v_do_update := FALSE;
rules engine evaluation 	      0    N/A		   0		2    0.0
second Audit Vault latch	      1    0.0		   0		0    N/A
segmented array pool		    386    0.0		   0		0    N/A
		v_update_quota := TRUE ;
sequence cache			    223    0.0		   0		0    N/A
service drain list		    632    0.0		   0		0    N/A
session allocation		 31,662    0.0		   0	   31,448    0.0
	ELSE
session idle bit		 64,134    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
		IF ( v_update_only_workload = TRUE ) THEN
session state list latch	    156    0.0		   0		0    N/A
session statistics		    135    0.0		   0		0    N/A
session switching		     83    0.0		   0		0    N/A
session timer			    211    0.0		   0		0    N/A
			-- handle case where user specified 100% updates
seventh spare latch - X 	      1    0.0		   0		0    N/A
sga hash table parent la	      1    0.0		   0		0    N/A
shard latch			      1    0.0		   0		0    N/A
			v_do_update := TRUE;
shardgroup list latch		     34    0.0		   0		0    N/A
shared pool			 25,713    0.1	  0.0	   0	       27    0.0
shared pool sim alloc		      1    0.0		   0		0    N/A
			v_update_quota := FALSE;
shared pool simulator		    338    0.0		   0		0    N/A
shared server configurat	    212    0.0		   0		0    N/A
sim partition latch		      1    0.0		   0		0    N/A
		ELSE
simulator hash latch	      4,336,702    0.0	  0.1	   0		0    N/A
simulator lru latch		      1    0.0		   0	2,217,450    0.0
sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    338    0.0		   0		0    N/A
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
space background task la	  3,592   72.2	  0.9	   8	      420    2.9
state object free list		      2    0.0		   0		0    N/A
statistics aggregation		    145    0.0		   0		0    N/A
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	     56    0.0		   0		0    N/A
temporary table state ob	      7    0.0		   0		0    N/A
			IF ( v_update_quota = FALSE ) THEN
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A
				-- Handle case where user has set UPDATE_PCT to a valid value
test excl. parent2 lmid 	      1    0.0		   0		0    N/A
test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
test open exclusive		      1    0.0		   0		0    N/A
				--
test pdb exclusive		      1    0.0		   0		0    N/A
test shared parent2 lmid	      1    0.0		   0		0    N/A
thirteenth spare latch -	      1    0.0		   0		0    N/A
				-- We are doing updates during this run and quota has not been met yet
threshold alerts latch		     20    0.0		   0		0    N/A
transaction allocation		  1,118    0.0		   0		0    N/A
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
				-- We still vacillate until update quota has been met
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
twenty-second spare latc	      1    0.0		   0		0    N/A

twenty-third spare latch	      1    0.0		   0		0    N/A
undo global data	      1,326,298    0.1	  0.2	   0		3    0.0
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A
				IF ( MOD(v_random_block,  2) = 0 ) THEN
virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------


					v_do_update := TRUE;
Latch Sleep Breakdown			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> ordered by misses desc

				ELSE
				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
-------------------------- --------------- ------------ ----------- -----------
					v_do_update := FALSE;
cache buffers lru chain 	 6,701,188	 16,294       2,075	 14,290
enqueue hash chains		   653,766	 15,713       1,538	 14,278
gcs resource hash		33,889,036	  6,256       1,960	  4,459
				END IF;
gc element			16,976,054	  4,776 	407	  4,394
cache buffers chains	       107,349,080	  3,261 	488	  2,806
KJCT flow control latch 	 5,516,687	  2,822 	397	  2,447
			ELSE
space background task latc	     3,592	  2,594       2,391	    298
redo allocation 		   108,490	  2,497 	618	  1,912
ASM map operation hash tab	40,731,459	  1,675 	456	  1,244
object queue header operat	42,578,831	  1,609 	172	  1,452
				-- UPDATE quota has been filled,  force drain some SELECTs
messages			   659,379	  1,178 	 91	  1,090
undo global data		 1,326,298	  1,065 	163	    913
ges resource hash list		   825,858	    986 	183	    807
				v_do_update := FALSE;
active checkpoint queue la	   235,552	    964 	335	    632
ges cached resource lists	   227,227	    773 	 43	    733
checkpoint queue latch		 8,953,723	    496 	 77	    419
			END IF;
gcs resource freelist		 4,506,846	    464 	 53	    413
KJC message pool free list	   404,583	    452 	 89	    373
ges enqueue table freelist	   262,653	    359 	 66	    298
gcs remastering latch		    62,943	    353 	 42	    316
		END IF;
redo writing			   331,163	    338 	 83	    259
post/wait queue 		   114,478	    151 	  2	    149
multiblock read objects 	   369,472	     81 	  9	     73
	END IF;
kjci process context latch	    12,233	     74 	  5	     69
lgwr LWN SCN			    27,118	     50 	 17	     34
MGA shared context root la	       170	     49 	 18	     31

MGA shared context latch	     3,035	     42 	 20	     23
ges process parent latch	 1,159,240	     36 	 25	     11
Consistent RBA			    26,665	     28 	 13	     16
shared pool			    25,713	     25 	  1	     24
----------------------------------------------------------------------------------------------------------------------
channel operations parent	    13,688	     18 	  2	     16
simulator hash latch		 4,336,702	     15 	  2	     13
gcs shadows freelist		 4,283,963	     13 	  2	     11
gcs nodemap pool		   212,109	     10 	  2	      8
-- The type of SQL is now determined...execute it in the following section
gcs opaque info freelist	   216,730	      5 	  1	      4
MGA heap latch			       169	      4 	  2	      2
gcs remaster request queue	    16,240	      4 	 19	      1
call allocation 		     1,417	      3 	  1	      2
----------------------------------------------------------------------------------------------------------------------
file cache latch		     2,625	      2 	  2	      0
			  ------------------------------------------------------



Latch Miss Sources			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

	IF ( v_do_update != TRUE ) THEN
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
		--
ASM map operation hash t kffmTranslate			  0	   247	    233
ASM map operation hash t kffmDoDone_1			  0	   209	    215
KJC message pool free li kjcsmpav: allocate a msg b	  0	    57	     88
		-- Do a SELECT statement
KJC message pool free li kjcspfmbq: free vector of	  0	    32	      0
KJCT flow control latch  kjctcsnd: send normal mess	  0	   136	    174
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	    90	     21
		-- Work out scan or random
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	    89	    114
KJCT flow control latch  kjctr_releasetkt: change t	  0	    39	     24
KJCT flow control latch  kjctr_updatetkt: update ti	  0	    36	     29
		IF  ( v_random_workload_only = TRUE ) THEN
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	     4	     30
KJCT flow control latch  kjcts_adjtkt: adjust send	  0	     3	      5
MGA pid alloc latch	 ksm_mga_sctx_rtrcv_do_whr2	  0	     1	     10
MGA shared context latch ksm_mga_detach_whr2		  0	    10	      6
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
MGA shared context latch ksm_mga_sync_whr1		  0	     9	      4
MGA shared context root  ksm_mga_detach_whr1		  0	    18	     18
active checkpoint queue  kcbbacq: scan active check	  0	   279	    327
			v_do_scan_query := FALSE;
active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	    47	      1
active checkpoint queue  kcbkcpa: Checkpoint post-p	  0	     5	      3
active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	     4	      0
			v_scan_query_quota := TRUE ;
cache buffers chains	 kcbzibmlt: multi-block rea	  0	   139	      0
cache buffers chains	 kcbzgb: scan from tail now	  0	    66	      0
cache buffers chains	 kclcls_3			  0	    59	     19
cache buffers chains	 kcbgcur: slow path		  0	    52	      6
		ELSE
cache buffers chains	 kcbgtcr: fast path pin 	  0	    33	    193
cache buffers chains	 kcbgcur: fast path excl	  0	    23	      6
cache buffers chains	 kcbgtcr: slow path excl	  0	    23	     44
			IF ( v_scan_workload_only = TRUE ) THEN
cache buffers chains	 kcbzibmlt: finish free buf	  0	    19	     64
cache buffers chains	 kcbbic2			  0	    16	     10
cache buffers chains	 kcbgtcr: convert latch 	  0	    11	      0
cache buffers chains	 kcbchg: aux pin		  0	     8	     11
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
cache buffers chains	 kclexpandlock			  0	     8	     20
cache buffers chains	 kcbbxsv			  0	     6	     23
cache buffers chains	 kcbnlc 			  0	     6	     14
cache buffers chains	 kcbzib: finish processing	  0	     6	     13
				v_do_scan_query := TRUE;
cache buffers chains	 kcbzacrb: convert latch	  0	     5	      0
cache buffers chains	 kclpdcl			  0	     5	      0
cache buffers chains	 kcbchg: change complete	  0	     4	      6
				v_scan_query_quota := FALSE;
cache buffers chains	 kcbgtcr: convert latch 4	  0	     4	      0
cache buffers chains	 kcbgtcr: fast path exam	  0	     4	     20
cache buffers chains	 kclrlstp			  0	     3	      1
cache buffers chains	 kcbbic1			  0	     2	     10
			ELSE
cache buffers chains	 kcbchg: cur pin change 	  0	     2	      1
cache buffers chains	 kcb_is_private 		  0	     1	      1
cache buffers chains	 kcbchg: cleanout		  0	     1	      0
cache buffers chains	 kcbchg: rollback		  0	     1	      0
				IF ( v_scan_query_quota = FALSE ) THEN
cache buffers chains	 kcbgcur: fast path shr 	  0	     1	      3
cache buffers chains	 kcbrls: fast pin exclusive	  0	     1	      0
cache buffers chains	 kcbrls: fast pin release	  0	     1	     30
cache buffers chains	 kcbzwb 			  0	     1	      3
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
cache buffers chains	 kclrwrite_3			  0	     1	      0
cache buffers lru chain  kcbzgws			  0	 1,752	      0
cache buffers lru chain  kcbzgb_2			  0	   291	    163
cache buffers lru chain  kcbbic2			  0	    13	  1,325
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
cache buffers lru chain  kcbbwlru			  0	    11	    529
cache buffers lru chain  kcbbxsv: move to being wri	  0	     7	      0
cache buffers lru chain  kcbo_write_bufs		  0	     1	     12
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
call allocation 	 ksuxds 			  0	     1	      1
channel operations paren ksrwait()			  0	     2	      0
checkpoint queue latch	 kcbklbc_cql			  0	    67	      0
						v_do_scan_query := TRUE;
checkpoint queue latch	 kcbkubc_4			  0	     6	     29

Latch Miss Sources			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> only latches with sleeps are shown
					ELSE
-> ordered by name, sleeps desc

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
						v_do_scan_query := FALSE;
------------------------ -------------------------- ------- ---------- --------
checkpoint queue latch	 kcbbwthc: thread checkpoin	  0	     4	     34
file cache latch	 file cache:04			  0	     1	      2
file cache latch	 file cache:20			  0	     1	      0
					END IF;
gc element		 kclnfndnewm			  0	   181	     84
gc element		 kclnfndx			  0	    69	     85
gc element		 kclulb 			  0	    43	     93
gc element		 kclfwrite1			  0	    27	     20
				ELSE
gc element		 KCLUNLNK			  0	    26	     60
gc element		 kclplz 			  0	    18	      0
gc element		 kclrwrite			  0	    13	     29
gc element		 kclplz_1			  0	    12	      1
					-- Scan quota has been filled,	force drain some random access SELECTS
gc element		 kclpdcl			  0	     9	      5
gc element		 kclrwrite_1			  0	     4	      0
gc element		 kclexpand_2			  0	     3	      0
gc element		 kclnfndnew			  0	     2	      0
					v_do_scan_query := FALSE;
gc element		 kclnfnds			  0	     2	     20
gc element		 kclantilock_1			  0	     1	      0
gc element		 kclnfnd			  0	     1	      1
gcs nodemap pool	 kjbrnmapalloc_2		  0	     2	      2
				END IF;
gcs opaque info freelist kjbrinfoalloc			  0	     1	      1
gcs remaster request que kjdrrmq			  0	    19	      0
gcs remastering latch	 kjfcdrmrfg end step		  0	    25	      0
gcs remastering latch	 kjdrchkdrm remastering req	  0	    16	      0
			END IF;
gcs remastering latch	 kjdrisdrm nowait		  0	     1	     26
gcs resource freelist	 kjbrralc: reserve allocati	  0	    33	      4
gcs resource freelist	 kjbralc: check freelist no	  0	    15	      0
		END IF;
gcs resource freelist	 kjbrfr_bg2			  0	     4	     22
gcs resource freelist	 kjbralc add resource		  0	     1	     27
gcs resource hash	 kclfwrite1			  0	   483	     58
gcs resource hash	 kjblocalobj_nolock		  0	   468	    970

gcs resource hash	 kjbmpopen			  0	   190	    122
gcs resource hash	 kjbopen			  0	   148	     30
gcs resource hash	 kjbmpclose			  0	   143	     92
gcs resource hash	 kjbcropen			  0	   127	    162

gcs resource hash	 kjblpast			  0	    96	    104
gcs resource hash	 kjbclose_remaster		  0	    58	    104
gcs resource hash	 kclpdc 			  0	    52	    188
gcs resource hash	 kclrwrite			  0	    28	     35
		IF ( v_do_scan_query != TRUE ) THEN
gcs resource hash	 kjbrrcfwst			  0	    28	      0
gcs resource hash	 kjbldrmrpst			  0	    25	     26
gcs resource hash	 kjbmprlst: shadow		  0	    25	     24
gcs resource hash	 kjbmpflushpi			  0	    23	     30
			SELECT COUNT(c2) INTO v_rowcnt
gcs resource hash	 kjbrrcres_99			  0	    20	      0
gcs resource hash	 kjbrprmexpack			  0	    19	      5
gcs resource hash	 kjbrdowncvt			  0	    16	      1
			FROM cf1
gcs resource hash	 kjbassume			  0	     6	      8
gcs resource hash	 kjbcancel			  0	     2	      0
gcs resource hash	 kclgrantlk_1			  0	     1	      0
gcs resource hash	 kjbopen:affinity		  0	     1	      0
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
gcs resource hash	 kjbrrcfwst_101 		  0	     1	      0
gcs shadows freelist	 kjblfr free lock		  0	     2	      2
ges cached resource list kjrm2c: move resource to c	  0	    36	     43

ges cached resource list kjchc: clean resource cach	  0	     6	      0
ges cached resource list kjruch: cached obj cleanup	  0	     1	      0
ges enqueue table freeli kjlalc: lock allocation	  0	    45	     46
ges enqueue table freeli kjlfr: remove lock from pa	  0	    21	     20
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
ges process parent latch kjata_fg			  0	    25	      0
ges resource hash list	 kjlrlr: remove lock from r	  0	    89	     71
ges resource hash list	 kjrmas1: lookup master nod	  0	    57	      1
ges resource hash list	 kjlmfnd: search for lockp	  0	    16	      4
		ELSE

Latch Miss Sources			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------

ges resource hash list	 kjrref: find matched resou	  0	     8	    101
ges resource hash list	 kjakcai: search for resp b	  0	     7	      1
ges resource hash list	 kjucvl: lock convert reque	  0	     3	      5
ges resource hash list	 kjuinq: inquire resource h	  0	     2	      0
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
ges resource hash list	 kjcvscn: remove from scan	  0	     1	      0
kjci process context lat kjci_finish_int:2		  0	     4	      1
kjci process context lat kjci_processcrq1		  0	     1	      4
messages		 ksarcv 			  0	    57	     24

messages		 ksarcv: after wait		  0	    22	     18
messages		 ksaamb: after wakeup		  0	    12	     49
mostly latch-free SCN	 kcs024 			  0	    13	      0
mostly latch-free SCN	 kcsnew_scn_rba 		  0	     7	      0
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
mostly latch-free SCN	 kcs01				  0	     6	     13
mostly latch-free SCN	 kcslcu3			  0	     4	     17
multiblock read objects  kcbzibmlt: normal mbr free	  0	     5	      3
multiblock read objects  kcbzibmlt			  0	     4	      6
				v_scan_query_quota := TRUE;
object queue header oper kcbo_unlink_q			  0	    99	     79
object queue header oper kcbo_link_q			  0	    45	     20
object queue header oper kcbo_switch_cq 		  0	    14	     39
object queue header oper kcbo_switch_mq_bg		  0	     9	     26
			END IF;
object queue header oper kcbo_switch_q_bg		  0	     6	      9
object queue header oper kcbo_write_bufs		  0	     1	      1
post/wait queue 	 ksliwat:remove 		  0	     1	      1
post/wait queue 	 kslpstevent:get		  0	     1	      0
		END IF;
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	   543	      0
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    24	    416
redo allocation 	 kcrfw_redo_write: before w	  0	    20	    117

redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    16	      0
redo allocation 	 kcrfw_post: more space 	  0	    15	     85
redo writing		 kcrfwcr			  0	    46	     72
redo writing		 kcrfw_post: rba scn pair	  0	    21	      0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
redo writing		 kcrfw_cal_target_rba		  0	    10	      9
redo writing		 kcrfw_post: after write	  0	     6	      2
simulator hash latch	 kcbs_lookup_setid: lookup	  0	     1	      0
	ELSE
simulator hash latch	 kcbsacc: insert dba		  0	     1	      0
space background task la ktsj_grab_task 		  0	 2,140	  2,348
space background task la ktsj_detach_task		  0	   154	     43
space background task la ktsj_smco_purgeexpired 	  0	    89	      0
		--
space background task la ktsj_smco_movetasks		  0	     8	      0
undo global data	 ktusm_stealext_2		  0	   144	     86
undo global data	 ktusmupst: KSLBEGIN		  0	    13	     17
undo global data	 ktudba: KSLBEGIN		  0	     4	     56
		-- Do an UPDATE statement
undo global data	 ktusm_stealext: KSLBEGIN	  0	     2	      1
unknown latch		 ksqcmi: if lk mode not req	  0	   501	    127
unknown latch		 ksqcmi: if lk mode request	  0	   366	    333
unknown latch		 ksqgtl3			  0	   366	    618
		--
unknown latch		 ksqrcl 			  0	   233	    433
unknown latch		 ksqcnl 			  0	    72	     29
unknown latch		 kghfre 			  0	     3	      3
			  ------------------------------------------------------


Mutex Sleep Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> ordered by number of sleeps desc

		v_my_serial := v_my_serial + v_loop_cnt ;
									 Wait
Mutex Type	      Location				     Sleeps    Time (ms)
--------------------- -------------------------------- ------------ ------------

Row Cache	      [19] kqrpre				 60	     178
Row Cache	      [06] kqrGetClusterLock			  5	       0
Row Cache	      [10] kqreqd				  3	       9
Cursor Pin	      kksLockDelete [KKSCHLPIN6]		  3	       4
			  ------------------------------------------------------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);


Parent Latch Statistics 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
		--
			  ------------------------------------------------------

Child Latch Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
		-- Increment count of UPDATES and set UPDATE quota flag if needed
			  ------------------------------------------------------


Segments by Logical Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Logical Reads:      18,226,551
		--
-> Captured Segments account for   82.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
		v_updates_cnt := v_updates_cnt + 1;
-------------------- ----------
		     Subobject	Obj.				 Logical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------

USER68		     IOPS
CF1				TABLE	   73631      73636	 330,352    1.81
USER7		     IOPS
CF1				TABLE	   73304      73308	 324,432    1.78
USER112 	     IOPS
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
CF1				TABLE	   73851      73856	 324,096    1.78
USER53		     IOPS
CF1				TABLE	   73550      73558	 323,696    1.78
USER34		     IOPS
CF1				TABLE	   73448      73452	 323,472    1.77
			v_update_quota := TRUE;
			  ------------------------------------------------------

Segments by Physical Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		END IF;
-> Total Physical Reads:      17,104,107
-> Captured Segments account for   86.4% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

	END IF ;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
----------------------------------------------------------------------------------------------------------------------
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER68		     IOPS
CF1				TABLE	   73631      73636	 323,772    1.89
USER34		     IOPS
CF1				TABLE	   73448      73452	 319,398    1.87
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
USER7		     IOPS
CF1				TABLE	   73304      73308	 319,337    1.87
USER112 	     IOPS
CF1				TABLE	   73851      73856	 318,186    1.86
USER53		     IOPS
----------------------------------------------------------------------------------------------------------------------
CF1				TABLE	   73550      73558	 317,135    1.85
			  ------------------------------------------------------

Segments by Physical Read Requests	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> Total Physical Read Requests:      17,103,250
-> Captured Segments account for   86.4% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		     Subobject	Obj.			       Phys Read
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER68		     IOPS
		--
CF1				TABLE	   73631      73636	 323,772    1.89
USER34		     IOPS
CF1				TABLE	   73448      73452	 319,398    1.87
USER7		     IOPS
CF1				TABLE	   73304      73308	 319,337    1.87
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
USER112 	     IOPS
CF1				TABLE	   73851      73856	 318,186    1.86
USER53		     IOPS
CF1				TABLE	   73550      73558	 317,135    1.85
			  ------------------------------------------------------
		-- so reset flags and counters before continuing

Segments by UnOptimized Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total UnOptimized Read Requests:	 17,103,250
-> Captured Segments account for   86.4% of Total
		--
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		v_update_quota := FALSE;
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER68		     IOPS
CF1				TABLE	   73631      73636	 323,772    1.89
		v_updates_cnt := 0;
USER34		     IOPS
CF1				TABLE	   73448      73452	 319,398    1.87
USER7		     IOPS
CF1				TABLE	   73304      73308	 319,337    1.87
USER112 	     IOPS
		v_selects_cnt := 0;
CF1				TABLE	   73851      73856	 318,186    1.86
USER53		     IOPS
CF1				TABLE	   73550      73558	 317,135    1.85
			  ------------------------------------------------------

	END IF;
Segments by Optimized Reads		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by Direct Physical Reads	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
Segments by Physical Writes		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Physical Writes:	2,683,877
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
-> Captured Segments account for   83.9% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
		-- so reset flags and counters
-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER53		     IOPS
		v_scan_query_quota := FALSE;
CF1				TABLE	   73550      73558	  49,412    1.84
USER7		     IOPS
CF1				TABLE	   73304      73308	  49,275    1.84
USER68		     IOPS
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrnc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)	values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fd7ncyq8wrtcp"></a>fd7ncyq8wrtcp</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '85';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

CF1				TABLE	   73631      73636	  49,265    1.84
v_num_tmp NUMBER := 0;
USER101 	     IOPS
CF1				TABLE	   73792      73796	  48,715    1.82
USER34		     IOPS

CF1				TABLE	   73448      73452	  48,381    1.80
			  ------------------------------------------------------

v_loop_cnt PLS_INTEGER := 0;
Segments by Physical Write Requests	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Physical Write Requests:	2,570,778
-> Captured Segments account for   87.3% of Total
v_rowcnt PLS_INTEGER := 0;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
v_updates_cnt PLS_INTEGER := 0;
-------------------- ----------
		     Subobject	Obj.			      Phys Write
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
v_selects_cnt PLS_INTEGER := 0;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER53		     IOPS
CF1				TABLE	   73550      73558	  49,237    1.92
USER68		     IOPS

CF1				TABLE	   73631      73636	  49,121    1.91
USER7		     IOPS
CF1				TABLE	   73304      73308	  49,098    1.91
v_random_access_queries_cnt PLS_INTEGER := 0;
USER101 	     IOPS
CF1				TABLE	   73792      73796	  48,575    1.89
USER34		     IOPS
CF1				TABLE	   73448      73452	  48,256    1.88
v_scan_queries_cnt PLS_INTEGER := 0;
			  ------------------------------------------------------

Segments by Direct Physical Writes	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> Total Direct Physical Writes:	     462
-> Captured Segments account for   48.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
v_do_scan_query BOOLEAN :=FALSE;

		     Tablespace
Owner			Name
-------------------- ----------
v_scan_query_quota  BOOLEAN := FALSE;
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_scan_workload_only BOOLEAN := FALSE;
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	   74075      74075	     219   47.40
SYS		     SYSAUX
v_random_workload_only BOOLEAN := FALSE;
SYS_LOB0000007451C00 S_LOB_P270 LOB P	   74210      74210	       5    1.08
			  ------------------------------------------------------


Segments by Table Scans 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by DB Blocks Changes		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> % of Capture shows % of DB Block Changes for each top segment compared
v_random_block PLS_INTEGER := 1;
-> with total DB Block Changes for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_tmp PLS_INTEGER;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				DB Block    % of
v_now PLS_INTEGER;
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER68		     IOPS
v_brick_wall PLS_INTEGER;
CF1				TABLE	   73631      73636	  49,136    2.19

USER34		     IOPS
CF1				TABLE	   73448      73452	  48,752    2.17
USER7		     IOPS
v_begin_time PLS_INTEGER;
CF1				TABLE	   73304      73308	  48,512    2.16
USER112 	     IOPS
CF1				TABLE	   73851      73856	  48,496    2.16
USER39		     IOPS
v_end_time PLS_INTEGER;
CF1				TABLE	   73471      73470	  48,336    2.15
			  ------------------------------------------------------


v_total_time PLS_INTEGER;
Segments by Row Lock Waits		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
v_begin_cpu_tm PLS_INTEGER;
			  ------------------------------------------------------

Segments by ITL Waits			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

v_end_cpu_tm PLS_INTEGER;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_total_cpu_tm PLS_INTEGER;
Segments by Buffer Busy Waits		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by Global Cache Buffer Busy	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
v_do_sleeps BOOLEAN := FALSE;
			  ------------------------------------------------------


v_loop_control BOOLEAN := FALSE;
Segments by CR Blocks Received		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total CR Blocks Received:	       1,857
-> Captured Segments account for   85.3% of Total
v_update_quota BOOLEAN := FALSE;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
v_select_only_workload BOOLEAN := FALSE;
-------------------- ----------
								   CR
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
v_update_only_workload BOOLEAN := FALSE;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER79		     IOPS
CF1				TABLE	   73684      73678	     168    9.05
v_do_update BOOLEAN := FALSE;
USER38		     IOPS
CF1				TABLE	   73468      73473	     165    8.89
USER105 	     IOPS
CF1				TABLE	   73815      73818	     130    7.00
v_do_hot_schema BOOLEAN := FALSE;
USER42		     IOPS
CF1				TABLE	   73488      73492	      99    5.33
USER15		     IOPS
CF1				TABLE	   73340      73347	      95    5.12
v_stop_immediate BOOLEAN := FALSE;
			  ------------------------------------------------------

Segments by Current Blocks Received	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_sharing_schema BOOLEAN := FALSE;
-> Total Current Blocks Received:	    2,328
-> Captured Segments account for   63.9% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_seed VARCHAR2(128);
		     Tablespace
Owner			Name
-------------------- ----------
								 Current
v_home_schema_str VARCHAR2(80);
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_scratch VARCHAR2(200) ;
USER20		     IOPS
CF1				TABLE	   73377      73373	     103    4.42
USER74		     IOPS
CF1				TABLE	   73662      73666	     100    4.30

USER105 	     IOPS
CF1				TABLE	   73815      73818	      99    4.25
USER79		     IOPS
v_cpu_pct NUMBER(6, 3);
CF1				TABLE	   73684      73678	      99    4.25
USER22		     IOPS
CF1				TABLE	   73387      73383	      96    4.12
			  ------------------------------------------------------
v_my_serial NUMBER(16);

Segments by Global Cache Remote Grants	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> Total Global Cache Remote Grants:	   2,928,021
-> Captured Segments account for   96.4% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

BEGIN
		     Tablespace
Owner			Name
-------------------- ----------

								      GC
		     Subobject	Obj.				  Remote
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
USER56		     IOPS
CF1				TABLE	   73569      73576	 116,889    3.99
USER46		     IOPS
CF1				TABLE	   73508      73513	 115,867    3.96
EXECUTE IMMEDIATE v_home_schema_str;
USER69		     IOPS
CF1				TABLE	   73624      73637	 111,969    3.82
USER74		     IOPS
CF1				TABLE	   73662      73666	 110,877    3.79
USER77		     IOPS
CF1				TABLE	   73671      73674	 110,472    3.77

			  ------------------------------------------------------


Dictionary Cache Stats			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used

IF ( v_hot_schema_modulus != 0 ) THEN
				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
------------------------- ------------ ------ ------- ----- -------- ----------
dc_awr_control			    51	  2.0	    0	N/A	   5	      1
dc_global_oids			 1,631	  4.3	    0	N/A	   0	    398
	v_do_hot_schema := TRUE;
dc_histogram_data		   207	  0.0	    0	N/A	   0	  2,351
dc_histogram_defs		 1,961	  1.1	    0	N/A	  73	  6,956
dc_objects			 2,196	  0.8	    0	N/A	  12	  3,783
END IF;
dc_profiles			     2	  0.0	    0	N/A	   0	      1
dc_props			   563	  0.0	    0	N/A	   0	      8
dc_rollback_segments	       135,768	  0.0	    0	N/A	   0	    230

dc_segments			 2,590	  1.9	    0	N/A	   6	  1,192
dc_sequences			    11	  9.1	    0	N/A	  11	      5
dc_tablespaces			   157	  0.6	    0	N/A	   0	      7
dc_users			   254	  0.0	    4	0.0	   0	    478
IF ( v_sleep_modulus != 0 )	  THEN
outstanding_alerts		     2	100.0	    0	N/A	   0	      4
sch_lj_oids			    10	  0.0	    0	N/A	   0	     14
			  ------------------------------------------------------

	v_do_sleeps := TRUE;
Dictionary Cache Stats (RAC)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
END IF;
			  ------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> "Pct Misses"  should be very low


			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
IF ( v_max_loop_iterations &gt; 0 )  THEN
--------------- ------------ ------ -------------- ------ ---------- --------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0
BODY			 106	0.9	       342    0.3	   0	    0
	v_loop_control := TRUE ;
CLUSTER 		   6	0.0		 6    0.0	   0	    0
DBLINK			   5	0.0		 0    N/A	   0	    0
EDITION 		   8	0.0		16    0.0	   0	    0
END IF;
HINTSET OBJECT		   3	0.0		 3    0.0	   0	    0
INDEX			   2	0.0		 2    0.0	   0	    0
OBJECT ID		   2  100.0		 0    N/A	   0	    0

SCHEMA			  26	0.0		 0    N/A	   0	    0
SQL AREA		 997	4.8	   226,910    0.0	   5	    3
SQL AREA BUILD		  32   87.5		 0    N/A	   0	    0
IF ( v_update_pct = 0 ) 	  THEN
SQL AREA STATS		  31   90.3		31   90.3	   0	    0
TABLE/PROCEDURE 	 243	5.3	     2,789    1.1	   7	    0
TRIGGER 		   8	0.0		 8    0.0	   0	    0
			  ------------------------------------------------------
	v_select_only_workload := TRUE;

Library Cache Activity (RAC)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
END IF;
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4		0	     0		 0	     0

AUDIT POLICY		   2		2	     2		 0	     0
BODY			   4	      322	   322		 0	     0
CLUSTER 		   6		6	     6		 0	     0
DBLINK			   5		0	     0		 0	     0
IF ( v_update_pct = 100 )	  THEN
EDITION 		   8		8	     8		 0	     0
HINTSET OBJECT		   3		3	     3		 0	     0
INDEX			   2		2	     2		 0	     0
SCHEMA			   7		0	     0		 0	     0
	v_update_only_workload := TRUE;
TABLE/PROCEDURE 	 859	    2,412	 2,412		 0	     0
TRIGGER 		   0		8	     8		 0	     0
			  ------------------------------------------------------

END IF;

Memory Dynamic Components		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Min/Max sizes since instance startup

-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
-> ordered by Component

		 Begin Snap	Current 	Min	    Max   Oper Last Op
IF ( v_scan_query_pct = 0 ) 	THEN
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
--------------- ----------- ----------- ----------- ----------- ------ -------
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
	v_random_workload_only := TRUE;
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
END IF;
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT buffer	   7,872.00    7,872.00    7,872.00    7,872.00      0 INI/
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/

In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
IF ( v_scan_query_pct = 100 ) 	THEN
PGA Target	   3,232.00    3,232.00    3,232.00    3,232.00      0 STA/
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	   9,664.00    9,664.00    9,664.00    9,664.00      0 STA/
	v_scan_workload_only := TRUE;
Shared IO Pool	     128.00	 128.00      128.00	 128.00      0 STA/
java pool		.00	    .00 	.00	    .00      0 STA/
large pool	     160.00	 160.00      160.00	 160.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
END IF;
shared pool	   1,472.00    1,472.00    1,472.00    1,472.00      0 STA/
streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/

			  ------------------------------------------------------

Memory Resize Operations Summary	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

v_seconds_to_run := v_seconds_to_run * 100 ;
		  No data exists for this section of the report.
			  ------------------------------------------------------


Memory Resize Ops			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Process Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> B: Begin Snap   E: End Snap
-> All rows below contain absolute values (i.e. not diffed over the interval)
-> Max Alloc is Maximum PGA Allocation size at snapshot time

-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by Begin/End snapshot, Alloc (MB) desc
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
							     Hist
				     Avg  Std Dev     Max     Max
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
-- DBMS_RANDOM.seed (val =&gt; v_seed);
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
B Freeable     213.5	    .0	    3.5      7.1      43     N/A     61     61
  Other      1,073.6	   N/A	    3.9      4.8      37      37    274    274

  PL/SQL	35.3	  34.4	     .2       .2       1       2    210    208
  SQL		 9.8	   6.9	     .1       .2       1      10    139    132
  Total      1,332.2	  41.3	    7.7     12.3      82      49    684    675
v_begin_time := DBMS_UTILITY.GET_TIME();
E Freeable     140.2	    .0	    3.8      6.6      29     N/A     37     37
  Other        731.6	   N/A	    3.5      5.3      37      37    210    210
  PL/SQL	 4.9	   4.4	     .0       .2       1       2    146    143
  SQL		 2.7	   1.7	     .0       .1       1      10     82     28
v_now := v_begin_time ;
  Total        879.4	   6.1	    7.3     12.1      67      49    475    418
			  ------------------------------------------------------

SGA Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
v_brick_wall := v_now + v_seconds_to_run ;

						      End Size (Bytes)
SGA regions			Begin Size (Bytes)	(if different)
------------------------------ ------------------- -------------------
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Database Buffers		     8,388,608,000
Fixed Size				12,445,928
Redo Buffers				21,106,688
Variable Size			     1,711,276,032

			       -------------------
sum				    10,133,436,648
			  ------------------------------------------------------

SGA breakdown difference by Pool and NameDB/Inst: P60SDB/p60sdb1  Snaps: 51-52
----------------------------------------------------------------------------------------------------------------------
-> ordered by Pool, Name
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

-- The following WHILE loop is the master work loop control
Pool   Name				    Begin MB	     End MB  % Diff
------ ------------------------------ -------------- -------------- -------
large  PX msg pool			       128.0	      128.0    0.00
large  free memory				31.6	       31.6    0.00
----------------------------------------------------------------------------------------------------------------------
shared ASH buffers				64.0	       64.0    0.00
shared KCRAHT Free Blocks			 N/A	       17.5	N/A
shared KGLH0					48.9	       50.2    2.77
shared KGLS					20.3	       20.4    0.58
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
shared KJSC rnb slots				45.7	       20.5  -55.04
shared SO private sga				31.7	       31.7    0.00
shared SQLA					83.6	       84.3    0.76
shared db_block_hash_buckets			32.0	       32.0    0.00

shared dbwriter coalesce buffer 		16.0	       16.0    0.00
shared free memory			       129.0	      150.9   16.99
shared gc name table				48.0	       48.0    0.00
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
shared gcs resources			       266.7	      266.7    0.00
shared gcs resv res hash bucket 		72.0	       72.0    0.00
shared gcs shadows			       145.5	      145.5    0.00
shared ges big msg buffers			26.3	       26.3    0.00
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
shared ksunfy_meta 1				25.2	       25.2    0.00
shared object queue hash buckets		16.0	       16.0    0.00
shared row cache				  .0		 .0    0.00
       buffer_cache			     7,872.0	    7,872.0    0.00
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
       fixed_sga				11.9	       11.9    0.00
       log_buffer				20.1	       20.1    0.00
       shared_io_pool			       128.0	      128.0    0.00
			  ------------------------------------------------------

			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );

Replication System Resource Usage	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			DBMS_LOCK.SLEEP(v_num_tmp);
			  ------------------------------------------------------

Replication SGA Usage			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
		END IF;
			  ------------------------------------------------------


GoldenGate Capture			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


GoldenGate Capture Rate 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
GoldenGate Apply Reader 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
GoldenGate Apply Coordinator		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
GoldenGate Apply Server 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Coordinator Rate	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------
			v_sharing_schema := TRUE ;

GoldenGate Apply Reader and Server Rate  DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
		ELSE
			  ------------------------------------------------------


XStream Capture 			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

			IF ( v_sharing_schema = TRUE ) THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Capture Rate			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

				EXECUTE IMMEDIATE v_home_schema_str;
		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Reader			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
				v_sharing_schema := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

			END IF;
XStream Apply Coordinator		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

		END IF;
XStream Apply Server			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
	END IF;
			  ------------------------------------------------------

XStream Apply Coordinator Rate		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52


		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Reader and Server Rate	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	-- Choose the random block. The v_do_hotspot handler that follows can override.
		  No data exists for this section of the report.
			  ------------------------------------------------------


Table Statistics by DML Operations	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

		  No data exists for this section of the report.
			  ------------------------------------------------------


Table Statistics by Conflict Resolutions DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

Replication Large Transaction Statistics DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot

		  No data exists for this section of the report.
			  ------------------------------------------------------

Replication Long Running Transaction StatisticsDB/Inst: P60SDB/p60sdb1	Snaps:
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;

		  No data exists for this section of the report.
			  ------------------------------------------------------


		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
Advanced Queue CPU/IO Usage		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffered Queues 			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );

		  No data exists for this section of the report.
			  ------------------------------------------------------

	END IF;
Buffered Queue Subscribers		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------


Rule Set				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
Persistent Queues			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

-- The following section governs what the SQL execution will be (UPDATE or SELECT)
Persistent Queues Rate			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
Persistent Queue Subscribers		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  ------------------------------------------------------



Resource Limit Stats			     DB/Inst: P60SDB/p60sdb1  Snap: 52
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
	IF  ( v_select_only_workload = TRUE ) THEN
   exceeds 2*Initial Allocation are shown
-> Ordered by Resource Name

				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
		-- handle case where user specified zero pct updates (a SELECT-only workload)
------------------------------ ------------ ------------ ---------- ----------
ges_cache_ress			      3,300	   4,026	  0  UNLIMITED
			  ------------------------------------------------------

		v_do_update := FALSE;
Shared Servers Activity 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active
		v_update_quota := TRUE ;
 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
	   0		0	     1		  0	       1	    0
	ELSE
			  ------------------------------------------------------

Shared Servers Rates			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

  Common     Disp			 Common       Disp     Server
		IF ( v_update_only_workload = TRUE ) THEN
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0
			-- handle case where user specified 100% updates
			  ------------------------------------------------------

Shared Servers Utilization		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Statistics are combined for all servers
			v_do_update := TRUE;
-> Incoming and Outgoing Net % are included in %Busy

  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
-------------- -------- -------- --------- ---------
			v_update_quota := FALSE;
	   630	    0.0    100.0       0.0	 0.0
			  ------------------------------------------------------

Shared Servers Common Queue		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		ELSE
		  No data exists for this section of the report.
			  ------------------------------------------------------

Shared Servers Dispatchers		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by %Busy, descending
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue
-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
     "(R)" - dispatcher re-started between begin and end snapshots
			-- Work out whether this loop iteration is a SELECT or UPDATE here:

	      Avg Total Disp			    Total Total Queue  Avg Queue
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
			IF ( v_update_quota = FALSE ) THEN
D000	      0.0	 630	  0.0	 100.0		0	    0
			  ------------------------------------------------------


Modified Parameters			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
				-- Handle case where user has set UPDATE_PCT to a valid value
-> This section shows all the modified initialization parameters that
were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
the snapshot interval
				--

								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
				-- We are doing updates during this run and quota has not been met yet
audit_file_dest 	      /u01/app/oracle/admin/p60sdb/adum
audit_trail		      DB
cluster_database	      TRUE
compatible		      19.0.0
control_files		      +P60S/P60SDB/CONTROLFILE/current.
				-- We still vacillate until update quota has been met
db_block_size		      8192
db_create_file_dest	      +P60S
db_domain		      example.com
db_name 		      p60sdb
db_recovery_file_dest	      +FRA

db_recovery_file_dest_size    137438953472
diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p60sdbXDB
instance_number 	      1
listener_networks
				IF ( MOD(v_random_block,  2) = 0 ) THEN
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
pga_aggregate_target	      3371171840
					v_do_update := TRUE;
processes		      640
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


remote_listener 	       mcracpoc-scan.example.com:1521
		IF ( v_do_scan_query != TRUE ) THEN
remote_login_passwordfile     EXCLUSIVE
sga_target		      10133438464
thread			      1
			SELECT COUNT(c2) INTO v_rowcnt
undo_tablespace 	      UNDOTBS1
			  ------------------------------------------------------


			FROM cf1
Modified Multi-Valued Parameters	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot


								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
control_files		      +FRA/P60SDB/CONTROLFILE/current.2
			      +P60S/P60SDB/CONTROLFILE/current.
			  ------------------------------------------------------
		ELSE

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top SQL statements by DB Time along with the top events by DB Time
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is

   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity

----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		     2501	   60.79
db file sequential read 	 48.32 UPDATE				   47.69
				v_scan_query_quota := TRUE;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


			END IF;
gc current grant busy		  5.77 UPDATE				    5.77


buffer busy waits		  1.11 UPDATE STATEMENT 		    1.11
		END IF;

	  bhdvtsvjhgvrh 	  1497866750		     1304	   31.51
db file parallel read		 13.75 TABLE ACCESS - BY INDEX ROWID BAT   13.75

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
db file sequential read 	 11.28 TABLE ACCESS - BY INDEX ROWID BAT    7.03


gc cr multi block request	  3.14 TABLE ACCESS - BY INDEX ROWID BAT    3.14
	ELSE

			  ------------------------------------------------------

		--
Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
		-- Do an UPDATE statement
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
		--
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.


		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
		v_my_serial := v_my_serial + v_loop_cnt ;
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------

	  35dumc2tpr9dv 	   203653710		     2501	   60.79
UPDATE					   57.14 db file sequential read   47.69
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);


UPDATE STATEMENT			    2.75 buffer busy waits	    1.11

		--
	  bhdvtsvjhgvrh 	  1497866750		     1304	   31.51
TABLE ACCESS - BY INDEX ROWID BATCHED	   25.63 db file parallel read	   13.75
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
		-- Increment count of UPDATES and set UPDATE quota flag if needed


INDEX - RANGE SCAN			    5.82 db file sequential read    4.25

		--
			  ------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		v_updates_cnt := v_updates_cnt + 1;
-> '# Samples Active' shows the number of ASH samples in which the session
      was found waiting for that particular event. The percentage shown

      in this column is calculated with respect to wall clock time
      and not total database activity.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
      when the session was waiting for that particular event

   Sid, Serial# % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------
			v_update_quota := TRUE;
User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
	4,59023       1.40 db file sequential read		0.99
		END IF;
USER101 	     sqlplus@mcracp...m (TNS V1-V3)	  41/63 [ 65%]	     35

	5,50450       1.40 db file sequential read		0.75
	END IF ;
USER42		     sqlplus@mcracp...m (TNS V1-V3)	  31/63 [ 49%]	     26

       37,32584       1.40 db file sequential read		0.65
----------------------------------------------------------------------------------------------------------------------
USER46		     sqlplus@mcracp...m (TNS V1-V3)	  27/63 [ 43%]	     22

       39,47546       1.40 db file sequential read		0.77
USER105 	     sqlplus@mcracp...m (TNS V1-V3)	  32/63 [ 50%]	     25
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.

       69,43897       1.40 db file sequential read		0.65
USER103 	     sqlplus@mcracp...m (TNS V1-V3)	  27/63 [ 43%]	     24

----------------------------------------------------------------------------------------------------------------------
			  ------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52


		  No data exists for this section of the report.
			  ------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
		--
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
		-- so reset flags and counters before continuing
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       60.93
		--
   SQL								       60.91
			  ------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		v_update_quota := FALSE;
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

		v_updates_cnt := 0;
Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
		v_selects_cnt := 0;
% Activity   Sessions
---------- ----------
db file sequential read 	    User I/O	    FOREGROUND
     59.60	38.91
	END IF;
db file parallel read		    User I/O	    FOREGROUND
     13.75	 8.97
gc current grant busy		    Cluster	    FOREGROUND

      5.77	 3.77
gc cr multi block request	    Cluster	    FOREGROUND
      3.14	 2.05
db file parallel write		    System I/O	    BACKGROUND
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
      2.88	 1.88
			  ------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
		-- so reset flags and counters
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
		v_scan_query_quota := FALSE;
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
		v_scan_queries_cnt := 0;
db file sequential read 	 59.60		  "9","17034766","1"	   0.02
file#			   block#		      blocks

db file parallel read		 13.75		       "1","77","77"	  13.48
		v_random_access_queries_cnt := 0;
files			   blocks		      requests

gc cr multi block request	  3.14		 "9","124881322","1"	   0.05
	END IF;
file#			   block#		      class#

db file parallel write		  2.88		"1","0","2147483647"	   1.01

requests		   interrupt		      timeout

log file parallel write 	  1.52			 "1","8","2"	   0.05
files			   blocks		      requests
	v_loop_cnt := v_loop_cnt + 1 ;

			  ------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	v_now := DBMS_UTILITY.GET_TIME();
-> Top DB Objects by DB Time with respect to Application, Cluster,
   User I/O,  buffer busy waits and In-Memory DB events only.
-> Tablespace name is not available for reports generated from the root PDB

   of a consolidated database.
-> When ** MISSING ** occurs, some of the object attributes may not be available

      Object ID % Activity Event			     % Event
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
--------------- ---------- ------------------------------ ----------
Object Name (Type)				      Tablespace
----------------------------------------------------- --------------------------
		-- If this is a fixed-iteration count test cycle and we've hit the number of
	  73801       1.40 db file sequential read		0.65
USER103.CF1 (TABLE)				      IOPS
	  73619       1.38 db file sequential read		0.97
USER67.CF1 (TABLE)				      IOPS
		-- iterations then set exit flag
	  73350       1.35 db file sequential read		0.72
USER17.CF1 (TABLE)				      IOPS
	  73387       1.35 db file sequential read		0.75
USER22.CF1 (TABLE)				      IOPS
		v_stop_immediate := TRUE ;
	  73662       1.35 db file sequential read		0.68
USER74.CF1 (TABLE)				      IOPS
			  ------------------------------------------------------

	END IF;
Activity Over Time			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
END LOOP;
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot

-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
v_end_time := v_now ;
-------------------- -------- ------------------------------ -------- -------
10:14:13   (47 secs)	  358 db file sequential read		  228	 5.51
			      db file parallel read		   31	 0.75
v_now := DBMS_UTILITY.GET_TIME();
			      gc current grant busy		   14	 0.34
10:15:00   (5.0 min)	2,151 db file sequential read		1,126	27.20
			      db file parallel read		  274	 6.62
			      gc current grant busy		  216	 5.22
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
10:20:00   (4.8 min)	1,630 db file sequential read		1,113	26.89
			      db file parallel read		  264	 6.38
			      CPU + Wait for CPU		   61	 1.47

			  ------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_1_52'
v_total_time := v_end_time - v_begin_time ;
	  -------------------------------------------

Analysis Period
---------------
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
AWR snapshot range from 51 to 52.
Time period starts at 12-FEB-20 10.14.13 AM
Time period ends at 12-FEB-20 10.24.48 AM

Analysis Target
---------------
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb1, numbered 1 and hosted at
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------

Total database time was 37398 seconds.
The average number of active sessions was 58.89.

Summary of Findings
END;</pre_sqltext></td></tr>
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       58.89 | 100	   1
<tr><td scope="row" class='awrc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
2  Top SQL Statements	      58.77 | 99.79	   2
3  "User I/O" wait Class      46.66 | 79.22	   0
4  Global Cache Messaging     8.12 | 13.79	   1
5  Buffer Busy - Hot Objects  5.69 | 9.67	   6
<tr><td scope="row" class='awrnc'><a class="awr" name="fumugnjxgxhkj"></a>fumugnjxgxhkj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
6  Undersized SGA	      .68 | 1.16	   1
7  Global Cache Lost Blocks   .6 | 1.01 	   1


v_default_schema_number PLS_INTEGER := '40';
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


v_update_pct PLS_INTEGER := '15';
	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
v_max_loop_iterations PLS_INTEGER := '0';
Impact is 58.99 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
v_seconds_to_run PLS_INTEGER := '600';
The instance was consuming 34635 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
v_scale PLS_INTEGER := '1048576';
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 5668 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.22.248 and source ">4?".
v_work_unit PLS_INTEGER := '80' ;

   Recommendation 1: Host Configuration
   Estimated benefit is 58.89 active sessions, 100% of total activity.
   -------------------------------------------------------------------
v_redo_stress  VARCHAR2(12) := 'LITE';
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
v_hot_schema_modulus PLS_INTEGER := '0';
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
v_do_hotspot   VARCHAR(7) := 'FALSE';
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

v_hotspot_mb  NUMBER := '8';
   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
v_hotspot_offset_mb NUMBER := '16';
      Impact is 8.12 active sessions, 13.79% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 8.59 active sessions, 14.59% of total activity.
v_hotspot_modulus  PLS_INTEGER := '3';


Finding 2: Top SQL Statements
Impact is 58.86 active sessions, 99.79% of total activity.

----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

v_sleep_modulus PLS_INTEGER := '0';
   Recommendation 1: SQL Tuning
   Estimated benefit is 36.86 active sessions, 62.59% of total activity.
   ---------------------------------------------------------------------
   Action
v_sleep_min NUMBER := '.1';
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
v_sleep_max NUMBER := '.5';
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
v_scan_query_pct PLS_INTEGER := '0';
      The SQL spent 95% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
v_obfuscate VARCHAR(5)	:= 'FALSE';
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 32223 times and

      had an average elapsed time of 0.74 seconds.

   Recommendation 2: SQL Tuning

   Estimated benefit is 20.06 active sessions, 34.06% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.

   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
v_num_tmp NUMBER := 0;
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 182935 times and
      had an average elapsed time of 0.071 seconds.



Finding 3: "User I/O" wait Class
Impact is 46.73 active sessions, 79.22% of total activity.
----------------------------------------------------------
v_loop_cnt PLS_INTEGER := 0;
Wait class "User I/O" was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
v_rowcnt PLS_INTEGER := 0;
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


v_updates_cnt PLS_INTEGER := 0;
Finding 4: Global Cache Messaging
Impact is 8.13 active sessions, 13.79% of total activity.
---------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
v_selects_cnt PLS_INTEGER := 0;
instance.

   Recommendation 1: Application Analysis

   Estimated benefit is 8.12 active sessions, 13.79% of total activity.
   --------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
v_random_access_queries_cnt PLS_INTEGER := 0;
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID "35dumc2tpr9dv" is responsible for 68% of Cluster wait
      during the analysis period.

v_scan_queries_cnt PLS_INTEGER := 0;
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 8.59 active sessions, 14.59% of total activity.



Finding 5: Buffer Busy - Hot Objects
Impact is 5.7 active sessions, 9.67% of total activity.
v_do_scan_query BOOLEAN :=FALSE;
-------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   Recommendation 1: Schema Changes
v_scan_query_quota  BOOLEAN := FALSE;
   Estimated benefit is .24 active sessions, .41% of total activity.
   -----------------------------------------------------------------
   Action
v_scan_workload_only BOOLEAN := FALSE;
      Consider rebuilding the TABLE "USER107.CF1" with object ID 73825 using a
      higher value for PCTFREE.
      Related Object
	 Database object with ID 73825.

v_random_workload_only BOOLEAN := FALSE;
   Recommendation 2: Schema Changes
   Estimated benefit is .24 active sessions, .41% of total activity.
   -----------------------------------------------------------------

   Action
      Consider partitioning the TABLE "USER107.CF1" with object ID 73825 in a
      manner that will evenly distribute concurrent DML across multiple
      partitions.

      Related Object
	 Database object with ID 73825.

   Recommendation 3: Schema Changes
v_random_block PLS_INTEGER := 1;
   Estimated benefit is .21 active sessions, .36% of total activity.
   -----------------------------------------------------------------
   Action
      Consider rebuilding the TABLE "USER30.CF1" with object ID 73427 using a
v_tmp PLS_INTEGER;
      higher value for PCTFREE.
      Related Object
	 Database object with ID 73427.

   Recommendation 4: Schema Changes
v_now PLS_INTEGER;
   Estimated benefit is .21 active sessions, .36% of total activity.
   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE "USER30.CF1" with object ID 73427 in a
v_brick_wall PLS_INTEGER;
      manner that will evenly distribute concurrent DML across multiple
      partitions.
      Related Object
	 Database object with ID 73427.


   Recommendation 5: Schema Changes
   Estimated benefit is .21 active sessions, .36% of total activity.
v_begin_time PLS_INTEGER;
   -----------------------------------------------------------------
   Action
      Consider rebuilding the TABLE "USER93.CF1" with object ID 73751 using a
      higher value for PCTFREE.
v_end_time PLS_INTEGER;
      Related Object
	 Database object with ID 73751.

   Recommendation 6: Schema Changes
   Estimated benefit is .21 active sessions, .36% of total activity.
v_total_time PLS_INTEGER;
   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE "USER93.CF1" with object ID 73751 in a
      manner that will evenly distribute concurrent DML across multiple
v_begin_cpu_tm PLS_INTEGER;
      partitions.
      Related Object
	 Database object with ID 73751.

   Symptoms That Led to the Finding:
v_end_cpu_tm PLS_INTEGER;
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 5.69 active sessions, 9.67% of total activity.
v_total_cpu_tm PLS_INTEGER;
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 8.12 active sessions, 13.79% of total activity.

	    Wait class "Cluster" was consuming significant database time.
	    Impact is 8.59 active sessions, 14.59% of total activity.


Finding 6: Undersized SGA
v_do_sleeps BOOLEAN := FALSE;
Impact is .68 active sessions, 1.16% of total activity.
-------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
v_loop_control BOOLEAN := FALSE;
The value of parameter "sga_target" was "9664 M" during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is .27 active sessions, .45% of total activity.
v_update_quota BOOLEAN := FALSE;
   -----------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter "sga_target" to
      12080 M.

v_select_only_workload BOOLEAN := FALSE;
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "User I/O" was consuming significant database time.
      Impact is 46.66 active sessions, 79.22% of total activity.
v_update_only_workload BOOLEAN := FALSE;


Finding 7: Global Cache Lost Blocks
Impact is .6 active sessions, 1.01% of total activity.
v_do_update BOOLEAN := FALSE;
------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 34635 kilo bits per second of interconnect
v_do_hot_schema BOOLEAN := FALSE;
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 5668 microseconds.
v_stop_immediate BOOLEAN := FALSE;
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.22.248 and source ">4?".

   Recommendation 1: Host Configuration
v_sharing_schema BOOLEAN := FALSE;
   Estimated benefit is .6 active sessions, 1.01% of total activity.
   -----------------------------------------------------------------
   Action
v_seed VARCHAR2(128);
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
v_home_schema_str VARCHAR2(80);
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
v_scratch VARCHAR2(200) ;
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 8.12 active sessions, 13.79% of total activity.
	 Wait class "Cluster" was consuming significant database time.

	 Impact is 8.59 active sessions, 14.59% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
v_cpu_pct NUMBER(6, 3);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

v_my_serial NUMBER(16);
Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.

Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
CPU was not a bottleneck for the instance.
BEGIN
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

Hard parsing of SQL statements was not consuming significant database time.

RAC Statistics  DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

				Begin	End
				----- -----
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
	   Number of Instances:     2	  2
	       Number of LMS's:     3	  3
      Number of realtime LMS's:     3	  3  (0 priority changes)


EXECUTE IMMEDIATE v_home_schema_str;
Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
				      ---------------	    ---------------
  Global Cache blocks received: 		 6.60		       0.13

    Global Cache blocks served: 		14.38		       0.28
     GCS/GES messages received: 	    19,003.55		     369.07
	 GCS/GES messages sent: 	    16,932.83		     328.86

	    DBWR Fusion writes: 		 0.25		       0.00
 Estd Interconnect traffic (KB) 	     7,186.63


Global Cache Efficiency Percentages (Target local+remote 100%)
IF ( v_hot_schema_modulus != 0 ) THEN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:    6.13
Buffer access - remote cache %:    0.02
Buffer access - 	disk %:   93.84
	v_do_hot_schema := TRUE;
Global Cache Locality	     %:   83.02


Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
END IF;
	  Avg global cache cr block receive time (us):		7,119.0
     Avg global cache current block receive time (us):		3,307.6
			       Avg LMS process busy %:		   29.6


	    Avg global cache cr block build time (us):		  103.2
      Global cache log flushes for cr blocks served %:		    2.2
	    Avg global cache cr block flush time (us):	       24,945.1

IF ( v_sleep_modulus != 0 )	  THEN
	 Avg global cache current block pin time (us):		    0.0
 Global cache log flushes for current blocks served %:		    0.5
       Avg global cache current block flush time (us):	       21,538.5

	v_do_sleeps := TRUE;
		     Avg global enqueue get time (us):		2,158.1

Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
END IF;
		     Avg message sent queue time (us):		  430.4
	     Avg message sent queue time on ksxp (us):		4,885.1
	  Avg message received kernel queue time (us):		  154.8
		 Avg message received queue time (us):		   64.5

		    Avg GCS message process time (us):		   24.8
		    Avg GES message process time (us):		   38.4

			    % of direct sent messages:		  14.39
IF ( v_max_loop_iterations &gt; 0 )  THEN
			  % of indirect sent messages:		  85.08
			% of flow controlled messages:		   0.54
	  -------------------------------------------------------------

Cluster Interconnect
	v_loop_control := TRUE ;
-> if Public/Source at End snap is different a '*' is displayed
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End
	     --------------------------------------------------   -------
END IF;
Interface    IP Address      Pub Source 			  Pub Src
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.22.248  N


Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
IF ( v_update_pct = 0 ) 	  THEN
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
Global Enqueue S-optim Broadcasts	       112	    0.2 	 0.0
	v_select_only_workload := TRUE;
Global Enqueue S-optim S-lock get	   148,151	  233.5 	 4.5
Global Enqueue S-optim anti-locks		43	    0.1 	 0.0
KA local message waits				 0	    0.0 	 0.0
KA local messages received			 0	    0.0 	 0.0
END IF;
KA messages received actual			 0	    0.0 	 0.0
KA messages received logical			 0	    0.0 	 0.0
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0

Pseudo reconfiguration count			 0	    0.0 	 0.0
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	     7,140	   11.3 	 0.2
acks for commit broadcast(logical	    17,140	   27.0 	 0.5
IF ( v_update_pct = 100 )	  THEN
broadcast msgs on commit(actual)	    15,498	   24.4 	 0.5
broadcast msgs on commit(logical)	    26,591	   41.9 	 0.8
broadcast msgs on commit(wasted)	     9,785	   15.4 	 0.3
dynamically allocated gcs resourc		 0	    0.0 	 0.0
	v_update_only_workload := TRUE;
dynamically allocated gcs shadows		 0	    0.0 	 0.0
flow control messages received			 0	    0.0 	 0.0
flow control messages sent			 0	    0.0 	 0.0
gcs assume cvt					 0	    0.0 	 0.0
END IF;
gcs assume no cvt			     4,092	    6.4 	 0.1
gcs ast to fg				    33,521	   52.8 	 1.0
gcs ast xid					 0	    0.0 	 0.0
gcs bidless ast to lms				62	    0.1 	 0.0

gcs blocked converts			   106,653	  168.1 	 3.3
gcs blocked cr converts 		     4,851	    7.6 	 0.1
gcs compatible basts				19	    0.0 	 0.0
gcs compatible cr basts (global)		25	    0.0 	 0.0
IF ( v_scan_query_pct = 0 ) 	THEN
gcs compatible cr basts (local) 	     2,404	    3.8 	 0.1
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 0	    0.0 	 0.0
gcs cr serve without current lock		 0	    0.0 	 0.0
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
gcs dbwr flush pi msgs			   466,636	  735.4 	14.3
gcs dbwr write request msgs		       158	    0.2 	 0.0
gcs error msgs					 0	    0.0 	 0.0
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 0	    0.0 	 0.0
gcs force cr grant				 0	    0.0 	 0.0
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				    33,583	   52.9 	 1.0
gcs grant request in partial open		 0	    0.0 	 0.0
gcs immediate (compatible) conver	     3,805	    6.0 	 0.1
gcs immediate (null) converts		   591,380	  932.0 	18.1
gcs immediate cr (compatible) con	    19,317	   30.4 	 0.6
gcs immediate cr (null) converts	 3,485,103	5,492.6        106.7
gcs lms flush pi msgs				 0	    0.0 	 0.0
gcs lms write request msgs			31	    0.0 	 0.0
gcs msgs process time(ms)		   297,731	  469.2 	 9.1
gcs msgs received			11,989,555     18,895.7        367.0
gcs new served by master		       337	    0.5 	 0.0
gcs out-of-order msgs			       356	    0.6 	 0.0
gcs pings refused			     2,032	    3.2 	 0.1
gcs pkey conflicts retry			 0	    0.0 	 0.0
gcs queued converts				 1	    0.0 	 0.0
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
gcs reader bypass grant fg ast			 0	    0.0 	 0.0
gcs reader bypass grant immediate		25	    0.0 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
gcs refuse xid					 0	    0.0 	 0.0
gcs refuse xid to fg				 0	    0.0 	 0.0
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
gcs side channel msgs actual		     1,639	    2.6 	 0.1
gcs side channel msgs logical		    57,297	   90.3 	 1.8
gcs stale cr					42	    0.1 	 0.0
gcs undo cr				       381	    0.6 	 0.0
gcs write notification msgs			 0	    0.0 	 0.0
gcs writes refused				 4	    0.0 	 0.0
ges msgs process time(ms)		       631	    1.0 	 0.0
ges msgs received			    16,446	   25.9 	 0.5
ges remote lock allocation		       -24	    0.0 	 0.0
global posts dropped				 0	    0.0 	 0.0
global posts queue time 			 0	    0.0 	 0.0
global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
implicit batch messages received	   170,507	  268.7 	 5.2
implicit batch messages sent		   155,939	  245.8 	 4.8
lmd msg send time(ms)				 0	    0.0 	 0.0
lms(s) msg send time(ms)			 0	    0.0 	 0.0
messages flow controlled		    23,721	   37.4 	 0.7
messages queue sent actual		 1,273,885	2,007.7 	39.0
messages queue sent logical		 1,116,435	1,759.5 	34.2
messages received actual		 2,400,381	3,783.0 	73.5
messages received logical		12,006,001     18,921.6        367.5
messages sent directly			   636,838	1,003.7 	19.5
messages sent indirectly		 3,765,435	5,934.4        115.3
messages sent not implicit batche	   125,555	  197.9 	 3.8
messages sent pbatched			 9,377,070     14,778.4        287.0
msgs causing lmd to send msgs			 0	    0.0 	 0.0
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
msgs received kernel queue time ( 1.8591117280E+12 2.929987E+09 5.690404E+07
msgs received queue time (ms)		   773,858	1,219.6 	23.7
msgs received queued			12,006,001     18,921.6        367.5
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
msgs sent queue time (ms)		   721,063	1,136.4 	22.1
msgs sent queue time on ksxp (ms)	10,544,470     16,618.2        322.7
msgs sent queued			 1,675,163	2,640.1 	51.3
msgs sent queued on ksxp		 2,158,479	3,401.8 	66.1

number of broadcasted resources 		 0	    0.0 	 0.0
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
number of received ODPS messages		 0	    0.0 	 0.0
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
number of sent RBA messages			 0	    0.0 	 0.0

		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
process batch messages received 	 1,164,002	1,834.5 	35.6
process batch messages sent		 1,233,867	1,944.6 	37.8
receiver cycle time			   774,447	1,220.5 	23.7
receiver loop count			 2,066,207	3,256.4 	63.2
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			  ------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
			DBMS_LOCK.SLEEP(v_num_tmp);

Statistic				    Total
------------------------------ ------------------
CR Block Requests			    2,779
		END IF;
CURRENT Block Requests			    1,277
Data Block Requests			    2,779
Undo Block Requests				0
TX Block Requests			    1,158
	END IF;
Current Results 			    4,036
Private results 				0
Zero Results					1
Disk Read Results			       20

Fail Results					0
Fairness Down Converts			    2,736
Light Works				    1,939
Flushes 				       91
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
Builds					    2,780
Errors						0
			  ------------------------------------------------------

		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		      1 	   100.00
Flushes 	     26 		     26.92    73.08
			v_sharing_schema := TRUE ;
			  ------------------------------------------------------

Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
		ELSE
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc
			IF ( v_sharing_schema = TRUE ) THEN

			       CR			  Current
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
				EXECUTE IMMEDIATE v_home_schema_str;
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   2 data block     1,823   94.7    1.5    3.8	  2,236   30.6	 69.0	  .4
				v_sharing_schema := FALSE;
   2 Others	       30  100.0     .0     .0	     99   75.8	 24.2	  .0
   2 undo header	4  100.0     .0     .0	     19    5.3	 94.7	  .0
			END IF;
			  ------------------------------------------------------

Global Cache Transfer Times (us)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
		END IF;
-> Immed, Busy, Congst -  Average times in us
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
	END IF;
	      --------------------------- ---------------------------
Inst Block
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst

---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   2 data blo	7284   6811  42865   5214   2053   2284   1938	 4080
   2 others	1250   1250    N/A    N/A  31393  40949   1531	  N/A
   2 undo hea	3131   3131    N/A    N/A   7403  14564   7005	  N/A
	-- Choose the random block. The v_do_hotspot handler that follows can override.
   2 undo blo	 N/A	N/A    N/A    N/A    N/A    N/A    N/A	  N/A
			  ------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc


				   CR			    Current
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
---- -------- ------- ----------- ------- ------- ----------- ------- -------
   2 data blo		    1,726   100.0     0.0	  684	100.0	  0.0
   2 others		       30   100.0     0.0	   75	100.0	  0.0
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
   2 undo hea			4   100.0     0.0	    1	100.0	  0.0
   2 undo blo		      N/A     N/A     N/A	  N/A	  N/A	  N/A
			  ------------------------------------------------------

		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
Global Cache Times (Immediate)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
-> ordered by CR + Current Blocks Received desc

		       CR Avg Time (us)   Current Avg Time (us)
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
		     -------------------- --------------------
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
---- -------- ------ ------ ------ ------ ------ ------ ------
	END IF;
   2 data blo	       6811   6811    N/A   2284   2284    N/A
   2 others	       1250   1250    N/A  40949  40949    N/A
   2 undo hea	       3131   3131    N/A  14564  14564    N/A

   2 undo blo		N/A    N/A    N/A    N/A    N/A    N/A
			  ------------------------------------------------------

Interconnect Ping Latency Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
----------------------------------------------------------------------------------------------------------------------
-> Ping latency of the roundtrip of a message from this instance to -> target in
-> The target instance is identified by an instance number.
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
-> Note that latency of a message from the instance to itself is used as
-> control, since message latency can include wait for CPU

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
----------------------------------------------------------------------------------------------------------------------
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
--------- -------- ------ ----------- -------- ------ -----------
	1	58   1036	 1.04	    63	  993	      .98
	2	58  53864      392.30	    62	50704	   379.62

			  ------------------------------------------------------

Interconnect Throughput by Client	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Throughput of interconnect usage by major consumers
	IF  ( v_select_only_workload = TRUE ) THEN
-> All throughput numbers are megabytes per second

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
		-- handle case where user specified zero pct updates (a SELECT-only workload)
---------------- ----------- -----------
Global Cache		 .07	     .04
Parallel Query		 .00	     .00
		v_do_update := FALSE;
DB Locks		4.10	    4.92
DB Streams		 N/A	     N/A
Other			 .01	     .00
			  ------------------------------------------------------

		v_update_quota := TRUE ;
Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Throughput and errors of interconnect devices (at OS level)
-> All throughput numbers are megabytes per second

	ELSE
Device Name	IP Address	 Public Source
--------------- ---------------- ------ -------------------------------
				  Send	   Send
       Send	Send	 Send	Buffer	Carrier
		IF ( v_update_only_workload = TRUE ) THEN
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
----------- -------- -------- -------- --------
			       Receive	Receive
    Receive  Receive  Receive	Buffer	  Frame
			-- handle case where user specified 100% updates
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
----------- -------- -------- -------- --------
fg-priv:1	169.254.22.248	 NO
	.00	   0	    0	     0	      0
			v_do_update := TRUE;
	.00	   0	    0	     0	      0
			  ------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
			v_update_quota := FALSE;
-> Times are in seconds
-> Affinity objects - Affinity objects mastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot

		ELSE
							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
-------------------------------- ------------ ------------- -------- --------
remaster ops				    1	       1.00
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
remastered objects			   41	      41.00
replayed locks received 	       34,875	  34,875.00
replayed locks sent			2,619	   2,619.00
resources cleaned			    0	       0.00
remaster time (s)			  1.5	       1.52
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
freeze time (s) 			  0.1	       0.07
cleanup time (s)			  0.1	       0.09
replay time (s) 			  0.5	       0.54
fixwrite time (s)			  0.1	       0.10
			IF ( v_update_quota = FALSE ) THEN
sync time (s)				  0.7	       0.68
affinity objects					N/A	  87	  114
read-mostly objects					N/A	   7	    7
affinity objects (other inst)				N/A	  71	   41
				-- Handle case where user has set UPDATE_PCT to a valid value
read-mostly objects (persistent)			N/A	   4	    4
			  ------------------------------------------------------

End of Report
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>5,349,421</td><td align="right" class='awrc'>8,430.76</td><td align="right" class='awrc'>163.74</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>222,738</td><td align="right" class='awrnc'>351.04</td><td align="right" class='awrnc'>6.82</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,322</td><td align="right" class='awrc'>2.08</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>1,857</td><td align="right" class='awrnc'>2.93</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>770</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>2,328</td><td align="right" class='awrnc'>3.67</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>255,469</td><td align="right" class='awrnc'>402.62</td><td align="right" class='awrnc'>7.82</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>4,622</td><td align="right" class='awrc'>7.28</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>17,104,107</td><td align="right" class='awrc'>26,956.32</td><td align="right" class='awrc'>523.53</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>2,683,877</td><td align="right" class='awrnc'>4,229.83</td><td align="right" class='awrnc'>82.15</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>2,121,891,412</td><td align="right" class='awrc'>3,344,131.26</td><td align="right" class='awrc'>64,947.24</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>254,327</td><td align="right" class='awrnc'>400.82</td><td align="right" class='awrnc'>7.78</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>18,226,551</td><td align="right" class='awrc'>28,725.31</td><td align="right" class='awrc'>557.88</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>550</td><td align="right" class='awrnc'>0.87</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>32,671</td><td align="right" class='awrc'>51.49</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>589</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>0.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>646</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>167</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>508</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>481</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>371</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>375</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>14,019,361</td><td align="right" class='awrc'>22,094.71</td><td align="right" class='awrc'>429.11</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO buffer defrag count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>202,481</td><td align="right" class='awrc'>319.11</td><td align="right" class='awrc'>6.20</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>14,019,999</td><td align="right" class='awrnc'>22,095.72</td><td align="right" class='awrnc'>429.13</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>184,432</td><td align="right" class='awrc'>290.67</td><td align="right" class='awrc'>5.65</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>352,868</td><td align="right" class='awrnc'>556.13</td><td align="right" class='awrnc'>10.80</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>266,956</td><td align="right" class='awrc'>420.73</td><td align="right" class='awrc'>8.17</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>935</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>14,362,089</td><td align="right" class='awrc'>22,634.86</td><td align="right" class='awrc'>439.60</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>462</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>462</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>4,325,310</td><td align="right" class='awrnc'>6,816.75</td><td align="right" class='awrnc'>132.39</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>118,706</td><td align="right" class='awrc'>187.08</td><td align="right" class='awrc'>3.63</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>133,024</td><td align="right" class='awrnc'>209.65</td><td align="right" class='awrnc'>4.07</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>1,044,726</td><td align="right" class='awrc'>1,646.50</td><td align="right" class='awrc'>31.98</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>403,605</td><td align="right" class='awrnc'>636.09</td><td align="right" class='awrnc'>12.35</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>25,572</td><td align="right" class='awrc'>40.30</td><td align="right" class='awrc'>0.78</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>1,570</td><td align="right" class='awrnc'>2.47</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>159</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>230</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>114,678</td><td align="right" class='awrc'>180.73</td><td align="right" class='awrc'>3.51</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>2,569,510</td><td align="right" class='awrnc'>4,049.58</td><td align="right" class='awrnc'>78.65</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>1,326</td><td align="right" class='awrnc'>2.09</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>1,232,142,336</td><td align="right" class='awrc'>1,941,873.97</td><td align="right" class='awrc'>37,713.64</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>413,953,889</td><td align="right" class='awrnc'>652,397.26</td><td align="right" class='awrnc'>12,670.38</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>2,412</td><td align="right" class='awrc'>3.80</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>237,784</td><td align="right" class='awrnc'>374.75</td><td align="right" class='awrnc'>7.28</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>1,084</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>124,016</td><td align="right" class='awrnc'>195.45</td><td align="right" class='awrnc'>3.80</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>104,279,926</td><td align="right" class='awrc'>164,346.66</td><td align="right" class='awrc'>3,191.82</td></tr>
<tr><td scope="row" class='awrnc'>LOB table id lookup cache misses</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>159</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>192</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>205</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks created</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks executed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>234</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>auto extends on undo tablespace</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints started</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>6,462</td><td align="right" class='awrnc'>10.18</td><td align="right" class='awrnc'>0.20</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>640,679</td><td align="right" class='awrc'>1,009.72</td><td align="right" class='awrc'>19.61</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>42,988,809</td><td align="right" class='awrc'>67,750.98</td><td align="right" class='awrc'>1,315.81</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>16,991,909</td><td align="right" class='awrnc'>26,779.49</td><td align="right" class='awrnc'>520.09</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>67,944</td><td align="right" class='awrc'>107.08</td><td align="right" class='awrc'>2.08</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>38,446</td><td align="right" class='awrnc'>60.59</td><td align="right" class='awrnc'>1.18</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>264,787</td><td align="right" class='awrc'>417.31</td><td align="right" class='awrc'>8.10</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>63,207</td><td align="right" class='awrnc'>99.62</td><td align="right" class='awrnc'>1.93</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>9,237</td><td align="right" class='awrc'>14.56</td><td align="right" class='awrc'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>190,576,305,664</td><td align="right" class='awrnc'>300,350,987.32</td><td align="right" class='awrnc'>5,833,194.75</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>6,695</td><td align="right" class='awrc'>10.55</td><td align="right" class='awrc'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>2,246</td><td align="right" class='awrnc'>3.54</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: cannot pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>2,571,120</td><td align="right" class='awrc'>4,052.12</td><td align="right" class='awrc'>78.70</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>2,571,076</td><td align="right" class='awrnc'>4,052.05</td><td align="right" class='awrnc'>78.70</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>160</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>6,263</td><td align="right" class='awrnc'>9.87</td><td align="right" class='awrnc'>0.19</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>15,260,802</td><td align="right" class='awrc'>24,051.24</td><td align="right" class='awrc'>467.11</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>443,867</td><td align="right" class='awrnc'>699.54</td><td align="right" class='awrnc'>13.59</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>443,571</td><td align="right" class='awrc'>699.07</td><td align="right" class='awrc'>13.58</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>15,260,802</td><td align="right" class='awrnc'>24,051.24</td><td align="right" class='awrnc'>467.11</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>14,816,935</td><td align="right" class='awrc'>23,351.70</td><td align="right" class='awrc'>453.52</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>14,064,438</td><td align="right" class='awrnc'>22,165.76</td><td align="right" class='awrnc'>430.49</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cursor reload failures</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>5,349,421</td><td align="right" class='awrnc'>8,430.76</td><td align="right" class='awrnc'>163.74</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>2,965,660</td><td align="right" class='awrc'>4,673.92</td><td align="right" class='awrc'>90.77</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>316</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>2,965,343</td><td align="right" class='awrc'>4,673.42</td><td align="right" class='awrc'>90.76</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>277,796</td><td align="right" class='awrnc'>437.81</td><td align="right" class='awrnc'>8.50</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>650,095</td><td align="right" class='awrc'>1,024.56</td><td align="right" class='awrc'>19.90</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>2,445,193</td><td align="right" class='awrnc'>3,853.66</td><td align="right" class='awrnc'>74.84</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>32,804</td><td align="right" class='awrc'>51.70</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>174,732</td><td align="right" class='awrnc'>275.38</td><td align="right" class='awrnc'>5.35</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>174,601</td><td align="right" class='awrc'>275.17</td><td align="right" class='awrc'>5.34</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>6,249</td><td align="right" class='awrc'>9.85</td><td align="right" class='awrc'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>222,738</td><td align="right" class='awrc'>351.04</td><td align="right" class='awrc'>6.82</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>1,347,912,591</td><td align="right" class='awrnc'>2,124,329.55</td><td align="right" class='awrnc'>41,257.16</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>17,300,747</td><td align="right" class='awrc'>27,266.23</td><td align="right" class='awrc'>529.54</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>17,224,268</td><td align="right" class='awrnc'>27,145.69</td><td align="right" class='awrnc'>527.20</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>7,228</td><td align="right" class='awrc'>11.39</td><td align="right" class='awrc'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>1,200</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>0.04</td></tr>
Report written to awr.txt
<tr><td scope="row" class='awrc'>gc cleanout applied</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>100,883</td><td align="right" class='awrc'>158.99</td><td align="right" class='awrc'>3.09</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>227</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.01</td></tr>
SQL> SQL> SQL> <tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>1,322</td><td align="right" class='awrnc'>2.08</td><td align="right" class='awrnc'>0.04</td></tr>
SQL> SQL> SQL> <tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>2,811</td><td align="right" class='awrc'>4.43</td><td align="right" class='awrc'>0.09</td></tr>
SQL> <tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>1,857</td><td align="right" class='awrc'>2.93</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>4,063</td><td align="right" class='awrnc'>6.40</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grant time</td><td align="right" class='awrc'>2,788,799</td><td align="right" class='awrc'>4,395.19</td><td align="right" class='awrc'>85.36</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grants received</td><td align="right" class='awrnc'>2,248,054</td><td align="right" class='awrnc'>3,542.97</td><td align="right" class='awrnc'>68.81</td></tr>
<tr><td scope="row" class='awrc'>gc current block flush time</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block pin time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>770</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks flushed</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks pinned</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>2,328</td><td align="right" class='awrnc'>3.67</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks served</td><td align="right" class='awrc'>5,061</td><td align="right" class='awrc'>7.98</td><td align="right" class='awrc'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read cr</td><td align="right" class='awrnc'>106</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read current</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>32,341</td><td align="right" class='awrnc'>50.97</td><td align="right" class='awrnc'>0.99</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>40,652</td><td align="right" class='awrc'>64.07</td><td align="right" class='awrc'>1.24</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>14,312,373</td><td align="right" class='awrnc'>22,556.50</td><td align="right" class='awrnc'>438.08</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi fg</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc no change made</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read time waited</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read wait timeouts</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>2,928,021</td><td align="right" class='awrc'>4,614.60</td><td align="right" class='awrc'>89.62</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>51,982</td><td align="right" class='awrnc'>81.92</td><td align="right" class='awrnc'>1.59</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>33,585</td><td align="right" class='awrc'>52.93</td><td align="right" class='awrc'>1.03</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock failures</td><td align="right" class='awrnc'>5,837</td><td align="right" class='awrnc'>9.20</td><td align="right" class='awrnc'>0.18</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock grants</td><td align="right" class='awrc'>13,581,481</td><td align="right" class='awrc'>21,404.61</td><td align="right" class='awrc'>415.70</td></tr>
<tr><td scope="row" class='awrnc'>gcs anti-locks created</td><td align="right" class='awrnc'>100,908</td><td align="right" class='awrnc'>159.03</td><td align="right" class='awrnc'>3.09</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>17,122,160</td><td align="right" class='awrc'>26,984.77</td><td align="right" class='awrc'>524.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>10,694,914</td><td align="right" class='awrnc'>16,855.34</td><td align="right" class='awrnc'>327.35</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>112,755</td><td align="right" class='awrc'>177.70</td><td align="right" class='awrc'>3.45</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>638,257</td><td align="right" class='awrnc'>1,005.90</td><td align="right" class='awrnc'>19.54</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>15,588</td><td align="right" class='awrnc'>24.57</td><td align="right" class='awrnc'>0.48</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>65,474</td><td align="right" class='awrc'>103.19</td><td align="right" class='awrc'>2.00</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>303,390</td><td align="right" class='awrc'>478.15</td><td align="right" class='awrc'>9.29</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>271,978</td><td align="right" class='awrnc'>428.64</td><td align="right" class='awrnc'>8.32</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>9,767</td><td align="right" class='awrc'>15.39</td><td align="right" class='awrc'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>138,912</td><td align="right" class='awrnc'>218.93</td><td align="right" class='awrnc'>4.25</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>390</td><td align="right" class='awrnc'>0.61</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>4,459</td><td align="right" class='awrc'>7.03</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>217,385</td><td align="right" class='awrnc'>342.60</td><td align="right" class='awrnc'>6.65</td></tr>
<tr><td scope="row" class='awrc'>index reclamation/extension switch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>331</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>3,215</td><td align="right" class='awrc'>5.07</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>5.07</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>149,308,579,840</td><td align="right" class='awrc'>235,312,460.35</td><td align="right" class='awrc'>4,570,064.58</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>3,585</td><td align="right" class='awrc'>5.65</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>253,593</td><td align="right" class='awrnc'>399.67</td><td align="right" class='awrnc'>7.76</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>253,593</td><td align="right" class='awrc'>399.67</td><td align="right" class='awrc'>7.76</td></tr>
<tr><td scope="row" class='awrnc'>min active SCN optimization applied on CR</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>14,799,802</td><td align="right" class='awrc'>23,324.70</td><td align="right" class='awrc'>453.00</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>5,425,442</td><td align="right" class='awrnc'>8,550.57</td><td align="right" class='awrnc'>166.06</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>255,469</td><td align="right" class='awrc'>402.62</td><td align="right" class='awrc'>7.82</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (failures)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>4,622</td><td align="right" class='awrc'>7.28</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>17,103,250</td><td align="right" class='awrnc'>26,954.97</td><td align="right" class='awrnc'>523.50</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>140,116,836,352</td><td align="right" class='awrc'>220,826,140.96</td><td align="right" class='awrc'>4,288,722.00</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>17,109,230</td><td align="right" class='awrnc'>26,964.39</td><td align="right" class='awrnc'>523.68</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>141,730,705,920</td><td align="right" class='awrc'>223,369,622.51</td><td align="right" class='awrc'>4,338,119.61</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>1,474</td><td align="right" class='awrnc'>2.32</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>17,104,107</td><td align="right" class='awrc'>26,956.32</td><td align="right" class='awrc'>523.53</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>17,104,107</td><td align="right" class='awrnc'>26,956.32</td><td align="right" class='awrnc'>523.53</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>13,816,302</td><td align="right" class='awrc'>21,774.69</td><td align="right" class='awrc'>422.89</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct (lob)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct temporary tablespace</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads prefetch warmup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>2,570,778</td><td align="right" class='awrnc'>4,051.58</td><td align="right" class='awrnc'>78.69</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>21,986,320,384</td><td align="right" class='awrc'>34,650,755.83</td><td align="right" class='awrc'>672,961.35</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>2,623,340</td><td align="right" class='awrnc'>4,134.42</td><td align="right" class='awrnc'>80.30</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>24,417,081,856</td><td align="right" class='awrc'>38,481,670.73</td><td align="right" class='awrc'>747,362.55</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>7,622</td><td align="right" class='awrnc'>12.01</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>2,683,877</td><td align="right" class='awrc'>4,229.83</td><td align="right" class='awrc'>82.15</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>462</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>2,683,415</td><td align="right" class='awrc'>4,229.10</td><td align="right" class='awrc'>82.13</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>2,679,793</td><td align="right" class='awrnc'>4,223.39</td><td align="right" class='awrnc'>82.02</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>1,575</td><td align="right" class='awrc'>2.48</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>prefetched blocks aged out before use</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>665</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>queries parallelized</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>recursive calls</td><td align="right" class='awrnc'>325,847</td><td align="right" class='awrnc'>513.54</td><td align="right" class='awrnc'>9.97</td></tr>
<tr><td scope="row" class='awrc'>recursive cpu usage</td><td align="right" class='awrc'>344,242</td><td align="right" class='awrc'>542.53</td><td align="right" class='awrc'>10.54</td></tr>
<tr><td scope="row" class='awrnc'>redo KB read</td><td align="right" class='awrnc'>876,544</td><td align="right" class='awrnc'>1,381.45</td><td align="right" class='awrnc'>26.83</td></tr>
<tr><td scope="row" class='awrc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrc'>1,573,795</td><td align="right" class='awrc'>2,480.32</td><td align="right" class='awrc'>48.17</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written</td><td align="right" class='awrnc'>4,307,051</td><td align="right" class='awrnc'>6,787.97</td><td align="right" class='awrnc'>131.83</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 0)</td><td align="right" class='awrc'>2,866,812</td><td align="right" class='awrc'>4,518.14</td><td align="right" class='awrc'>87.75</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 1)</td><td align="right" class='awrnc'>1,440,239</td><td align="right" class='awrnc'>2,269.84</td><td align="right" class='awrnc'>44.08</td></tr>
<tr><td scope="row" class='awrc'>redo entries</td><td align="right" class='awrc'>2,836,270</td><td align="right" class='awrc'>4,470.00</td><td align="right" class='awrc'>86.81</td></tr>
<tr><td scope="row" class='awrnc'>redo size</td><td align="right" class='awrnc'>2,121,891,412</td><td align="right" class='awrnc'>3,344,131.26</td><td align="right" class='awrnc'>64,947.24</td></tr>
<tr><td scope="row" class='awrc'>redo size for direct writes</td><td align="right" class='awrc'>900</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo subscn max counts</td><td align="right" class='awrnc'>215</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo synch long waits</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>1,152,001</td><td align="right" class='awrc'>1,815.57</td><td align="right" class='awrc'>35.26</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>6,253</td><td align="right" class='awrnc'>9.85</td><td align="right" class='awrnc'>0.19</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count ( 32ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>12,454,844</td><td align="right" class='awrc'>19,629.01</td><td align="right" class='awrc'>381.22</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>50,964</td><td align="right" class='awrnc'>80.32</td><td align="right" class='awrnc'>1.56</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>61,223</td><td align="right" class='awrnc'>96.49</td><td align="right" class='awrnc'>1.87</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>727,306,097</td><td align="right" class='awrc'>1,146,244.83</td><td align="right" class='awrc'>22,261.52</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>48,739,489</td><td align="right" class='awrnc'>76,814.13</td><td align="right" class='awrnc'>1,491.83</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>49,300,496</td><td align="right" class='awrnc'>77,698.29</td><td align="right" class='awrnc'>1,509.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>849</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>956</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>2,180</td><td align="right" class='awrc'>3.44</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>4,262</td><td align="right" class='awrnc'>6.72</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>13,879</td><td align="right" class='awrc'>21.87</td><td align="right" class='awrc'>0.42</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>3,749</td><td align="right" class='awrnc'>5.91</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>445</td><td align="right" class='awrc'>0.70</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>234</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>72,884</td><td align="right" class='awrnc'>114.87</td><td align="right" class='awrnc'>2.23</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>728,839,243</td><td align="right" class='awrc'>1,148,661.09</td><td align="right" class='awrc'>22,308.45</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>782,785,493</td><td align="right" class='awrnc'>1,233,681.15</td><td align="right" class='awrnc'>23,959.64</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>45,503,067</td><td align="right" class='awrc'>71,713.49</td><td align="right" class='awrc'>1,392.77</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>26,615</td><td align="right" class='awrnc'>41.95</td><td align="right" class='awrnc'>0.81</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>26,615</td><td align="right" class='awrc'>41.95</td><td align="right" class='awrc'>0.81</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>14,838</td><td align="right" class='awrnc'>23.38</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>11,777</td><td align="right" class='awrc'>18.56</td><td align="right" class='awrc'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>26,615</td><td align="right" class='awrnc'>41.95</td><td align="right" class='awrnc'>0.81</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>26,615</td><td align="right" class='awrc'>41.95</td><td align="right" class='awrc'>0.81</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>root node splits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>1,318</td><td align="right" class='awrc'>2.08</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>1,196,032</td><td align="right" class='awrnc'>1,884.96</td><td align="right" class='awrnc'>36.61</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>1,007,805</td><td align="right" class='awrnc'>1,588.32</td><td align="right" class='awrnc'>30.85</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>1,196,032</td><td align="right" class='awrc'>1,884.96</td><td align="right" class='awrc'>36.61</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment cfs allocations</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ops</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc tasks</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>7,875</td><td align="right" class='awrc'>12.41</td><td align="right" class='awrc'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>segment total chunk allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>673</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>254,327</td><td align="right" class='awrnc'>400.82</td><td align="right" class='awrnc'>7.78</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>18,226,551</td><td align="right" class='awrc'>28,725.31</td><td align="right" class='awrc'>557.88</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>5,173,611</td><td align="right" class='awrnc'>8,153.69</td><td align="right" class='awrnc'>158.35</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>411</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>70,270</td><td align="right" class='awrnc'>110.75</td><td align="right" class='awrnc'>2.15</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>15,944,621</td><td align="right" class='awrc'>25,128.95</td><td align="right" class='awrc'>488.04</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>28,563,039</td><td align="right" class='awrnc'>45,015.76</td><td align="right" class='awrnc'>874.26</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>4,017</td><td align="right" class='awrnc'>6.33</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>259,645</td><td align="right" class='awrc'>409.20</td><td align="right" class='awrc'>7.95</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>259,645</td><td align="right" class='awrnc'>409.20</td><td align="right" class='awrnc'>7.95</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>1,213</td><td align="right" class='awrc'>1.91</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>1,652.57</td><td align="right" class='awrnc'>32.10</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>15,814</td><td align="right" class='awrc'>24.92</td><td align="right" class='awrc'>0.48</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>399</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>total number of times SMON posted</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background get time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock background gets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock foreground requests</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction rollbacks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>1,863</td><td align="right" class='awrnc'>2.94</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>880,760,912</td><td align="right" class='awrc'>1,388,091.81</td><td align="right" class='awrc'>26,958.49</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>550</td><td align="right" class='awrnc'>0.87</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>32,671</td><td align="right" class='awrc'>51.49</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>589</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>write clones created in background</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>455</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>143</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>363</td><td align="right" class='awrnc'>98</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>8,409</td><td align="right" class='awrc'>8,883</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>1,007,851,224</td><td align="right" class='awrnc'>627,230,872</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>1,171,941,688</td><td align="right" class='awrc'>753,571,672</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>464,061,656</td><td align="right" class='awrnc'>346,370,760</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>1,897,305,360</td><td align="right" class='awrc'>2,174,713,824</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>129.8G</td><td align="right" class='awrc'>26803.57</td><td align="right" class='awrc'>209.408M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3.3M</td><td align="right" class='awrc'>9.07ms</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>4M</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>.006M</td><td align="right" class='awrnc'>20.4G</td><td align="right" class='awrnc'>4045.95</td><td align="right" class='awrnc'>32.997M</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>7.60ms</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2G</td><td align="right" class='awrc'>80.15</td><td align="right" class='awrc'>3.295M</td><td align="right" class='awrc'>26.5K</td><td align="right" class='awrc'>25.48ms</td></tr>
<tr><td scope="row" class='awrnc'>Others</td><td align="right" class='awrnc'>1.5G</td><td align="right" class='awrnc'>9.78</td><td align="right" class='awrnc'>2.425M</td><td align="right" class='awrnc'>217M</td><td align="right" class='awrnc'>2.24</td><td align="right" class='awrnc'>.342M</td><td align="right" class='awrnc'>4449</td><td align="right" class='awrnc'>8.81ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>131.3G</td><td align="right" class='awrnc'>26813.73</td><td align="right" class='awrnc'>211.84M</td><td align="right" class='awrnc'>22.7G</td><td align="right" class='awrnc'>4128.41</td><td align="right" class='awrnc'>36.636M</td><td align="right" class='awrnc'>3.3M</td><td align="right" class='awrnc'>9.20ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>129.8G</td><td align="right" class='awrc'>26801.16</td><td align="right" class='awrc'>209.397M</td><td align="right" class='awrc'>20.5G</td><td align="right" class='awrc'>4046.01</td><td align="right" class='awrc'>33.003M</td><td align="right" class='awrc'>1.31ms</td><td align="right" class='awrc'>12.50ms</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>1.4G</td><td align="right" class='awrnc'>2.55</td><td align="right" class='awrnc'>2.314M</td><td align="right" class='awrnc'>2G</td><td align="right" class='awrnc'>80.13</td><td align="right" class='awrnc'>3.294M</td><td align="right" class='awrnc'>169.93us</td><td align="right" class='awrnc'>1690.86ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>74M</td><td align="right" class='awrc'>7.46</td><td align="right" class='awrc'>.117M</td><td align="right" class='awrc'>13M</td><td align="right" class='awrc'>1.27</td><td align="right" class='awrc'>.02M</td><td align="right" class='awrc'>5.10ms</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2M</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Temp File</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>3.58ms</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>131.3G</td><td align="right" class='awrnc'>26811.26</td><td align="right" class='awrnc'>211.829M</td><td align="right" class='awrnc'>22.5G</td><td align="right" class='awrnc'>4127.87</td><td align="right" class='awrnc'>36.322M</td><td align="right" class='awrnc'>1.31ms</td><td align="right" class='awrnc'>1684.03ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>129.7G</td><td align="right" class='awrc'>26799.20</td><td align="right" class='awrc'>209.374M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3.1M</td><td align="right" class='awrc'>7.64ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>129.7G</td><td align="right" class='awrnc'>26799.12</td><td align="right" class='awrnc'>209.372M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>3.1M</td><td align="right" class='awrnc'>7.64ms</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>4.04ms</td></tr>
<tr><td scope="row" class='awrnc'>
DBWR
</td><td align="right" class='awrnc'>4M</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>.006M</td><td align="right" class='awrnc'>20.4G</td><td align="right" class='awrnc'>4043.99</td><td align="right" class='awrnc'>32.981M</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>7.60ms</td></tr>
<tr><td scope="row" class='awrc'>
 DBWR (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>20.4G</td><td align="right" class='awrc'>4043.96</td><td align="right" class='awrc'>32.98M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Control File)
</td><td align="right" class='awrnc'>4M</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>.006M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>7.60ms</td></tr>
<tr><td scope="row" class='awrc'>
 DBWR (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 LGWR (Log File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2G</td><td align="right" class='awrnc'>80.13</td><td align="right" class='awrnc'>3.294M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
LGWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2G</td><td align="right" class='awrc'>80.13</td><td align="right" class='awrc'>3.294M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Others
</td><td align="right" class='awrnc'>1.5G</td><td align="right" class='awrnc'>9.77</td><td align="right" class='awrnc'>2.425M</td><td align="right" class='awrnc'>215M</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>.339M</td><td align="right" class='awrnc'>3921</td><td align="right" class='awrnc'>6.68ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Log File)
</td><td align="right" class='awrc'>1.4G</td><td align="right" class='awrc'>2.55</td><td align="right" class='awrc'>2.314M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>153</td><td align="right" class='awrc'>468.56us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Data File)
</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>.002M</td><td align="right" class='awrnc'>202M</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>.318M</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>11.74ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>70M</td><td align="right" class='awrc'>7.08</td><td align="right" class='awrc'>.11M</td><td align="right" class='awrc'>13M</td><td align="right" class='awrc'>1.27</td><td align="right" class='awrc'>.02M</td><td align="right" class='awrc'>3600</td><td align="right" class='awrc'>6.71ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Direct Writes (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Direct Writes
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>.002M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
TOTAL:
</td><td align="right" class='awrc'>131.2G</td><td align="right" class='awrc'>26809.35</td><td align="right" class='awrc'>211.805M</td><td align="right" class='awrc'>22.7G</td><td align="right" class='awrc'>4126.05</td><td align="right" class='awrc'>36.616M</td><td align="right" class='awrc'>3.1M</td><td align="right" class='awrc'>7.64ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>917,088</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>18,236,952</td><td align="right" class='awrc'>17,113,050</td><td align="right" class='awrc'>2,683,383</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,698</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			  2,683,877</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25,571</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>58659</td><td align="right" class='awrc'>303973</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>14</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>55389</td><td align="right" class='awrnc'>1903287</td><td align="right" class='awrnc'>5627940</td><td align="right" class='awrnc'>16986915</td><td align="right" class='awrnc'>5627940</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>51</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>768</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>40,981</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>68969.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,536</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>40,902</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>68834.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>2,304</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>40,850</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>68745.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>3,072</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>40,786</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>68635.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>3,840</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>447</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>40,716</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>68515.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>4,608</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>537</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>40,653</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>68408.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>5,376</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>626</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>40,596</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>68310.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>6,144</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>716</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>40,534</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>68204.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>6,912</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>805</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>40,472</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>68098.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>7,680</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>40,415</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>68001.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>7,872</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>917</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>40,402</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67979.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>8,448</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>984</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>40,359</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>67905.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>9,216</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>40,298</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67800.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>9,984</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>1,163</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>40,233</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>67690.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>10,752</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>1,253</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>40,178</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67596.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>11,520</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>1,342</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>40,123</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>67501.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>12,288</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>1,432</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>40,068</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67408.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>13,056</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>1,521</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>40,012</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>67312.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>13,824</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>1,610</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>39,955</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67214.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>14,592</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>1,700</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>39,896</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>67114.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>15,360</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>1,789</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>39,840</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67017.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>3,215</td><td align="right" class='awrc'>1,358</td><td align="right" class='awrc'>2,100.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>329,210</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>1,617</td><td align="right" class='awrnc'>1,647.28</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>329,210</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>327</td><td align="right" class='awrc'>327</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>79</td><td align="right" class='awrnc'>79</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>402</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>47.02</td><td align="right" class='awrc'>98.00</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>8,804,297</td></tr>
<tr><td align="right" scope="row" class='awrnc'>804</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>47.02</td><td align="right" class='awrnc'>98.00</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>8,804,297</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,608</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>5.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>8,632,417</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,411</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,215</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,858</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,501</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,144</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,787</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,430</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,645</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,860</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,290</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>2,105.17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8,611,947</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,720</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>2,105.17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,611,947</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,472</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>6,569</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,504</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,536</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,568</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,600</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,632</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,664</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,696</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,728</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,760</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,792</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,952</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,112</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,272</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,432</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,592</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,752</td><td align="right" class='awrc'>1.87</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,912</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>7,486</td><td align="right" class='awrnc'>10,069</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>473</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,072</td><td align="right" class='awrc'>2.09</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>7,486</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>473</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>3,624</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>87,274</td><td align="right" class='awrc'>40,903,160</td></tr>
<tr><td align="right" scope="row" class='awrnc'>4,832</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>87,075</td><td align="right" class='awrnc'>40,785,994</td></tr>
<tr><td align="right" scope="row" class='awrc'>6,040</td><td align="right" class='awrc'>0.63</td><td align="right" class='awrc'>86,954</td><td align="right" class='awrc'>40,717,310</td></tr>
<tr><td align="right" scope="row" class='awrnc'>7,248</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>86,746</td><td align="right" class='awrnc'>40,596,103</td></tr>
<tr><td align="right" scope="row" class='awrc'>8,456</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>86,539</td><td align="right" class='awrc'>40,470,857</td></tr>
<tr><td align="right" scope="row" class='awrnc'>9,664</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>86,418</td><td align="right" class='awrnc'>40,402,173</td></tr>
<tr><td align="right" scope="row" class='awrc'>10,872</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>86,237</td><td align="right" class='awrc'>40,297,127</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,080</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>86,038</td><td align="right" class='awrnc'>40,179,961</td></tr>
<tr><td align="right" scope="row" class='awrc'>13,288</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>85,943</td><td align="right" class='awrc'>40,123,398</td></tr>
<tr><td align="right" scope="row" class='awrnc'>14,496</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>85,753</td><td align="right" class='awrnc'>40,010,272</td></tr>
<tr><td align="right" scope="row" class='awrc'>15,704</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>85,554</td><td align="right" class='awrc'>39,897,146</td></tr>
<tr><td align="right" scope="row" class='awrnc'>16,912</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>85,459</td><td align="right" class='awrnc'>39,840,583</td></tr>
<tr><td align="right" scope="row" class='awrc'>18,120</td><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>85,459</td><td align="right" class='awrc'>39,840,583</td></tr>
<tr><td align="right" scope="row" class='awrnc'>19,328</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>85,459</td><td align="right" class='awrnc'>39,840,583</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>




<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>file header block</td><td align="right" class='awrc'>1,642</td><td align="right" class='awrc'>528</td><td align="right" class='awrc'>322</td></tr>
<tr><td scope="row" class='awrnc'>undo header</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>HW-Segment High Water Mark</td>
<td align="right" class='awrc'>52,024</td><td align="right" class='awrc'>52,047</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>324</td><td align="right" class='awrc'>986.26</td></tr>
<tr><td scope="row" class='awrnc'>CR-Reuse Block Range (block range reuse ckpt)</td>
<td align="right" class='awrnc'>12,542</td><td align="right" class='awrnc'>12,542</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,935</td><td align="right" class='awrnc'>153</td><td align="right" class='awrnc'>52.16</td></tr>
<tr><td scope="row" class='awrc'>US-Undo Segment</td>
<td align="right" class='awrc'>24,856</td><td align="right" class='awrc'>24,846</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,633</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>48.79</td></tr>
<tr><td scope="row" class='awrnc'>CF-Controlfile Transaction</td>
<td align="right" class='awrnc'>1,981</td><td align="right" class='awrnc'>1,977</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>126</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11.76</td></tr>
<tr><td scope="row" class='awrc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrc'>180</td><td align="right" class='awrc'>180</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>22.38</td></tr>
<tr><td scope="row" class='awrnc'>CT-Block Change Tracking (state)</td>
<td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14.73</td></tr>
<tr><td scope="row" class='awrc'>TM-DML</td>
<td align="right" class='awrc'>33,460</td><td align="right" class='awrc'>33,460</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.29</td></tr>
<tr><td scope="row" class='awrnc'>PS-PX Process Reservation</td>
<td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.76</td></tr>
<tr><td scope="row" class='awrc'>WF-AWR Flush</td>
<td align="right" class='awrc'>26</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.85</td></tr>

Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
<tr><td scope="row" class='awrnc'>CO-KTUCLO Master Slave enq (master slave det)</td>
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report

<td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.40</td></tr>
<tr><td scope="row" class='awrc'>DW-In memory Dispenser</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.00</td></tr>
<tr><td scope="row" class='awrnc'>TT-Tablespace</td>
<td align="right" class='awrnc'>27,110</td><td align="right" class='awrnc'>27,110</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.00</td></tr>
<tr><td scope="row" class='awrc'>JS-Job Scheduler (job run lock - synchronize)</td>
<td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.50</td></tr>
<tr><td scope="row" class='awrnc'>RP-Resilver / Repair</td>
<td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.00</td></tr>
<tr><td scope="row" class='awrc'>TO-Temp Object</td>
<td align="right" class='awrc'>32</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>MV-Online Datafile Move (datafile move)</td>
<td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.00</td></tr>
<tr><td scope="row" class='awrc'>MW-MWIN Schedule</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>TA-Instance Undo</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>SW-Suspend Writes</td>
<td align="right" class='awrc'>40</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.00</td></tr>
<tr><td scope="row" class='awrnc'>FD-Flashback Database (Flashback logical operations)</td>
<td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>FB-Format Block</td>
<td align="right" class='awrc'>6</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>DR-Distributed Recovery</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>TX-Transaction</td>
<td align="right" class='awrnc'>34,717</td><td align="right" class='awrnc'>34,677</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1</td>
<td align="right" class='awrc'>7,386</td><td align="right" class='awrc'>7,386</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrnc'>7,386</td><td align="right" class='awrnc'>7,386</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IS-Instance State</td>
<td align="right" class='awrc'>1,554</td><td align="right" class='awrc'>1,554</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrnc'>702</td><td align="right" class='awrnc'>702</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrc'>596</td><td align="right" class='awrc'>596</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrnc'>500</td><td align="right" class='awrnc'>497</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrc'>205</td><td align="right" class='awrc'>205</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XL-ASM Extent Fault Lock (fault extent map)</td>
<td align="right" class='awrc'>48</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MR-Media Recovery</td>
<td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CT-Block Change Tracking (CTWR process start/stop)</td>
<td align="right" class='awrc'>40</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SE-Session Migration</td>
<td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CU-Cursor</td>
<td align="right" class='awrc'>31</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SH-Active Session History Flushing</td>
<td align="right" class='awrc'>15</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrc'>8</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PR-Process Startup</td>
<td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQ-Sequence Cache</td>
<td align="right" class='awrc'>6</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>

<a class="awr" href="#top">Back to Top</a><p />
Type Specified:  text

<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>
<ul>
<li class="awr"> Min/Max TR (mins) - Min and Max Tuned Retention (minutes) </li>
<li class="awr"> STO - Snapshot Too Old count,	OOS - Out of Space count </li>
<li class="awr"> Undo segment block stats: </li>
<li class="awr"> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed </li>
<li class="awr"> eS - expired	Stolen,   eR - expired	 Released,   eU - expired   reUsed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays undo segment summary. It displays undo tablespace number, number of undo blocks, number of transactions, max query length, etc."><tr><th class="awrbg" scope="col">Undo TS#</th><th class="awrbg" scope="col">Num Undo Blocks (K)</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concurcy</th><th class="awrbg" scope="col">Min/Max TR (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">	uS/uR/uU/    eS/eR/eU</th></tr>
<tr><td align="right" scope="row" class='awrc'>2</td><td align="right" class='awrc'>67.74</td><td align="right" class='awrc'>23,324</td><td align="right" class='awrc'>359</td><td align="right" class='awrc'>66</td><td class='awrc'>20/20</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/46/42328/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>
<ul>
<li class="awr"> Most recent 35 Undostat rows, ordered by Time desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the 35 most recent Undostat rows."><tr><th class="awrbg" scope="col">End Time</th><th class="awrbg" scope="col">Num Undo Blocks</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concy</th><th class="awrbg" scope="col">Tun Ret (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">  uS/uR/uU/   eS/eR/eU</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 10:15</td><td align="right" class='awrc'>67,741</td><td align="right" class='awrc'>23,324</td><td align="right" class='awrc'>359</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>20</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/46/42328/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM allocation</td><td align="right" class='awrc'>38,367</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM connection state latch</td><td align="right" class='awrnc'>7,028</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM db client latch</td><td align="right" class='awrc'>4,063</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map headers</td><td align="right" class='awrnc'>1,959</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map load waiting list</td><td align="right" class='awrc'>514</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>5,190</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>40,731,459</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network background latch</td><td align="right" class='awrnc'>6,550</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network state latch</td><td align="right" class='awrc'>480</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM remote client latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Alerted Metric Element list</td><td align="right" class='awrc'>7,504</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Autotask management</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Change Notification Hash table latch</td><td align="right" class='awrc'>253</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Column stats entry latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>26,665</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DML lock allocation</td><td align="right" class='awrnc'>67,462</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Event Group Locks</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FIB s.o chain latch</td><td align="right" class='awrnc'>386</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FOB consolidated s.o list latch</td><td align="right" class='awrc'>386</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>File IO Stats segmented array latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>File State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile block</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile write queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Hang Manager wait event statistics</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,463</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>I/O Staticstics latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats main anchor latch</td><td align="right" class='awrc'>304</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM access tracking extent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM activity tracking latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary rw latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area sb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area scb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM emb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM seg hdr latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMFS defer write list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMXT hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC other latch</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC stats buffer allocation latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>In memory undo latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS Sh mem access</td><td align="right" class='awrnc'>371</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast add buf latch</td><td align="right" class='awrc'>388</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast drop buf latch</td><td align="right" class='awrnc'>388</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast load blnc latch</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS global state obj latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS mem alloc latch</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>JS queue access latch</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue state obj latch</td><td align="right" class='awrc'>15,570</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS slv state obj latch</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KCNIBR - invalid block range tree</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDCStatHash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Buffer Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Bucket Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Elem Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO action list latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO bll latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC FX Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFCL LE Freelist</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS client latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS cluster latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS endpoint latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS process latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFK SGA Libload latch</td><td align="right" class='awrnc'>13,046</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFMD SGA</td><td align="right" class='awrc'>423</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool KGH calls</td><td align="right" class='awrnc'>904</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>404,583</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>622,454</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool pending avail list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>5,516,687</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS req layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS id table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS ksfs_node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFSD name cache parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL LS Segment latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC ASPC anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrc'>307</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Namespace latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSK PDB IO STAT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMA SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMF SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSWL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrnc'>2,388</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrc'>996</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSXR large replies</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTF sga latch</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>296</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTILM latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTU in-memory txn table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA ODPSCN latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KWQMN job cache list latch</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Latch for NonceHistory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Locator state objects pool parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lost write change tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lsod array latch</td><td align="right" class='awrnc'>416</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA asr alloc latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>169</td><td align="right" class='awrnc'>2.37</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>3,035</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>28.82</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MQL Tracking Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Management Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Subscriber</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Message cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MinActiveScn Latch</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex Stats</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process</td><td align="right" class='awrnc'>790</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process allocation</td><td align="right" class='awrc'>1,366</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process: request allocation</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB Hash Table Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB LRU structure</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL warning settings</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX hash array latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for dependency tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for query hash table access</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for segments scanning</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>QMT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Real-time descriptor latch</td><td align="right" class='awrc'>10,433</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request stats latch</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request struct latch</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Request holder compeltion list latch</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Blackbox latch</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA IO buffer pool latch</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Bkt Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Log Latch</td><td align="right" class='awrnc'>11,503</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA blob parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA bucket locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA heap locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA pool locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SO private so latch</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>210</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager workarea list latch</td><td align="right" class='awrc'>15,566</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SR Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched IM Job latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched InMem Job Cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Shared B-Tree</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams Generic</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Subscriber Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Testing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Token Manager</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>UM object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Undo Hint Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>526</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>WCR: sync</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Write State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>X$KSFQP</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB NFS Security Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB unused session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB used session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>235,552</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active service list</td><td align="right" class='awrc'>8,305</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>844</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>archive destination</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>begin backup scn array</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>business card</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffer handles</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>107,349,080</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>31,390,428</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>6,701,188</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>19,922,866</td><td align="right" class='awrnc'>0.67</td></tr>
<tr><td scope="row" class='awrc'>cache table scan latch</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>1,417</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>change notification client cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel handle pool latch</td><td align="right" class='awrnc'>293</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel operations parent latch</td><td align="right" class='awrc'>13,688</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>8,953,723</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,682,326</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>client/application info</td><td align="right" class='awrc'>255</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>compile environment latch</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp handoff latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp pool latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp server hash latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp sga latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type state latch</td><td align="right" class='awrc'>634</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type wait latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cr slave free list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cvmap freelist lock</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>deferred cleanup latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher info</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dml lock allocation</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>done queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dtp latch</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dummy allocation</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eighth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eleventh spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enqueue freelist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>212,626</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>enqueue hash chains</td><td align="right" class='awrnc'>653,766</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1,458</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueues</td><td align="right" class='awrc'>322</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>error message lists</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fast space usage latch</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fifteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>file cache latch</td><td align="right" class='awrc'>2,625</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>first Audit Vault latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flash file access latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flashback copy</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourth Audit Vault latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc element</td><td align="right" class='awrc'>16,976,054</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,156,764</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gc imc list</td><td align="right" class='awrnc'>1,032</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc persistent rm</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc xid list</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity object freelist latch</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs commit scn state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>212,109</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs opaque info freelist</td><td align="right" class='awrnc'>216,730</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs partitioned table hash</td><td align="right" class='awrc'>26,273,485</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14,382,048</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>16,240</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>4.75</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering latch</td><td align="right" class='awrnc'>62,943</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11,144</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>4,506,846</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>122,152</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>33,889,036</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>133</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs resource scan list</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource timerq list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource validate list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows freelist</td><td align="right" class='awrnc'>4,283,963</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>227,227</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>37,128</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ges deadlock list</td><td align="right" class='awrnc'>1,384</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges domain table</td><td align="right" class='awrc'>566,924</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>262,653</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges group table</td><td align="right" class='awrc'>619,778</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process hash list</td><td align="right" class='awrnc'>142,492</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process parent latch</td><td align="right" class='awrc'>1,159,240</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process table freelist</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote lock freelist</td><td align="right" class='awrc'>1,191</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>825,858</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4,125</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>ges resource scan list</td><td align="right" class='awrc'>1,415</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource table freelist</td><td align="right" class='awrnc'>6,306</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges s-lock bitvec freelist</td><td align="right" class='awrc'>308</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges timeout list</td><td align="right" class='awrnc'>1,573</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges value block free list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>global KZLD latch for auth type mem in SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global tx hash mapping</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>granule from data transfer cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gws:Sharding global descriptor latch</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table Sql Plan Finding latch</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table column usage latch</td><td align="right" class='awrc'>432</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,445</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table expression usage tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table sql contorl latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat check</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>404</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>heartbeat structure management</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>imc buf hdl lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc cr clone buf</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc hash lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc sj lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc srchsp lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc-txn-wrk-lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory area latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar segment hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory global pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>internal temp table object number allocation latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>interrupt manipulation</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>intra txn parallel recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule list</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule metadata list</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job workq parent latch</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes free list latch</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job_queue_processes parameter latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>jslv pdb context latch</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q global data latch</td><td align="right" class='awrc'>422</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q lock allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kKCN Cqn SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcn buffer chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kdlx hb parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgb parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgnfs mount latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjbr roi instance map</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci objects freelist latch</td><td align="right" class='awrnc'>13,307</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci process context latch</td><td align="right" class='awrc'>12,233</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>75,636</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjci process list latch</td><td align="right" class='awrnc'>5,237</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci request sequence latch</td><td align="right" class='awrc'>1,491</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjcipctx state object freelist latch</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoedcso state object freelist latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>


<tr><td scope="row" class='awrnc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>

<tr><td scope="row" class='awrc'>kjoer owner hash bucket</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjpm my inst data</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Request obj freelist latch</td><td align="right" class='awrc'>160</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect control request queue</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6,366</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect warm up context</td><td align="right" class='awrnc'>3,151</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca pkey obj freelist latch</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrnc'>9,142</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect service hash table bucket</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjscpss state object freelist latch</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kokc descriptor allocation latch</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kpoxft latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>1.54</td></tr>
<tr><td scope="row" class='awrc'>krso process</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksevn object root latch</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksfv messages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksi resource reuse count</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim group membership cache</td><td align="right" class='awrc'>274</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim membership request latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>469</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksns object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kss move lock</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksuosstats global area</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>242</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksutcpistat latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv allocation latch</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv class latch</td><td align="right" class='awrnc'>18,250</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv instance latch</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv msg queue latch</td><td align="right" class='awrnc'>657</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>656</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxp shared latch</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxp so latch</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktfbn latch</td><td align="right" class='awrnc'>131</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg space</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg stages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg worklink</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm global data</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm prv jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktmpj HT ls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwqbsn:qsga</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbmdl: metadata latch</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbql: queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsslLat: skiplist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kxfxscanrate_latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>27,118</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>list of block allocation</td><td align="right" class='awrnc'>130,397</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>loader state object freelist</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment dispenser latch</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment hash table latch</td><td align="right" class='awrc'>196</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment query latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock DBA buffer during media recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log write info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,096</td><td align="right" class='awrnc'>2.53</td></tr>
<tr><td scope="row" class='awrc'>log write worker phase</td><td align="right" class='awrc'>13,285</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logical standby cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer context allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer local</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer work area</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>longop free list parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>



<tr><td scope="row" class='awrc'>managed standby</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message bitmap latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message pool operations parent latch</td><td align="right" class='awrc'>5,302</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>messages</td><td align="right" class='awrnc'>659,379</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>msg queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>369,472</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service memory objects</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service namespace bucket</td><td align="right" class='awrnc'>3,510</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service pending queue</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request queue</td><td align="right" class='awrc'>6,507</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ncodef allocation latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ninth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header freelist</td><td align="right" class='awrnc'>8,011</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header operation</td><td align="right" class='awrc'>42,578,831</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>222,766</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>object queue memory</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object stats modification</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parallel query alloc buffer</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>380</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parallel query stats</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parallel txn reco latch</td><td align="right" class='awrnc'>456</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parameter table management</td><td align="right" class='awrc'>372</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pdb enqueue hash chains</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>peshm</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_free_list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_hash_node</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pkey global statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pmon dead latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>114,478</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>116,272</td><td align="right" class='awrnc'>0.43</td></tr>
<tr><td scope="row" class='awrc'>process allocation</td><td align="right" class='awrc'>3,179</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process group creation</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process memory detail</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process pkey statistics list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue reference</td><td align="right" class='awrnc'>3,004</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>483</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>qmn task queue latch</td><td align="right" class='awrc'>88</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>quarantine object</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server freelists</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server process</td><td align="right" class='awrnc'>483</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>queued dump request</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>queuing load statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read-moslty lock queue under pkey</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>recovery domain hash bucket</td><td align="right" class='awrnc'>3,408</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>108,490</td><td align="right" class='awrc'>2.30</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,836,468</td><td align="right" class='awrc'>1.09</td></tr>
<tr><td scope="row" class='awrnc'>redo copy</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,839,713</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>redo transport task</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>331,163</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote tool request latch</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr group change latch</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:active threads</td><td align="right" class='awrc'>142</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change group</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change state</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:free threads list</td><td align="right" class='awrnc'>134</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change alloc latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:resource group CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:schema config</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:session queuing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resumable state object</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0.80</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache objects</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rt rmv count latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rules engine evaluation context statistics</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>second Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>segmented array pool</td><td align="right" class='awrnc'>386</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence cache</td><td align="right" class='awrc'>223</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>service drain list</td><td align="right" class='awrnc'>632</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session allocation</td><td align="right" class='awrc'>31,662</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>31,448</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session idle bit</td><td align="right" class='awrnc'>64,134</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session state list latch</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session statistics</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session switching</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session timer</td><td align="right" class='awrc'>211</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>seventh spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga hash table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shard latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shardgroup list latch</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>25,713</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>shared pool sim alloc</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool simulator</td><td align="right" class='awrnc'>338</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared server configuration</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sim partition latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>4,336,702</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator lru latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,217,450</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>sixth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sort extent pool</td><td align="right" class='awrnc'>338</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>3,592</td><td align="right" class='awrc'>72.22</td><td align="right" class='awrc'>0.92</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>420</td><td align="right" class='awrc'>2.86</td></tr>
<tr><td scope="row" class='awrnc'>state object free list</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>statistics aggregation</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>subscriber Ht bkt</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tablespace key chain</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temp lob duration state obj allocation</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temporary table state object allocation</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tenth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 lmid cln</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mixed exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mode exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test open exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test pdb exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test shared parent2 lmid</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>thirteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>threshold alerts latch</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction allocation</td><td align="right" class='awrc'>1,118</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twelfth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fifth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-first spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fourth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-second spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-third spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>1,326,298</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit holder</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit queues</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>6,701,188</td><td align="right" class='awrc'>16,294</td><td align="right" class='awrc'>2,075</td><td align="right" class='awrc'>14,290</td></tr>
<tr><td scope="row" class='awrnc'>enqueue hash chains</td><td align="right" class='awrnc'>653,766</td><td align="right" class='awrnc'>15,713</td><td align="right" class='awrnc'>1,538</td><td align="right" class='awrnc'>14,278</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>33,889,036</td><td align="right" class='awrc'>6,256</td><td align="right" class='awrc'>1,960</td><td align="right" class='awrc'>4,459</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>16,976,054</td><td align="right" class='awrnc'>4,776</td><td align="right" class='awrnc'>407</td><td align="right" class='awrnc'>4,394</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>107,349,080</td><td align="right" class='awrc'>3,261</td><td align="right" class='awrc'>488</td><td align="right" class='awrc'>2,806</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>5,516,687</td><td align="right" class='awrnc'>2,822</td><td align="right" class='awrnc'>397</td><td align="right" class='awrnc'>2,447</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>3,592</td><td align="right" class='awrc'>2,594</td><td align="right" class='awrc'>2,391</td><td align="right" class='awrc'>298</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>108,490</td><td align="right" class='awrnc'>2,497</td><td align="right" class='awrnc'>618</td><td align="right" class='awrnc'>1,912</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>40,731,459</td><td align="right" class='awrc'>1,675</td><td align="right" class='awrc'>456</td><td align="right" class='awrc'>1,244</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>42,578,831</td><td align="right" class='awrnc'>1,609</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>1,452</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>659,379</td><td align="right" class='awrc'>1,178</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>1,090</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>1,326,298</td><td align="right" class='awrnc'>1,065</td><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>913</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>825,858</td><td align="right" class='awrc'>986</td><td align="right" class='awrc'>183</td><td align="right" class='awrc'>807</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>235,552</td><td align="right" class='awrnc'>964</td><td align="right" class='awrnc'>335</td><td align="right" class='awrnc'>632</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>227,227</td><td align="right" class='awrc'>773</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>733</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>8,953,723</td><td align="right" class='awrnc'>496</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>419</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>4,506,846</td><td align="right" class='awrc'>464</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>413</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>404,583</td><td align="right" class='awrnc'>452</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>373</td></tr>
<tr><td scope="row" class='awrc'>ges enqueue table freelist</td><td align="right" class='awrc'>262,653</td><td align="right" class='awrc'>359</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>298</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering latch</td><td align="right" class='awrnc'>62,943</td><td align="right" class='awrnc'>353</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>316</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>331,163</td><td align="right" class='awrc'>338</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>259</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>114,478</td><td align="right" class='awrnc'>151</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>149</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>369,472</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>73</td></tr>
<tr><td scope="row" class='awrnc'>kjci process context latch</td><td align="right" class='awrnc'>12,233</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>69</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>27,118</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>34</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>31</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>3,035</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>23</td></tr>
<tr><td scope="row" class='awrnc'>ges process parent latch</td><td align="right" class='awrnc'>1,159,240</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>11</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>26,665</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>16</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>25,713</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>24</td></tr>
<tr><td scope="row" class='awrc'>channel operations parent latch</td><td align="right" class='awrc'>13,688</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>16</td></tr>
<tr><td scope="row" class='awrnc'>simulator hash latch</td><td align="right" class='awrnc'>4,336,702</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>13</td></tr>
<tr><td scope="row" class='awrc'>gcs shadows freelist</td><td align="right" class='awrc'>4,283,963</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>11</td></tr>
<tr><td scope="row" class='awrnc'>gcs nodemap pool</td><td align="right" class='awrnc'>212,109</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>8</td></tr>
<tr><td scope="row" class='awrc'>gcs opaque info freelist</td><td align="right" class='awrc'>216,730</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>169</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>16,240</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>1,417</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>file cache latch</td><td align="right" class='awrc'>2,625</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmTranslate</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>247</td><td align="right" class='awrc'>233</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmDoDone_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>215</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>88</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctcsnd: send normal message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>174</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>21</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>114</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>24</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>29</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_adjtkt: adjust send tickets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>MGA pid alloc latch</td><td class='awrnc'>ksm_mga_sctx_rtrcv_do_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_detach_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_sync_whr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>MGA shared context root latch</td><td class='awrc'>ksm_mga_detach_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>279</td><td align="right" class='awrnc'>327</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbk_add_rbr_ckpt: Add rbr ckpt 3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbkcpa: Checkpoint post-processing 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbk_add_rbr_ckpt: Add rbr ckpt 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclcls_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgcur: slow path</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>193</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgcur: fast path excl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: slow path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>44</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzibmlt: finish free bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>64</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbic2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: aux pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>11</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclexpandlock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbxsv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>23</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnlc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>14</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzib: finish processing buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzacrb: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclpdcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: convert latch 4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: fast path exam</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrlstp</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbic1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>10</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: cur pin change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcb_is_private</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: cleanout</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: rollback</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path shr</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: fast pin exclusive</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbrls: fast pin release</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzwb</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrwrite_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgws</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,752</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>291</td><td align="right" class='awrnc'>163</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>1,325</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbbwlru</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>529</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbxsv: move to being written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbo_write_bufs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>call allocation</td><td class='awrc'>ksuxds</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>channel operations parent latch</td><td class='awrnc'>ksrwait()</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbklbc_cql</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbkubc_4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>29</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbbwthc: thread checkpoint buffers</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>34</td></tr>
<tr><td class='awrnc'>file cache latch</td><td class='awrnc'>file cache:04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>file cache latch</td><td class='awrc'>file cache:20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnewm</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>181</td><td align="right" class='awrnc'>84</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndx</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>85</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclulb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>93</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>KCLUNLNK</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>60</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>29</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclpdcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclexpand_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndnew</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfnds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>20</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclantilock_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfnd</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs nodemap pool</td><td class='awrc'>kjbrnmapalloc_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>gcs opaque info freelist</td><td class='awrnc'>kjbrinfoalloc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs remaster request queue</td><td class='awrc'>kjdrrmq</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjfcdrmrfg end step</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjdrchkdrm remastering request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjdrisdrm nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrralc: reserve allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc: check freelist nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrfr_bg2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>22</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc add resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>483</td><td align="right" class='awrc'>58</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblocalobj_nolock</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>468</td><td align="right" class='awrnc'>970</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>190</td><td align="right" class='awrc'>122</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbopen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpclose</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>92</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>162</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblpast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>104</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbclose_remaster</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>104</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclpdc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>188</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>35</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcfwst</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbldrmrpst</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmprlst: shadow</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>24</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpflushpi</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcres_99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrprmexpack</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrdowncvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbassume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbcancel</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclgrantlk_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen:affinity</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrrcfwst_101</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs shadows freelist</td><td class='awrc'>kjblfr free lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>ges cached resource lists</td><td class='awrnc'>kjrm2c: move resource to cache</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>43</td></tr>
<tr><td class='awrc'>ges cached resource lists</td><td class='awrc'>kjchc: clean resource cache</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges cached resource lists</td><td class='awrnc'>kjruch: cached obj cleanup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges enqueue table freelist</td><td class='awrc'>kjlalc: lock allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>46</td></tr>
<tr><td class='awrnc'>ges enqueue table freelist</td><td class='awrnc'>kjlfr: remove lock from parent object</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>20</td></tr>
<tr><td class='awrc'>ges process parent latch</td><td class='awrc'>kjata_fg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>71</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjrmas1: lookup master node</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjlmfnd: search for lockp by rename and inst id</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjrref: find matched resource</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>101</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjakcai: search for resp by resname</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjucvl: lock convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjuinq: inquire resource held mode</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjcvscn: remove from scan queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>kjci process context latch</td><td class='awrnc'>kjci_finish_int:2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>kjci process context latch</td><td class='awrc'>kjci_processcrq1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksarcv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>24</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>18</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksaamb: after wakeup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>49</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcs024</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcsnew_scn_rba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcs01</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>13</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcslcu3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>17</td></tr>
<tr><td class='awrc'>multiblock read objects</td><td class='awrc'>kcbzibmlt: normal mbr free</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>multiblock read objects</td><td class='awrnc'>kcbzibmlt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_unlink_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>79</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_link_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>20</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_cq</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>39</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_q_bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_write_bufs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>ksliwat:remove</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>kslpstevent:get</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>543</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>416</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_write: before write</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>117</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_post: more space</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>85</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfwcr</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>72</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_post: rba scn pair</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfw_cal_target_rba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>9</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_post: after write</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>simulator hash latch</td><td class='awrnc'>kcbs_lookup_setid: lookup dba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>simulator hash latch</td><td class='awrc'>kcbsacc: insert dba</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_grab_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,140</td><td align="right" class='awrnc'>2,348</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_detach_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>43</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_purgeexpired</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_movetasks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktusm_stealext_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>86</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktusmupst: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>17</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktudba: KSLBEGIN</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>56</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktusm_stealext: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>501</td><td align="right" class='awrnc'>127</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>366</td><td align="right" class='awrc'>333</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqgtl3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>366</td><td align="right" class='awrnc'>618</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqrcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>233</td><td align="right" class='awrc'>433</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcnl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>29</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghfre</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Row Cache</td><td class='awrc'>[19] kqrpre</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>178</td></tr>
<tr><td class='awrnc'>Row Cache</td><td class='awrnc'>[06] kqrGetClusterLock</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Row Cache</td><td class='awrc'>[10] kqreqd</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>Cursor Pin</td><td class='awrnc'>kksLockDelete [KKSCHLPIN6]</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>4</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	  18,226,551</li>
<li class="awr">Captured Segments account for	82.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER68</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73631</td><td align="right" class='awrc'>73636</td><td align="right" class='awrc'>330,352</td><td align="right" class='awrc'>1.81</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73304</td><td align="right" class='awrnc'>73308</td><td align="right" class='awrnc'>324,432</td><td align="right" class='awrnc'>1.78</td></tr>
<tr><td class='awrc'>USER112</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73851</td><td align="right" class='awrc'>73856</td><td align="right" class='awrc'>324,096</td><td align="right" class='awrc'>1.78</td></tr>
<tr><td class='awrnc'>USER53</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73550</td><td align="right" class='awrnc'>73558</td><td align="right" class='awrnc'>323,696</td><td align="right" class='awrnc'>1.78</td></tr>
<tr><td class='awrc'>USER34</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73448</td><td align="right" class='awrc'>73452</td><td align="right" class='awrc'>323,472</td><td align="right" class='awrc'>1.77</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	   17,104,107</li>
<li class="awr">Captured Segments account for	86.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER68</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73631</td><td align="right" class='awrc'>73636</td><td align="right" class='awrc'>323,772</td><td align="right" class='awrc'>1.89</td></tr>
<tr><td class='awrnc'>USER34</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>319,398</td><td align="right" class='awrnc'>1.87</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73304</td><td align="right" class='awrc'>73308</td><td align="right" class='awrc'>319,337</td><td align="right" class='awrc'>1.87</td></tr>
<tr><td class='awrnc'>USER112</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73851</td><td align="right" class='awrnc'>73856</td><td align="right" class='awrnc'>318,186</td><td align="right" class='awrnc'>1.86</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73550</td><td align="right" class='awrc'>73558</td><td align="right" class='awrc'>317,135</td><td align="right" class='awrc'>1.85</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   17,103,250</li>
<li class="awr">Captured Segments account for	86.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER68</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73631</td><td align="right" class='awrc'>73636</td><td align="right" class='awrc'>323,772</td><td align="right" class='awrc'>1.89</td></tr>
<tr><td class='awrnc'>USER34</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>319,398</td><td align="right" class='awrnc'>1.87</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73304</td><td align="right" class='awrc'>73308</td><td align="right" class='awrc'>319,337</td><td align="right" class='awrc'>1.87</td></tr>
<tr><td class='awrnc'>USER112</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73851</td><td align="right" class='awrnc'>73856</td><td align="right" class='awrnc'>318,186</td><td align="right" class='awrnc'>1.86</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73550</td><td align="right" class='awrc'>73558</td><td align="right" class='awrc'>317,135</td><td align="right" class='awrc'>1.85</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:      17,103,250</li>
<li class="awr">Captured Segments account for	86.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER68</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73631</td><td align="right" class='awrc'>73636</td><td align="right" class='awrc'>323,772</td><td align="right" class='awrc'>1.89</td></tr>
<tr><td class='awrnc'>USER34</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>319,398</td><td align="right" class='awrnc'>1.87</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73304</td><td align="right" class='awrc'>73308</td><td align="right" class='awrc'>319,337</td><td align="right" class='awrc'>1.87</td></tr>
<tr><td class='awrnc'>USER112</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73851</td><td align="right" class='awrnc'>73856</td><td align="right" class='awrnc'>318,186</td><td align="right" class='awrnc'>1.86</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73550</td><td align="right" class='awrc'>73558</td><td align="right" class='awrc'>317,135</td><td align="right" class='awrc'>1.85</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	     2,683,877</li>
<li class="awr">Captured Segments account for	83.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73550</td><td align="right" class='awrc'>73558</td><td align="right" class='awrc'>49,412</td><td align="right" class='awrc'>1.84</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73304</td><td align="right" class='awrnc'>73308</td><td align="right" class='awrnc'>49,275</td><td align="right" class='awrnc'>1.84</td></tr>
<tr><td class='awrc'>USER68</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73631</td><td align="right" class='awrc'>73636</td><td align="right" class='awrc'>49,265</td><td align="right" class='awrc'>1.84</td></tr>
<tr><td class='awrnc'>USER101</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73792</td><td align="right" class='awrnc'>73796</td><td align="right" class='awrnc'>48,715</td><td align="right" class='awrnc'>1.82</td></tr>
<tr><td class='awrc'>USER34</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73448</td><td align="right" class='awrc'>73452</td><td align="right" class='awrc'>48,381</td><td align="right" class='awrc'>1.80</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	     2,570,778</li>
<li class="awr">Captured Segments account for	87.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73550</td><td align="right" class='awrc'>73558</td><td align="right" class='awrc'>49,237</td><td align="right" class='awrc'>1.92</td></tr>
<tr><td class='awrnc'>USER68</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73631</td><td align="right" class='awrnc'>73636</td><td align="right" class='awrnc'>49,121</td><td align="right" class='awrnc'>1.91</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73304</td><td align="right" class='awrc'>73308</td><td align="right" class='awrc'>49,098</td><td align="right" class='awrc'>1.91</td></tr>
<tr><td class='awrnc'>USER101</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73792</td><td align="right" class='awrnc'>73796</td><td align="right" class='awrnc'>48,575</td><td align="right" class='awrnc'>1.89</td></tr>
<tr><td class='awrc'>USER34</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73448</td><td align="right" class='awrc'>73452</td><td align="right" class='awrc'>48,256</td><td align="right" class='awrc'>1.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		  462</li>
<li class="awr">Captured Segments account for	48.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>219</td><td align="right" class='awrc'>47.40</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P270</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>74210</td><td align="right" class='awrnc'>74210</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1.08</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER68</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73631</td><td align="right" class='awrc'>73636</td><td align="right" class='awrc'>49,136</td><td align="right" class='awrc'>2.19</td></tr>
<tr><td class='awrnc'>USER34</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>48,752</td><td align="right" class='awrnc'>2.17</td></tr>
<tr><td class='awrc'>USER7</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73304</td><td align="right" class='awrc'>73308</td><td align="right" class='awrc'>48,512</td><td align="right" class='awrc'>2.16</td></tr>
<tr><td class='awrnc'>USER112</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73851</td><td align="right" class='awrnc'>73856</td><td align="right" class='awrnc'>48,496</td><td align="right" class='awrnc'>2.16</td></tr>
<tr><td class='awrc'>USER39</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73471</td><td align="right" class='awrc'>73470</td><td align="right" class='awrc'>48,336</td><td align="right" class='awrc'>2.15</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	    1,857</li>
<li class="awr">Captured Segments account for	85.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER79</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>73678</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>9.05</td></tr>
<tr><td class='awrnc'>USER38</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73468</td><td align="right" class='awrnc'>73473</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>8.89</td></tr>
<tr><td class='awrc'>USER105</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73815</td><td align="right" class='awrc'>73818</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>7.00</td></tr>
<tr><td class='awrnc'>USER42</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73488</td><td align="right" class='awrnc'>73492</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>5.33</td></tr>
<tr><td class='awrc'>USER15</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73340</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>5.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		 2,328</li>
<li class="awr">Captured Segments account for	63.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER20</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73377</td><td align="right" class='awrc'>73373</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>4.42</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73662</td><td align="right" class='awrnc'>73666</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>4.30</td></tr>
<tr><td class='awrc'>USER105</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73815</td><td align="right" class='awrc'>73818</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>4.25</td></tr>
<tr><td class='awrnc'>USER79</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>73678</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>4.25</td></tr>
<tr><td class='awrc'>USER22</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73387</td><td align="right" class='awrc'>73383</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>4.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	2,928,021</li>
<li class="awr">Captured Segments account for	96.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER56</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73569</td><td align="right" class='awrc'>73576</td><td align="right" class='awrc'>116,889</td><td align="right" class='awrc'>3.99</td></tr>
<tr><td class='awrnc'>USER46</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73508</td><td align="right" class='awrnc'>73513</td><td align="right" class='awrnc'>115,867</td><td align="right" class='awrnc'>3.96</td></tr>
<tr><td class='awrc'>USER69</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73624</td><td align="right" class='awrc'>73637</td><td align="right" class='awrc'>111,969</td><td align="right" class='awrc'>3.82</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73662</td><td align="right" class='awrnc'>73666</td><td align="right" class='awrnc'>110,877</td><td align="right" class='awrnc'>3.79</td></tr>
<tr><td class='awrc'>USER77</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73671</td><td align="right" class='awrc'>73674</td><td align="right" class='awrc'>110,472</td><td align="right" class='awrc'>3.77</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>1.96</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>1,631</td><td align="right" class='awrnc'>4.29</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>398</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,351</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>1,961</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>6,956</td></tr>
<tr><td scope="row" class='awrc'>dc_objects</td><td align="right" class='awrc'>2,196</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>3,783</td></tr>
<tr><td scope="row" class='awrnc'>dc_profiles</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>dc_props</td><td align="right" class='awrc'>563</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td></tr>
<tr><td scope="row" class='awrnc'>dc_rollback_segments</td><td align="right" class='awrnc'>135,768</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>230</td></tr>
<tr><td scope="row" class='awrc'>dc_segments</td><td align="right" class='awrc'>2,590</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1,192</td></tr>
<tr><td scope="row" class='awrnc'>dc_sequences</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>9.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>5</td></tr>
<tr><td scope="row" class='awrc'>dc_tablespaces</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>dc_users</td><td align="right" class='awrnc'>254</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>478</td></tr>
<tr><td scope="row" class='awrc'>outstanding_alerts</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>sch_lj_oids</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.94</td><td align="right" class='awrc'>342</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>997</td><td align="right" class='awrc'>4.81</td><td align="right" class='awrc'>226,910</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>3</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>87.50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>90.32</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>90.32</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>243</td><td align="right" class='awrnc'>5.35</td><td align="right" class='awrnc'>2,789</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>322</td><td align="right" class='awrc'>322</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>859</td><td align="right" class='awrnc'>2,412</td><td align="right" class='awrnc'>2,412</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>0</td><td class='awrc'>INI/</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>213.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.50</td><td align="right" class='awrc'>7.09</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>61</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1,073.65</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.92</td><td align="right" class='awrnc'>4.77</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>274</td><td align="right" class='awrnc'>274</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>35.29</td><td align="right" class='awrc'>34.39</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>208</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>9.77</td><td align="right" class='awrnc'>6.89</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>132</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1,332.21</td><td align="right" class='awrc'>41.28</td><td align="right" class='awrc'>7.66</td><td align="right" class='awrc'>12.30</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>684</td><td align="right" class='awrc'>675</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>140.19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.79</td><td align="right" class='awrnc'>6.58</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>731.58</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.48</td><td align="right" class='awrc'>5.26</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>210</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>4.85</td><td align="right" class='awrnc'>4.38</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>143</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>28</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>879.35</td><td align="right" class='awrnc'>6.10</td><td align="right" class='awrnc'>7.34</td><td align="right" class='awrnc'>12.12</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>475</td><td align="right" class='awrnc'>418</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>8,388,608,000</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>12,445,928</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>21,106,688</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>1,711,276,032</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KCRAHT Free Blocks</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17.50</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KGLH0</td><td align="right" class='awrc'>48.88</td><td align="right" class='awrc'>50.23</td><td align="right" class='awrc'>2.77</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLS</td><td align="right" class='awrnc'>20.28</td><td align="right" class='awrnc'>20.40</td><td align="right" class='awrnc'>0.58</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>45.68</td><td align="right" class='awrc'>20.54</td><td align="right" class='awrc'>-55.04</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SO private sga</td><td align="right" class='awrnc'>31.66</td><td align="right" class='awrnc'>31.66</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SQLA</td><td align="right" class='awrc'>83.63</td><td align="right" class='awrc'>84.27</td><td align="right" class='awrc'>0.76</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>db_block_hash_buckets</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>dbwriter coalesce buffer</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>128.99</td><td align="right" class='awrnc'>150.91</td><td align="right" class='awrnc'>16.99</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gc name table</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resources</td><td align="right" class='awrnc'>266.69</td><td align="right" class='awrnc'>266.69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resv res hash bucket</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs shadows</td><td align="right" class='awrnc'>145.46</td><td align="right" class='awrnc'>145.46</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges big msg buffers</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ksunfy_meta 1</td><td align="right" class='awrnc'>25.23</td><td align="right" class='awrnc'>25.23</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>object queue hash buckets</td><td align="right" class='awrc'>16.00</td><td align="right" class='awrc'>16.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>row cache</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>3,300</td><td align="right" class='awrc'>4,026</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>630</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>630</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P60S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p60sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>137438953472</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>3371171840</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>640</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>10133438464</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>UNDOTBS1</td><td class='awrc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>2501</td><td align="right" class='awrc'>60.79</td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>48.32</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>47.69</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2501</div></td><td align="right" class='awrnc'><div class="hidden">60.78762986228557622614158009180961584924</div></td>
<td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>5.77</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>5.77</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">2501</div></td><td align="right" class='awrc'><div class="hidden">60.78762986228557622614158009180961584924</div></td>
<td class='awrc'>buffer busy waits</td><td align="right" class='awrc'>1.11</td><td class='awrc'>UPDATE STATEMENT</td><td align="right" class='awrc'>1.11</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>1304</td><td align="right" class='awrnc'>31.51</td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>13.75</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>13.75</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">1304</div></td><td align="right" class='awrc'><div class="hidden">31.50519449142304904566320367238463396956</div></td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>11.28</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>7.03</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">1304</div></td><td align="right" class='awrnc'><div class="hidden">31.50519449142304904566320367238463396956</div></td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>3.14</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>3.14</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>2501</td><td align="right" class='awrc'>60.79</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>57.14</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>47.69</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2501</div></td><td align="right" class='awrnc'><div class="hidden">60.78762986228557622614158009180961584924</div></td>
<td class='awrnc'>UPDATE STATEMENT</td><td align="right" class='awrnc'>2.75</td><td class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1.11</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>1304</td><td align="right" class='awrc'>31.51</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>25.63</td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>13.75</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">1304</div></td><td align="right" class='awrnc'><div class="hidden">31.50519449142304904566320367238463396956</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>5.82</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>4.25</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>
<ul>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the session	was found waiting for that particular event. The percentage shown	in this column is calculated with respect to wall clock time	   and not total database activity. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the session was waiting for that particular event</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top session by wait event"><tr><th class="awrbg" scope="col">Sid, Serial#</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>4,59023</td><td align="right" class='awrc'>1.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.99</td>
<td class='awrc'>USER101</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>41/63 [ 65%]</td><td align="right" class='awrc'>35</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,50450</td><td align="right" class='awrnc'>1.40</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.75</td>
<td class='awrnc'>USER42</td><td class='awrnc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrnc'>31/63 [ 49%]</td><td align="right" class='awrnc'>26</td></tr>
<tr><td align="right" scope="row" class='awrc'>37,32584</td><td align="right" class='awrc'>1.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.65</td>
<td class='awrc'>USER46</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>27/63 [ 43%]</td><td align="right" class='awrc'>22</td></tr>
<tr><td align="right" scope="row" class='awrnc'>39,47546</td><td align="right" class='awrnc'>1.40</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.77</td>
<td class='awrnc'>USER105</td><td class='awrnc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrnc'>32/63 [ 50%]</td><td align="right" class='awrnc'>25</td></tr>
<tr><td align="right" scope="row" class='awrc'>69,43897</td><td align="right" class='awrc'>1.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.65</td>
<td class='awrc'>USER103</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>27/63 [ 43%]</td><td align="right" class='awrc'>24</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>60.93</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>60.91</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>59.60</td><td align="right" class='awrc'>38.91</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>13.75</td><td align="right" class='awrnc'>8.97</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>5.77</td><td align="right" class='awrc'>3.77</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>3.14</td><td align="right" class='awrnc'>2.05</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td class='awrc'>System I/O</td><td class='awrc'>BACKGROUND</td>
<td align="right" class='awrc'>2.88</td><td align="right" class='awrc'>1.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>59.60</td><td align="right" class='awrc'>&quot;9&quot;,&quot;17034766&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.02</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>13.75</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;77&quot;,&quot;77&quot;</td><td align="right" class='awrnc'>13.48</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>3.14</td><td align="right" class='awrc'>&quot;9&quot;,&quot;124881322&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.05</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>2.88</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrnc'>1.01</td>
<td class='awrnc'>requests</td><td class='awrnc'>interrupt</td><td class='awrnc'>timeout</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>&quot;1&quot;,&quot;8&quot;,&quot;2&quot;</td><td align="right" class='awrc'>0.05</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>
<ul>
<li class="awr"> Top DB Objects by DB Time with respect to Application, Cluster,     User I/O,	buffer busy waits and In-Memory DB events only. </li>
<li class="awr"> Tablespace name is not available for reports generated from the root PDB     of a consolidated database. </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available.</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the Top DB Objects"><tr><th class="awrbg" scope="col">Object ID</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Object Name (Type)</th><th class="awrbg" scope="col">Tablespace</th></tr>
<tr><td align="right" scope="row" class='awrc'>73801</td><td align="right" class='awrc'>1.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.65</td>
<td class='awrc'>USER103.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73619</td><td align="right" class='awrnc'>1.38</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.97</td>
<td class='awrnc'>USER67.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73350</td><td align="right" class='awrc'>1.35</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.72</td>
<td class='awrc'>USER17.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73387</td><td align="right" class='awrnc'>1.35</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.75</td>
<td class='awrnc'>USER22.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73662</td><td align="right" class='awrc'>1.35</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.68</td>
<td class='awrc'>USER74.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>10:14:13   (47 secs)</td><td align="right" class='awrc'>358</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>228</td><td align="right" class='awrc'>5.51</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">10:14:13   (47 secs)</div></td><td align="right" class='awrnc'><div class="hidden">358</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>0.75</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">10:14:13   (47 secs)</div></td><td align="right" class='awrc'><div class="hidden">358</div></td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.34</td></tr>
<tr><td align="right" class='awrnc'>10:15:00   (5.0 min)</td><td align="right" class='awrnc'>2,151</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1,126</td><td align="right" class='awrnc'>27.20</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">10:15:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">2151</div></td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>274</td><td align="right" class='awrc'>6.62</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">10:15:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">2151</div></td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>5.22</td></tr>
<tr><td align="right" class='awrc'>10:20:00   (4.8 min)</td><td align="right" class='awrc'>1,630</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,113</td><td align="right" class='awrc'>26.89</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">10:20:00   (4.8 min)</div></td><td align="right" class='awrnc'><div class="hidden">1630</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>264</td><td align="right" class='awrnc'>6.38</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">10:20:00   (4.8 min)</div></td><td align="right" class='awrc'><div class="hidden">1630</div></td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>1.47</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:3889879926_1_52</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_1_52&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 51 to 52.
Time period starts at 12-FEB-20 10.14.13 AM
Time period ends at 12-FEB-20 10.24.48 AM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb1, numbered 1 and hosted at
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 37398 seconds.
The average number of active sessions was 58.89.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       58.89 | 100	   1
2  Top SQL Statements	      58.77 | 99.79	   2
3  &quot;User I/O&quot; wait Class	46.66 | 79.22	     0
4  Global Cache Messaging     8.12 | 13.79	   1
5  Buffer Busy - Hot Objects  5.69 | 9.67	   6
6  Undersized SGA	      .68 | 1.16	   1
7  Global Cache Lost Blocks   .6 | 1.01 	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 58.99 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 34635 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 5668 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.22.248 and source &quot;&gt;4?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 58.89 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 8.12 active sessions, 13.79% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 8.59 active sessions, 14.59% of total activity.


Finding 2: Top SQL Statements
Impact is 58.86 active sessions, 99.79% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 36.86 active sessions, 62.59% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 95% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 32223 times and
      had an average elapsed time of 0.74 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 20.06 active sessions, 34.06% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 182935 times and
      had an average elapsed time of 0.071 seconds.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 46.73 active sessions, 79.22% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 8.13 active sessions, 13.79% of total activity.
---------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 8.12 active sessions, 13.79% of total activity.
   --------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 68% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 8.59 active sessions, 14.59% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 5.7 active sessions, 9.67% of total activity.
-------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   Recommendation 1: Schema Changes
   Estimated benefit is .24 active sessions, .41% of total activity.
   -----------------------------------------------------------------
   Action
      Consider rebuilding the TABLE &quot;USER107.CF1&quot; with object ID 73825 using a
      higher value for PCTFREE.
      Related Object
	 Database object with ID 73825.

   Recommendation 2: Schema Changes
   Estimated benefit is .24 active sessions, .41% of total activity.
   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE &quot;USER107.CF1&quot; with object ID 73825 in a
      manner that will evenly distribute concurrent DML across multiple
      partitions.
      Related Object
	 Database object with ID 73825.

   Recommendation 3: Schema Changes
   Estimated benefit is .21 active sessions, .36% of total activity.
   -----------------------------------------------------------------
   Action
      Consider rebuilding the TABLE &quot;USER30.CF1&quot; with object ID 73427 using a
      higher value for PCTFREE.
      Related Object
	 Database object with ID 73427.

   Recommendation 4: Schema Changes
   Estimated benefit is .21 active sessions, .36% of total activity.
   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE &quot;USER30.CF1&quot; with object ID 73427 in a
      manner that will evenly distribute concurrent DML across multiple
      partitions.
      Related Object
	 Database object with ID 73427.

   Recommendation 5: Schema Changes
   Estimated benefit is .21 active sessions, .36% of total activity.
   -----------------------------------------------------------------
   Action
      Consider rebuilding the TABLE &quot;USER93.CF1&quot; with object ID 73751 using a
      higher value for PCTFREE.
      Related Object
	 Database object with ID 73751.

   Recommendation 6: Schema Changes
   Estimated benefit is .21 active sessions, .36% of total activity.
   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE &quot;USER93.CF1&quot; with object ID 73751 in a
      manner that will evenly distribute concurrent DML across multiple
      partitions.
      Related Object
	 Database object with ID 73751.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 5.69 active sessions, 9.67% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 8.12 active sessions, 13.79% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 8.59 active sessions, 14.59% of total activity.


Finding 6: Undersized SGA
Impact is .68 active sessions, 1.16% of total activity.
-------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter &quot;sga_target&quot; was &quot;9664 M&quot; during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is .27 active sessions, .45% of total activity.
   -----------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter &quot;sga_target&quot; to
      12080 M.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;User I/O&quot; was consuming significant database time.
      Impact is 46.66 active sessions, 79.22% of total activity.


Finding 7: Global Cache Lost Blocks
Impact is .6 active sessions, 1.01% of total activity.
------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 34635 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 5668 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.22.248 and source &quot;&gt;4?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is .6 active sessions, 1.01% of total activity.
   -----------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 8.12 active sessions, 13.79% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 8.59 active sessions, 14.59% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 3</td><td align="right" class='awrc'>	  3</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    3</td><td align="right" class='awrnc'>    3</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		     6.60</td><td align="right" class='awrnc'>		       0.13</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		14.38</td><td align="right" class='awrc'>		  0.28</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     19,003.55</td><td align="right" class='awrnc'>		  369.07</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       16,932.83</td><td align="right" class='awrc'>		   328.86</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.25</td><td align="right" class='awrnc'>		     0.00</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>		7,186.63</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	 6.13</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.02</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	93.84</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  83.02</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	    7,119.0</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	       3,307.6</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  29.6</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	  103.2</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    2.2</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'>        24,945.1</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>		 0.0</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       0.5</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	      21,538.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       2,158.1</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	   430.4</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	       4,885.1</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	      154.8</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      64.5</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     24.8</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   38.4</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   14.39</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   85.08</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 0.54</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>148,151</td><td align="right" class='awrnc'>233.49</td><td align="right" class='awrnc'>4.53</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>7,140</td><td align="right" class='awrnc'>11.25</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>17,140</td><td align="right" class='awrc'>27.01</td><td align="right" class='awrc'>0.52</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>15,498</td><td align="right" class='awrnc'>24.43</td><td align="right" class='awrnc'>0.47</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>26,591</td><td align="right" class='awrc'>41.91</td><td align="right" class='awrc'>0.81</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>9,785</td><td align="right" class='awrnc'>15.42</td><td align="right" class='awrnc'>0.30</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>4,092</td><td align="right" class='awrnc'>6.45</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>33,521</td><td align="right" class='awrc'>52.83</td><td align="right" class='awrc'>1.03</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>106,653</td><td align="right" class='awrnc'>168.09</td><td align="right" class='awrnc'>3.26</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>4,851</td><td align="right" class='awrc'>7.65</td><td align="right" class='awrc'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>2,404</td><td align="right" class='awrnc'>3.79</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>466,636</td><td align="right" class='awrnc'>735.43</td><td align="right" class='awrnc'>14.28</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>158</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>33,583</td><td align="right" class='awrnc'>52.93</td><td align="right" class='awrnc'>1.03</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>3,805</td><td align="right" class='awrnc'>6.00</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>591,380</td><td align="right" class='awrc'>932.02</td><td align="right" class='awrc'>18.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>19,317</td><td align="right" class='awrnc'>30.44</td><td align="right" class='awrnc'>0.59</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>3,485,103</td><td align="right" class='awrc'>5,492.57</td><td align="right" class='awrc'>106.67</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>297,731</td><td align="right" class='awrnc'>469.23</td><td align="right" class='awrnc'>9.11</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>11,989,555</td><td align="right" class='awrc'>18,895.71</td><td align="right" class='awrc'>366.98</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>356</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>2,032</td><td align="right" class='awrnc'>3.20</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>1,639</td><td align="right" class='awrnc'>2.58</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>57,297</td><td align="right" class='awrc'>90.30</td><td align="right" class='awrc'>1.75</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>381</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>16,446</td><td align="right" class='awrc'>25.92</td><td align="right" class='awrc'>0.50</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>-24</td><td align="right" class='awrnc'>-0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>170,507</td><td align="right" class='awrnc'>268.72</td><td align="right" class='awrnc'>5.22</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>155,939</td><td align="right" class='awrc'>245.76</td><td align="right" class='awrc'>4.77</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>23,721</td><td align="right" class='awrnc'>37.38</td><td align="right" class='awrnc'>0.73</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>1,273,885</td><td align="right" class='awrc'>2,007.66</td><td align="right" class='awrc'>38.99</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>1,116,435</td><td align="right" class='awrnc'>1,759.52</td><td align="right" class='awrnc'>34.17</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>2,400,381</td><td align="right" class='awrc'>3,783.03</td><td align="right" class='awrc'>73.47</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>12,006,001</td><td align="right" class='awrnc'>18,921.63</td><td align="right" class='awrnc'>367.48</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>636,838</td><td align="right" class='awrc'>1,003.67</td><td align="right" class='awrc'>19.49</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>3,765,435</td><td align="right" class='awrnc'>5,934.38</td><td align="right" class='awrnc'>115.25</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>125,555</td><td align="right" class='awrc'>197.88</td><td align="right" class='awrc'>3.84</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>9,377,070</td><td align="right" class='awrnc'>14,778.40</td><td align="right" class='awrnc'>287.02</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>1,859,111,728,028</td><td align="right" class='awrc'>2,929,986,711.09</td><td align="right" class='awrc'>56,904,035.02</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>773,858</td><td align="right" class='awrnc'>1,219.61</td><td align="right" class='awrnc'>23.69</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>12,006,001</td><td align="right" class='awrc'>18,921.63</td><td align="right" class='awrc'>367.48</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>721,063</td><td align="right" class='awrnc'>1,136.41</td><td align="right" class='awrnc'>22.07</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>10,544,470</td><td align="right" class='awrc'>16,618.24</td><td align="right" class='awrc'>322.75</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>1,675,163</td><td align="right" class='awrnc'>2,640.08</td><td align="right" class='awrnc'>51.27</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>2,158,479</td><td align="right" class='awrc'>3,401.79</td><td align="right" class='awrc'>66.07</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>1,164,002</td><td align="right" class='awrc'>1,834.48</td><td align="right" class='awrc'>35.63</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>1,233,867</td><td align="right" class='awrnc'>1,944.59</td><td align="right" class='awrnc'>37.77</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>774,447</td><td align="right" class='awrc'>1,220.54</td><td align="right" class='awrc'>23.70</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>2,066,207</td><td align="right" class='awrnc'>3,256.37</td><td align="right" class='awrnc'>63.24</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>2,779</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>1,277</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>2,779</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>1,158</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>4,036</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>20</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>2,736</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>1,939</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>91</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>2,780</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>26.92</td><td align="right" class='awrnc'>73.08</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>1,823</td><td align="right" headers="CR %|Immed" class='awrc'>94.68</td><td align="right" headers="CR %|Busy" class='awrc'>1.48</td><td align="right" headers="CR %|Congst" class='awrc'>3.84</td><td align="right" headers="Current Blocks|Received" class='awrclb'>2,236</td><td align="right" headers="Current %|Immed" class='awrc'>30.59</td><td align="right" headers="Current %|Busy" class='awrc'>68.96</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.45</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>30</td><td align="right" headers="CR %|Immed" class='awrnc'>100.00</td><td align="right" headers="CR %|Busy" class='awrnc'>0.00</td><td align="right" headers="CR %|Congst" class='awrnc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>99</td><td align="right" headers="Current %|Immed" class='awrnc'>75.76</td><td align="right" headers="Current %|Busy" class='awrnc'>24.24</td><td align="right" headers="Current %|Congst" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrclb'>4</td><td align="right" headers="CR %|Immed" class='awrc'>100.00</td><td align="right" headers="CR %|Busy" class='awrc'>0.00</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>19</td><td align="right" headers="Current %|Immed" class='awrc'>5.26</td><td align="right" headers="Current %|Busy" class='awrc'>94.74</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>7284</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>6811</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>42865</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>5214</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>2053</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>2284</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1938</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>4080</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>1250</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>1250</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>31393</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>40949</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1531</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>3131</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>3131</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>7403</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>14564</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>7005</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>1,726</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>684</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>others</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>30</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>75</td><td align="right" headers="Current %|2hop" class='awrnc'>100.00</td><td align="right" headers="Current %|3hop" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>4</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>1</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="CR %|2hop" class='awrnc'>&#160;</td><td align="right" headers="CR %|3hop" class='awrnc'>&#160;</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>6811</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>6811</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>2284</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>2284</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>others</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>1250</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>1250</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>40949</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>40949</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>3131</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>3131</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>14564</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>14564</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>1036</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>993</td><td align="right" class='awrc'>0.98</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>53864</td><td align="right" class='awrnc'>392.30</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>50704</td><td align="right" class='awrnc'>379.62</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>4.10</td><td align="right" class='awrc'>4.92</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.22.248</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>remaster ops</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remastered objects</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>41.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replayed locks received</td><td align="right" class='awrc'>34,875</td><td align="right" class='awrc'>34,875.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>replayed locks sent</td><td align="right" class='awrnc'>2,619</td><td align="right" class='awrnc'>2,619.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resources cleaned</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remaster time (s)</td><td align="right" class='awrnc'>1.5</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>freeze time (s)</td><td align="right" class='awrc'>0.1</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cleanup time (s)</td><td align="right" class='awrnc'>0.1</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replay time (s)</td><td align="right" class='awrc'>0.5</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fixwrite time (s)</td><td align="right" class='awrnc'>0.1</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sync time (s)</td><td align="right" class='awrc'>0.7</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>87</td><td align="right" class='awrnc'>114</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects (other inst)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>41</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects (persistent)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 51

End   Snapshot Id specified: 52



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_51_52.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.txt

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 3889879926 P60SDB    p60sdb	  PRIMARY	   EE	   YES NO	 8192	      51       52	    2	     2		 2	  2	 1,205.54	 10.58
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p60sdb1   mcracpoc1. 12-Feb-20 09:46 12-Feb-20 10:14 12-Feb-20 10:24 19.0.0.0.0		      10.57	  623.30	 0.64	   58.99 Linux x86 64-bi
   2 p60sdb2   mcracpoc2. 12-Feb-20 09:46 12-Feb-20 10:14 12-Feb-20 10:24 19.0.0.0.0		      10.57	  582.24	 0.64	   55.10 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  114.09 1.E+02 ADDM:3889879926_52	       12-Feb-20 10:14 12-Feb-20 10:24
Top SQL Statements			  114.09  99.80 ADDM:3889879926_52	       12-Feb-20 10:14 12-Feb-20 10:24
"User I/O" wait Class			  114.09  67.45 ADDM:3889879926_52	       12-Feb-20 10:14 12-Feb-20 10:24
Global Cache Messaging			  114.09  27.35 ADDM:3889879926_52	       12-Feb-20 10:14 12-Feb-20 10:24
Buffer Busy - Hot Objects		  114.09  17.77 ADDM:3889879926_52	       12-Feb-20 10:14 12-Feb-20 10:24
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
   2			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 Min			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 Max			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4

OS Statistics By Instance		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  32	16     1     21.6   19.4     28.1    7.4   12.4   37.0	 71.9	       5,247.8	     13,432.4	    18,680.2	257,947.8
   2	  32	16     1     16.5   12.5     18.6    5.4    8.7   31.7	 81.4	       3,472.2	     15,214.3	    18,686.5	257,947.8
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										       8,720.0	     28,646.7	    37,366.7
			  --------------------------------------------------------------------------------------------------------------------


Time Model				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	   37,398.3	   2,504.7	 37,396.2	     1.2	    1.1 	  14.3		  0.0	     3,169.0	    1,392.0
   2	   34,934.4	   1,614.9	 34,931.3	    14.3	   14.2 	  10.5		  0.0	     3,462.2	      958.4
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	   72,332.7	   4,119.6	 72,327.6	    15.5	   15.3 	  24.8		  0.0	     6,631.2	    2,350.4
 Avg	   36,166.3	   2,059.8	 36,163.8	     7.8	    7.7 	  12.4		  0.0	     3,315.6	    1,175.2
 Std	    1,742.2	     629.2	  1,742.9	     9.3	    9.3 	   2.6		  0.0	       207.4	      306.6
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       51.7		 6.7	      100.0	       0.0	      0.0	     0.0	    0.0 	    47.8	     43.9
   2	       48.3		 4.6	      100.0	       0.0	      0.0	     0.0	    0.0 	    52.2	     27.7
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 5.7	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.0	     35.8
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P60SDB/p60sdb1  Snaps: 5
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      67.5	     0.0	   0.8		 0.0	       0.0	     0.0	   1.0		 0.7	      28.0	     0.0	   N/A		 5.7
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	  29,626.5	     9.6	 450.5		 0.0	       0.8	     0.0	 564.2	       355.8	   5,455.1	     0.0	   N/A	     2,504.7	   37,398.3
   2	  19,162.4	     0.3	 104.7		 0.0	       1.0	     0.0	 123.5	       131.1	  14,815.2	     0.0	   N/A	     1,614.9	   34,934.4
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  48,789.0	     9.9	 555.3		 0.0	       1.8	     0.0	 687.7	       486.9	  20,270.3	     0.0	   0.0	     4,119.6	   72,332.7
 Avg	  24,394.5	     4.9	 277.6		 0.0	       0.9	     0.0	 343.9	       243.4	  10,135.1	     0.0	   N/A	     2,059.8	   36,166.3
 Std	   7,399.2	     6.6	 244.5		 0.0	       0.1	     0.0	 311.6	       158.9	   6,618.6	     0.0	   N/A	       629.2	    1,742.2
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time  DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		79.2	       0.0	     1.2	   0.0		 0.0	       0.0	     1.5	   1.0		14.6	       0.0	     N/A	   6.7		  51.7
   2		54.9	       0.0	     0.3	   0.0		 0.0	       0.0	     0.4	   0.4		42.4	       0.0	     N/A	   4.6		  48.3
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		67.0	       0.0	     0.8	   0.0		 0.0	       0.0	     0.9	   0.7		28.5	       0.0	     N/A	   5.7
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   User I/O   db file sequential read			6,064,162	0.0	  38,818.00   6.40ms	53.67	    6.37ms     5.15ms	  7.59ms     1.73ms    2
       User I/O   db file parallel read 			  362,826	0.0	   9,976.57  27.50ms	13.79	   27.40ms    21.85ms	 32.95ms     7.85ms    2
       Cluster	  gc current grant busy 			  949,745	0.0	   9,296.29   9.79ms	12.85	    9.13ms     5.66ms	 12.60ms     4.91ms    2
       Cluster	  gc cr multi block grant			  142,670	0.0	   5,575.21  39.08ms	 7.71	   36.18ms    20.21ms	 52.16ms    22.59ms    2
		  DB CPU					      N/A	N/A	   4,119.63		 5.70						       2
       Cluster	  gc cr grant busy				  277,329	0.0	   2,872.19  10.36ms	 3.97	   10.38ms     6.31ms	 14.44ms     5.75ms    2
       System I/O db file parallel write			  370,090	0.0	   1,933.63   5.22ms	 2.67	    5.25ms     4.77ms	  5.74ms   682.81us    2
       System I/O log file parallel write			   52,962	0.0	   1,298.58  24.52ms	 1.80	   24.51ms    23.61ms	 25.42ms     1.28ms    2
       Cluster	  gc current grant 2-way			  134,107	0.0	   1,283.72   9.57ms	 1.77	    9.65ms     6.03ms	 13.27ms     5.12ms    2
       Concurrenc buffer busy waits				    1,238	0.0	     689.33 556.81ms	 0.95	  650.15ms   524.27ms	776.03ms   178.02ms    2

   1   User I/O   db file sequential read			3,100,329	0.0	  23,543.29   7.59ms	62.95
       User I/O   db file parallel read 			  184,668	0.0	   6,084.25  32.95ms	16.27
		  DB CPU					      N/A	N/A	   2,504.75		 6.70
       Cluster	  gc current grant busy 			  384,351	0.0	   2,173.79   5.66ms	 5.81
       Cluster	  gc cr multi block grant			   58,413	0.0	   1,180.40  20.21ms	 3.16
       System I/O db file parallel write			  195,867	0.0	     934.32   4.77ms	 2.50
       Cluster	  gc cr grant busy				  139,322	0.0	     879.27   6.31ms	 2.35
       System I/O log file parallel write			   26,647	0.0	     677.27  25.42ms	 1.81
       Concurrenc buffer busy waits				    1,078	0.0	     565.17 524.27ms	 1.51
       Cluster	  gc current grant 2-way			   68,563	0.0	     413.74   6.03ms	 1.11

   2   User I/O   db file sequential read			2,963,833	0.0	  15,274.71   5.15ms	43.72
       Cluster	  gc current grant busy 			  565,394	0.0	   7,122.50  12.60ms	20.39
       Cluster	  gc cr multi block grant			   84,257	0.0	   4,394.81  52.16ms	12.58
       User I/O   db file parallel read 			  178,158	0.0	   3,892.32  21.85ms	11.14
       Cluster	  gc cr grant busy				  138,007	0.0	   1,992.92  14.44ms	 5.70
		  DB CPU					      N/A	N/A	   1,614.88		 4.62
       System I/O db file parallel write			  174,223	0.0	     999.31   5.74ms	 2.86
       Cluster	  gc current grant 2-way			   65,544	0.0	     869.98  13.27ms	 2.49
       System I/O log file parallel write			   26,315	0.0	     621.31  23.61ms	 1.78
       Cluster	  gc current grant read-mostly invalidatio	   47,289	0.0	     186.03   3.93ms	 0.53
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   User I/O   db file sequential read			6,061,612	0.0	  38,805.15   6.40ms	53.65	    6.37ms     5.15ms	  7.59ms     1.73ms    2
       User I/O   db file parallel read 			  362,826	0.0	   9,976.57  27.50ms	13.79	   27.40ms    21.85ms	 32.95ms     7.85ms    2
       Cluster	  gc current grant busy 			  949,302	0.0	   9,292.21   9.79ms	12.85	    9.13ms     5.66ms	 12.60ms     4.91ms    2
       Cluster	  gc cr multi block grant			  142,640	0.0	   5,575.12  39.09ms	 7.71	   36.19ms    20.22ms	 52.16ms    22.59ms    2
		  DB CPU					      N/A	N/A	   4,119.63		 5.70						       2
       Cluster	  gc cr grant busy				  276,706	0.0	   2,866.20  10.36ms	 3.96	   10.38ms     6.31ms	 14.45ms     5.76ms    2
       Cluster	  gc current grant 2-way			  133,999	0.0	   1,282.52   9.57ms	 1.77	    9.65ms     6.04ms	 13.27ms     5.11ms    2
       Concurrenc buffer busy waits				    1,233	0.0	     686.61 556.86ms	 0.95	  648.76ms   524.92ms	772.60ms   175.13ms    2
       Cluster	  gc current grant read-mostly invalidatio	  114,054	0.0	     482.98   4.23ms	 0.67	    4.19ms     3.93ms	  4.45ms   363.33us    2
       Configurat enq: HW - contention				      361	0.0	     379.87 1052.27m	 0.53	 1436.02ms   924.83ms  1947.22ms   722.94ms    2

   1   User I/O   db file sequential read			3,099,030	0.0	  23,536.01   7.59ms	62.93
       User I/O   db file parallel read 			  184,668	0.0	   6,084.25  32.95ms	16.27
		  DB CPU					      N/A	N/A	   2,504.75		 6.70
       Cluster	  gc current grant busy 			  384,078	0.0	   2,172.15   5.66ms	 5.81
       Cluster	  gc cr multi block grant			   58,389	0.0	   1,180.35  20.22ms	 3.16
       Cluster	  gc cr grant busy				  139,096	0.0	     877.70   6.31ms	 2.35
       Concurrenc buffer busy waits				    1,074	0.0	     563.77 524.92ms	 1.51
       Cluster	  gc current grant 2-way			   68,513	0.0	     413.64   6.04ms	 1.11
       Cluster	  gc current grant read-mostly invalidatio	   66,765	0.0	     296.95   4.45ms	 0.79
       Configurat enq: HW - contention				      316	0.0	     292.25 924.83ms	 0.78

   2   User I/O   db file sequential read			2,962,582	0.0	  15,269.14   5.15ms	43.71
       Cluster	  gc current grant busy 			  565,224	0.0	   7,120.06  12.60ms	20.38
       Cluster	  gc cr multi block grant			   84,251	0.0	   4,394.77  52.16ms	12.58
       User I/O   db file parallel read 			  178,158	0.0	   3,892.32  21.85ms	11.14
       Cluster	  gc cr grant busy				  137,610	0.0	   1,988.51  14.45ms	 5.69
		  DB CPU					      N/A	N/A	   1,614.88		 4.62
       Cluster	  gc current grant 2-way			   65,486	0.0	     868.89  13.27ms	 2.49
       Cluster	  gc current grant read-mostly invalidatio	   47,289	0.0	     186.03   3.93ms	 0.53
       Concurrenc buffer busy waits				      159	0.0	     122.84 772.60ms	 0.35
       Configurat enq: HW - contention				       45	0.0	      87.62 1947.22m	 0.25
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   2,350.37		35.44						       2
       System I/O db file parallel write			  370,050	0.0	   1,933.01   5.22ms	29.15	    5.25ms     4.77ms	  5.74ms   685.35us    2
       System I/O log file parallel write			   52,959	0.0	   1,298.45  24.52ms	19.58	   24.51ms    23.61ms	 25.41ms     1.28ms    2
       Other	  LGWR any worker group 			   20,967	0.0	     353.11  16.84ms	 5.33	   16.96ms    15.81ms	 18.11ms     1.63ms    2
       Other	  LGWR worker group ordering			   11,797	0.0	     104.26   8.84ms	 1.57	    8.98ms     7.88ms	 10.08ms     1.55ms    2
       User I/O   Disk file Mirror Read 			    1,681	0.0	      41.70  24.81ms	 0.63	   24.82ms    10.27ms	 39.36ms    20.57ms    2
       System I/O control file sequential read			    7,843	0.0	      34.70   4.42ms	 0.52	    4.44ms     3.63ms	  5.25ms     1.15ms    2
       Other	  IMR slave acknowledgement msg 		    3,780	0.0	      32.87   8.70ms	 0.50	    8.71ms     3.90ms	 13.53ms     6.81ms    2
       Other	  LGWR all worker groups			      631	0.0	      23.18  36.74ms	 0.35	   35.30ms    30.85ms	 39.75ms     6.29ms    2
       System I/O control file parallel write			      614	0.0	      21.89  35.65ms	 0.33	   35.23ms    28.07ms	 42.40ms    10.13ms    2

   1		  background cpu time				      N/A	N/A	   1,392.01		43.93
       System I/O db file parallel write			  195,859	0.0	     933.74   4.77ms	29.47
       System I/O log file parallel write			   26,644	0.0	     677.15  25.41ms	21.37
       Other	  LGWR any worker group 			   11,533	0.0	     182.29  15.81ms	 5.75
       Other	  LGWR worker group ordering			    6,647	0.0	      52.37   7.88ms	 1.65
       System I/O control file sequential read			    3,841	0.0	      20.18   5.25ms	 0.64
       Other	  DLM cross inst call completion		    1,447	0.0	      18.03  12.46ms	 0.57
       Other	  LGWR all worker groups			      418	0.0	      16.61  39.75ms	 0.52
       User I/O   Disk file Mirror Read 			      841	0.0	       8.63  10.27ms	 0.27
       System I/O control file parallel write			      289	0.0	       8.11  28.07ms	 0.26

   2   System I/O db file parallel write			  174,191	0.0	     999.27   5.74ms	28.86
		  background cpu time				      N/A	N/A	     958.36		27.68
       System I/O log file parallel write			   26,315	0.0	     621.30  23.61ms	17.95
       Other	  LGWR any worker group 			    9,434	0.0	     170.82  18.11ms	 4.93
       Other	  LGWR worker group ordering			    5,150	0.0	      51.90  10.08ms	 1.50
       User I/O   Disk file Mirror Read 			      840	0.0	      33.07  39.36ms	 0.96
       Other	  IMR slave acknowledgement msg 		    1,884	0.0	      25.49  13.53ms	 0.74
       System I/O control file sequential read			    4,002	0.0	      14.52   3.63ms	 0.42
       System I/O control file parallel write			      325	0.0	      13.78  42.40ms	 0.40
       Other	  enq: CR - block range reuse ckpt		    1,896	0.0	      11.50   6.07ms	 0.33
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
User I/O   db file sequential read			 6,061,612	 0.0	   38,805.15   6.40ms	 53.65	     6.37ms	5.15ms	   7.59ms     1.73ms
User I/O   db file parallel read			   362,826	 0.0	    9,976.57  27.50ms	 13.79	    27.40ms    21.85ms	  32.95ms     7.85ms
Cluster    gc current grant busy			   949,302	 0.0	    9,292.21   9.79ms	 12.85	     9.13ms	5.66ms	  12.60ms     4.91ms
Cluster    gc cr multi block grant			   142,640	 0.0	    5,575.12  39.09ms	  7.71	    36.19ms    20.22ms	  52.16ms    22.59ms
Cluster    gc cr grant busy				   276,706	 0.0	    2,866.20  10.36ms	  3.96	    10.38ms	6.31ms	  14.45ms     5.76ms
Cluster    gc current grant 2-way			   133,999	 0.0	    1,282.52   9.57ms	  1.77	     9.65ms	6.04ms	  13.27ms     5.11ms
Concurrenc buffer busy waits				     1,233	 0.0	      686.61 556.86ms	  0.95	   648.76ms   524.92ms	 772.60ms   175.13ms
Cluster    gc current grant read-mostly invalidatio	   114,054	 0.0	      482.98   4.23ms	  0.67	     4.19ms	3.93ms	   4.45ms   363.33us
Configurat enq: HW - contention 			       361	 0.0	      379.87 1052.27m	  0.53	  1436.02ms   924.83ms	1947.22ms   722.94ms
Cluster    gc current block lost			       507	 0.0	      269.16 530.89ms	  0.37	   531.49ms   530.59ms	 532.39ms     1.27ms
Other	   enq: CR - block range reuse ckpt		     3,700	 0.0	      220.42  59.57ms	  0.30	    58.85ms    56.53ms	  61.17ms     3.28ms
Cluster    gc cr block lost				       308	 0.0	      166.30 539.93ms	  0.23	   529.62ms   517.50ms	 541.74ms    17.14ms
Other	   enq: US - contention 			     2,666	 0.0	      131.07  49.16ms	  0.18	    67.12ms    48.66ms	  85.57ms    26.10ms
Cluster    gc cr grant 2-way				    23,926	 0.0	      122.42   5.12ms	  0.17	     7.33ms	2.96ms	  11.71ms     6.19ms
Other	   KJC: Wait for msg sends to complete		     1,736	 0.0	      113.10  65.15ms	  0.16	    58.26ms    48.72ms	  67.80ms    13.49ms
Configurat undo segment extension			       611	98.2	      106.99 175.11ms	  0.15	   219.78ms   135.80ms	 303.76ms   118.77ms
Cluster    gc current grant congested			     5,840	 0.0	      105.02  17.98ms	  0.15	    17.65ms    14.98ms	  20.32ms     3.78ms
Cluster    gc cr multi block mixed			       529	 0.0	       69.52 131.42ms	  0.10	   149.72ms    90.31ms	 209.13ms    84.02ms
Other	   reliable message				     1,538	 0.0	       41.32  26.87ms	  0.06	    26.58ms    25.89ms	  27.27ms      .98ms
Other	   gcs drm freeze in enter server mode		       204	 0.0	       27.10 132.84ms	  0.04	   133.21ms   132.73ms	 133.69ms   680.04us
Cluster    gc current block 2-way			     2,116	 0.0	       17.73   8.38ms	  0.02	     5.85ms	1.80ms	   9.89ms     5.72ms
Cluster    gc current block busy			     3,333	 0.0	       11.10   3.33ms	  0.02	     3.13ms	1.83ms	   4.43ms     1.84ms
Other	   DLM cross inst call completion			61	 0.0		8.06 132.19ms	  0.01	    91.76ms   397.47us	 183.11ms   129.20ms
System I/O control file sequential read 		       984	 0.0		6.05   6.15ms	  0.01	     4.75ms	3.03ms	   6.47ms     2.44ms
Cluster    gc cr grant congested			       517	 0.0		4.37   8.46ms	  0.01	     8.20ms	7.31ms	   9.08ms     1.25ms
User I/O   Data file init write 				80	 0.0		4.32  54.00ms	  0.01	    54.00ms    54.00ms	  54.00ms
Other	   KSV master wait				       480	 0.0		3.83   7.98ms	  0.01	     7.98ms	7.98ms	   7.98ms
System I/O control file parallel write			       120	 0.0		2.62  21.87ms	  0.00	    21.87ms    21.87ms	  21.87ms
Other	   latch: gcs resource hash			     1,385	 0.0		2.39   1.73ms	  0.00	     1.55ms	1.22ms	   1.87ms   459.08us
Other	   latch free					     1,068	 0.0		1.95   1.83ms	  0.00	     1.56ms	1.04ms	   2.07ms   726.32us
Commit	   log file sync					84	 0.0		1.79  21.28ms	  0.00	    22.15ms    16.90ms	  27.40ms     7.42ms
Cluster    gc current block congested			       117	 0.0		1.77  15.10ms	  0.00	     9.75ms	4.00ms	  15.50ms     8.13ms
Cluster    gc cr block 2-way				       212	 0.0		1.48   6.96ms	  0.00	     5.30ms	1.98ms	   8.62ms     4.70ms
Cluster    gc cr failure					 2	 0.0		1.35 676.79ms	  0.00	   676.79ms   618.62ms	 734.96ms    82.27ms
User I/O   db file single write 				80	 0.0		1.33  16.67ms	  0.00	    16.67ms    16.67ms	  16.67ms
Other	   PX Deq: Slave Session Stats				48	 0.0		1.26  26.18ms	  0.00	    26.20ms    25.76ms	  26.63ms   616.98us
System I/O kfk: async disk IO					80	 0.0		1.22  15.28ms	  0.00	    15.28ms    15.28ms	  15.28ms
Other	   IPC send completion sync				80	 0.0		1.09  13.66ms	  0.00	    23.86ms	1.20ms	  46.52ms    32.05ms
User I/O   Disk file Mirror Read				76	 0.0		0.99  13.09ms	  0.00	    15.14ms	9.95ms	  20.32ms     7.33ms
Cluster    gc current retry					 6	 0.0		0.89 148.72ms	  0.00	   118.12ms    26.33ms	 209.91ms   129.82ms
Other	   enq: CT - state					40	 0.0		0.57  14.34ms	  0.00	    14.34ms    14.34ms	  14.34ms
Other	   latch: enqueue hash chains			     1,447	 0.0		0.57 394.01us	  0.00	   334.34us   274.50us	 394.17us    84.62us
Concurrenc library cache lock					22	 0.0		0.52  23.85ms	  0.00	    14.16ms   837.33us	  27.48ms    18.84ms
Other	   enq: CF - contention 				48	 0.0		0.49  10.23ms	  0.00	    10.23ms    10.23ms	  10.23ms
Other	   CSS initialization					62	 0.0		0.43   6.87ms	  0.00	     6.87ms	6.87ms	   6.87ms
Concurrenc latch: cache buffers chains			       502	 0.0		0.36 713.90us	  0.00	   708.30us   696.98us	 719.63us    16.02us
Other	   latch: gc element				       423	 0.0		0.32 765.24us	  0.00	   656.75us   411.36us	 902.15us   347.04us
Other	   ges message buffer allocation			 1	 0.0		0.30 299.69ms	  0.00	   299.69ms   299.69ms	 299.69ms
User I/O   db file scattered read				51	 0.0		0.30   5.82ms	  0.00	     5.82ms	5.82ms	   5.82ms
User I/O   direct path write					 8	 0.0		0.21  26.22ms	  0.00	    26.22ms    26.22ms	  26.22ms
Other	   latch: redo allocation			       517	 0.0		0.17 337.69us	  0.00	   281.93us   149.10us	 414.77us   187.85us
Concurrenc row cache mutex					25	 0.0		0.17   6.71ms	  0.00	     6.71ms	6.71ms	   6.71ms
Other	   CSS operation: action				93	 0.0		0.14   1.48ms	  0.00	     1.48ms	1.48ms	   1.48ms
Other	   latch: object queue header operation 	       152	 0.0		0.10 644.73us	  0.00	   561.26us   420.29us	 702.23us   199.36us
User I/O   Disk file operations I/O			       510	 0.0		0.07 143.32us	  0.00	   158.40us   142.11us	 174.68us    23.04us
Other	   ges inquiry response 				40	 0.0		0.07   1.76ms	  0.00	     1.76ms	1.76ms	   1.76ms
Other	   CSS operation: query 			       186	 0.0		0.06 344.70us	  0.00	   344.70us   344.70us	 344.70us
Cluster    gc cr block busy					 3	 0.0		0.06  20.25ms	  0.00	    20.25ms    20.25ms	  20.25ms
Other	   latch: ges resource hash list		       172	 0.0		0.06 352.70us	  0.00	   310.78us   265.14us	 356.42us    64.54us
Other	   PGA memory operation 			       912	 0.0		0.06  61.39us	  0.00	    68.11us    20.95us	 115.27us    66.70us
Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   latch: cache buffers lru chain		       225	 0.0		0.05 215.46us	  0.00	   195.98us   144.40us	 247.55us    72.94us
Other	   latch: undo global data			       154	 0.0		0.05 312.81us	  0.00	   203.77us    88.75us	 318.78us   162.66us
Other	   enq: PS - contention 				26	 3.8		0.05   1.81ms	  0.00	     1.87ms	1.72ms	   2.02ms   207.25us
Concurrenc row cache lock					15     100.0		0.04   2.78ms	  0.00	     1.93ms   949.00us	   2.91ms     1.39ms
Cluster    gc cr block congested				 7	 0.0		0.04   5.71ms	  0.00	     5.71ms	5.71ms	   5.71ms
Cluster    gc current multi block request			 9	 0.0		0.04   4.24ms	  0.00	     4.24ms	4.24ms	   4.24ms
Other	   PX Deq: reap credit				       956     100.0		0.04  39.26us	  0.00	    34.68us    25.28us	  44.08us    13.29us
Other	   enq: WF - contention 				19	 0.0		0.03   1.77ms	  0.00	     1.54ms   914.67us	   2.16ms   883.47us
Concurrenc library cache pin					22	 0.0		0.03   1.23ms	  0.00	     1.07ms   865.00us	   1.28ms   296.39us
Other	   datafile move cleanup during resize			40	 0.0		0.02 572.93us	  0.00	   572.93us   572.93us	 572.93us
Other	   lock deadlock retry				       513	99.8		0.02  43.26us	  0.00	    37.13us    27.86us	  46.40us    13.11us
Other	   enq: WT - contention 				 8	 0.0		0.02   2.15ms	  0.00	     2.15ms	2.15ms	   2.15ms
Other	   enq: TO - contention 				 4	 0.0		0.01   2.76ms	  0.00	     2.76ms	2.76ms	   2.76ms
Applicatio SQL*Net break/reset to client		       126	 0.0		0.01  78.56us	  0.00	    78.56us    78.56us	  78.56us
Other	   ASM file metadata operation			       240	 0.0		0.01  39.56us	  0.00	    39.56us    39.56us	  39.56us
Other	   enq: RP - contention 				 1	 0.0		0.01   8.02ms	  0.00	     8.02ms	8.02ms	   8.02ms
User I/O   direct path sync					40	 0.0		0.01 192.28us	  0.00	   192.28us   192.28us	 192.28us
Other	   enq: FB - contention 				 3	 0.0		0.01   1.91ms	  0.00	     1.91ms	1.91ms	   1.91ms
Other	   PX Deq: Join ACK					 2	 0.0		0.01   2.78ms	  0.00	     2.78ms	2.78ms	   2.78ms
Other	   name-service call wait				 4	 0.0		0.00   1.17ms	  0.00	     1.17ms   670.50us	   1.67ms   709.94us
Other	   ges ipc enter server mode			       296	 0.0		0.00  13.53us	  0.00	    22.34us    10.15us	  34.54us    17.24us
Concurrenc cursor: pin S					 3	 0.0		0.00   1.32ms	  0.00	     1.32ms	1.32ms	   1.32ms
Cluster    gc buffer busy release				 2	 0.0		0.00   1.97ms	  0.00	     1.97ms	1.97ms	   1.97ms
Administra enq: MV - datafile move				 1	 0.0		0.00   3.53ms	  0.00	     3.53ms	3.53ms	   3.53ms
Other	   wait list latch free 				 3	 0.0		0.00   1.14ms	  0.00	     1.14ms	1.14ms	   1.14ms
Network    SQL*Net message to client			       395	 0.0		0.00   8.26us	  0.00	     8.73us	7.10us	  10.36us     2.31us
Other	   latch: messages					10	 0.0		0.00 323.30us	  0.00	   355.44us   301.88us	 409.00us    75.75us
Other	   ges enter server mode			       223	 0.0		0.00  10.68us	  0.00	    10.47us	8.95us	  11.98us     2.15us
Other	   enq: SW - contention 				 1	 0.0		0.00   1.41ms	  0.00	     1.41ms	1.41ms	   1.41ms
User I/O   ASM IO for non-blocking poll 			69	 0.0		0.00  15.72us	  0.00	    15.77us    15.50us	  16.03us   377.94ns
Network    IPC group service call				61	 0.0		0.00  17.30us	  0.00	    18.26us    15.91us	  20.61us     3.33us
Other	   enq: FD - Flashback logical operations		 1	 0.0		0.00   1.01ms	  0.00	     1.01ms	1.01ms	   1.01ms
Other	   latch: call allocation				 1	 0.0		0.00 118.00us	  0.00	   118.00us   118.00us	 118.00us
Other	   PX Deq: Signal ACK EXT				 2	 0.0		0.00  21.50us	  0.00	    21.50us    21.50us	  21.50us
Other	   AWR Flush						 6	 0.0		0.00   4.67us	  0.00	     4.80us	4.60us	   5.00us   282.84ns
Other	   ges resource directory to be unfrozen		 3	 0.0		0.00   7.67us	  0.00	     8.00us	7.00us	   9.00us     1.41us
Other	   asynch descriptor resize				 2     100.0		0.00  10.50us	  0.00	    10.50us    10.00us	  11.00us   707.11ns
Concurrenc library cache: mutex X				 1	 0.0		0.00  12.00us	  0.00	    12.00us    12.00us	  12.00us
Idle	   watchdog main loop				     2,104	 0.0	    6,315.08 3001.46m	  8.73	  3001.47ms  3000.06ms	3002.87ms     1.99ms
Idle	   SQL*Net message from client			       395	 0.0	      785.55 1988.72m	  1.09	  1540.43ms   620.96us	3080.23ms  2177.61ms
Idle	   PX Deq: Execution Msg			       138	 0.0	       14.06 101.88ms	  0.02	   101.88ms    76.36ms	 127.40ms    36.10ms
Idle	   PX Deq Credit: send blkd				88	 0.0		4.97  56.48ms	  0.01	    29.74ms   323.00us	  59.15ms    41.60ms
Idle	   PX Deq: Msg Fragment 			       342	 0.0		0.60   1.75ms	  0.00	     1.75ms	1.67ms	   1.83ms   111.96us
Idle	   PX Deq Credit: need buffer				 6	 0.0		0.00 658.83us	  0.00	   658.83us   658.83us	 658.83us
Idle	   PX Deq: Parse Reply					 2	 0.0		0.00   1.40ms	  0.00	     1.40ms	1.40ms	   1.40ms
Idle	   PX Deq: Execute Reply				 2	 0.0		0.00 745.00us	  0.00	   745.00us   745.00us	 745.00us
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O db file parallel write			   370,050	 0.0	    1,933.01   5.22ms	  0.29	     5.25ms	4.77ms	   5.74ms   685.35us
System I/O log file parallel write			    52,959	 0.0	    1,298.45  24.52ms	  0.20	    24.51ms    23.61ms	  25.41ms     1.28ms
Other	   LGWR any worker group			    20,967	 0.0	      353.11  16.84ms	  0.05	    16.96ms    15.81ms	  18.11ms     1.63ms
Other	   LGWR worker group ordering			    11,797	 0.0	      104.26   8.84ms	  0.02	     8.98ms	7.88ms	  10.08ms     1.55ms
User I/O   Disk file Mirror Read			     1,681	 0.0	       41.70  24.81ms	  0.01	    24.82ms    10.27ms	  39.36ms    20.57ms
System I/O control file sequential read 		     7,843	 0.0	       34.70   4.42ms	  0.01	     4.44ms	3.63ms	   5.25ms     1.15ms
Other	   IMR slave acknowledgement msg		     3,780	 0.0	       32.87   8.70ms	  0.00	     8.71ms	3.90ms	  13.53ms     6.81ms
Other	   LGWR all worker groups			       631	 0.0	       23.18  36.74ms	  0.00	    35.30ms    30.85ms	  39.75ms     6.29ms
System I/O control file parallel write			       614	 0.0	       21.89  35.65ms	  0.00	    35.23ms    28.07ms	  42.40ms    10.13ms
Other	   DLM cross inst call completion		     2,119	 0.0	       20.37   9.61ms	  0.00	     7.97ms	3.48ms	  12.46ms     6.35ms
Other	   enq: CR - block range reuse ckpt		     2,445	 0.0	       13.46   5.51ms	  0.00	     4.82ms	3.57ms	   6.07ms     1.76ms
User I/O   db file sequential read			     2,546	 0.0	       12.83   5.04ms	  0.00	     5.03ms	4.46ms	   5.60ms   810.77us
User I/O   ASM IO for non-blocking poll 		   359,754	 0.0	       11.66  32.41us	  0.00	    32.19us    29.36us	  35.02us     4.00us
Other	   ASM file metadata operation			     6,857	 0.0	       10.19   1.49ms	  0.00	     1.46ms	1.23ms	   1.70ms   329.65us
Other	   latch free					     4,041	 0.0		8.14   2.01ms	  0.00	     1.46ms   282.88us	   2.64ms     1.66ms
Other	   ges inquiry response 			     1,574	 0.0		8.06   5.12ms	  0.00	     4.47ms	2.88ms	   6.07ms     2.26ms
Other	   KSV master wait				     2,392	40.4		6.13   2.56ms	  0.00	     2.56ms	2.05ms	   3.07ms   725.97us
Cluster    gc cr grant busy				       623	 0.0		5.98   9.61ms	  0.00	     9.04ms	6.97ms	  11.10ms     2.92ms
Cluster    gc cr block 2-way				     1,235	 0.0		5.71   4.62ms	  0.00	     3.29ms	1.72ms	   4.86ms     2.22ms
Cluster    gc cr block busy				       110	 0.0		4.53  41.20ms	  0.00	    42.85ms    39.82ms	  45.88ms     4.28ms
Applicatio enq: RO - fast object reuse			       123	 0.0		4.46  36.23ms	  0.00	    34.35ms    22.15ms	  46.54ms    17.25ms
Cluster    gc current grant busy			       444	 0.0		4.08   9.18ms	  0.00	    10.05ms	6.04ms	  14.07ms     5.68ms
Other	   Sync ASM rebalance				       108	 0.0		3.28  30.39ms	  0.00	    30.39ms    25.49ms	  35.29ms     6.93ms
Cluster    gc current block 2-way				58	 0.0		3.13  54.03ms	  0.00	    52.30ms	2.27ms	 102.33ms    70.75ms
Cluster    gc cr block congested				22	 0.0		3.12 141.82ms	  0.00	   141.82ms   141.82ms	 141.82ms
Other	   gcs log flush sync				     5,442	 0.0		2.77 508.70us	  0.00	   510.58us   504.16us	 517.00us     9.08us
Concurrenc buffer busy waits					 5	 0.0		2.72 544.00ms	  0.00	   835.42ms   349.72ms	1321.12ms   686.88ms
Other	   reliable message					68	 0.0		2.64  38.86ms	  0.00	    31.59ms    10.98ms	  52.19ms    29.14ms
Other	   PX Deq: reap credit				    84,020     100.0		2.55  30.38us	  0.00	    30.40us    26.88us	  33.93us     4.99us
Other	   enq: CF - contention 			       166	39.2		1.73  10.43ms	  0.00	    10.52ms	8.72ms	  12.31ms     2.54ms
Other	   KJC: Wait for msg sends to complete		       742	76.5		1.71   2.30ms	  0.00	     2.15ms	1.18ms	   3.11ms     1.37ms
Configurat enq: HW - contention 				 8	 0.0		1.70 212.46ms	  0.00	   282.98ms   884.20us	 565.08ms   398.95ms
Other	   gcs remastering wait for read latch			27	 0.0		1.33  49.43ms	  0.00	    49.19ms    47.05ms	  51.33ms     3.03ms
User I/O   direct path write temp				79	 0.0		1.25  15.87ms	  0.00	    13.55ms	3.94ms	  23.17ms    13.60ms
Concurrenc library cache lock				       502	 4.0		1.23   2.45ms	  0.00	     2.26ms	1.72ms	   2.80ms   761.71us
Cluster    gc current grant 2-way			       113	 0.0		1.20  10.59ms	  0.00	     9.70ms	1.99ms	  17.40ms    10.90ms
Other	   ges lms sync during dynamic remastering		93	34.4		1.16  12.50ms	  0.00	    12.47ms	9.77ms	  15.17ms     3.82ms
System I/O db file async I/O submit			   126,514	 0.0		1.16   9.15us	  0.00	     9.22us	7.66us	  10.77us     2.20us
Other	   latch: cache buffers lru chain		     2,455	 0.0		1.12 455.37us	  0.00	   390.93us   263.84us	 518.01us   179.72us
User I/O   direct path write					38	 0.0		1.08  28.47ms	  0.00	    31.84ms    10.51ms	  53.17ms    30.17ms
Other	   PX Deq: Slave Session Stats				44	 0.0		1.01  23.03ms	  0.00	    38.75ms   318.29us	  77.18ms    54.35ms
Cluster    gc current block lost				 2	 0.0		0.99 493.51ms	  0.00	   493.51ms   465.70ms	 521.33ms    39.34ms
Cluster    gc current block busy			       297	 0.0		0.98   3.31ms	  0.00	     3.31ms	3.15ms	   3.48ms   229.53us
Concurrenc library cache pin				       505	 0.0		0.98   1.94ms	  0.00	     1.83ms	1.56ms	   2.11ms   393.28us
Administra JS kgl get object wait				 6	 0.0		0.80 132.97ms	  0.00	   137.16ms   124.61ms	 149.70ms    17.74ms
Other	   DFS lock handle				       456     100.0		0.79   1.74ms	  0.00	     1.74ms	1.02ms	   2.47ms     1.03ms
User I/O   db file scattered read			       102	 0.0		0.74   7.29ms	  0.00	     7.20ms	7.02ms	   7.39ms   264.24us
Other	   latch: gcs resource hash			     1,024	 0.0		0.74 723.21us	  0.00	   602.08us   303.94us	 900.23us   421.64us
System I/O log file sequential read			       938	 0.0		0.51 548.55us	  0.00	   551.68us   404.83us	 698.53us   207.68us
Cluster    gc cr block lost					 1	 0.0		0.46 461.77ms	  0.00	   461.77ms   461.77ms	 461.77ms
Other	   CGS wait for IPC msg 			    15,090     100.0		0.43  28.18us	  0.00	    28.25us    25.11us	  31.38us     4.44us
Other	   oracle thread bootstrap				15	 0.0		0.42  28.07ms	  0.00	    28.35ms    24.12ms	  32.58ms     5.99ms
Other	   AQ: RAC AQ Network				    12,573     100.0		0.41  32.77us	  0.00	    32.76us    29.85us	  35.66us     4.11us
User I/O   Disk file operations I/O			       944	 0.0		0.37 391.86us	  0.00	   394.68us   345.37us	 444.00us    69.75us
Commit	   log file sync					 6	 0.0		0.35  59.05ms	  0.00	    48.06ms    31.58ms	  64.54ms    23.31ms
Cluster    gc cr disk read				       102	 0.0		0.28   2.78ms	  0.00	     2.28ms	1.47ms	   3.10ms     1.15ms
Other	   ksxr poll remote instances			     7,925     100.0		0.27  33.94us	  0.00	    33.89us    28.13us	  39.64us     8.14us
Other	   LGWR wait for redo copy			       337	 0.0		0.21 610.76us	  0.00	   534.90us   381.81us	 687.99us   216.50us
Network    IPC group service call			     1,821	 0.0		0.16  88.34us	  0.00	    88.73us    67.10us	 110.36us    30.59us
Applicatio enq: TM - contention 				27	 0.0		0.16   5.89ms	  0.00	     5.80ms	3.54ms	   8.07ms     3.20ms
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   PX Deq: Join ACK					44	 0.0		0.14   3.14ms	  0.00	     3.07ms	2.89ms	   3.25ms   250.02us
Other	   latch: redo allocation			       271	 0.0		0.13 464.80us	  0.00	   371.27us   217.66us	 524.89us   217.24us
Concurrenc row cache lock					47     100.0		0.11   2.32ms	  0.00	     2.36ms	2.10ms	   2.63ms   373.81us
Cluster    gc cr multi block grant				30	 0.0		0.09   2.92ms	  0.00	     3.99ms	2.21ms	   5.76ms     2.51ms
Other	   enq: WF - contention 				14	 0.0		0.09   6.12ms	  0.00	     4.94ms   831.60us	   9.06ms     5.82ms
Concurrenc latch: cache buffers chains			       108	 0.0		0.08 737.54us	  0.00	   586.63us   273.21us	 900.05us   443.24us
Other	   CSS operation: action				66	 0.0		0.07   1.11ms	  0.00	   753.00us   373.50us	   1.13ms   536.69us
Other	   IPC send completion sync			     1,284	98.1		0.07  51.00us	  0.00	    51.00us    50.62us	  51.37us   528.70ns
Concurrenc libcache interrupt action by LCK		     7,494	 0.0		0.07   8.69us	  0.00	     8.93us	6.62us	  11.23us     3.26us
Other	   CSS operation: data query				37	 0.0		0.06   1.74ms	  0.00	     1.73ms	1.32ms	   2.13ms   572.79us
Other	   latch: gc element					99	 0.0		0.06 641.08us	  0.00	   488.81us   214.73us	 762.90us   387.61us
Cluster    gc buffer busy release				 5	 0.0		0.05  10.65ms	  0.00	    17.12ms	6.34ms	  27.90ms    15.25ms
Other	   enq: PS - contention 				37	24.3		0.05   1.41ms	  0.00	     1.35ms	1.22ms	   1.48ms   184.98us
Other	   enq: DW - contention 				 8     100.0		0.05   6.02ms	  0.00	     5.63ms	4.05ms	   7.21ms     2.24ms
Other	   PGA memory operation 			     1,210	 0.0		0.05  37.47us	  0.00	    37.56us    36.99us	  38.13us   803.63ns
Other	   wait list latch free 				35	 0.0		0.04   1.26ms	  0.00	     1.26ms	1.26ms	   1.26ms
Other	   CSS operation: data update				42	 0.0		0.04   1.03ms	  0.00	     1.03ms   895.81us	   1.17ms   194.69us
Other	   latch: messages				       122	 0.0		0.04 323.26us	  0.00	   293.97us   199.93us	 388.01us   133.00us
Configurat latch: redo writing				       104	 0.0		0.04 376.84us	  0.00	   344.72us   282.88us	 406.57us    87.46us
Other	   latch: checkpoint queue latch		       111	 0.0		0.04 346.32us	  0.00	   288.38us   138.79us	 437.96us   211.54us
Other	   latch: object queue header operation 		43	 0.0		0.03 780.12us	  0.00	   604.11us   343.14us	 865.08us   369.07us
Other	   enq: US - contention 				 3	 0.0		0.03  10.75ms	  0.00	    10.75ms    10.75ms	  10.75ms
Other	   os thread creation					15	 0.0		0.03   2.06ms	  0.00	     2.08ms	1.78ms	   2.37ms   417.32us
Other	   kjctssqmg: quick message send wait			68     100.0		0.03 424.97us	  0.00	   381.14us   293.47us	 468.80us   123.98us
Other	   enq: JS - job run lock - synchronize 		 9     100.0		0.03   2.93ms	  0.00	     2.95ms	2.92ms	   2.98ms    45.96us
Cluster    gc current multi block request			12	 0.0		0.03   2.17ms	  0.00	     7.18ms	1.17ms	  13.19ms     8.50ms
Other	   enq: CO - master slave det				10     100.0		0.02   2.03ms	  0.00	     2.03ms	2.03ms	   2.03ms
Concurrenc row cache mutex					 3	 0.0		0.02   6.62ms	  0.00	     4.97ms	8.00us	   9.93ms     7.02ms
Cluster    gc current block congested				 2	 0.0		0.02   9.78ms	  0.00	     9.78ms	9.78ms	   9.78ms
Other	   ges2 LMON to wake up LMD - mrcvr			60	 0.0		0.02 268.80us	  0.00	   261.32us   149.07us	 373.56us   158.74us
Cluster    gc current grant congested				 5	 0.0		0.01   2.99ms	  0.00	     2.97ms	2.90ms	   3.05ms   105.01us
Other	   CSS initialization					 2	 0.0		0.01   6.90ms	  0.00	     6.90ms	6.90ms	   6.90ms
Other	   enq: FB - contention 				11	 0.0		0.01   1.19ms	  0.00	     1.17ms	1.08ms	   1.26ms   131.93us
User I/O   read by other session				 4	 0.0		0.01   3.01ms	  0.00	     3.01ms	3.01ms	   3.01ms
User I/O   direct path sync					80	 0.0		0.01 138.05us	  0.00	   138.05us   130.68us	 145.43us    10.43us
Cluster    gc buffer busy acquire				 3	 0.0		0.01   3.55ms	  0.00	     3.55ms	3.55ms	   3.55ms
Other	   enq: TT - contention 				 4	50.0		0.01   2.66ms	  0.00	     2.66ms	2.66ms	   2.66ms
Other	   latch: ges resource hash list			26	 0.0		0.01 392.00us	  0.00	   388.64us   344.92us	 432.36us    61.83us
Concurrenc latch: MGA shared context root latch 		39	 0.0		0.01 259.00us	  0.00	   262.60us   215.86us	 309.33us    66.10us
Cluster    gc cr multi block mixed				 3	 0.0		0.01   2.88ms	  0.00	     2.88ms	2.88ms	   2.88ms
Other	   enq: TO - contention 				10	 0.0		0.01 810.10us	  0.00	   810.10us   587.40us	   1.03ms   314.95us
Concurrenc latch: MGA shared context latch			27	 0.0		0.01 287.85us	  0.00	   245.16us   140.38us	 349.95us   148.19us
Other	   PX Deq: Signal ACK EXT				44	 0.0		0.00 109.91us	  0.00	    93.12us    52.08us	 134.16us    58.04us
Other	   latch: enqueue hash chains				16	 0.0		0.00 293.25us	  0.00	   209.83us    43.00us	 376.67us   235.94us
Cluster    gc cr grant 2-way					 4	 0.0		0.00   1.02ms	  0.00	     1.02ms   551.50us	   1.49ms   663.97us
Other	   enq: TD - KTF dump entries				 2	 0.0		0.00   1.97ms	  0.00	     1.97ms	1.03ms	   2.90ms     1.33ms
Other	   enq: TA - contention 				 4	 0.0		0.00 864.50us	  0.00	   864.50us   821.50us	 907.50us    60.81us
Other	   ges ipc enter server mode			       348	 0.0		0.00   9.00us	  0.00	     9.24us	7.95us	  10.53us     1.82us
Other	   enq: SM -  contention				 2	 0.0		0.00   1.35ms	  0.00	     1.35ms	1.35ms	   1.35ms
Other	   enq: WT - contention 				 4	 0.0		0.00 655.50us	  0.00	   655.50us   655.50us	 655.50us
Other	   enq: MW - contention 				 1	 0.0		0.00   2.41ms	  0.00	     2.41ms	2.41ms	   2.41ms
Other	   enq: JG - queue lock 				 1	 0.0		0.00   2.39ms	  0.00	     2.39ms	2.39ms	   2.39ms
System I/O kfk: async disk IO					 6	 0.0		0.00 395.83us	  0.00	   395.83us   395.83us	 395.83us
Other	   CSS operation: query 				 6	 0.0		0.00 395.00us	  0.00	   395.00us   395.00us	 395.00us
Other	   name-service call wait				 2	 0.0		0.00   1.04ms	  0.00	     1.04ms   887.00us	   1.19ms   212.13us
Cluster    gc quiesce						 3	 0.0		0.00 656.00us	  0.00	   656.00us   656.00us	 656.00us
Other	   latch: kjci process context latch			10	 0.0		0.00 165.20us	  0.00	   165.20us    33.20us	 297.20us   186.68us
Other	   asynch descriptor resize			       157     100.0		0.00   8.05us	  0.00	     8.05us	8.00us	   8.11us    75.42ns
Network    SQL*Net message to client			       131	 0.0		0.00   7.34us	  0.00	     7.32us	6.98us	   7.66us   479.16ns
Other	   enq: DR - contention 				 1	 0.0		0.00 882.00us	  0.00	   882.00us   882.00us	 882.00us
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Concurrenc latch: shared pool					 5	 0.0		0.00 115.60us	  0.00	    98.88us    71.00us	 126.75us    39.42us
Other	   GCR CSS group query					37	 0.0		0.00  14.11us	  0.00	    14.08us    12.89us	  15.26us     1.68us
Other	   GCR CSS group update 				38	 0.0		0.00  13.66us	  0.00	    13.66us    13.16us	  14.16us   707.11ns
Concurrenc latch: MGA heap latch				 8	 0.0		0.00  25.25us	  0.00	    21.50us    14.00us	  29.00us    10.61us
Other	   lock deadlock retry					 1     100.0		0.00  95.00us	  0.00	    95.00us    95.00us	  95.00us
Other	   ges enter server mode				 5	 0.0		0.00  15.00us	  0.00	    16.92us	7.33us	  26.50us    13.55us
Other	   ges resource directory to be unfrozen		13	 0.0		0.00   5.00us	  0.00	     5.04us	4.88us	   5.20us   229.81ns
Other	   latch: undo global data				 2	 0.0		0.00  31.00us	  0.00	    31.00us    31.00us	  31.00us
Other	   undo_retention publish retry 			 4	 0.0		0.00   6.50us	  0.00	     6.50us	5.50us	   7.50us     1.41us
Other	   AWR Flush						 4	 0.0		0.00   4.75us	  0.00	     4.50us	4.00us	   5.00us   707.11ns
Other	   buffer deadlock					 1     100.0		0.00  12.00us	  0.00	    12.00us    12.00us	  12.00us
Other	   ASM background starting				 2	 0.0		0.00   5.00us	  0.00	     5.00us	5.00us	   5.00us      .00ns
Other	   gcs resource directory to be unfrozen		 1	 0.0		0.00   5.00us	  0.00	     5.00us	5.00us	   5.00us
Idle	   PX Idle Wait 					48	 0.0	   81,719.57 1702.49	 12.32	  1702.49 s  1697.57 s	1707.41 s  6952.71ms
Idle	   Space Manager: slave idle wait		    17,885	 0.0	   74,517.86 4166.50m	 11.24	  4184.59ms  3901.10ms	4468.07ms   400.90ms
Idle	   rdbms ipc message				   180,151	13.1	   32,284.82 179.21ms	  4.87	   179.20ms   178.88ms	 179.53ms   456.00us
Idle	   class slave wait				    16,161	75.4	    9,667.42 598.19ms	  1.46	   599.83ms   544.05ms	 655.62ms    78.89ms
Idle	   wait for unread message on broadcast cha	     1,932	99.9	    3,781.28 1957.18m	  0.57	  1957.19ms  1956.33ms	1958.04ms     1.21ms
Idle	   LMS CR slave timer				   375,980	 0.0	    3,775.47  10.04ms	  0.57	    10.04ms    10.01ms	  10.07ms    40.72us
Idle	   gcs yield cpu				   131,104	98.5	    3,758.54  28.67ms	  0.57	    28.68ms    28.26ms	  29.09ms   581.12us
Idle	   gcs remote message				 4,280,378	 0.0	    2,849.82 665.79us	  0.43	   665.49us   659.57us	 671.41us     8.37us
Idle	   pmon timer					       840     100.0	    2,519.96 2999.95m	  0.38	  2999.95ms  2999.90ms	3000.00ms    71.62us
Idle	   GCR sleep					     8,380	 0.0	    2,517.19 300.38ms	  0.38	   300.38ms   300.25ms	 300.50ms   176.72us
Idle	   ges remote message				    65,239	 0.0	    2,515.54  38.56ms	  0.38	    38.61ms    37.28ms	  39.94ms     1.88ms
Idle	   DIAG idle wait				    17,038	80.3	    2,514.64 147.59ms	  0.38	   147.63ms   145.48ms	 149.78ms     3.04ms
Idle	   Data Guard: Gap Manager				22	 0.0	    1,320.01  60.00 s	  0.20	    60.00 s    60.00 s	  60.00 s    42.10us
Idle	   shared server idle wait				 0	 N/A	    1,290.25		  0.19
Idle	   VKRM Idle						 0	 N/A	    1,270.09		  0.19
Idle	   Streams AQ: waiting for time management		 0	 N/A	    1,265.00		  0.19
Idle	   lreg timer					       422	99.8	    1,264.10 2995.50m	  0.19	  2995.53ms  2988.52ms	3002.54ms     9.91ms
Idle	   pman timer					       421     100.0	    1,262.89 2999.74m	  0.19	  2999.74ms  2999.72ms	2999.75ms    23.43us
Idle	   PING 					     1,082	19.2	    1,260.62 1165.09m	  0.19	  1167.02ms  1119.58ms	1214.45ms    67.09ms
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		22     100.0	    1,260.24  57.28 s	  0.19	    57.28 s    57.13 s	  57.44 s   223.46ms
Idle	   heartbeat redo informer			     1,260	 0.0	    1,260.24 1000.19m	  0.19	  1000.19ms  1000.15ms	1000.23ms    52.05us
Idle	   Streams AQ: qmn slave idle wait			45	 0.0	    1,260.05  28.00 s	  0.19	    28.00 s    28.00 s	  28.00 s   179.00us
Idle	   Streams AQ: qmn coordinator idle wait		91	 0.0	    1,260.05  13.85 s	  0.19	    13.85 s    13.70 s	  14.00 s   210.56ms
Idle	   AQPC idle						42     100.0	    1,260.03  30.00 s	  0.19	    30.00 s    30.00 s	  30.00 s   238.73us
Idle	   OFS idle					       420     100.0	    1,260.03 3000.06m	  0.19	  3000.06ms  2999.99ms	3000.13ms    96.88us
Idle	   ASM cluster membership changes		       719	86.1	    1,259.82 1752.18m	  0.19	  1752.18ms  1750.48ms	1753.88ms     2.40ms
Idle	   ASM background timer 			     5,019	 0.0	    1,259.27 250.90ms	  0.19	   252.60ms   232.19ms	 273.00ms    28.86ms
Idle	   SCM slave idle				    12,705	 0.0	    1,253.88  98.69ms	  0.19	    98.69ms    98.60ms	  98.78ms   126.75us
Idle	   dispatcher timer					20     100.0	    1,200.13  60.01 s	  0.18	    60.01 s    60.01 s	  60.01 s    38.40us
Idle	   smon timer						 4     100.0	    1,200.00 300.00 s	  0.18	   300.00 s   300.00 s	 300.00 s   160.16us
Idle	   Data Guard: Timer					 2	 0.0	    1,200.00 600.00 s	  0.18	   600.00 s   600.00 s	 600.00 s    12.02us
Idle	   LGWR worker group idle			    39,734	 0.0	    1,103.02  27.76ms	  0.17	    27.74ms    27.13ms	  28.36ms   876.14us
Idle	   jobq slave wait				       620	97.3	      304.56 491.23ms	  0.05	   491.47ms   488.93ms	 494.02ms     3.60ms
Idle	   PX Deq: Parse Reply					44	 0.0		2.75  62.45ms	  0.00	    62.28ms    61.87ms	  62.70ms   585.72us
Idle	   PX Deq: Execute Reply			       223	 0.0		0.50   2.23ms	  0.00	     3.75ms	2.03ms	   5.47ms     2.44ms
Idle	   PX Deq Credit: send blkd			       177	 0.0		0.38   2.15ms	  0.00	     1.87ms   801.77us	   2.93ms     1.51ms
Idle	   RMA: IPC0 completion sync			     2,170	 0.0		0.08  35.29us	  0.00	    35.39us    30.00us	  40.79us     7.63us
Idle	   SQL*Net message from client			       132	 0.0		0.07 499.60us	  0.00	   502.04us   448.30us	 555.78us    76.00us
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	   12.5K					 0.0(4)     87.0      7.2      3.5	1.4	 0.6	  0.3	   0.1	 0.0(3)
ASM IO for non-blocking p   358K				   0.1	   70.3     16.2      4.9      3.5	3.0	 1.4	  0.4	   0.1 0.0(129)  0.0(14)   0.0(6)
ASM background starting        2				 100.0
ASM file metadata operati   7073			  0.1	  21.3	    1.3     29.9     14.3      6.7	6.9	 4.5	  1.0	   1.1	    4.1      4.7      2.5      0.8	0.6	 0.1	  0.1	0.0(1)
AWR Flush		      10				 100.0
CGS wait for IPC msg	   15.1K					   14.7     74.6      5.6      3.0	1.4	 0.4	  0.2	   0.1
CSS initialization	      64					   10.9     35.9      1.6      1.6							     39.1     10.9
CSS operation: action	     159					   17.6      1.9	       0.6		 1.9	 15.7	  49.7	    9.4      2.5      0.6
CSS operation: data query     37											 5.4	 45.9	  24.3	   18.9      2.7      2.7
CSS operation: data updat     42												 54.8	  38.1	    7.1
CSS operation: query	     192			  1.0	  67.2	   13.0      1.0      0.5				  0.5	  10.9	    4.7      1.0
DFS lock handle 	     456								       0.2	0.7	16.7	 35.3	  29.2	   13.4      4.2	       0.2			  0.2
DLM cross inst call compl   2181					    0.1      1.6      0.2      0.1	0.5	 3.8	 31.0	  35.0	   19.5      4.8      0.8   0.0(1)	0.5	 1.0	  0.5	   0.1	    0.2      0.3
Data file init write	      80																      7.5     41.3     28.8	16.3	  3.8	   2.5
Disk file Mirror Read	    1754														   24.9     24.3     16.4     15.3     13.5	 2.4	  2.4	   0.7	    0.2
Disk file operations I/O    1457				   2.2	    7.8     12.3     18.5      3.6     24.0	20.5	  6.7	   2.3	    1.4      0.7      0.1      0.1
GCR CSS group query	      37					   86.5     10.8      2.7
GCR CSS group update	      38					   86.8      7.9      5.3
IMR slave acknowledgement   3777					    8.3     11.9      4.1     17.2     16.1	 6.0	  2.0	   0.6	    8.1      9.1      5.1      4.6	4.6	 1.0	  0.9	   0.3	    0.1
IPC group service call	    1882				   1.9	    3.7     11.8     44.8     28.2	5.8	 2.2	  0.7	   0.6	    0.1      0.1
IPC send completion sync    1362						    82.1      5.2      3.1	2.3	 2.5	  1.5	   1.9	    1.1      0.2							    0.1
JS kgl get object wait	       6																				66.7	 33.3
KJC: Wait for msg sends t   2474					    5.9      7.4     11.4     30.0	9.5	 6.5	  5.6	   4.5	    3.4      0.8						  14.7	    0.1
KSV master wait 	    2872				   0.1	    9.4     17.2      3.9      2.7     21.7	 7.9	  2.8	   2.6	    9.8     11.9      6.5      1.8	1.1	 0.3	  0.1	0.0(1)
LGWR all worker groups	     636														    3.1      9.3     33.3     21.9     25.6	 2.7	  2.4	   1.4	    0.3
LGWR any worker group	   20.9K					    0.1   0.0(1)      0.1      0.4	0.8	 1.7	  3.3	   7.1	   20.7     20.2     21.7     16.5	4.3	 0.3	  2.3	   0.4	    0.1
LGWR wait for redo copy      337				   5.0	    3.3      0.6      5.3     13.6     19.6	17.8	 18.7	  11.6	    2.4      2.1
LGWR worker group orderin  11.7K				   0.5	    0.5      0.3      1.5      2.4	2.0	 2.0	  3.1	   6.4	   40.5     21.7      8.0      8.1	1.7	 0.2	  0.8	   0.2	 0.0(3)
PGA memory operation	    2119				  30.8	   43.4     11.1      2.7      3.4	4.7	 2.0	  1.0	   0.6	    0.1
PX Deq: Join ACK	      46											 2.2	 34.8	  10.9	   28.3     13.0     10.9
PX Deq: Signal ACK EXT	      46						    76.1	       6.5	8.7	 4.3	  2.2	   2.2
PX Deq: Slave Session Sta     92					   12.0     15.2      1.1     13.0     15.2	10.9	 13.0	   7.6	    6.5      2.2							    3.3
PX Deq: reap credit	   84.8K					    1.1     88.0      5.8      3.1	1.2	 0.5	  0.2	   0.1	0.0(19)   0.0(5)   0.0(2)
SQL*Net break/reset to cl    126				  38.1	   10.3 	      1.6     27.0     17.5	 5.6
SQL*Net message to client    526				  90.9	    5.5      1.0      2.1      0.2	0.2	 0.2
Sync ASM rebalance	     108					   39.8      3.7      0.9			 6.5	  8.3	   7.4						8.3	21.3	  3.7
asynch descriptor resize     159				  76.1	   20.8 	      2.5      0.6
buffer busy waits	    1236					    0.3      0.2      0.1      2.0	2.4	 2.4	  2.1	   1.4	    1.0      1.3      1.8      6.1	9.1	 9.7	 13.7	  16.5	   15.6     14.2
buffer deadlock 	       1					  100.0
control file parallel wri    728														    5.4     33.4     20.7     21.0	9.6	 3.3	  5.2	   1.1	    0.1      0.1
control file sequential r   8834					    5.7     12.5      0.7      0.5	4.2	 2.6	  1.0	   0.5	   48.1     14.4      3.4      4.2	2.1   0.0(3)
cursor: pin S		       3													 100.0
datafile move cleanup dur     40											62.5	 25.0	  12.5
db file async I/O submit  126.5K		      0.0(30)	  92.8	    3.3      0.9      1.4      0.9	0.4	 0.2	  0.1  0.0(26)	 0.0(8)   0.0(2)   0.0(1)
db file parallel read	  361.2K														    0.1     17.2     20.6     24.9     33.8	 3.4  0.0(22)
db file parallel write	  368.6K				       0.0(112)      0.3      3.0      3.8	6.0	 9.2	 14.8	  18.4	   20.7     12.3      6.0      3.8	0.7	 0.4	  0.7  0.0(69)	 0.0(6)
db file scattered read	     153														   32.0     52.3      9.8      2.6	3.3
db file sequential read       6M												       0.0(25)	   60.9     25.5      5.2      6.0	2.3	 0.1  0.0(31)
db file single write	      80														   18.8     36.3     21.3     15.0	5.0	 1.3	  2.5
direct path sync	     120								      65.0     24.2	 7.5	  2.5	   0.8
direct path write	      46											 4.3	  2.2	   4.3	   23.9     13.0     23.9     10.9	8.7	 6.5		   2.2
direct path write temp	      79														   41.8     46.8      6.3		1.3	 1.3	  1.3		    1.3
enq: CF - contention	     212											 1.9	 27.4	  34.0	   23.6      3.3      3.8      0.5	2.4	 0.9	  1.9	   0.5
enq: CO - master slave de     10												 40.0	  20.0	   30.0     10.0
enq: CR - block range reu   6012						  0.0(1)   0.0(1)   0.0(1)	0.1	 2.6	 16.4	  28.5	   22.2      6.3      4.0      6.1	4.2	 1.7	  3.7	   2.7	    1.1      0.4
enq: CT - state 	      40											 2.5	 37.5	  27.5	   22.5      7.5						   2.5
enq: DR - contention	       1												100.0
enq: DW - contention	       8													  12.5	   25.0     25.0     37.5
enq: FB - contention	      11											18.2	 45.5	  27.3		     9.1
enq: FD - Flashback logic      1												100.0
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
enq: HW - contention	     379								       0.8	1.8	 3.4	  4.5	   1.6	    2.9      0.3      1.3      2.4	5.8	 9.5	  8.4	  12.9	   13.2     31.1
enq: JG - queue lock	       1														  100.0
enq: JS - job run lock -       9											11.1	 11.1	  22.2	   33.3     22.2
enq: MV - datafile move        1														  100.0
enq: MW - contention	       1														  100.0
enq: PS - contention	      63						     1.6			6.3	 7.9	 44.4	  19.0	   11.1      7.9      1.6
enq: RO - fast object reu    123											15.4	 36.6	  17.1	   17.1      4.1      1.6      0.8	1.6	 0.8	  1.6	   1.6		     1.6
enq: RP - contention	       1															   100.0
enq: SM -  contention	       2												 50.0	  50.0
enq: SW - contention	       1													 100.0
enq: TA - contention	       4												100.0
enq: TD - KTF dump entrie      2													  50.0	   50.0
enq: TM - contention	      27												 29.6	  33.3	   14.8     14.8      3.7			 3.7
enq: TO - contention	      14											 7.1	 64.3	   7.1	   14.3      7.1
enq: TT - contention	       4													  25.0	   75.0
enq: US - contention	    2669					    3.4      1.3      2.2     13.3     19.1	16.5	 12.0	   6.3	    3.7      1.5      1.4      3.8	5.4	 2.2	  3.1	   2.0	    2.0      0.8
enq: WF - contention	      33											12.1	 48.5	  15.2	   18.2      3.0				 3.0
enq: WT - contention	      12											 8.3	 41.7	  16.7	   25.0      8.3
gc buffer busy acquire	       3													  33.3	   33.3     33.3
gc buffer busy release	       6					   16.7 							  16.7		    16.7	      50.0
gc cr block 2-way	    1456								       0.1	1.1	22.9	 28.0	  26.6	   15.7      4.6      0.5      0.1					    0.3
gc cr block busy	     114													   1.8	    6.1     14.9     30.7     20.2     18.4	 1.8	  4.4	   0.9		     0.9
gc cr block congested	      28													   7.1	   46.4     25.0     14.3      3.6						     3.6
gc cr block lost	     309																						  46.6	   53.4
gc cr disk read 	     102											 4.9	 15.7	  27.5	   31.4     16.7      3.9
gc cr failure		       2																							  100.0
gc cr grant 2-way	   23.9K							      0.1      0.3	0.5	12.8	 26.3	  31.1	   21.0      6.5      1.0      0.1   0.0(1)   0.0(1)			    0.3
gc cr grant busy	  275.3K					 0.0(1)  0.0(24)  0.0(20)  0.0(50)	0.1	 2.4	 18.1	  28.8	   29.3     14.8      4.2      0.9	0.3	 0.5  0.0(35)		    0.6  0.0(79)
gc cr grant congested	     517								       0.2				   4.6	   38.3     36.9     17.0      1.4	0.8	 0.4	  0.2		    0.2
gc cr multi block grant   141.5K						  0.0(4)	    0.0(9)  0.0(11)	 0.1	  4.2	  17.1	   34.1     28.9      9.7      1.6	0.3	 0.8  0.0(36)		    2.9      0.2
gc cr multi block mixed      530												  3.6	  10.6	   25.1     22.8     13.2      4.7	0.4	 2.3	  0.4	   1.7	   15.1      0.2
gc current block 2-way	    2239								       0.1	0.2	 5.6	 26.9	  31.0	   25.0      8.2      2.1      0.4					    0.6   0.0(1)
gc current block busy	    3654							      0.1   0.0(1)	0.4	14.0	 30.1	  27.3	   19.0      6.8      1.7      0.4	0.3				    0.1
gc current block congeste    118													   3.4	   32.2     35.6     24.6      3.4					    0.8
gc current block lost	     509																						  49.9	   50.1
gc current grant 2-way	  133.9K							  0.0(62)      0.1	0.2	 4.9	 10.3	  22.5	   28.3     22.0      8.8      1.7	0.2	 0.3  0.0(40)	0.0(2)	    0.5  0.0(34)
gc current grant busy	  944.1K					 0.0(7) 0.0(126)  0.0(54) 0.0(185)	0.1	 2.7	 19.2	  29.7	   28.9     13.9      3.7      0.7	0.1	 0.3  0.0(85)		    0.6 0.0(299)
gc current grant congeste   5829													   1.0	   14.2     38.6     32.6      9.3	1.3	 2.1	  0.3	0.0(2)	    0.5      0.1
gc current grant read-mos 113.7K						  0.0(9)   0.0(2)   0.0(7)  0.0(20)	 0.3	 12.9	  28.4	   31.8     18.5      6.0      1.2	0.3	 0.5  0.0(21)		0.0(19)   0.0(1)
gc current multi block re     22												 36.4	  31.8	    9.1     13.6      9.1
gc current retry	       6																	      33.3		16.7	 33.3	  16.7
gc quiesce		       3									       33.3		 33.3	  33.3
gcs drm freeze in enter s    203											 0.5						       1.0	4.9	51.7	 39.9	   2.0
gcs log flush sync	    5212					    2.8      4.0     13.8     15.4     16.2	19.3	 15.3	   8.8	    3.1      0.8      0.4      0.2
gcs remastering wait for      27					    3.7 	      3.7			 3.7	  3.7	   3.7	   14.8      3.7      3.7     11.1	3.7	44.4
gcs resource directory to      1				 100.0
ges enter server mode	     228				  85.1	    6.6      1.8      3.9      1.3	1.3
ges inquiry response	    1570							      0.1      0.1	0.1	 3.3	 25.5	  39.2	   24.5      5.8      0.6      0.1			  0.3	   0.5	    0.1
ges ipc enter server mode    644				  88.5	    7.0      1.6      1.1      0.5	0.8	 0.5	  0.2
ges lms sync during dynam     93								       1.1	3.2	 5.4	  7.5	  17.2	   14.0     11.8     22.6      1.1     15.1	 1.1
ges message buffer alloca      1																						 100.0
ges resource directory to     16				  87.5	   12.5
ges2 LMON to wake up LMD      60					    6.7     25.0     10.0     20.0     13.3	 8.3	  8.3	   8.3
kfk: async disk IO	      86					    1.2 				1.2	 2.3	  2.3		   43.0     19.8      9.3     14.0	3.5	 1.2	  1.2	   1.2
kjctssqmg: quick message      68					    2.9     20.6      4.4     11.8	5.9	22.1	 25.0	   5.9	    1.5
ksxr poll remote instance   7780						    87.1      5.8      4.3	1.7	 0.7	  0.2	   0.1		  0.0(2)
latch free		    5071					    6.2      1.0      2.1      8.8     19.0	16.7	  8.8	   9.6	   12.0     10.9      4.5   0.0(1)   0.0(1)	 0.3
latch: MGA heap latch	       8					   62.5     25.0	      12.5
latch: MGA shared context     27					    3.7 	      3.7     29.6     29.6	14.8	 18.5
latch: MGA shared context     39					    5.1      5.1      5.1     12.8     20.5	46.2	  5.1
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
latch: cache buffers chai    607					   12.0      2.5      3.6     14.0     21.9	17.3	 12.7	   9.2	    4.6      1.5      0.5		0.2
latch: cache buffers lru    2670					   12.8      1.8      4.0     15.9     23.9	18.6	 11.7	   7.8	    2.7      0.7   0.0(1)
latch: call allocation	       1								     100.0
latch: checkpoint queue l    111					   16.2      4.5      4.5     15.3     29.7	14.4	  7.2	   4.5	    3.6
latch: enqueue hash chain   1464					   14.8      2.3      4.8     13.9     22.5	20.4	 13.8	   5.5	    1.5      0.2      0.4
latch: gc element	     521					    4.2      1.3      2.1     10.9     19.0	21.7	 18.2	  15.0	    6.7      0.4      0.4
latch: gcs resource hash    2402					   12.7      3.4      4.3     15.4     20.1	20.4	 12.3	   6.5	    2.7      0.6      0.2      0.1	0.2	 0.9
latch: ges resource hash     197					   13.2      1.0      6.1     16.8     19.3	22.8	 14.2	   4.6	    2.0
latch: kjci process conte     10					   30.0 	     10.0     30.0     10.0		 20.0
latch: messages 	     125					   10.4      2.4      3.2     20.0     25.6	20.8	 11.2	   6.4
latch: object queue heade    195					    5.1      2.1      1.5     10.8     26.2	19.5	 16.4	  10.8	    5.1      2.6
latch: redo allocation	     785					   14.5      1.9      4.1     18.7     23.7	16.2	 12.1	   5.7	    2.7      0.4
latch: redo writing	     101					    9.9      1.0      1.0     12.9     33.7	24.8	  6.9	   8.9	    1.0
latch: shared pool	       5								      60.0     40.0
latch: undo global data      156					    7.1      2.6      7.1     16.0     29.5	24.4	 10.9	   1.3	    1.3
libcache interrupt action   7488			  0.5	  95.3	    1.3      0.5      1.2      0.6	0.3	 0.2	  0.1	0.0(2)		  0.0(1)
library cache lock	     524							      0.2		0.6	 6.9	 33.8	  34.2	   17.7      5.3      0.6			 0.4	  0.2	   0.2
library cache pin	     527										0.2	 9.3	 36.1	  27.7	   21.3      4.4      0.9				  0.2
library cache: mutex X	       1					  100.0
lock deadlock retry	     513					    7.8     74.9      7.0      4.7	4.5	 0.4	  0.6		    0.2
log file parallel write    52.7K														    0.5     11.1     45.7     23.6     16.2	 0.8	  1.6	   0.4	    0.1
log file sequential read     941						     3.1     26.6      2.8     22.5	 8.6	 18.5	  14.8	    2.7      0.4	       0.1
log file sync		      90										1.1				    2.2     13.3     32.2     26.7     21.1	 2.2	  1.1
name-service call wait	       6												 50.0	  50.0
oracle thread bootstrap       15																	      80.0     20.0
os thread creation	      15													  73.3	   20.0      6.7
read by other session	       4											25.0	 25.0		   25.0 	     25.0
reliable message	    1581												  0.5	   1.1	   12.9     42.1     34.5      3.7	1.1	 0.7	  1.1	   1.6	    0.4      0.4
row cache lock		      63												 19.0	  36.5	   34.9      7.9      1.6
row cache mutex 	      28					   17.9      7.1      7.1		3.6						     60.7      3.6
undo segment extension	     609					    7.4      5.4      1.5      1.5	0.3	 0.5					     13.0     14.4     13.6	11.5	 10.0	   7.4	   13.5
undo_retention publish re      4				  75.0	   25.0
wait list latch free	      38													 100.0
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	  18,226,551   17,104,107    2,683,877	  2,072,160    5,349,421	  550	   222,738	  4,622 	35	 32,671
   2	  21,484,936   16,389,757    2,593,782	  2,003,781    5,158,526	  662	   221,637	  4,498 	38	 31,541
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  39,711,487   33,493,864    5,277,659	  4,075,941   10,507,947	1,212	   444,375	  9,120 	73	 64,212
 Avg	  19,855,744   16,746,932    2,638,830	  2,037,970    5,253,974	  606	   222,188	  4,560 	37	 32,106
 Std	   2,304,026	  505,122	63,707	     48,351	 134,983	   79	       779	     88 	 2	    799
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   28,725.31	 26,956.3      4,229.8	    3,265.8	 8,430.8	  0.9	     351.0	    7.3       0.06	   51.5
   2	   33,857.26	 25,828.0      4,087.4	    3,157.7	 8,129.1	  1.0	     349.3	    7.1       0.06	   49.7
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	   62,582.56	 52,784.3      8,317.3	    6,423.4	16,559.9	  1.9	     700.3	   14.4       0.12	  101.2
 Avg	   31,291.28	 26,392.1      4,158.6	    3,211.7	 8,279.9	  1.0	     350.2	    7.2       0.06	   50.6
 Std	    3,628.84	    797.9	 100.7	       76.4	   213.3	  0.1	       1.3	    0.1       0.00	    1.3
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	      557.88	    523.5	  82.1	       63.4	   163.7	  0.0	       6.8	    0.1       0.00
   2	      681.17	    519.6	  82.2	       63.5	   163.5	  0.0	       7.0	    0.1       0.00
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	      619.53	    521.6	  82.2	       63.5	   163.6	  0.0	       6.9	    0.1       0.00
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     2,328	 1,857	       5,061	   4,063	  N/A	       0       12,041,537	  16,446     10,728,499      15,588	 636,838   3,765,435	 1,200		1
   2	     4,958	 3,861	       2,368	   2,200	  N/A	       0       10,604,362	  12,616     11,902,116      50,965	 800,127   5,048,590	   261		1
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     7,286	 5,718	       7,429	   6,263	    0	       0       22,645,899	  29,062     22,630,615      66,553    1,436,965   8,814,025	 1,461		2
 Avg	     3,643	 2,859	       3,715	   3,132	  N/A	       0       11,322,950	  14,531     11,315,308      33,277	 718,483   4,407,013	   731		1
 Std	     1,860	 1,417	       1,904	   1,317	  N/A	       0	1,016,236	   2,708	829,873      25,015	 115,463     907,328	   664		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 51-

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      3.67	  2.93		7.98	    6.40	  N/A	    0.00	18,977.63	   25.92      16,908.27       24.57	 1,003.7    5,934.38	     2		0
   2	      7.81	  6.08		3.73	    3.47	  N/A	    0.00	16,710.99	   19.88      18,756.07       80.31	 1,260.9    7,955.87	     0		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     11.48	  9.01	       11.71	    9.87	 0.00	    0.00	35,688.63	   45.80      35,664.34      104.88	 2,264.6   13,890.25	     2		0
 Avg	      5.74	  4.51		5.85	    4.94	  N/A	    0.00	17,844.31	   22.90      17,832.17       52.44	 1,132.3    6,945.13	     1		0
 Std	      2.93	  2.23		3.00	    2.08	  N/A	    0.00	 1,602.76	    4.27       1,306.60       39.42	   181.9    1,429.41	     1		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 51-5

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.07	  0.06		0.15	    0.12	  N/A	    0.00	   368.57	    0.50	 328.38        0.48	    19.5      115.25	  0.0	     0.0
   2	      0.16	  0.12		0.08	    0.07	  N/A	    0.00	   336.21	    0.40	 377.35        1.62	    25.4      160.06	  0.0	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.11	  0.09		0.11	    0.10	  N/A	    0.00	   352.39	    0.45	 352.87        1.05	    22.4      137.66	  0.0	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	      6.13     0.02    93.84	     83.02
   2	     23.67     0.04    76.29	     75.48
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	  2158	      7119	 103	 24945	     2.2	3308	     0	   21538       0.5
   2	  1783	     29039	  64	 43600	     1.1       18060	   N/A	   15000       0.8
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	    430     4885       64	  25	   38	    14.4     85.1      0.5
   2	    404    10699       17	  19	   40	    13.6     86.1      0.3
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	     2,779	 1,277	     2,779	  0    1,158	     4,036	 0	    1	   20	    0	     2,736	1,939		91	2,780	 0
   2	     2,166	    94	     2,166	  0	   4	     2,177	 0	   11	   67	    2	     2,114	1,398		25	2,166	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	     4,945	 1,371	     4,945	  0    1,162	     6,213	 0	   12	   87	    2	     4,850	3,337	       116	4,946	 0
 Avg	     2,473	   686	     2,473	  0	 581	     3,107	 0	    6	   44	    1	     2,425	1,669		58	2,473	 0
 Std	       433	   837	       433	  0	 816	     1,315	 0	    7	   33	    1	       440	  383		47	  434	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       1     0.00   100.00     0.00	0.00	 0.00	  0.00		26     0.00	0.00	26.92	 73.08	   0.00     0.00
   2	       0     0.00     0.00     0.00	0.00	 0.00	  0.00		18     0.00	5.56	33.33	 61.11	   0.00     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	       1								44
 Avg	       1								22
 Std	       1								 6
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		 1,823	 94.7	 1.5	3.8	    2,236   30.6   69.0    0.4	   7284   6811	42865	5214	 2053	2284   1938   4080
	2   others		    30	100.0	 0.0	0.0	       99   75.8   24.2    0.0	   1250   1250	  N/A	 N/A	31393  40949   1531    N/A
	2   undo header 	     4	100.0	 0.0	0.0	       19    5.3   94.7    0.0	   3131   3131	  N/A	 N/A	 7403  14564   7005    N/A

   2	1   data block		 2,618	 94.5	 0.4	5.0	    4,827   56.4   40.9    2.8	  39571  37395	40380  80310	18506  27452   4440  44142
	1   undo header 	 1,154	 91.3	 6.8	1.9	       14    0.0  100.0    0.0	   7442   5193	38419	5357	 7487	 N/A   7487    N/A
	1   others		    91	100.0	 0.0	0.0	      121   28.1   69.4    2.5	   1117   1117	  N/A	 N/A	 2088	1988   1916   8023
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	  1,726   100.0      0.0	   684	 100.0	    0.0      6811    6811     N/A      2284    2284	N/A
	2   others		 0    N/A	     30   100.0      0.0	    75	 100.0	    0.0      1250    1250     N/A     40949   40949	N/A
	2   undo header 	 0    N/A	      4   100.0      0.0	     1	 100.0	    0.0      3131    3131     N/A     14564   14564	N/A
	2   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	  2,475   100.0      0.0	 2,721	 100.0	    0.0     37395   37395     N/A     27452   27452	N/A
	1   undo header 	 0    N/A	  1,054   100.0      0.0	     0	   N/A	    N/A      5193    5193     N/A	N/A	N/A	N/A
	1   others		 0    N/A	     91   100.0      0.0	    34	 100.0	    0.0      1117    1117     N/A      1988    1988	N/A
	1   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.22.248  N
   2 fg-priv:1	  169.254.31.173  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      58     1036    1.0	   63	   993	  1.0
	  2	      58    53864  392.3	   62	 50704	379.6

   2	  1	      57     1784    1.4	   62	  2490	  2.5
	  2	      57      426    0.3	   62	   428	  0.3
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  2,680.5	44.2	    2.7    2,601.5	  1.1	    31.1      3,163.4	    24.9	2.1    3,117.5	      1.1	17.8
   2	  3,108.7	26.8	    2.1    3,060.9	  1.0	    17.7      2,631.5	    42.8	2.7    2,554.2	      1.0	30.7
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	  5,789.2	71.0	    4.8    5,662.5	  2.1	    48.8      5,794.9	    67.7	4.8    5,671.7	      2.1	48.6
 Avg	  2,894.6	35.5	    2.4    2,831.2	  1.1	    24.4      2,897.5	    33.9	2.4    2,835.9	      1.1	24.3
 Std	    302.7	12.3	    0.4      324.9	  0.0	     9.4	376.1	    12.7	0.4	 398.3	      0.0	 9.1
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 51-

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      4.2	 0.1	    0.0        4.1	  0.0	     0.0	  5.0	     0.0	0.0	   4.9	      0.0	 0.0
   2	      4.9	 0.0	    0.0        4.8	  0.0	     0.0	  4.1	     0.1	0.0	   4.0	      0.0	 0.0
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	      9.1	 0.1	    0.0        8.9	  0.0	     0.1	  9.1	     0.1	0.0	   8.9	      0.0	 0.1
 Avg	      4.6	 0.1	    0.0        4.5	  0.0	     0.0	  4.6	     0.1	0.0	   4.5	      0.0	 0.0
 Std	      0.5	 0.0	    0.0        0.5	  0.0	     0.0	  0.6	     0.0	0.0	   0.6	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	 27,989.9   11,247,048	     0	     0	     0	     0	      28,197.2	 11,298,955	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  3,487.3    4,200,473	     0	     0	     0	     0	       4,151.3	  6,221,193	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.1	   463	     0	     0	     0	     0		   0.1		401	  0	  0	  0	  0
       fg-pub:1   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      2.0	 3,099	     0	     0	     0	     0		   1.2	      3,131	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     51.4      973,351	     0	     0	     0	     0		  51.4	    973,351	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	 28,381.4   11,975,056	     0	     0	     0	     0	      27,823.0	 10,760,910	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  4,118.5    4,504,010	     0	     0	     0	     0	       3,513.5	  5,573,303	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.1	   401	     0	     0	     0	     0		   0.1		463	  0	  0	  0	  0
       fg-pub:1   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      2.0	 3,029	     0	     0	     0	     0		   1.2	      3,083	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     86.2    1,257,075	     0	     0	     0	     0		  86.2	  1,257,075	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 64,119.0   34,164,005	     0	     0	     0	     0	      63,825.2	 36,091,865	  0	  0	  0	  0
 Avg							  3,771.7    2,009,647	     0	     0	     0	     0	       3,754.4	  2,123,051	  0	  0	  0	  0
 Std							  9,274.4    3,886,661	     0	     0	     0	     0	       9,216.7	  3,865,968	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 51-
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	     44.1	17,726	     0	     0	     0	     0		  44.4	     17,807	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	      5.5	 6,620	     0	     0	     0	     0		   6.5	      9,805	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	     1	     0	     0	     0	     0		   0.0		  1	  0	  0	  0	  0
       fg-pub:1   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  5	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.1	 1,534	     0	     0	     0	     0		   0.1	      1,534	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	     44.7	18,871	     0	     0	     0	     0		  43.8	     16,958	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	      6.5	 7,098	     0	     0	     0	     0		   5.5	      8,783	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	     1	     0	     0	     0	     0		   0.0		  1	  0	  0	  0	  0
       fg-pub:1   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  5	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.1	 1,981	     0	     0	     0	     0		   0.1	      1,981	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							    101.0	53,840	     0	     0	     0	     0		 100.6	     56,879	  0	  0	  0	  0
 Avg							      5.9	 3,167	     0	     0	     0	     0		   5.9	      3,346	  0	  0	  0	  0
 Std							     14.6	 6,125	     0	     0	     0	     0		  14.5	      6,093	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    1		41.0	 34,875.0      2,619.0		0.0	   1.52      0.07      0.09	 0.54	   0.10      0.68	      87	  114		   7		4	     7
   2	    1		41.0	  2,619.0     34,875.0		0.0	   1.41      0.08      0.10	 0.33	   0.03      0.84	      71	   41		   7		4	     7
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    1		41.0	 18,747.0     18,747.0		0.0	   1.47      0.08      0.10	 0.44	   0.07      0.76	      79	   78		   7		4	     7
 Max				 34,875.0     34,875.0		0.0	   1.52      0.08      0.10	 0.54	   0.10      0.84	      87	  114		   7		4	     7
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Captured SQL account for   97.9% of Total DB Time (s):	   72,333
-> Captured PL/SQL account for	 75.8% of Total DB Time (s):	      72,333

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	    44,832.82	 1,919.88   31,234.54	   5,737,678	4,927,288    4,953,458	 11,404.93	 62,702 	   0.72        0.03	   0.50 	  91.5	       78.6	    79.0	0.18	   62.0     46.6      0.6     14.4     14.7	56.2	 14.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	    25,900.66	 2,026.14   16,898.54	  29,219,114   27,988,887      355,634	  8,331.34	355,606 	   0.07        0.01	   0.05 	  82.2	       78.7	     1.0	0.02	   35.8     49.2      0.3     73.6     83.6	41.0	 80.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

9j9p88t9arm28	       564.18	    37.94      362.60	     200,854	  190,249	     1	    174.58	      1 	 564.18       37.94	 362.60      200,854.0	  190,249.0	     1.0      174.58	    0.8      0.9      0.0      0.5	0.6	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

5q9x3sz49jcja	       563.30	    37.78      518.55	     337,554	  316,896	     1	      0.00	      1 	 563.30       37.78	 518.55      337,554.0	  316,896.0	     1.0	0.00	    0.8      0.9      0.0      0.9	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9n7n07rfgj5y8	       563.29	    34.34      350.77	     194,687	  184,303	     1	    174.16	      1 	 563.29       34.34	 350.77      194,687.0	  184,303.0	     1.0      174.16	    0.8      0.8      0.0      0.5	0.6	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '22'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cfqgzkaxqzg38	       563.25	    37.16      498.69	     318,770	  298,900	     1	     18.62	      1 	 563.25       37.16	 498.69      318,770.0	  298,900.0	     1.0       18.62	    0.8      0.9      0.0      0.8	0.9	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

btxhvgkudmtmh	       563.18	    38.49      368.30	     210,983	  198,860	     1	    162.88	      1 	 563.18       38.49	 368.30      210,983.0	  198,860.0	     1.0      162.88	    0.8      0.9      0.0      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bbp00h54hyg9h	       563.14	    39.11      523.66	     344,087	  320,281	     1	      3.97	      1 	 563.14       39.11	 523.66      344,087.0	  320,281.0	     1.0	3.97	    0.8      0.9      0.0      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

944mdaa2ps4z4	       563.10	    38.39      524.90	     334,778	  314,981	     1	      7.11	      1 	 563.10       38.39	 524.90      334,778.0	  314,981.0	     1.0	7.11	    0.8      0.9      0.0      0.8	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '14'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cgymr2xd94y9m	       563.06	    37.92      521.87	     327,287	  309,547	     1	     11.93	      1 	 563.06       37.92	 521.87      327,287.0	  309,547.0	     1.0       11.93	    0.8      0.9      0.0      0.8	0.9	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Captured SQL account for   96.2% of Total CPU Time (s):	     4,120
-> Captured PL/SQL account for	 76.1% of Total CPU Time (s):		4,120

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   2,026.14	25,900.66   16,898.54	  29,219,114   27,988,887      355,634	  8,331.34	355,606 	 0.01	       0.07	   0.05 	  82.2	       78.7	     1.0	0.02	   49.2     35.8     34.6     73.6     83.6	41.0	 80.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   1,919.88	44,832.82   31,234.54	   5,737,678	4,927,288    4,953,458	 11,404.93	 62,702 	 0.03	       0.72	   0.50 	  91.5	       78.6	    79.0	0.18	   46.6     62.0     63.9     14.4     14.7	56.2	 14.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

cpwuynd81c18b	      39.32	   562.11      379.65	     216,547	  205,386	     1	    155.92	      1 	39.32	     562.11	 379.65      216,547.0	  205,386.0	     1.0      155.92	    1.0      0.8      0.8      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

5nz6b4v9qbsbr	      39.31	   562.17      529.24	     351,222	  326,852	     1	      0.01	      1 	39.31	     562.17	 529.24      351,222.0	  326,852.0	     1.0	0.01	    1.0      0.8      1.1      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bbp00h54hyg9h	      39.11	   563.14      523.66	     344,087	  320,281	     1	      3.97	      1 	39.11	     563.14	 523.66      344,087.0	  320,281.0	     1.0	3.97	    0.9      0.8      1.1      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1vbnx1nmxh6g5	      39.01	   561.78      370.00	     214,296	  202,676	     1	    165.96	      1 	39.01	     561.78	 370.00      214,296.0	  202,676.0	     1.0      165.96	    0.9      0.8      0.8      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0fq8myny00n70	      38.95	   562.12      506.67	     326,305	  307,548	     1	     23.41	      1 	38.95	     562.12	 506.67      326,305.0	  307,548.0	     1.0       23.41	    0.9      0.8      1.0      0.8	0.9	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

3scs6w7r6f9xa	      38.88	   562.15      533.81	     343,814	  323,111	     1	      0.00	      1 	38.88	     562.15	 533.81      343,814.0	  323,111.0	     1.0	0.00	    0.9      0.8      1.1      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bu2cwsvp2u0hx	      38.84	   562.26      373.17	     210,907	  199,908	     1	    163.97	      1 	38.84	     562.26	 373.17      210,907.0	  199,908.0	     1.0      163.97	    0.9      0.8      0.8      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

63fqcgaztwa1q	      38.79	   562.77      530.12	     344,090	  322,872	     1	      0.00	      1 	38.79	     562.77	 530.12      344,090.0	  322,872.0	     1.0	0.00	    0.9      0.8      1.1      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Captured SQL account for   98.5% of Total User I/O Wait Time (s):	      48,859
-> Captured PL/SQL account for	 78.1% of Total User I/O Wait Time (s): 	 48,859

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	  31,234.54	44,832.82    1,919.88	   5,737,678	4,927,288    4,953,458	 11,404.93	 62,702 	 0.50	       0.72	   0.03 	  91.5	       78.6	    79.0	0.18	   63.9     62.0     46.6     14.4     14.7	56.2	 14.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	  16,898.54	25,900.66    2,026.14	  29,219,114   27,988,887      355,634	  8,331.34	355,606 	 0.05	       0.07	   0.01 	  82.2	       78.7	     1.0	0.02	   34.6     35.8     49.2     73.6     83.6	41.0	 80.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

3scs6w7r6f9xa	     533.81	   562.15	38.88	     343,814	  323,111	     1	      0.00	      1        533.81	     562.15	  38.88      343,814.0	  323,111.0	     1.0	0.00	    1.1      0.8      0.9      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '34'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

63fqcgaztwa1q	     530.12	   562.77	38.79	     344,090	  322,872	     1	      0.00	      1        530.12	     562.77	  38.79      344,090.0	  322,872.0	     1.0	0.00	    1.1      0.8      0.9      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

5nz6b4v9qbsbr	     529.24	   562.17	39.31	     351,222	  326,852	     1	      0.01	      1        529.24	     562.17	  39.31      351,222.0	  326,852.0	     1.0	0.01	    1.1      0.8      1.0      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bbp00h54hyg9h	     523.66	   563.14	39.11	     344,087	  320,281	     1	      3.97	      1        523.66	     563.14	  39.11      344,087.0	  320,281.0	     1.0	3.97	    1.1      0.8      0.9      0.9	1.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0fq8myny00n70	     506.67	   562.12	38.95	     326,305	  307,548	     1	     23.41	      1        506.67	     562.12	  38.95      326,305.0	  307,548.0	     1.0       23.41	    1.0      0.8      0.9      0.8	0.9	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

cpwuynd81c18b	     379.65	   562.11	39.32	     216,547	  205,386	     1	    155.92	      1        379.65	     562.11	  39.32      216,547.0	  205,386.0	     1.0      155.92	    0.8      0.8      1.0      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bu2cwsvp2u0hx	     373.17	   562.26	38.84	     210,907	  199,908	     1	    163.97	      1        373.17	     562.26	  38.84      210,907.0	  199,908.0	     1.0      163.97	    0.8      0.8      0.9      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1vbnx1nmxh6g5	     370.00	   561.78	39.01	     214,296	  202,676	     1	    165.96	      1        370.00	     561.78	  39.01      214,296.0	  202,676.0	     1.0      165.96	    0.8      0.8      0.9      0.5	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Buffer Gets:	   39,711,487
-> Captured SQL account for   98.1% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    29,219,114	 27,988,887	25,900.66    2,026.14	16,898.54      355,634	  8,331.34	355,606 	    82.2	 78.7	       0.07	   0.01        0.05	     1.0	0.02	   73.6     83.6     35.8     49.2     34.6	41.0	 80.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     5,737,678	  4,927,288	44,832.82    1,919.88	31,234.54    4,953,458	 11,404.93	 62,702 	    91.5	 78.6	       0.72	   0.03        0.50	    79.0	0.18	   14.4     14.7     62.0     46.6     63.9	56.2	 14.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3kqrku32p6sfn	     3,922,567		 14	     9.54	 7.68	     0.14	     0	      1.06	      1      3,922,567.0	 14.0	       9.54	   7.68        0.14	     0.0	1.06	    9.9      0.0      0.0      0.2	0.0	 0.0	  0.0
MERGE /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ INTO OPTSTAT_USER_
PREFS$ D USING ( SELECT * FROM (SELECT O.OBJ#, SYSTIMESTAMP CHGTIME, ROUND(MAX(S
.DELTA_READ_IO_BYTES/S.DELTA_TIME), 3) SCANRATE FROM GV$ACTIVE_SESSION_HISTORY S
, GV$SQL_PLAN P, OBJ$ O, USER$ U WHERE S.INST_ID = P.INST_ID AND S.SQL_ID = P.SQ

9x4w27ag2x9tz	       515,301	    478,234	   545.06	35.20	   528.74	     1	      0.03	      1        515,301.0    478,234.0	     545.06	  35.20      528.74	     1.0	0.03	    1.3      1.4      0.8      0.9	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

4ws27v7ay8j6x	       515,101	    479,177	   545.15	35.09	   526.30	     1	      0.90	      1        515,101.0    479,177.0	     545.15	  35.09      526.30	     1.0	0.90	    1.3      1.4      0.8      0.9	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

fvgh1q9dsd479	       511,133	    478,584	   545.11	35.15	   530.37	     1	      0.00	      1        511,133.0    478,584.0	     545.11	  35.15      530.37	     1.0	0.00	    1.3      1.4      0.8      0.9	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bra280pu141z8	       510,483	    475,129	   545.35	34.70	   528.99	     1	      0.03	      1        510,483.0    475,129.0	     545.35	  34.70      528.99	     1.0	0.03	    1.3      1.4      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1u879ayvfcr0m	       509,285	    474,997	   545.18	34.61	   523.77	     1	      0.00	      1        509,285.0    474,997.0	     545.18	  34.61      523.77	     1.0	0.00	    1.3      1.4      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

080r2n9vygcm7	       506,991	    472,379	   545.13	34.66	   523.32	     1	      0.00	      1        506,991.0    472,379.0	     545.13	  34.66      523.32	     1.0	0.00	    1.3      1.4      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0v6ufj2r5qaah	       506,131	    472,384	   545.08	34.65	   524.61	     1	      0.00	      1        506,131.0    472,384.0	     545.08	  34.65      524.61	     1.0	0.00	    1.3      1.4      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Disk Reads:	  33,493,864
-> Captured SQL account for   98.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  27,988,887	 29,219,114	25,900.66    2,026.14	16,898.54      355,634	  8,331.34	355,606 	  78.7		 82.2	       0.07	   0.01        0.05	     1.0	0.02	   83.6     73.6     35.8     49.2     34.6	41.0	 80.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   4,927,288	  5,737,678	44,832.82    1,919.88	31,234.54    4,953,458	 11,404.93	 62,702 	  78.6		 91.5	       0.72	   0.03        0.50	    79.0	0.18	   14.7     14.4     62.0     46.6     63.9	56.2	 14.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

4ws27v7ay8j6x	     479,177	    515,101	   545.15	35.09	   526.30	     1	      0.90	      1      479,177.0	    515,101.0	     545.15	  35.09      526.30	     1.0	0.90	    1.4      1.3      0.8      0.9	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

fvgh1q9dsd479	     478,584	    511,133	   545.11	35.15	   530.37	     1	      0.00	      1      478,584.0	    511,133.0	     545.11	  35.15      530.37	     1.0	0.00	    1.4      1.3      0.8      0.9	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9x4w27ag2x9tz	     478,234	    515,301	   545.06	35.20	   528.74	     1	      0.03	      1      478,234.0	    515,301.0	     545.06	  35.20      528.74	     1.0	0.03	    1.4      1.3      0.8      0.9	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bra280pu141z8	     475,129	    510,483	   545.35	34.70	   528.99	     1	      0.03	      1      475,129.0	    510,483.0	     545.35	  34.70      528.99	     1.0	0.03	    1.4      1.3      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1u879ayvfcr0m	     474,997	    509,285	   545.18	34.61	   523.77	     1	      0.00	      1      474,997.0	    509,285.0	     545.18	  34.61      523.77	     1.0	0.00	    1.4      1.3      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0v6ufj2r5qaah	     472,384	    506,131	   545.08	34.65	   524.61	     1	      0.00	      1      472,384.0	    506,131.0	     545.08	  34.65      524.61	     1.0	0.00	    1.4      1.3      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

080r2n9vygcm7	     472,379	    506,991	   545.13	34.66	   523.32	     1	      0.00	      1      472,379.0	    506,991.0	     545.13	  34.66      523.32	     1.0	0.00	    1.4      1.3      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0wnmjrnvgrwyw	     470,571	    504,953	   545.04	34.65	   523.60	     1	      0.01	      1      470,571.0	    504,953.0	     545.04	  34.65      523.60	     1.0	0.01	    1.4      1.3      0.8      0.8	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '104'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P60SDB/p60sdb1  Snap
-> Total Physical Read Requests:      33,491,965
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	 33,491,965
-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
4ws27v7ay8j6x	     479,177	  479,177      479,177	      545.15	   35.09      526.30		1	 0.90		 1	479,177.0    479,177.0	  479,177.0	   545.15	35.09	   526.30	   1.0	      0.90	     1.4      1.4    1.4     0.8    0.9     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

fvgh1q9dsd479	     478,584	  478,584      478,584	      545.11	   35.15      530.37		1	 0.00		 1	478,584.0    478,584.0	  478,584.0	   545.11	35.15	   530.37	   1.0	      0.00	     1.4      1.4    1.4     0.8    0.9     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9x4w27ag2x9tz	     478,234	  478,234      478,234	      545.06	   35.20      528.74		1	 0.03		 1	478,234.0    478,234.0	  478,234.0	   545.06	35.20	   528.74	   1.0	      0.03	     1.4      1.4    1.4     0.8    0.9     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bra280pu141z8	     475,129	  475,129      475,129	      545.35	   34.70      528.99		1	 0.03		 1	475,129.0    475,129.0	  475,129.0	   545.35	34.70	   528.99	   1.0	      0.03	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '27'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1u879ayvfcr0m	     474,997	  474,997      474,997	      545.18	   34.61      523.77		1	 0.00		 1	474,997.0    474,997.0	  474,997.0	   545.18	34.61	   523.77	   1.0	      0.00	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0v6ufj2r5qaah	     472,384	  472,384      472,384	      545.08	   34.65      524.61		1	 0.00		 1	472,384.0    472,384.0	  472,384.0	   545.08	34.65	   524.61	   1.0	      0.00	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

080r2n9vygcm7	     472,379	  472,379      472,379	      545.13	   34.66      523.32		1	 0.00		 1	472,379.0    472,379.0	  472,379.0	   545.13	34.66	   523.32	   1.0	      0.00	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0wnmjrnvgrwyw	     470,571	  470,571      470,571	      545.04	   34.65      523.60		1	 0.01		 1	470,571.0    470,571.0	  470,571.0	   545.04	34.65	   523.60	   1.0	      0.01	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '104'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

chsnzuhv84uy5	     469,962	  469,962      469,962	      545.34	   34.73      526.64		1	 1.46		 1	469,962.0    469,962.0	  469,962.0	   545.34	34.73	   526.64	   1.0	      1.46	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

7a314umnzbfsf	     468,665	  468,665      468,665	      545.16	   34.77      518.45		1	 0.01		 1	468,665.0    468,665.0	  468,665.0	   545.16	34.77	   518.45	   1.0	      0.01	     1.4      1.4    1.4     0.8    0.8     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Executions:	     444,375
-> Captured SQL account for   96.2% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	     355,606	 25,900.66    2,026.14	 16,898.54     29,219,114   27,988,887	    355,634    8,331.34 	   0.07        0.01	   0.05 	  82.2	       78.7	     1.0	0.02	   80.0     35.8     49.2     34.6     73.6	83.6	 41.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	      62,702	 44,832.82    1,919.88	 31,234.54	5,737,678    4,927,288	  4,953,458   11,404.93 	   0.72        0.03	   0.50 	  91.5	       78.6	    79.0	0.18	   14.1     62.0     46.6     63.9     14.4	14.7	 56.2
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

24djtk7r8fz33	       2,096	      0.23	  0.22	      0.00	    6,303	     0	      2,036	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.5      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

f3ww8rgva3hrs	       1,550	      0.77	  0.26	      0.18	    5,438	    37	      1,549	   0.33 	   0.00        0.00	   0.00 	   3.5		0.0	     1.0	0.00	    0.3      0.0      0.0      0.0	0.0	 0.0	  0.0
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

87gaftwrm2h68		 921	      2.08	  0.05	      0.00	    1,962	     0		120	   3.03 	   0.00        0.00	   0.00 	   2.1		0.0	     0.1	0.00	    0.2      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

86708bvah4akq		 651	      0.14	  0.14	      0.00	    1,735	     0		651	   0.00 	   0.00        0.00	   0.00 	   2.7		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and status$
 != 1

3dbzmtf9ahvzt		 469	      0.99	  0.22	      0.01	    2,975	     1		469	   0.74 	   0.00        0.00	   0.00 	   6.3		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

acmvv4fhdc9zh		 281	      0.10	  0.04	      0.05	    1,081	    10		238	   0.02 	   0.00        0.00	   0.00 	   3.8		0.0	     0.8	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

9tgj4g8y4rwy8		 219	      0.07	  0.03	      0.04	      656	     3		218	   0.01 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

5cu0x10yu88sw		 201	      0.37	  0.07	      0.03	    1,214	     7		201	   0.27 	   0.00        0.00	   0.00 	   6.0		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
merge into sys.wri$_index_usage iu us
ing dual on (
iu.obj# = :objn) when mat
ched then update

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Total Cluster Wait Time (s): 	 20,301
-> Captured SQL account for   97.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	  11,404.93	44,832.82    1,919.88	31,234.54      5,737,678    4,927,288	 4,953,458	 62,702 	 0.18	       0.72	   0.03        0.50	      91.5	   78.6 	79.0	   56.2     62.0     46.6     63.9     14.4	14.7	 14.1
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	   8,331.34	25,900.66    2,026.14	16,898.54     29,219,114   27,988,887	   355,634	355,606 	 0.02	       0.07	   0.01        0.05	      82.2	   78.7 	 1.0	   41.0     35.8     49.2     34.6     73.6	83.6	 80.0
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

1ma366vqkk88p	     400.18	   546.06	18.13	   140.13	 115,637      110,113		 1	      1        400.18	     546.06	  18.13      140.13	 115,637.0    110,113.0 	 1.0	    2.0      0.8      0.4      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '125'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

dvky5v8qr4n6s	     394.78	   547.23	18.33	   142.13	 116,446      111,311		 1	      1        394.78	     547.23	  18.33      142.13	 116,446.0    111,311.0 	 1.0	    1.9      0.8      0.4      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

15084tmvuq24t	     392.68	   545.71	18.82	   146.49	 117,920      112,292		 1	      1        392.68	     545.71	  18.82      146.49	 117,920.0    112,292.0 	 1.0	    1.9      0.8      0.5      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0raxwcmc41phu	     392.54	   546.25	18.41	   146.85	 117,300      111,933		 1	      1        392.54	     546.25	  18.41      146.85	 117,300.0    111,933.0 	 1.0	    1.9      0.8      0.4      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

amc2bf2c5axvj	     389.77	   546.19	19.15	   146.81	 118,556      112,779		 1	      1        389.77	     546.19	  19.15      146.81	 118,556.0    112,779.0 	 1.0	    1.9      0.8      0.5      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '44'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3dara5jcrdzcm	     389.25	   547.31	18.88	   149.63	 120,041      114,389		 1	      1        389.25	     547.31	  18.88      149.63	 120,041.0    114,389.0 	 1.0	    1.9      0.8      0.5      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '113'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

2s578t5qpv8b5	     388.57	   546.16	19.05	   150.53	 119,814      113,924		 1	      1        388.57	     546.16	  19.05      150.53	 119,814.0    113,924.0 	 1.0	    1.9      0.8      0.5      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '102'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

g5nsjqnj16rfq	     387.80	   546.04	19.13	   152.06	 122,004      116,217		 1	      1        387.80	     546.04	  19.13      152.06	 122,004.0    116,217.0 	 1.0	    1.9      0.8      0.5      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '109'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '80' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM bg: segment fix monitor						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM cbk:blocks examined						  1,415 	   2.2		0.0		1.1	      0.1	    1.0 	  1.2
ASSM cbk:blocks marked full						    322 	   0.5		0.0		0.3	      0.0	    0.2 	  0.3
ASSM gsp:L1 bitmaps examined						  1,162 	   1.8		0.0		0.9	      0.2	    0.8 	  1.0
ASSM gsp:L2 bitmap full 						     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    304 	   0.5		0.0		0.2	      0.0	    0.2 	  0.3
ASSM gsp:Search all							     33 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search hint							     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search steal							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						  1,095 	   1.7		0.0		0.9	      0.1	    0.8 	  1.0
ASSM gsp:get free data block						    886 	   1.4		0.0		0.7	      0.2	    0.6 	  0.8
ASSM gsp:get free index block						    209 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
ASSM gsp:good hint							    870 	   1.4		0.0		0.7	      0.1	    0.6 	  0.8
ASSM rsv:fill reserve							      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM wasted db state change						      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO (bound) vector count 					     32 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO block miss count					     27,456,215       43,269.3	      427.6	   21,634.7	    650.6      21,174.6      22,094.7
Batched IO double miss count						389,388 	 613.7		6.1	      306.8	     17.4	  294.5 	319.1
Batched IO same unit count						     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO single block count						    151 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
Batched IO vector block count					     27,457,876       43,271.9	      427.6	   21,636.0	    650.2      21,176.2      22,095.7
Batched IO vector read count						362,073 	 570.6		5.6	      285.3	      7.6	  279.9 	290.7
Block Cleanout Optim referenced 					     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
CCursor + sql area evicted						    150 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
CPU used by this session						585,946 	 923.4		9.1	      461.7	    133.5	  367.3 	556.1
CPU used when call started						440,792 	 694.7		6.9	      347.3	    103.8	  273.9 	420.7
CR blocks created							  1,683 	   2.7		0.0		1.3	      0.2	    1.2 	  1.5
Cached Commit SCN referenced					     27,985,755       44,103.9	      435.8	   22,051.9	    824.4      21,469.0      22,634.9
Client Advertised Receive Window					    903 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
Client Advertised Send Window						    903 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
Client Path Maximum Transmission Unit(MTU)			      4,416,660        6,960.7	       68.8	    3,480.4	  4,718.4	  144.0       6,816.8
Client Send Congestion Window						  1,290 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
Client Time (usec) Last Ack Received					     66 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
Client Time (usec) Last Data Received					     65 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
Client Time (usec) Last Data Sent					    325 	   0.5		0.0		0.3	      0.0	    0.3 	  0.3
Client Time (usec) Round Trip Time					296,242 	 466.9		4.6	      233.4	     65.5	  187.1 	279.8
Client Time (usec) Round Trip Time Variance				291,945 	 460.1		4.5	      230.0	     28.8	  209.6 	250.4
Client Total Bytes Acked					      2,030,639        3,200.2	       31.6	    1,600.1	     65.6	1,553.7       1,646.5
Client Total Bytes Received						787,888        1,241.7	       12.3	      620.8	     21.6	  605.6 	636.1
Commit SCN cached							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
DB time 							      7,691,149       12,120.8	      119.8	    6,060.4	    263.0	5,874.4       6,246.4
DBWR checkpoint buffers written 					 62,270 	  98.1		1.0	       49.1	     12.4	   40.3 	 57.8
DBWR checkpoints							  3,095 	   4.9		0.0		2.4	      0.1	    2.4 	  2.5
DBWR fusion writes							    202 	   0.3		0.0		0.2	      0.1	    0.1 	  0.3
DBWR object drop buffers written					     52 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
DBWR transaction table writes						    462 	   0.7		0.0		0.4	      0.0	    0.4 	  0.4
DBWR undo block writes							225,211 	 354.9		3.5	      177.5	      4.6	  174.2 	180.7
DFO trees parallelized							     24 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
HSC Heap Segment Block Changes					      5,051,744        7,961.2	       78.7	    3,980.6	     97.5	3,911.7       4,049.6
Heap Segment Array Inserts						    344 	   0.5		0.0		0.3	      0.0	    0.3 	  0.3
Heap Segment Array Updates						     18 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								  1,811 	   2.9		0.0		1.4	      0.9	    0.8 	  2.1
KTFB alloc space (block)					  1,635,516,416    2,577,535.2	   25,470.6	1,288,767.6	923,631.9     635,661.2   1,941,874.0
KTFB alloc time (ms)						    510,522,753      804,576.3	    7,950.6	  402,288.2	353,707.7     152,179.0     652,397.3
KTFB apply req								  3,327 	   5.2		0.1		2.6	      1.7	    1.4 	  3.8
KTFB apply time (ms)							304,022 	 479.1		4.7	      239.6	    191.2	  104.4 	374.8
KTFB free req								  1,524 	   2.4		0.0		1.2	      0.7	    0.7 	  1.7
KTFB free space (block) 						172,096 	 271.2		2.7	      135.6	     84.6	   75.8 	195.5
KTFB free time (ms)						    123,191,053      194,148.0	    1,918.5	   97,074.0	 95,137.9      29,801.3     164,346.7

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
PX local messages recv'd						    354 	   0.6		0.0		0.3	      0.2	    0.1 	  0.4
PX local messages sent							    354 	   0.6		0.0		0.3	      0.2	    0.1 	  0.4
PX remote messages recv'd						    351 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
PX remote messages sent 						    351 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
Parallel operations not downgraded					     24 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Requests to/from client 						    523 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
SQL*Net roundtrips to/from client					    395 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
TBS Extension: tasks created						     40 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
active txn count during cleanout					    461 	   0.7		0.0		0.4	      0.0	    0.4 	  0.4
application wait time							    463 	   0.7		0.0		0.4	      0.2	    0.2 	  0.5
auto extends on undo tablespace 					     40 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
background checkpoints completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
background timeouts							 12,798 	  20.2		0.2	       10.1	      0.1	   10.0 	 10.2
blocks cleaned out using minact 				      1,337,323        2,107.5	       20.8	    1,053.8	     62.3	1,009.7       1,097.8
buffer is not pinned count					     91,839,644      144,733.1	    1,430.3	   72,366.5	  6,527.4      67,751.0      76,982.1
buffer is pinned count						     33,419,725       52,667.4	      520.5	   26,333.7	    630.4      25,887.9      26,779.5
bytes received via SQL*Net from client					526,796 	 830.2		8.2	      415.1	    435.6	  107.1 	723.1
bytes sent via SQL*Net to client					 93,973 	 148.1		1.5	       74.0	     19.0	   60.6 	 87.5
calls to get snapshot scn: kcmgss					532,303 	 838.9		8.3	      419.4	      3.0	  417.3 	421.6
calls to kcmgas 							123,394 	 194.5		1.9	       97.2	      3.4	   94.8 	 99.6
calls to kcmgcs 							 15,693 	  24.7		0.2	       12.4	      3.1	   10.2 	 14.6
cell physical IO interconnect bytes				373,248,698,368  588,217,166.4	5,812,756.2   2.9410858E+08   8,828,092.6 2.8786618E+08 3.0035099E+08
change write time							 11,092 	  17.5		0.2		8.7	      2.6	    6.9 	 10.6
cleanout - number of ktugct calls					  3,904 	   6.2		0.1		3.1	      0.7	    2.6 	  3.5
cleanouts and rollbacks - consistent read gets				     19 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
cleanouts only - consistent read gets					     65 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
cluster key scan block gets						  2,997 	   4.7		0.0		2.4	      3.0	    0.3 	  4.5
cluster key scans							  2,043 	   3.2		0.0		1.6	      1.9	    0.3 	  3.0
cluster wait time						      2,027,584        3,195.3	       31.6	    1,597.6	  1,042.1	  860.7       2,334.5
commit batch/immediate performed					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit batch/immediate requested					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: block lost					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: buffer being written				     67 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
commit cleanout failures: callback failure				     47 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanouts						      5,053,949        7,964.7	       78.7	    3,982.4	     98.7	3,912.6       4,052.1
commit cleanouts successfully completed 			      5,053,832        7,964.5	       78.7	    3,982.3	     98.7	3,912.5       4,052.1
commit immediate performed						      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit immediate requested						      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit txn count during cleanout					    313 	   0.5		0.0		0.2	      0.0	    0.2 	  0.3
concurrency wait time							 68,594 	 108.1		1.1	       54.1	     48.5	   19.8 	 88.3
consistent changes							 13,162 	  20.7		0.2	       10.4	      0.7	    9.9 	 10.9
consistent gets 						     33,946,344       53,497.0	      528.7	   26,748.5	  3,814.5      24,051.2      29,445.8
consistent gets examination					      4,721,963        7,441.2	       73.5	    3,720.6	  4,272.4	  699.5       6,741.7
consistent gets examination (fastpath)				      4,721,337        7,440.2	       73.5	    3,720.1	  4,272.4	  699.1       6,741.2
consistent gets from cache					     33,946,344       53,497.0	      528.7	   26,748.5	  3,814.5      24,051.2      29,445.8
consistent gets pin						     29,224,381       46,055.8	      455.1	   23,027.9	    457.9      22,704.1      23,351.7
consistent gets pin (fastpath)					     27,759,446       43,747.2	      432.3	   21,873.6	    413.2      21,581.4      22,165.8
cursor authentications							    244 	   0.4		0.0		0.2	      0.1	    0.1 	  0.2
cursor reload failures							     37 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
data blocks consistent reads - undo records applied			    119 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
db block changes						     10,507,947       16,559.9	      163.6	    8,279.9	    213.3	8,129.1       8,430.8
db block gets							      5,765,046        9,085.4	       89.8	    4,542.7	    185.6	4,411.4       4,673.9
db block gets direct							    645 	   1.0		0.0		0.5	      0.0	    0.5 	  0.5
db block gets from cache					      5,764,400        9,084.3	       89.8	    4,542.2	    185.6	4,410.9       4,673.4
db block gets from cache (fastpath)					487,522 	 768.3		7.6	      384.2	     75.9	  330.5 	437.8
deferred (CURRENT) block cleanout applications			      1,358,387        2,140.7	       21.2	    1,070.4	     64.8	1,024.6       1,116.2
dirty buffers inspected 					      4,804,054        7,570.9	       74.8	    3,785.4	     96.5	3,717.2       3,853.7
enqueue conversions							 38,161 	  60.1		0.6	       30.1	     30.6	    8.4 	 51.7
enqueue releases							267,158 	 421.0		4.2	      210.5	     91.7	  145.7 	275.4
enqueue requests							266,958 	 420.7		4.2	      210.4	     91.7	  145.5 	275.2

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
enqueue timeouts							    123 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
enqueue waits								  9,732 	  15.3		0.2		7.7	      3.1	    5.5 	  9.8
exchange deadlocks							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
execute count								444,375 	 700.3		6.9	      350.2	      1.3	  349.3 	351.0
file io service time						  2,537,771,952    3,999,381.7	   39,521.8	1,999,690.9	176,265.7   1,875,052.2   2,124,329.5
file io wait time						983,477,585,860 1.54984973E+09 1.531610E+07   7.7492487E+08 7.1366905E+08 2.7028464E+08 1.2795651E+09
free buffer inspected						     34,003,088       53,586.8	      529.5	   26,793.4	    668.7      26,320.6      27,266.2
free buffer requested						     33,732,424       53,160.2	      525.3	   26,580.1	    799.8      26,014.5      27,145.7
gc blocks compressed							 11,242 	  17.7		0.2		8.9	      3.6	    6.3 	 11.4
gc blocks lost								  1,461 	   2.3		0.0		1.2	      1.0	    0.4 	  1.9
gc cr anti locks created						203,563 	 320.8		3.2	      160.4	      2.0	  159.0 	161.8
gc cr anti locks expanded						     45 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
gc cr anti locks shrunk 						    184 	   0.3		0.0		0.1	      0.1	    0.1 	  0.2
gc cr block build time							     43 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc cr block flush time							    336 	   0.5		0.0		0.3	      0.1	    0.2 	  0.4
gc cr block receive time						 12,534 	  19.8		0.2		9.9	     11.0	    2.1 	 17.7
gc cr blocks built							  4,990 	   7.9		0.1		3.9	      0.7	    3.4 	  4.4
gc cr blocks flushed							    118 	   0.2		0.0		0.1	      0.1	    0.0 	  0.1
gc cr blocks received							  5,718 	   9.0		0.1		4.5	      2.2	    2.9 	  6.1
gc cr blocks served							  6,263 	   9.9		0.1		4.9	      2.1	    3.5 	  6.4
gc cr multiblock grant time					     13,901,212       21,906.8	      216.5	   10,953.4	  9,274.7	4,395.2      17,511.6
gc cr multiblock grants received				      5,477,140        8,631.6	       85.3	    4,315.8	  1,092.9	3,543.0       5,088.6
gc current block flush time						     83 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
gc current block receive time						  9,724 	  15.3		0.2		7.7	      9.1	    1.2 	 14.1
gc current blocks flushed						     40 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks pinned						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc current blocks received						  7,286 	  11.5		0.1		5.7	      2.9	    3.7 	  7.8
gc current blocks served						  7,429 	  11.7		0.1		5.9	      3.0	    3.7 	  8.0
gc force cr read cr							    181 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
gc force cr read current						     14 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc kbytes saved 							 47,630 	  75.1		0.7	       37.5	     19.0	   24.1 	 51.0
gc kbytes sent								 61,906 	  97.6		1.0	       48.8	     21.6	   33.5 	 64.1
gc local grants 						     26,793,143       42,224.5	      417.3	   21,112.2	  2,042.5      19,668.0      22,556.5
gc merge pi bg								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc merge pi fg								     67 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
gc no change made							     37 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass grants 						     35 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass waits							     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc remote grants						      6,981,567       11,002.4	      108.7	    5,501.2	  1,253.9	4,614.6       6,387.8
gc status messages received						 85,471 	 134.7		1.3	       67.3	     20.6	   52.8 	 81.9
gc status messages sent 						 86,283 	 136.0		1.3	       68.0	     21.3	   52.9 	 83.0
gcs affinity lock failures						  6,462 	  10.2		0.1		5.1	      5.8	    1.0 	  9.2
gcs affinity lock grants					     25,452,075       40,111.0	      396.4	   20,055.5	  1,907.9      18,706.4      21,404.6
gcs anti-locks created							203,534 	 320.8		3.2	      160.4	      1.9	  159.0 	161.7
gcs data block access records					     33,519,341       52,824.4	      522.0	   26,412.2	    809.7      25,839.7      26,984.8
gcs messages sent						     22,544,332       35,528.4	      351.1	   17,764.2	  1,285.3      16,855.3      18,673.0
gcs read-mostly lock failures						202,367 	 318.9		3.2	      159.5	     25.8	  141.2 	177.7
gcs read-mostly lock grants					      1,148,600        1,810.1	       17.9	      905.1	    142.6	  804.2       1,005.9
gcs stats management (SCM) process posts				      7 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges messages sent							 66,553 	 104.9		1.0	       52.4	     39.4	   24.6 	 80.3
global enqueue get time 						 84,035 	 132.4		1.3	       66.2	     52.3	   29.2 	103.2
global enqueue gets sync						407,471 	 642.2		6.3	      321.1	    222.1	  164.0 	478.1
global enqueue releases 						371,978 	 586.2		5.8	      293.1	    191.7	  157.6 	428.6
heap block compress							 21,163 	  33.4		0.3	       16.7	      1.8	   15.4 	 18.0
hot buffers moved to head of LRU					357,440 	 563.3		5.6	      281.6	     88.7	  218.9 	344.4
immediate (CR) block cleanout applications				     84 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
immediate (CURRENT) block cleanout applications 			    635 	   1.0		0.0		0.5	      0.2	    0.4 	  0.6
in call idle wait time						     16,998,421       26,788.4	      264.7	   13,394.2	     29.1      13,373.6      13,414.8
index crx upgrade (positioned)						     63 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
index fetch by key						      3,778,973        5,955.1	       58.9	    2,977.6	  4,201.0	    7.0       5,948.1
index range scans						      4,200,827        6,620.0	       65.4	    3,310.0	  4,196.5	  342.6       6,277.3
leaf node 90-10 splits							     28 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
leaf node splits							    206 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
lob reads								  1,086 	   1.7		0.0		0.9	      0.5	    0.5 	  1.2
lob writes								  7,228 	  11.4		0.1		5.7	      0.9	    5.1 	  6.3
lob writes unaligned							  7,228 	  11.4		0.1		5.7	      0.9	    5.1 	  6.3
logical read bytes from cache					325,310,414,848  512,666,772.1	5,066,193.5   2.5633339E+08  29,728,078.2 2.3531246E+08 2.7735431E+08
logons cumulative							     73 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
max cf enq hold time							  3,910 	   6.2		0.1		3.1	      3.6	    0.5 	  5.7
messages received							472,388 	 744.5		7.4	      372.2	     38.8	  344.8 	399.7
messages sent								472,388 	 744.5		7.4	      372.2	     38.8	  344.8 	399.7
no work - consistent read gets					     29,172,542       45,974.1	      454.3	   22,987.1	    477.5      22,649.4      23,324.7
non-idle wait count						     10,961,884       17,275.2	      170.7	    8,637.6	    123.1	8,550.6       8,724.7
non-idle wait time						      7,471,886       11,775.2	      116.4	    5,887.6	    239.4	5,718.3       6,056.9
opened cursors cumulative						508,464 	 801.3		7.9	      400.7	      2.8	  398.7 	402.6
parse count (describe)							     28 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
parse count (hard)							    698 	   1.1		0.0		0.5	      0.7	    0.1 	  1.0
parse count (total)							  9,120 	  14.4		0.1		7.2	      0.1	    7.1 	  7.3
parse time cpu								    222 	   0.3		0.0		0.2	      0.2	    0.1 	  0.3
parse time elapsed							  1,603 	   2.5		0.0		1.3	      1.6	    0.1 	  2.4
physical read IO requests					     33,491,965       52,781.3	      521.6	   26,390.6	    798.1      25,826.3      26,955.0
physical read bytes						274,381,725,696  432,408,855.3	4,273,060.0   2.1620443E+08   6,536,089.7 2.1158271E+08 2.2082614E+08
physical read total IO requests 				     33,503,215       52,799.0	      521.8	   26,399.5	    798.9      25,834.6      26,964.4
physical read total bytes					277,610,123,264  437,496,607.5	4,323,337.1   2.1874830E+08   6,535,531.7 2.1412698E+08 2.2336962E+08
physical read total multi block requests				  2,964 	   4.7		0.0		2.3	      0.0	    2.3 	  2.3
physical reads							     33,493,864       52,784.3	      521.6	   26,392.1	    797.9      25,828.0      26,956.3
physical reads cache						     33,493,864       52,784.3	      521.6	   26,392.1	    797.9      25,828.0      26,956.3
physical reads cache prefetch					     27,065,599       42,653.7	      421.5	   21,326.9	    633.3      20,879.0      21,774.7
physical write IO requests					      5,050,466        7,959.2	       78.7	    3,979.6	    101.8	3,907.6       4,051.6
physical write bytes						 43,234,582,528   68,135,049.5	  673,310.0    34,067,524.7	824,813.3  33,484,293.6  34,650,755.8
physical write total IO requests				      5,152,629        8,120.2	       80.2	    4,060.1	    105.1	3,985.8       4,134.4
physical write total bytes					 47,808,261,120   75,342,902.5	  744,537.8    37,671,451.2   1,145,823.4  36,861,231.7  38,481,670.7
physical write total multi block requests				 15,320 	  24.1		0.2	       12.1	      0.1	   12.0 	 12.1
physical writes 						      5,277,659        8,317.3	       82.2	    4,158.6	    100.7	4,087.4       4,229.8
physical writes direct							    917 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
physical writes direct (lob)						    273 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
physical writes direct temporary tablespace				    220 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
physical writes from cache					      5,276,742        8,315.8	       82.2	    4,157.9	    100.7	4,086.7       4,229.1
physical writes non checkpoint					      5,270,065        8,305.3	       82.1	    4,152.6	    100.0	4,081.9       4,223.4
pinned buffers inspected						  2,860 	   4.5		0.0		2.3	      0.3	    2.0 	  2.5
process last non-idle time						  1,295 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
recursive calls 							638,773        1,006.7		9.9	      503.3	     14.4	  493.1 	513.5
recursive cpu usage							570,096 	 898.4		8.9	      449.2	    132.0	  355.9 	542.5
redo KB read							      1,740,800        2,743.4	       27.1	    1,371.7	     13.8	1,361.9       1,381.4
redo blocks checksummed by FG (exclusive)			      3,113,656        4,906.9	       48.5	    2,453.5	     38.0	2,426.6       2,480.3
redo blocks written						      8,470,526       13,349.0	      131.9	    6,674.5	    160.5	6,561.1       6,788.0
redo blocks written (group 0)					      5,756,253        9,071.5	       89.6	    4,535.7	     24.9	4,518.1       4,553.4
redo blocks written (group 1)					      2,714,273        4,277.5	       42.3	    2,138.8	    185.4	2,007.7       2,269.8
redo entries							      5,549,214        8,745.2	       86.4	    4,372.6	    137.7	4,275.2       4,470.0
redo size							  4,173,763,088    6,577,594.5	   64,999.7	3,288,797.2	 78,254.1   3,233,463.2   3,344,131.3
redo size for direct writes						  1,680 	   2.6		0.0		1.3	      0.1	    1.2 	  1.4
redo subscn max counts							    388 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
redo synch time 							    217 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
redo synch time (usec)						      2,143,331        3,377.8	       33.4	    1,688.9	    179.2	1,562.2       1,815.6
redo synch time overhead (usec) 					  9,110 	  14.4		0.1		7.2	      3.8	    4.5 	  9.9
redo synch time overhead count (  2ms)					     90 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
redo synch writes							    137 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
redo wastage							     24,351,588       38,376.6	      379.2	   19,188.3	    623.2      18,747.6      19,629.0
redo write active strands						 99,632 	 157.0		1.6	       78.5	      2.6	   76.7 	 80.3

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo write broadcast ack count						      9 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write broadcast ack time						 68,262 	 107.6		1.1	       53.8	     60.4	   11.1 	 96.5
redo write finish time						  1,396,721,652    2,201,150.3	   21,751.7	1,100,575.1	 64,586.7   1,054,905.4   1,146,244.8
redo write gather time						     96,566,075      152,182.2	    1,503.9	   76,091.1	  1,022.6      75,368.0      76,814.1
redo write info find							     90 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
redo write schedule time					     97,499,564      153,653.3	    1,518.4	   76,826.6	  1,232.7      75,955.0      77,698.3
redo write size count (   4KB)						  1,563 	   2.5		0.0		1.2	      0.2	    1.1 	  1.3
redo write size count (   8KB)						  1,903 	   3.0		0.0		1.5	      0.0	    1.5 	  1.5
redo write size count (  16KB)						  4,463 	   7.0		0.1		3.5	      0.1	    3.4 	  3.6
redo write size count (  32KB)						  8,773 	  13.8		0.1		6.9	      0.3	    6.7 	  7.1
redo write size count ( 128KB)						 27,663 	  43.6		0.4	       21.8	      0.1	   21.7 	 21.9
redo write size count ( 256KB)						  6,988 	  11.0		0.1		5.5	      0.6	    5.1 	  5.9
redo write size count ( 512KB)						    886 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
redo write size count (1024KB)						    424 	   0.7		0.0		0.3	      0.0	    0.3 	  0.4
redo write size count (inf)						    169 	   0.3		0.0		0.1	      0.0	    0.1 	  0.2
redo write time 							139,937 	 220.5		2.2	      110.3	      6.5	  105.7 	114.9
redo write time (usec)						  1,399,359,840    2,205,307.9	   21,792.8	1,102,654.0	 65,063.9   1,056,646.8   1,148,661.1
redo write total time						  1,506,275,876    2,373,801.0	   23,457.9	1,186,900.5	 66,157.9   1,140,119.8   1,233,681.1
redo write worker delay (usec)					     91,077,389      143,532.3	    1,418.4	   71,766.1	     74.4      71,713.5      71,818.8
redo write worker delay count						 52,829 	  83.3		0.8	       41.6	      0.4	   41.3 	 41.9
redo writes								 52,829 	  83.3		0.8	       41.6	      0.4	   41.3 	 41.9
redo writes (group 0)							 30,173 	  47.6		0.5	       23.8	      0.6	   23.4 	 24.2
redo writes (group 1)							 22,656 	  35.7		0.4	       17.9	      1.0	   17.1 	 18.6
redo writes adaptive all						 52,829 	  83.3		0.8	       41.6	      0.4	   41.3 	 41.9
redo writes adaptive worker						 52,829 	  83.3		0.8	       41.6	      0.4	   41.3 	 41.9
rollback changes - undo records applied 				      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
rollbacks only - consistent read gets					     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
rows fetched via callback					      3,771,438        5,943.3	       58.7	    2,971.6	  4,199.6	    2.1       5,941.2
securefile allocation bytes					      2,228,224        3,511.6	       34.7	    1,755.8	    182.7	1,626.6       1,885.0
securefile allocation chunks						    100 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
securefile bytes non-transformed				      1,882,905        2,967.4	       29.3	    1,483.7	    148.0	1,379.0       1,588.3
securefile direct write bytes					      2,228,224        3,511.6	       34.7	    1,755.8	    182.7	1,626.6       1,885.0
securefile direct write ops						     99 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
securefile number of non-transformed flushes				    100 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
segment chunks allocation from dispenser				    100 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
segment dispenser allocations						     98 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
segment dispenser load empty						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment dispenser load tasks						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc ops							     27 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc tasks							     19 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc time (ms)						  9,203 	  14.5		0.1		7.3	      7.3	    2.1 	 12.4
session connect time							    673 	   1.1		0.0		1.1	      N/A	    1.1 	  1.1
session cursor cache hits						505,265 	 796.3		7.9	      398.1	      3.8	  395.4 	400.8
session logical reads						     39,711,487       62,582.6	      618.4	   31,291.3	  3,628.8      28,725.3      33,857.3
shared hash latch upgrades - no wait				     10,095,421       15,909.8	      157.2	    7,954.9	    281.1	7,756.1       8,153.7
shared hash latch upgrades - wait					     42 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
shared io pool buffer get success					     98 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
sorts (memory)								  2,578 	   4.1		0.0		2.0	      2.0	    0.6 	  3.4
sorts (rows)								157,146 	 247.7		2.4	      123.8	     18.5	  110.7 	136.9
sql area evicted							    224 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
sql area purged 							     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
summed dirty queue length					     34,791,814       54,829.5	      541.8	   27,414.7	  3,232.6      25,129.0      29,700.5
switch current caused by our pin					    487 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
switch current to new buffer						    497 	   0.8		0.0		0.4	      0.2	    0.3 	  0.5
table fetch by rowid						     59,815,135       94,264.7	      931.5	   47,132.3	  2,993.3      45,015.8      49,248.9
table fetch continued row						    341 	   0.5		0.0		0.3	      0.4	    0.0 	  0.5
table scan blocks gotten						 10,373 	  16.3		0.2		8.2	      2.6	    6.3 	 10.0
table scan disk non-IMC rows gotten					651,207        1,026.3	       10.1	      513.1	    147.0	  409.2 	617.0
table scan rows gotten							651,207        1,026.3	       10.1	      513.1	    147.0	  409.2 	617.0
table scans (short tables)						  2,161 	   3.4		0.0		1.7	      0.3	    1.5 	  1.9

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
temp space allocated (bytes)					      1,048,576        1,652.6	       16.3	    1,652.6	      N/A	1,652.6       1,652.6
total cf enq hold time							 27,524 	  43.4		0.4	       21.7	      4.6	   18.5 	 24.9
total number of cf enq holders						    701 	   1.1		0.0		0.6	      0.1	    0.5 	  0.6
transaction tables consistent reads - undo records applied		  3,299 	   5.2		0.1		2.6	      0.5	    2.3 	  2.9
undo change vector size 					  1,731,282,252    2,728,394.7	   26,962.0	1,364,197.3	 33,791.9   1,340,302.8   1,388,091.8
user I/O wait time						      4,881,936        7,693.7	       76.0	    3,846.9	  1,168.5	3,020.6       4,673.1
user calls								  1,212 	   1.9		0.0		1.0	      0.1	    0.9 	  1.0
user commits								 64,212 	 101.2		1.0	       50.6	      1.3	   49.7 	 51.5
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    129 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
workarea executions - optimal						  2,201 	   3.5		0.0		1.7	      1.1	    0.9 	  2.5
write clones created in foreground					    811 	   1.3		0.0		0.6	      0.1	    0.6 	  0.7
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    198 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
Global Enqueue S-optim S-lock gets					205,232 	 323.4		3.2	      161.7	    101.5	   90.0 	233.5
Global Enqueue S-optim anti-locks crea					     99 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
acks for commit broadcast(actual)					 12,654 	  19.9		0.2	       10.0	      1.8	    8.7 	 11.3
acks for commit broadcast(logical)					 32,476 	  51.2		0.5	       25.6	      2.0	   24.2 	 27.0
broadcast msgs on commit(actual)					 32,485 	  51.2		0.5	       25.6	      1.7	   24.4 	 26.8
broadcast msgs on commit(logical)					 52,765 	  83.2		0.8	       41.6	      0.5	   41.2 	 41.9
broadcast msgs on commit(wasted)					 18,991 	  29.9		0.3	       15.0	      0.6	   14.5 	 15.4
gcs assume no cvt							  5,142 	   8.1		0.1		4.1	      3.4	    1.7 	  6.4
gcs ast to fg								 86,199 	 135.8		1.3	       67.9	     21.3	   52.8 	 83.0
gcs bidless ast to lms							    252 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
gcs blocked converts							207,154 	 326.5		3.2	      163.2	      6.9	  158.4 	168.1
gcs blocked cr converts 						  5,904 	   9.3		0.1		4.7	      4.2	    1.7 	  7.6
gcs compatible basts							     49 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (global)					     92 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
gcs compatible cr basts (local) 					  3,602 	   5.7		0.1		2.8	      1.3	    1.9 	  3.8
gcs cr requests to slave						      6 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs dbwr flush pi msgs						      1,103,426        1,738.9	       17.2	      869.5	    189.6	  735.4       1,003.5
gcs dbwr write request msgs						    201 	   0.3		0.0		0.2	      0.1	    0.1 	  0.2
gcs force cr block only 						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs force cr grant							     11 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs grant ast								 86,451 	 136.2		1.3	       68.1	     21.5	   52.9 	 83.3
gcs immediate (compatible) converts					  8,197 	  12.9		0.1		6.5	      0.7	    6.0 	  6.9
gcs immediate (null) converts						991,898        1,563.2	       15.4	      781.6	    212.7	  631.2 	932.0
gcs immediate cr (compatible) converts					 30,330 	  47.8		0.5	       23.9	      9.3	   17.4 	 30.4
gcs immediate cr (null) converts				      5,933,409        9,350.8	       92.4	    4,675.4	  1,155.7	3,858.2       5,492.6
gcs lms write request msgs						     80 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
gcs msgs process time(ms)						498,904 	 786.2		7.8	      393.1	    107.6	  317.0 	469.2
gcs msgs received						     22,560,428       35,553.9	      351.3	   17,777.0	  1,582.1      16,658.2      18,895.7
gcs new served by master						    351 	   0.6		0.0		0.3	      0.4	    0.0 	  0.5
gcs out-of-order msgs							    838 	   1.3		0.0		0.7	      0.1	    0.6 	  0.8
gcs pings refused							  2,447 	   3.9		0.0		1.9	      1.8	    0.7 	  3.2
gcs queued converts							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs reader bypass grant immediate					     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gcs side channel msgs actual						  3,169 	   5.0		0.0		2.5	      0.1	    2.4 	  2.6
gcs side channel msgs logical						 99,787 	 157.3		1.6	       78.6	     16.5	   67.0 	 90.3
gcs stale cr								    164 	   0.3		0.0		0.1	      0.1	    0.1 	  0.2
gcs undo cr								    383 	   0.6		0.0		0.3	      0.4	    0.0 	  0.6
gcs writes refused							      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges msgs process time(ms)						  1,137 	   1.8		0.0		0.9	      0.1	    0.8 	  1.0
ges msgs received							 29,062 	  45.8		0.5	       22.9	      4.3	   19.9 	 25.9
ges remote lock allocation						    362 	   0.6		0.0		0.6	      N/A	    0.6 	  0.6
implicit batch messages received					325,786 	 513.4		5.1	      256.7	     17.0	  244.7 	268.7
implicit batch messages sent						324,460 	 511.3		5.1	      255.7	     14.0	  245.8 	265.6
messages flow controlled						 41,438 	  65.3		0.6	       32.7	      6.7	   27.9 	 37.4
messages queue sent actual					      2,495,491        3,932.7	       38.9	    1,966.4	     58.4	1,925.1       2,007.7
messages queue sent logical					      2,246,904        3,541.0	       35.0	    1,770.5	     15.5	1,759.5       1,781.5
messages received actual					      4,536,678        7,149.5	       70.7	    3,574.8	    294.5	3,366.5       3,783.0
messages received logical					     22,589,490       35,599.7	      351.8	   17,799.9	  1,586.4      16,678.1      18,921.6
messages sent directly						      1,436,965        2,264.6	       22.4	    1,132.3	    181.9	1,003.7       1,260.9
messages sent indirectly					      8,814,025       13,890.3	      137.3	    6,945.1	  1,429.4	5,934.4       7,955.9
messages sent not implicit batched					226,170 	 356.4		3.5	      178.2	     27.8	  158.6 	197.9
messages sent pbatched						     19,609,152       30,902.7	      305.4	   15,451.4	    951.7      14,778.4      16,124.3
msgs received kernel queue time (ns)			      2,416,078,012,096 3.80768779E+09 3.762658E+07   1.9038439E+09 1.4511851E+09 8.7770108E+08 2.9299867E+09
msgs received queue time (ms)						955,632        1,506.1	       14.9	      753.0	    659.8	  286.5       1,219.6
msgs received queued						     22,589,490       35,599.7	      351.8	   17,799.9	  1,586.4      16,678.1      18,921.6
msgs sent queue time (ms)					      1,423,975        2,244.1	       22.2	    1,122.0	     20.3	1,107.7       1,136.4
msgs sent queue time on ksxp (ms)				     35,937,662       56,634.4	      559.7	   28,317.2	 16,544.8      16,618.2      40,016.1
msgs sent queued						      3,414,668        5,381.3	       53.2	    2,690.6	     71.5	2,640.1       2,741.2
msgs sent queued on ksxp					      4,531,798        7,141.8	       70.6	    3,570.9	    239.2	3,401.8       3,740.0

Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
number of directly freed master res					     40 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
process batch messages received 				      2,274,916        3,585.1	       35.4	    1,792.6	     59.3	1,750.6       1,834.5
process batch messages sent					      2,473,282        3,897.7	       38.5	    1,948.9	      6.0	1,944.6       1,953.1
receiver cycle time						      1,385,980        2,184.2	       21.6	    1,092.1	    181.6	  963.7       1,220.5
receiver loop count						      4,338,214        6,836.7	       67.6	    3,418.4	    229.1	3,256.4       3,580.4
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    207      143	      363	    98		  8,409        8,883
   2	    208      145	      396	    87		 10,885       11,193
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    415      288	      759	   185		 19,294       20,076
 Avg	    208      144	      380	    93		  9,647       10,038
 Std	      1        1	       23	     8		  1,751        1,633
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     60,914.68	    52,795.06	    8,119.62
Database Requests		     60,735.96	    52,777.33	    7,958.63
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				 83.25		  N/A	       83.25
Total (MB)				489.05	       417.20	       71.85
Database (MB)				477.32	       412.35	       64.97
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  6.27		  N/A		6.27
Database (blocks)		     61,096.96	    52,780.32	    8,316.64
Via Buffer Cache (blocks)	     61,095.52	    52,780.32	    8,315.20
Direct (blocks) 			  1.45		 0.00		1.45
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 38,173,020   60,153.83   52,097.98    8,055.85        306,488	    482.97	411.70	     71.27	6.4M   7.78ms
     Buffer Cache Re	 33,048,774   52,078.94   52,078.94	   0.00        258,207	    406.89	406.89	      0.00	6.3M   7.64ms
     DBWR		  5,011,589    7,897.37        0.76    7,896.61 	40,917	     64.48	  0.01	     64.47	 480   6.50ms
     LGWR		     98,831	 155.74        0.00	 155.74 	 4,085	      6.44	  0.00	      6.44     52.2K  24.63ms
     Others		     13,741	  21.65       18.29	   3.36 	 3,277	      5.16	  4.80	      0.36	7874   8.39ms
     Direct Writes		 85	   0.13        0.00	   0.13 	     2	      0.00	  0.00	      0.00	   0

   1 Total		 19,633,160   30,938.34   26,810.43    4,127.91        157,661	    248.45	211.81	     36.63	3.3M   9.20ms
     Buffer Cache Re	 17,007,186   26,800.27   26,800.27	   0.00        132,872	    209.38	209.38	      0.00	3.3M   9.07ms
     DBWR		  2,567,442    4,045.83        0.38    4,045.45 	20,941	     33.00	  0.01	     32.99	 240   7.60ms
     LGWR		     50,859	  80.14        0.00	  80.14 	 2,091	      3.30	  0.00	      3.30     26.5K  25.48ms
     Others		      7,627	  12.02        9.78	   2.24 	 1,756	      2.77	  2.43	      0.34	4449   8.81ms
     Direct Writes		 46	   0.07        0.00	   0.07 	     1	      0.00	  0.00	      0.00	   0

   2 Total		 18,539,860   29,215.49   25,287.55    3,927.94        148,827	    234.52	199.89	     34.64	3.1M   6.27ms
     Buffer Cache Re	 16,041,588   25,278.66   25,278.66	   0.00        125,335	    197.51	197.51	      0.00	3.1M   6.12ms
     DBWR		  2,444,147    3,851.54        0.38    3,851.16 	19,976	     31.48	  0.01	     31.47	 240   5.40ms
     LGWR		     47,972	  75.60        0.00	  75.60 	 1,994	      3.14	  0.00	      3.14     25.7K  23.75ms
     Others		      6,114	   9.63        8.51	   1.13 	 1,521	      2.40	  2.38	      0.02	3425   7.85ms
     Direct Writes		 39	   0.06        0.00	   0.06 	     1	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 38,163,505   60,138.84   52,085.04    8,053.80        306,218	    482.54	411.61	     70.94     1.09ms 1678.55m
     Data File		 38,050,782   59,961.21   52,065.93    7,895.28        299,053	    471.25	406.79	     64.46     1.09ms  11.50ms
     Log File		    101,999	 160.73        5.08	 155.65 	 6,999	     11.03	  4.60	      6.43   100.00us 1687.70m
     Control File	     10,214	  16.10       13.81	   2.28 	   160	      0.25	  0.22	      0.04     4.25ms
     Temp File			270	   0.43        0.22	   0.21 	     4	      0.01	  0.00	      0.00     4.75ms
     Other			240	   0.38        0.00	   0.38 	     2	      0.00	  0.00	      0.00

   1 Total		 19,631,249   30,935.33   26,807.96    4,127.37        157,455	    248.12	211.80	     36.32     1.31ms 1684.03m
     Data File		 19,572,903   30,843.38   26,797.87    4,045.51        153,806	    242.37	209.37	     33.00     1.31ms  12.50ms
     Log File		     52,464	  82.67        2.55	  80.12 	 3,558	      5.61	  2.31	      3.29   169.93us 1690.86m
     Control File	      5,541	   8.73        7.46	   1.27 	    87	      0.14	  0.12	      0.02     5.10ms
     Other			240	   0.38        0.00	   0.38 	     2	      0.00	  0.00	      0.00
     Temp File			101	   0.16        0.08	   0.08 	     2	      0.00	  0.00	      0.00     3.58ms

   2 Total		 18,532,256   29,203.51   25,277.08    3,926.43        148,763	    234.42	199.80	     34.62   856.37us 1673.01m
     Data File		 18,477,879   29,117.82   25,268.06    3,849.76        145,247	    228.88	197.42	     31.46   855.75us  10.90ms
     Log File		     49,535	  78.06        2.53	  75.53 	 3,441	      5.42	  2.28	      3.14    31.85us 1684.49m
     Control File	      4,673	   7.36        6.35	   1.01 	    73	      0.12	  0.10	      0.02     3.26ms
     Temp File			169	   0.27        0.14	   0.13 	     2	      0.00	  0.00	      0.00     5.41ms
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   86.7% of Total Logical Reads:      39,711,487
-> Captured Segments account for   90.1% of Total Physical Reads:      33,493,864
-> Captured Segments account for   90.1% of Total Physical Read Requests:      33,491,965
-> Captured Segments account for   90.1% of Total UnOptimized Read Requests:	  33,491,965
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       1
-> Captured Segments account for   87.4% of Total Physical Writes:	 5,277,659
-> Captured Segments account for   91.0% of Total Physical Write Requests:	 5,050,466
-> Captured Segments account for   47.5% of Total Direct Physical Writes:	      917
-> Captured Segments account for    0.0% of Total Table Scans:		     5
-> Captured Segments account for   69.4% of Total CR Blocks Received:		5,718
-> Captured Segments account for   60.3% of Total Current Blocks Received:	     7,286
-> Captured Segments account for   63.3% of Total CR Blocks Served:	      6,263
-> Captured Segments account for   59.1% of Total Current Blocks Served:	   7,429
-> Captured Segments account for   93.0% of Total Global Cache Remote Grants:	    6,981,567
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
db block changes	 USER12     IOPS       CF1			       TABLE	  73335      73342	 73,760    N/A	   20.2
			 USER3	    IOPS       CF1			       TABLE	  73263      73267	 73,360    N/A	   20.1
			 USER64     IOPS       CF1			       TABLE	  73609      73613	 73,264    N/A	   20.0
			 USER81     IOPS       CF1			       TABLE	  73680      73692	 73,024    N/A	   20.0
			 USER43     IOPS       CF1			       TABLE	  73490      73493	 72,448    N/A	   19.8
gc cr blocks received	 USER109    IOPS       CF1			       TABLE	  73835      73838	    219    3.8	   20.4
			 USER66     IOPS       CF1			       TABLE	  73621      73626	    202    3.5	   18.8
			 USER79     IOPS       CF1			       TABLE	  73684      73678	    168    2.9	   15.6
			 USER110    IOPS       CF1			       TABLE	  73842      73846	    165    2.9	   15.3
			 USER38     IOPS       CF1			       TABLE	  73468      73473	    165    2.9	   15.3
			 USER73     IOPS       CF1			       TABLE	  73652      73656	    157    2.7	   14.6
gc cr blocks served	 USER109    IOPS       CF1			       TABLE	  73835      73838	    219    3.5	   20.4
			 USER66     IOPS       CF1			       TABLE	  73621      73626	    202    3.2	   18.8
			 USER79     IOPS       CF1			       TABLE	  73684      73678	    168    2.7	   15.6
			 USER110    IOPS       CF1			       TABLE	  73842      73846	    165    2.6	   15.3
			 USER38     IOPS       CF1			       TABLE	  73468      73473	    165    2.6	   15.3
			 USER73     IOPS       CF1			       TABLE	  73652      73656	    157    2.5	   14.6
gc cu blocks received	 USER120    IOPS       CF1			       TABLE	  73893      73897	    380    5.2	   30.8
			 USER96     IOPS       CF1			       TABLE	  73771      73775	    274    3.8	   22.2
			 USER125    IOPS       CF1			       TABLE	  73915      73918	    238    3.3	   19.3
			 USER66     IOPS       CF1			       TABLE	  73621      73626	    216    3.0	   17.5
			 USER109    IOPS       CF1			       TABLE	  73835      73838	    125    1.7	   10.1
gc cu blocks served	 USER120    IOPS       CF1			       TABLE	  73893      73897	    380    5.1	   30.8
			 USER96     IOPS       CF1			       TABLE	  73771      73775	    274    3.7	   22.2
			 USER125    IOPS       CF1			       TABLE	  73915      73918	    238    3.2	   19.3
			 USER66     IOPS       CF1			       TABLE	  73621      73626	    216    2.9	   17.5
			 USER109    IOPS       CF1			       TABLE	  73835      73838	    125    1.7	   10.1
gc remote grants	 USER66     IOPS       CF1			       TABLE	  73621      73626	120,213    1.7	   20.2
			 USER120    IOPS       CF1			       TABLE	  73893      73897	119,998    1.7	   20.1
			 USER32     IOPS       CF1			       TABLE	  73437      73433	119,340    1.7	   20.0
			 USER18     IOPS       CF1			       TABLE	  73366      73370	118,412    1.7	   19.9
			 USER87     IOPS       CF1			       TABLE	  73721      73723	117,988    1.7	   19.8
logical reads		 SYS	    SYSTEM     USER$			       TABLE	     22 	10    3,766,864    9.5	   65.8
			 USER3	    IOPS       CF1			       TABLE	  73263      73267	493,936    1.2	    8.6
			 USER12     IOPS       CF1			       TABLE	  73335      73342	490,496    1.2	    8.6
			 USER64     IOPS       CF1			       TABLE	  73609      73613	487,696    1.2	    8.5
			 USER81     IOPS       CF1			       TABLE	  73680      73692	483,600    1.2	    8.5
physical reads		 USER3	    IOPS       CF1			       TABLE	  73263      73267	481,823    1.4	   20.2
			 USER64     IOPS       CF1			       TABLE	  73609      73613	477,935    1.4	   20.1
			 USER12     IOPS       CF1			       TABLE	  73335      73342	476,871    1.4	   20.0
			 USER81     IOPS       CF1			       TABLE	  73680      73692	472,193    1.4	   19.8
			 USER43     IOPS       CF1			       TABLE	  73490      73493	471,055    1.4	   19.8
physical read requests	 USER3	    IOPS       CF1			       TABLE	  73263      73267	481,823    1.4	   20.2
			 USER64     IOPS       CF1			       TABLE	  73609      73613	477,935    1.4	   20.1
			 USER12     IOPS       CF1			       TABLE	  73335      73342	476,871    1.4	   20.0
			 USER81     IOPS       CF1			       TABLE	  73680      73692	472,193    1.4	   19.8
			 USER43     IOPS       CF1			       TABLE	  73490      73493	471,055    1.4	   19.8
physical writes 	 USER3	    IOPS       CF1			       TABLE	  73263      73267	 74,124    N/A	   20.1
			 USER64     IOPS       CF1			       TABLE	  73609      73613	 73,979    N/A	   20.1
			 USER12     IOPS       CF1			       TABLE	  73335      73342	 73,602    N/A	   20.0
			 USER81     IOPS       CF1			       TABLE	  73680      73692	 73,494    N/A	   20.0
			 USER35     IOPS       CF1			       TABLE	  73450      73453	 73,133    N/A	   19.9
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 9879926_31 TABLE	  74075      74075	    425    N/A	   97.5
			 SYS	    SYSAUX     SYS_LOB0000007451C00 S_LOB_P270 LOB P	  74210      74210	     11    N/A	    2.5
physical write requests  USER3	    IOPS       CF1			       TABLE	  73263      73267	 73,678    1.5	   20.1
			 USER64     IOPS       CF1			       TABLE	  73609      73613	 73,555    1.5	   20.1
			 USER12     IOPS       CF1			       TABLE	  73335      73342	 73,145    1.4	   20.0
			 USER81     IOPS       CF1			       TABLE	  73680      73692	 73,035    1.4	   19.9
			 USER35     IOPS       CF1			       TABLE	  73450      73453	 72,708    1.4	   19.9
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 316	0.6	       980    0.5	   3	    0	       128	    923 	 923	       0	   0
CLUSTER 		  70	1.4		70    1.4	   0	    0		70	     70 	  70	       0	   0
DBLINK			   6	0.0		 0    N/A	   0	    0		 6	      0 	   0	       0	   0
EDITION 		  11	0.0		22    0.0	   0	    0		11	     11 	  11	       0	   0
HINTSET OBJECT		  36   25.0		36   25.0	   0	    0		36	     36 	  36	       0	   0
INDEX			 117	0.9	       113   11.5	  12	    0	       113	    113 	 113	       0	   0
OBJECT ID		   7  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  63	0.0		64    1.6	   1	    0		63	     64 	  64	       0	   0
RULESET 		   0	N/A		 1  100.0	   1	    0		 0	      1 	   1	       0	   0
SCHEMA			 230	0.4		 0    N/A	   0	    0		12	      0 	   0	       0	   0
SQL AREA	       3,597   30.9	   454,276    0.3	 190	   10		 0	      0 	   0	       0	   0
SQL AREA BUILD		 614   80.6		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS		 537   94.8	       537   95.0	   1	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        2,410   10.7	    10,359   10.4	 468	    0	     3,631	  7,161        7,161	       0	   0
TRANSFORMATION		  63	0.0		63    0.0	   0	    0		63	     63 	  63	       0	   0
TRIGGER 		  14   21.4		14   21.4	   0	    0		 0	     14 	  14	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  3,215.0    3,215.0	    1,357.8    1,616.5	      2,100.1	 1,647.3	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
   2	  3,215.0    3,215.0	    1,320.4    1,581.2	      2,100.1	 1,730.8	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      213.5	 .0	3.5	7.1	43    N/A    61    61
       Other	    1073.6	N/A	3.9	4.8	37     37   274   274
       PL/SQL	      35.3     34.4	 .2	 .2	 1	2   210   208
       SQL	       9.8	6.9	 .1	 .2	 1     10   139   132
       Total	    1332.2     41.3	7.7    12.3	82     49   684   675
     E Freeable      140.2	 .0	3.8	6.6	29    N/A    37    37
       Other	     731.6	N/A	3.5	5.3	37     37   210   210
       PL/SQL	       4.9	4.4	 .0	 .2	 1	2   146   143
       SQL	       2.7	1.7	 .0	 .1	 1     10    82    28
       Total	     879.4	6.1	7.3    12.1	67     49   475   418
   2 B Freeable      218.6	 .0	2.1	6.0	43    N/A   103   103
       Other	    1048.8	N/A	3.8	4.5	36     36   275   275
       PL/SQL	      34.9     33.9	 .2	 .3	 2	3   211   209
       SQL	      29.8     21.6	 .2	 .4	 1     11   140   122
       Total	    1332.1     55.5	6.3    11.1	82     50   729   709
     E Freeable      156.3	 .0	3.7	7.2	35    N/A    42    42
       Other	     795.9	N/A	3.8	6.0	37     37   212   212
       PL/SQL	       7.7	7.0	 .1	 .3	 2	3   148   146
       SQL	       3.0	1.4	 .0	 .1	 1     18    79    32
       Total	     962.9	8.4	7.6    13.6	75     58   481   432
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p60sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P60S/P60SDB/CONTROLFILE/current.267.1031675639, +FRA
db_block_size			* 8192
db_create_file_dest		* +P60S
db_domain			* example.com
db_name 			* p60sdb
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 137438953472
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p60sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 3371171840
processes			* 640
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_target			* 10133438464
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P60SDB/CONTROLFILE/current.270.1031675639
				* +P60S/P60SDB/CONTROLFILE/current.267.1031675639
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		     4651	   57.79
db file sequential read 	 40.44 UPDATE				   39.83
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


gc current grant busy		 12.10 UPDATE				   12.10


gc current grant 2-way		  1.29 UPDATE				    1.29

	  bhdvtsvjhgvrh 	  1497866750		     2745	   34.01
db file parallel read		 12.51 TABLE ACCESS - BY INDEX ROWID BAT   12.51
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


db file sequential read 	  9.59 TABLE ACCESS - BY INDEX ROWID BAT    6.09


gc cr multi block request	  6.99 TABLE ACCESS - BY INDEX ROWID BAT    6.99

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		     4651	   57.79
UPDATE					   55.21 db file sequential read   39.83
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


UPDATE STATEMENT			    1.70 buffer busy waits	    0.72

	  bhdvtsvjhgvrh 	  1497866750		     2745	   34.01
TABLE ACCESS - BY INDEX ROWID BATCHED	   28.65 db file parallel read	   12.51
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    5.31 db file sequential read    3.49

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       57.89
   SQL								       57.88
			  --------------------------------------------------------------------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
db file sequential read 	    User I/O	    FOREGROUND
     50.02	63.71
db file parallel read		    User I/O	    FOREGROUND
     12.51	15.93
gc current grant busy		    Cluster	    FOREGROUND
     12.11	15.43
gc cr multi block request	    Cluster	    FOREGROUND
      6.99	 8.90
gc cr grant busy		    Cluster	    FOREGROUND
      3.91	 4.98
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
db file sequential read 	 50.04		      "2","1667","1"	   0.01
file#			   block#		      blocks

db file parallel read		 12.51		       "1","77","77"	  12.15
files			   blocks		      requests

gc cr multi block request	  6.99		 "9","124881322","1"	   0.02
file#			   block#		      class#

db file parallel write		  2.48		"1","0","2147483647"	   0.87
requests		   interrupt		      timeout

log file parallel write 	  1.57			"1","44","2"	   0.04
files			   blocks		      requests

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			 DB/Inst: P60SDB/p60sdb1  Snaps: 51-52
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
10:14:13   (47 secs)	  779 db file sequential read		  381	 4.72
			      gc current grant busy		   90	 1.11
			      db file parallel read		   71	 0.88
10:15:00   (5.0 min)	4,097 db file sequential read		1,842	22.81
			      gc current grant busy		  637	 7.89
			      db file parallel read		  483	 5.98
10:20:00   (4.8 min)	3,198 db file sequential read		1,817	22.50
			      db file parallel read		  456	 5.65
			      gc current grant busy		  252	 3.12
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_52'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 51 to 52.
Time period starts at 12-FEB-20 10.14.13 AM
Time period ends at 12-FEB-20 10.24.48 AM

Analysis Target
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 72333 seconds.
The average number of active sessions was 113.91.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       113.91 | 100	   1
2  Top SQL Statements	      113.68 | 99.8	   2
3  "User I/O" wait Class      76.83 | 67.45	   0
4  Global Cache Messaging     31.16 | 27.35	   1
5  Buffer Busy - Hot Objects  20.25 | 17.77	   0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 114.09 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 74803 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 11554 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.7	     ADDM:3889879926_1_52
    2	    p60sdb2  48.3	     ADDM:3889879926_2_52

   Recommendation 1: Host Configuration
   Estimated benefit is 113.91 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 31.16 active sessions, 27.35% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 31.92 active sessions, 28.02% of total activity.


Finding 2: Top SQL Statements
Impact is 113.86 active sessions, 99.8% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.54	     ADDM:3889879926_1_52
    2	    p60sdb2  48.46	     ADDM:3889879926_2_52

   Recommendation 1: SQL Tuning
   Estimated benefit is 69.32 active sessions, 60.86% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 96% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 62702 times and
      had an average elapsed time of 0.71 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 42.12 active sessions, 36.97% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 355606 times and
      had an average elapsed time of 0.072 seconds.


Finding 3: "User I/O" wait Class
Impact is 76.95 active sessions, 67.45% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  60.72	     ADDM:3889879926_1_52
    2	    p60sdb2  39.28	     ADDM:3889879926_2_52

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 31.21 active sessions, 27.35% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  71.39	     ADDM:3889879926_2_52
    1	    p60sdb1  28.61	     ADDM:3889879926_1_52

   Recommendation 1: Application Analysis
   Estimated benefit is 31.16 active sessions, 27.35% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID "35dumc2tpr9dv" is responsible for 58% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 31.92 active sessions, 28.02% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 20.28 active sessions, 17.77% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  100	     ADDM:3889879926_2_52

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 20.25 active sessions, 17.77% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 31.16 active sessions, 27.35% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 31.92 active sessions, 28.02% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  58.99	     51.7
    2	    p60sdb2  mcracpoc2.example.com  55.1	     48.3

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 51

End   Snapshot Id specified: 52



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_51_52.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P60SDB, Snaps: 51-52</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>3889879926</td><td headers="Database Name" class='awrc'>P60SDB</td><td headers="Database UniqueName" class='awrc'>p60sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>51</td><td align="right" headers="SnapshotIds End" class='awrc'>52</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>1,205.54</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>10.58</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p60sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>12-Feb-20 09:46</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>10.57</td><td align="right" class='awrc'>623.30</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>58.99</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p60sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>12-Feb-20 09:46</td><td class='awrnc'>12-Feb-20 10:14</td><td class='awrnc'>12-Feb-20 10:24</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>10.57</td><td align="right" class='awrnc'>582.24</td><td align="right" class='awrnc'>0.64</td><td align="right" class='awrnc'>55.10</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>114.09</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_52</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>114.09</td><td align="right" class='awrnc'>99.80</td><td scope="row" class='awrnc'>ADDM:3889879926_52</td><td class='awrnc'>12-Feb-20 10:14</td><td class='awrnc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>114.09</td><td align="right" class='awrc'>67.45</td><td scope="row" class='awrc'>ADDM:3889879926_52</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>114.09</td><td align="right" class='awrnc'>27.35</td><td scope="row" class='awrnc'>ADDM:3889879926_52</td><td class='awrnc'>12-Feb-20 10:14</td><td class='awrnc'>12-Feb-20 10:24</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>114.09</td><td align="right" class='awrc'>17.77</td><td scope="row" class='awrc'>ADDM:3889879926_52</td><td class='awrc'>12-Feb-20 10:14</td><td class='awrc'>12-Feb-20 10:24</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>7,872</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>1,472</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>160</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>3,232</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>7,872</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>1,472</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>160</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>3,232</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>9,664</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>7,872</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,472</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>160</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,232</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9,664</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>7,872</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,472</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>160</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,232</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>9,664</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>7,872</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,472</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>160</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,232</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>32</td><td align="right" headers="CPU #Cores" class='awrc'>16</td><td align="right" headers="CPU #Sckts" class='awrc'>1</td><td align="right" headers="Load Begin" class='awrclb'>21.65</td><td align="right" headers="Load End" class='awrc'>19.43</td><td align="right" headers="%CPU %Busy" class='awrclb'>28.09</td><td align="right" headers="%CPU %Usr" class='awrc'>7.41</td><td align="right" headers="%CPU %Sys" class='awrc'>12.40</td><td align="right" headers="%CPU %WIO" class='awrc'>37.03</td><td align="right" headers="%CPU %Idl" class='awrc'>71.91</td><td align="right" headers="Time(s) Busy" class='awrclb'>5,247.78</td><td align="right" headers="Time(s) Idle" class='awrc'>13,432.42</td><td align="right" headers="Time(s) Total" class='awrc'>18,680.20</td><td align="right" headers="Memory MB" class='awrclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>32</td><td align="right" headers="CPU #Cores" class='awrnc'>16</td><td align="right" headers="CPU #Sckts" class='awrnc'>1</td><td align="right" headers="Load Begin" class='awrnclb'>16.46</td><td align="right" headers="Load End" class='awrnc'>12.52</td><td align="right" headers="%CPU %Busy" class='awrnclb'>18.58</td><td align="right" headers="%CPU %Usr" class='awrnc'>5.39</td><td align="right" headers="%CPU %Sys" class='awrnc'>8.73</td><td align="right" headers="%CPU %WIO" class='awrnc'>31.74</td><td align="right" headers="%CPU %Idl" class='awrnc'>81.42</td><td align="right" headers="Time(s) Busy" class='awrnclb'>3,472.20</td><td align="right" headers="Time(s) Idle" class='awrnc'>15,214.28</td><td align="right" headers="Time(s) Total" class='awrnc'>18,686.48</td><td align="right" headers="Memory MB" class='awrnclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>8,719.98</td><td align="right" class='awrct'>28,646.70</td><td align="right" class='awrct'>37,366.68</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>37,398.28</td><td align="right" class='awrc'>2,504.75</td><td align="right" class='awrc'>37,396.22</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>14.26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3,168.97</td><td align="right" class='awrc'>1,392.01</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>34,934.41</td><td align="right" class='awrnc'>1,614.88</td><td align="right" class='awrnc'>34,931.34</td><td align="right" class='awrnc'>14.33</td><td align="right" class='awrnc'>14.21</td><td align="right" class='awrnc'>10.52</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3,462.24</td><td align="right" class='awrnc'>958.36</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>72,332.69</td><td align="right" class='awrct'>4,119.63</td><td align="right" class='awrct'>72,327.55</td><td align="right" class='awrct'>15.54</td><td align="right" class='awrct'>15.32</td><td align="right" class='awrct'>24.78</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>6,631.21</td><td align="right" class='awrct'>2,350.37</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>36,166.34</td><td align="right" class='awrnc'>2,059.81</td><td align="right" class='awrnc'>36,163.78</td><td align="right" class='awrnc'>7.77</td><td align="right" class='awrnc'>7.66</td><td align="right" class='awrnc'>12.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3,315.61</td><td align="right" class='awrnc'>1,175.18</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>1,742.22</td><td align="right" class='awrc'>629.23</td><td align="right" class='awrc'>1,742.93</td><td align="right" class='awrc'>9.28</td><td align="right" class='awrc'>9.27</td><td align="right" class='awrc'>2.65</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>207.37</td><td align="right" class='awrc'>306.64</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>51.70</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>6.70</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.00</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>47.79</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>43.93</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>48.30</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>4.62</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.04</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.04</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>52.21</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>27.68</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>5.66</td><td align="right" class='awrct'>99.99</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>35.80</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>67.45</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>28.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.70</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>29,626.52</td><td align="right" class='awrc'>9.62</td><td align="right" class='awrc'>450.55</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>564.22</td><td align="right" class='awrc'>355.80</td><td align="right" class='awrc'>5,455.10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,504.75</td><td align="right" class='awrc'>37,398.28</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>19,162.44</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>104.74</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>123.52</td><td align="right" class='awrnc'>131.06</td><td align="right" class='awrnc'>14,815.20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,614.88</td><td align="right" class='awrnc'>34,934.41</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>48,788.96</td><td align="right" class='awrct'>9.90</td><td align="right" class='awrct'>555.28</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>1.79</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>687.73</td><td align="right" class='awrct'>486.86</td><td align="right" class='awrct'>20,270.29</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>4,119.63</td><td align="right" class='awrct'>72,332.69</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>24,394.48</td><td align="right" class='awrnc'>4.95</td><td align="right" class='awrnc'>277.64</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.89</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>343.87</td><td align="right" class='awrnc'>243.43</td><td align="right" class='awrnc'>10,135.15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,059.81</td><td align="right" class='awrnc'>36,166.34</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>7,399.22</td><td align="right" class='awrc'>6.60</td><td align="right" class='awrc'>244.53</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>311.62</td><td align="right" class='awrc'>158.91</td><td align="right" class='awrc'>6,618.59</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>629.23</td><td align="right" class='awrc'>1,742.22</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>79.22</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.03</td><td align="right" headers="%DBtime Other" class='awrc'>1.20</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>0.00</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>1.51</td><td align="right" headers="%DBtime Config" class='awrc'>0.95</td><td align="right" headers="%DBtime Cluster" class='awrc'>14.59</td><td align="right" headers="%DBtime Admin" class='awrc'>0.00</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>6.70</td><td align="right" class='awrc'>51.70</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>54.85</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>0.30</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.00</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.35</td><td align="right" headers="%DBtime Config" class='awrnc'>0.38</td><td align="right" headers="%DBtime Cluster" class='awrnc'>42.41</td><td align="right" headers="%DBtime Admin" class='awrnc'>0.00</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>4.62</td><td align="right" class='awrnc'>48.30</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>67.04</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.75</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.93</td><td align="right" class='awrct'>0.66</td><td align="right" class='awrct'>28.50</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>5.66</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>6,064,162</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>38,818.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>53.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>362,826</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,976.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>13.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>7.85ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>949,745</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9,296.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>4.91ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>142,670</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,575.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>36.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>52.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>22.59ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,119.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>277,329</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,872.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.97</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>5.75ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>370,090</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,933.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>682.81us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>52,962</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,298.58</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.80</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>25.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>134,107</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,283.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.77</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>5.12ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,238</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>689.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>556.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>650.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>524.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>776.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>178.02ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>3,100,329</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>23,543.29</td><td align="right" headers="WaitTime AvgWait" class='awrct'>7.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>62.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>184,668</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,084.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>32.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>16.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,504.75</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>384,351</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,173.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.81</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>58,413</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,180.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>195,867</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>934.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>139,322</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>879.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>26,647</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>677.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>25.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.81</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>1,078</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>565.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>524.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>68,563</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>413.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,963,833</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>15,274.71</td><td align="right" headers="WaitTime AvgWait" class='awrct'>5.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>43.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>565,394</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7,122.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>20.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>84,257</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,394.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>52.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>178,158</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,892.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>11.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>138,007</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,992.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,614.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>174,223</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>999.31</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.86</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>65,544</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>869.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>26,315</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>621.31</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>47,289</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>186.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>6,061,612</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>38,805.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>53.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>362,826</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,976.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>13.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>7.85ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>949,302</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9,292.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>4.91ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>142,640</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,575.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>36.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>52.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>22.59ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,119.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>276,706</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,866.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>5.76ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>133,999</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,282.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.77</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>5.11ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,233</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>686.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>556.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>648.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>524.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>772.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>175.13ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>114,054</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>482.98</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>363.33us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>361</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>379.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1052.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1436.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>924.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1947.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>722.94ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>3,099,030</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>23,536.01</td><td align="right" headers="WaitTime AvgWait" class='awrct'>7.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>62.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>184,668</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,084.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>32.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>16.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,504.75</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>384,078</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,172.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.81</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>58,389</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,180.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>139,096</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>877.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>1,074</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>563.77</td><td align="right" headers="WaitTime AvgWait" class='awrc'>524.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>68,513</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>413.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>66,765</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>296.95</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>316</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>292.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>924.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,962,582</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>15,269.14</td><td align="right" headers="WaitTime AvgWait" class='awrct'>5.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>43.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>565,224</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7,120.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>20.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>84,251</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,394.77</td><td align="right" headers="WaitTime AvgWait" class='awrc'>52.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>178,158</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,892.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>11.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>137,610</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,988.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,614.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>65,486</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>868.89</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>47,289</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>186.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>159</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>122.84</td><td align="right" headers="WaitTime AvgWait" class='awrc'>772.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>45</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>87.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1947.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,350.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>35.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>370,050</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,933.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>29.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>685.35us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>52,959</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,298.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>19.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>20,967</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>353.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.84ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>15.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>11,797</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>104.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.84ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>1,681</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>41.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>20.57ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>7,843</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>34.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>3,780</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>32.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>6.81ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>631</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>23.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>35.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>39.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>6.29ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>614</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>21.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>42.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>10.13ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,392.01</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>43.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>195,859</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>933.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>29.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>26,644</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>677.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>25.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>21.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>11,533</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>182.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>6,647</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>52.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,841</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>20.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.25ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>1,447</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>418</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>841</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>289</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.26</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>System I/O</td><td headers="Wait Event" class='awrct'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclbt'>174,191</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>999.27</td><td align="right" headers="WaitTime AvgWait" class='awrct'>5.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>28.86</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>background cpu time</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>958.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>26,315</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>621.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>17.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>9,434</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>170.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>5,150</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>51.90</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>840</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>33.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>1,884</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>25.49</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.74</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>4,002</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.63ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>325</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.78</td><td align="right" headers="WaitTime AvgWait" class='awrc'>42.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>1,896</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>6,061,612</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>38,805.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>53.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.73ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>362,826</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,976.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>13.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.85ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>949,302</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9,292.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.91ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>142,640</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,575.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>36.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>52.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.59ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>276,706</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,866.20</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.76ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>133,999</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,282.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.77</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.11ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>1,233</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>686.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>556.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>648.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>524.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>772.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>175.13ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>114,054</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>482.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>363.33us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>361</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>379.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1052.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1436.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>924.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1947.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>722.94ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>507</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>269.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>530.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>531.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>530.59ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>532.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.27ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>3,700</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>220.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>59.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>58.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>56.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>61.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.28ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>308</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>166.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>539.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>529.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>517.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>541.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.14ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrclb'>2,666</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>131.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>49.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>67.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>48.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>85.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>26.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>23,926</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>122.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.17</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.19ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>1,736</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>113.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>65.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>58.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>48.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>67.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.49ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>undo segment extension</td><td align="right" headers="Event Waits" class='awrnclb'>611</td><td align="right" headers="Event %Timeouts" class='awrnc'>98.20</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>106.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>175.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>219.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>135.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>303.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>118.77ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>5,840</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>105.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>529</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>69.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>131.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>149.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>90.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>209.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>84.02ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>reliable message</td><td align="right" headers="Event Waits" class='awrclb'>1,538</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>41.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>204</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>27.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>132.84ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>133.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>132.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>133.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>680.04us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>2,116</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.72ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>3,333</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.33ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.84ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>61</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>132.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>91.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>397.47us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>183.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>129.20ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>984</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.44ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>517</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Data file init write</td><td align="right" headers="Event Waits" class='awrnclb'>80</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>54.00ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>54.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>54.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>54.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrclb'>480</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>120</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>1,385</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>459.08us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>1,068</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>726.32us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>84</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.79</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.42ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>117</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.13ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>212</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.48</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.70ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>676.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>676.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>618.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>734.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>82.27ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file single write</td><td align="right" headers="Event Waits" class='awrclb'>80</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>48</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>25.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>26.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>616.98us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>kfk: async disk IO</td><td align="right" headers="Event Waits" class='awrclb'>80</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>15.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>80</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>23.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>46.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>32.05ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>76</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.33ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current retry</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>148.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>118.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>26.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>209.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>129.82ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CT - state</td><td align="right" headers="Event Waits" class='awrclb'>40</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>1,447</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>394.01us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>334.34us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>274.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>394.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>84.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache lock</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>837.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>18.84ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>48</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.49</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>62</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>502</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>713.90us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>708.30us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>696.98us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>719.63us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.02us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>423</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>765.24us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>656.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>411.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>902.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>347.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges message buffer allocation</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>299.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>299.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>299.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>299.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>51</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>26.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>26.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>517</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>337.69us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>281.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>149.10us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>414.77us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>187.85us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrnclb'>25</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>93</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>152</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>644.73us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>561.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>420.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>702.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>199.36us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>510</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>143.32us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>158.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>142.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>174.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrclb'>186</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>344.70us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>344.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>344.70us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>344.70us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.25ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.25ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>172</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>352.70us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>310.78us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>265.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>356.42us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>64.54us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>912</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>61.39us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>68.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>115.27us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>66.70us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>225</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>215.46us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>195.98us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>144.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>247.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>72.94us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrnclb'>154</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>312.81us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>203.77us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>88.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>318.78us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>162.66us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>3.85</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>207.25us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>15</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>949.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.39ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>956</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>39.26us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.68us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>44.08us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.29us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>19</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>914.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>883.47us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache pin</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>865.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>296.39us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>datafile move cleanup during resize</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>572.93us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>572.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>572.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>572.93us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>513</td><td align="right" headers="Event %Timeouts" class='awrc'>99.81</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>43.26us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>37.13us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>27.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>46.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.11us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrnclb'>126</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>78.56us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>78.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>78.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>78.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrclb'>240</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>39.56us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>39.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>39.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>39.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: RP - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path sync</td><td align="right" headers="Event Waits" class='awrclb'>40</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>192.28us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>192.28us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>192.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>192.28us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.91ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.17ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>670.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>709.94us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>296</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.53us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.34us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.15us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.54us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.24us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Administrative</td><td headers="Wait Event" class='awrnc'>enq: MV - datafile move</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>395</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.26us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.73us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.10us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>323.30us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>355.44us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>301.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>409.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>75.75us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>223</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.68us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.98us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.15us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: SW - contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>69</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.72us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.77us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>15.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>16.03us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>377.94ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>61</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.30us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>18.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.91us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.61us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.33us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>118.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>118.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>118.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>118.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.50us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.67us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>282.84ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.67us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrclb'>2,104</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,315.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3001.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3001.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3000.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3002.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>395</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>785.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1988.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1540.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>620.96us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3080.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2177.61ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrclb'>138</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>101.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>101.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>76.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>127.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>36.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>88</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>56.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>323.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>59.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.60ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrclb'>342</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>111.96us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>658.83us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>658.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>658.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>658.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>745.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>745.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>745.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>745.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>370,050</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,933.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>685.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>52,959</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,298.45</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.20</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>25.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.28ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>20,967</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>353.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.63ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrnclb'>11,797</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>104.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.55ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>1,681</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>41.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>39.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>20.57ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7,843</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>34.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.15ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>3,780</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>32.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.81ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>631</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>23.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.74ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.29ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>614</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>21.89</td><td align="right" headers="WaitTime AvgWait" class='awrc'>35.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>35.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>42.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.13ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>2,119</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>20.37</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.61ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.35ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>2,445</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.51ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.76ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,546</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12.83</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>810.77us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>359,754</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.41us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>32.19us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>29.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.02us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.00us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrnclb'>6,857</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>329.65us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch free</td><td align="right" headers="Event Waits" class='awrclb'>4,041</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>282.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.66ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>1,574</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrclb'>2,392</td><td align="right" headers="Event %Timeouts" class='awrc'>40.38</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>725.97us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>623</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.61ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.92ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,235</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrnclb'>110</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.53</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>41.20ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>42.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>39.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.28ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrclb'>123</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>22.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>46.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>444</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.68ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrclb'>108</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.93ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>58</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>54.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>52.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>102.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>70.75ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>141.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>141.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>141.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>141.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrnclb'>5,442</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>508.70us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>510.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>504.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>517.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.08us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>544.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>835.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>349.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1321.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>686.88ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>68</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>38.86ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.59ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>52.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>29.14ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>84,020</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.38us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>26.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>33.93us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.99us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>166</td><td align="right" headers="Event %Timeouts" class='awrnc'>39.16</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.73</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.54ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>742</td><td align="right" headers="Event %Timeouts" class='awrc'>76.55</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.37ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>212.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>282.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>884.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>565.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>398.95ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs remastering wait for read latch</td><td align="right" headers="Event Waits" class='awrclb'>27</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>49.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>49.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>47.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>51.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.03ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrnclb'>79</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.87ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.60ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache lock</td><td align="right" headers="Event Waits" class='awrclb'>502</td><td align="right" headers="Event %Timeouts" class='awrc'>3.98</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>761.71us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>113</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.59ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.90ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" headers="Event Waits" class='awrclb'>93</td><td align="right" headers="Event %Timeouts" class='awrc'>34.41</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>15.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.82ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrnclb'>126,514</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.15us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.22us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.77us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.20us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>2,455</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>455.37us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>390.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>263.84us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>518.01us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>179.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>38</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.47ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>53.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>30.17ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>38.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>318.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>77.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>54.35ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>493.51ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>493.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>465.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>521.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>39.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>297</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.98</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.31ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>229.53us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>505</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>393.28us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Administrative</td><td headers="Wait Event" class='awrc'>JS kgl get object wait</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>132.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>137.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>124.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>149.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.74ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrnclb'>456</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.74ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.03ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>102</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.74</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>264.24us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>1,024</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>723.21us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>602.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>303.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>900.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>421.64us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>938</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>548.55us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>551.68us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>404.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>698.53us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>207.68us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>461.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>461.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>461.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>461.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrclb'>15,090</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.18us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>31.38us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.44us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrnclb'>15</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>24.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.99ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrclb'>12,573</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.77us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>32.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>29.85us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.11us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>944</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.37</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>391.86us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>394.68us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>345.37us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>444.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>69.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>59.05ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>48.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>31.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>64.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.31ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrnclb'>102</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.15ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrclb'>7,925</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.94us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.89us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.13us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>39.64us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.14us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrnclb'>337</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>610.76us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>534.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>381.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>687.99us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>216.50us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>1,821</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>88.34us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>88.73us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>67.10us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>110.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>30.59us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>27</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.89ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>250.02us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>271</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>464.80us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>371.27us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>217.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>524.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>217.24us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>47</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.32ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>373.81us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.51ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>831.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.82ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>108</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>737.54us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>586.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>273.21us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>900.05us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>443.24us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>66</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>753.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>373.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>536.69us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,284</td><td align="right" headers="Event %Timeouts" class='awrnc'>98.05</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>51.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>51.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>50.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>51.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>528.70ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrclb'>7,494</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.69us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.26us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrnclb'>37</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.74ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>572.79us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>99</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>641.08us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>488.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>214.73us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>762.90us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>387.61us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>15.25ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>37</td><td align="right" headers="Event %Timeouts" class='awrc'>24.32</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.41ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>184.98us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: DW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.63ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.24ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>1,210</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>37.47us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>37.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>36.99us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>38.13us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>803.63ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrnclb'>35</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.26ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrclb'>42</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>895.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>194.69us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>122</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>323.26us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>293.97us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>199.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>388.01us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>133.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrclb'>104</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>376.84us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>344.72us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>282.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>406.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>87.46us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrnclb'>111</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>346.32us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>288.38us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>138.79us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>437.96us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>211.54us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>43</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>780.12us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>604.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>343.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>865.08us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>369.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>os thread creation</td><td align="right" headers="Event Waits" class='awrclb'>15</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>417.32us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" headers="Event Waits" class='awrnclb'>68</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>424.97us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>381.14us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>293.47us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>468.80us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>123.98us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.93ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>45.96us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.17ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.50ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.02ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" headers="Event Waits" class='awrnclb'>60</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>268.80us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>261.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>149.07us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>373.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>158.74us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.99ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>105.01us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.90ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>131.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>read by other session</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path sync</td><td align="right" headers="Event Waits" class='awrclb'>80</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>138.05us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>138.05us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>130.68us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>145.43us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.55ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>50.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrnclb'>26</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>392.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>388.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>344.92us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>432.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>61.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrclb'>39</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>259.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>262.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>215.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>309.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>66.10us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.88ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>810.10us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>810.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>587.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>314.95us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrnclb'>27</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>287.85us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>245.16us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>140.38us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>349.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>148.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>109.91us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>93.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>52.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>134.16us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>58.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>16</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>293.25us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>209.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>43.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>376.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>235.94us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>551.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>663.97us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.33ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>864.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>864.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>821.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>907.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>60.81us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>348</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.24us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.53us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.82us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: SM -  contention</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>655.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>655.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>655.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>655.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: MW - contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.41ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: JG - queue lock</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>kfk: async disk IO</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>395.83us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>395.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>395.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>395.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>395.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>395.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>395.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>395.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>887.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>212.13us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc quiesce</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>656.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>656.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>656.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>656.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: kjci process context latch</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>165.20us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>165.20us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>297.20us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>186.68us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrnclb'>157</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.05us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.05us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.11us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>75.42ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>131</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.34us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.98us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>479.16ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: DR - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>882.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>882.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>882.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>882.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>115.60us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>98.88us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>71.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>126.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>39.42us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrnclb'>37</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.11us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>14.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.89us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.26us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.68us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.66us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.66us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.16us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>25.25us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.61us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>95.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>95.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>95.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>95.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>16.92us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>26.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.55us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.20us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>229.81ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>31.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>31.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.75us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM background starting</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.00ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrnclb'>48</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>81,719.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1702.49 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>12.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1702.49 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1697.57 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1707.41 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6952.71ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>17,885</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>74,517.86</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4166.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>11.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4184.59ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3901.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4468.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>400.90ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrnclb'>180,151</td><td align="right" headers="Event %Timeouts" class='awrnc'>13.11</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>32,284.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>179.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>4.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>179.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>178.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>179.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>456.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>class slave wait</td><td align="right" headers="Event Waits" class='awrclb'>16,161</td><td align="right" headers="Event %Timeouts" class='awrc'>75.43</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9,667.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>598.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>1.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>599.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>544.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>655.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>78.89ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrnclb'>1,932</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.95</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,781.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1957.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1957.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1956.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1958.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrclb'>375,980</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,775.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>40.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrnclb'>131,104</td><td align="right" headers="Event %Timeouts" class='awrnc'>98.45</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,758.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>581.12us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrclb'>4,280,378</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,849.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>665.79us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>665.49us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>659.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>671.41us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.37us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pmon timer</td><td align="right" headers="Event Waits" class='awrnclb'>840</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,519.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.95ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>71.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrclb'>8,380</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,517.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.38ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.25ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>176.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>65,239</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,515.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>38.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>38.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>37.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.88ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrclb'>17,038</td><td align="right" headers="Event %Timeouts" class='awrc'>80.25</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,514.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>147.59ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>147.63ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>145.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>149.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.04ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,320.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.20</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>42.10us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,290.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,270.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,265.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>lreg timer</td><td align="right" headers="Event Waits" class='awrnclb'>422</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.76</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,264.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2995.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2995.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2988.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3002.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.91ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pman timer</td><td align="right" headers="Event Waits" class='awrclb'>421</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,262.89</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.74ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PING</td><td align="right" headers="Event Waits" class='awrnclb'>1,082</td><td align="right" headers="Event %Timeouts" class='awrnc'>19.22</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1165.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1167.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1119.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1214.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>67.09ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>57.28 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>57.28 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>57.13 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>57.44 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>223.46ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrnclb'>1,260</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1000.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1000.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1000.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1000.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>52.05us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>45</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>179.00us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>91</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.85 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.85 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.70 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>210.56ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrclb'>42</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,260.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>238.73us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>OFS idle</td><td align="right" headers="Event Waits" class='awrnclb'>420</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3000.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3000.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>96.88us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrclb'>719</td><td align="right" headers="Event %Timeouts" class='awrc'>86.09</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,259.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1752.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1752.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1750.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1753.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.40ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrnclb'>5,019</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,259.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>250.90ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>252.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>232.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>273.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>28.86ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrclb'>12,705</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,253.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>98.69ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>98.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>98.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>98.78ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>126.75us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrnclb'>20</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>38.40us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>smon timer</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>160.16us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Timer</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>12.02us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrclb'>39,734</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,103.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.17</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>27.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>876.14us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>jobq slave wait</td><td align="right" headers="Event Waits" class='awrnclb'>620</td><td align="right" headers="Event %Timeouts" class='awrnc'>97.26</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>304.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>491.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>491.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>488.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>494.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.60ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.75</td><td align="right" headers="WaitTime AvgWait" class='awrc'>62.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>62.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>61.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>585.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrnclb'>223</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.44ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>177</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.15ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>801.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.51ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>2,170</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.29us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.39us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.79us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.63us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>132</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>499.60us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>502.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>448.30us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>555.78us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>76.00us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>12.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>358K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>70.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(129)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(14)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background starting</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>7073</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Flush</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>15.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>74.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>64</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>35.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>39.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>159</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>49.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>37</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>54.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>192</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>67.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>456</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>2181</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>Data file init write</td><td align="right" class='awrnc'>80</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>41.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>1754</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>24.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>1457</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>37</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>86.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>86.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>3777</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>1882</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>44.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1362</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>82.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS kgl get object wait</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>2474</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>2872</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>636</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>20.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>337</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>11.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>40.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>2119</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>43.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>76.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>92</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>84.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(19)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>126</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>526</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>90.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>108</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>39.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>159</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>76.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1236</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>14.2</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>728</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>8834</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>48.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>datafile move cleanup during resize</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>62.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>126.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.0(30)</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>92.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(26)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>361.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>24.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(22)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>368.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(112)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(69)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>153</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>52.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>6M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(25)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>60.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(31)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file single write</td><td align="right" class='awrc'>80</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>36.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>120</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>65.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>41.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>46.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>212</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>6012</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.4</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>379</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>31.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: JG - queue lock</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: MV - datafile move</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: MW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>63</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>123</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>36.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: RP - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: SM -  contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: SW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>64.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>2669</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.8</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>48.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>1456</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>114</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>46.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.6</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>309</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>46.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>53.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>102</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>23.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>275.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(24)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(50)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(35)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(79)</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>517</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>38.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>36.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>141.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>28.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(36)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>530</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>2239</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>3654</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>118</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>35.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>509</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>49.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>50.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>133.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(62)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(40)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(34)</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>944.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(126)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(54)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(185)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>29.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>28.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(85)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(299)</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>5829</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>32.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>113.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(21)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(19)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>203</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>51.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>39.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>5212</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource directory to be unfrozen</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>228</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>85.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>1570</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>39.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>644</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>88.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>93</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>87.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>60</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>86</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>43.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>68</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>7780</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>87.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>5071</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>62.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>46.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>607</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>2670</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>111</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>29.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>1464</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>521</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>2402</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>197</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>195</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>785</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>101</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>24.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>156</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>7488</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>95.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>524</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>527</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>513</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>74.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>52.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>45.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>941</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>90</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>73.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1581</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>42.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.4</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>34.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>60.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>609</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>18,226,551</td><td align="right" class='awrc'>17,104,107</td><td align="right" class='awrc'>2,683,877</td><td align="right" class='awrc'>2,072,160</td><td align="right" class='awrc'>5,349,421</td><td align="right" class='awrc'>550</td><td align="right" class='awrc'>222,738</td><td align="right" class='awrc'>4,622</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>32,671</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>21,484,936</td><td align="right" class='awrnc'>16,389,757</td><td align="right" class='awrnc'>2,593,782</td><td align="right" class='awrnc'>2,003,781</td><td align="right" class='awrnc'>5,158,526</td><td align="right" class='awrnc'>662</td><td align="right" class='awrnc'>221,637</td><td align="right" class='awrnc'>4,498</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>31,541</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>39,711,487</td><td align="right" class='awrct'>33,493,864</td><td align="right" class='awrct'>5,277,659</td><td align="right" class='awrct'>4,075,941</td><td align="right" class='awrct'>10,507,947</td><td align="right" class='awrct'>1,212</td><td align="right" class='awrct'>444,375</td><td align="right" class='awrct'>9,120</td><td align="right" class='awrct'>73</td><td align="right" class='awrct'>64,212</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>19,855,744</td><td align="right" class='awrnc'>16,746,932</td><td align="right" class='awrnc'>2,638,830</td><td align="right" class='awrnc'>2,037,970</td><td align="right" class='awrnc'>5,253,974</td><td align="right" class='awrnc'>606</td><td align="right" class='awrnc'>222,188</td><td align="right" class='awrnc'>4,560</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>32,106</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,304,026</td><td align="right" class='awrc'>505,122</td><td align="right" class='awrc'>63,707</td><td align="right" class='awrc'>48,351</td><td align="right" class='awrc'>134,983</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>779</td><td align="right" class='awrc'>88</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>799</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>28,725.31</td><td align="right" class='awrc'>26,956.32</td><td align="right" class='awrc'>4,229.83</td><td align="right" class='awrc'>3,265.75</td><td align="right" class='awrc'>8,430.76</td><td align="right" class='awrc'>0.87</td><td align="right" class='awrc'>351.04</td><td align="right" class='awrc'>7.28</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>51.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>33,857.26</td><td align="right" class='awrnc'>25,827.97</td><td align="right" class='awrnc'>4,087.44</td><td align="right" class='awrnc'>3,157.68</td><td align="right" class='awrnc'>8,129.12</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>349.27</td><td align="right" class='awrnc'>7.09</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>49.70</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>62,582.56</td><td align="right" class='awrct'>52,784.29</td><td align="right" class='awrct'>8,317.27</td><td align="right" class='awrct'>6,423.43</td><td align="right" class='awrct'>16,559.88</td><td align="right" class='awrct'>1.91</td><td align="right" class='awrct'>700.31</td><td align="right" class='awrct'>14.37</td><td align="right" class='awrct'>0.12</td><td align="right" class='awrct'>101.19</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>31,291.28</td><td align="right" class='awrnc'>26,392.14</td><td align="right" class='awrnc'>4,158.63</td><td align="right" class='awrnc'>3,211.72</td><td align="right" class='awrnc'>8,279.94</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>350.15</td><td align="right" class='awrnc'>7.19</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>50.60</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>3,628.84</td><td align="right" class='awrc'>797.86</td><td align="right" class='awrc'>100.69</td><td align="right" class='awrc'>76.42</td><td align="right" class='awrc'>213.30</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.26</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>557.88</td><td align="right" class='awrc'>523.53</td><td align="right" class='awrc'>82.15</td><td align="right" class='awrc'>63.43</td><td align="right" class='awrc'>163.74</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>6.82</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>681.17</td><td align="right" class='awrnc'>519.63</td><td align="right" class='awrnc'>82.24</td><td align="right" class='awrnc'>63.53</td><td align="right" class='awrnc'>163.55</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>7.03</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>619.53</td><td align="right" class='awrct'>521.58</td><td align="right" class='awrct'>82.19</td><td align="right" class='awrct'>63.48</td><td align="right" class='awrct'>163.64</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>6.92</td><td align="right" class='awrct'>0.14</td><td align="right" class='awrct'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>2,328</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>1,857</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>5,061</td><td align="right" headers="BlocksServed GCCR" class='awrc'>4,063</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>12,041,537</td><td align="right" headers="Messages GESReceived" class='awrc'>16,446</td><td align="right" headers="Messages GCSSent" class='awrc'>10,728,499</td><td align="right" headers="Messages GESSent" class='awrc'>15,588</td><td align="right" headers="Messages SentDirect" class='awrc'>636,838</td><td align="right" headers="Messages SentIndir" class='awrc'>3,765,435</td><td align="right" headers="GCBlks Lost" class='awrclb'>1,200</td><td align="right" headers="GCCR Failure" class='awrcbb'>1</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>4,958</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>3,861</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>2,368</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>2,200</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>10,604,362</td><td align="right" headers="Messages GESReceived" class='awrnc'>12,616</td><td align="right" headers="Messages GCSSent" class='awrnc'>11,902,116</td><td align="right" headers="Messages GESSent" class='awrnc'>50,965</td><td align="right" headers="Messages SentDirect" class='awrnc'>800,127</td><td align="right" headers="Messages SentIndir" class='awrnc'>5,048,590</td><td align="right" headers="GCBlks Lost" class='awrnclb'>261</td><td align="right" headers="GCCR Failure" class='awrncbb'>1</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>7,286</td><td align="right" class='awrct'>5,718</td><td align="right" class='awrclbt'>7,429</td><td align="right" class='awrct'>6,263</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>22,645,899</td><td align="right" class='awrct'>29,062</td><td align="right" class='awrct'>22,630,615</td><td align="right" class='awrct'>66,553</td><td align="right" class='awrct'>1,436,965</td><td align="right" class='awrct'>8,814,025</td><td align="right" class='awrclbt'>1,461</td><td align="right" class='awrcbbt'>2</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>3,643</td><td align="right" class='awrnc'>2,859</td><td align="right" class='awrnclb'>3,715</td><td align="right" class='awrnc'>3,132</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>11,322,950</td><td align="right" class='awrnc'>14,531</td><td align="right" class='awrnc'>11,315,308</td><td align="right" class='awrnc'>33,277</td><td align="right" class='awrnc'>718,483</td><td align="right" class='awrnc'>4,407,013</td><td align="right" class='awrnclb'>731</td><td align="right" class='awrncbb'>1</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1,860</td><td align="right" class='awrc'>1,417</td><td align="right" class='awrclb'>1,904</td><td align="right" class='awrc'>1,317</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>1,016,236</td><td align="right" class='awrc'>2,708</td><td align="right" class='awrc'>829,873</td><td align="right" class='awrc'>25,015</td><td align="right" class='awrc'>115,463</td><td align="right" class='awrc'>907,328</td><td align="right" class='awrclb'>664</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>3.67</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>2.93</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>7.98</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>6.40</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>18,977.63</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>25.92</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>16,908.27</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>24.57</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>1,003.67</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>5,934.38</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>2</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>7.81</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>6.08</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>3.73</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>3.47</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>16,710.99</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>19.88</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>18,756.07</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>80.31</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>1,260.89</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>7,955.87</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>0</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>11.48</td><td align="right" class='awrct'>9.01</td><td align="right" class='awrclbt'>11.71</td><td align="right" class='awrct'>9.87</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>35,688.63</td><td align="right" class='awrct'>45.80</td><td align="right" class='awrct'>35,664.34</td><td align="right" class='awrct'>104.88</td><td align="right" class='awrct'>2,264.55</td><td align="right" class='awrct'>13,890.25</td><td align="right" class='awrclbt'>2</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>5.74</td><td align="right" class='awrnc'>4.51</td><td align="right" class='awrnclb'>5.85</td><td align="right" class='awrnc'>4.94</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>17,844.31</td><td align="right" class='awrnc'>22.90</td><td align="right" class='awrnc'>17,832.17</td><td align="right" class='awrnc'>52.44</td><td align="right" class='awrnc'>1,132.28</td><td align="right" class='awrnc'>6,945.13</td><td align="right" class='awrnclb'>1</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>2.93</td><td align="right" class='awrc'>2.23</td><td align="right" class='awrclb'>3.00</td><td align="right" class='awrc'>2.08</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>1,602.76</td><td align="right" class='awrc'>4.27</td><td align="right" class='awrc'>1,306.60</td><td align="right" class='awrc'>39.42</td><td align="right" class='awrc'>181.88</td><td align="right" class='awrc'>1,429.41</td><td align="right" class='awrclb'>1</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.07</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.06</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.15</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.12</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>368.57</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.50</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>328.38</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.48</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>19.49</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>115.25</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.04</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.16</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.12</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.08</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.07</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>336.21</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.40</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>377.35</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>1.62</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>25.37</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>160.06</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.01</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.11</td><td align="right" class='awrct'>0.09</td><td align="right" class='awrclbt'>0.11</td><td align="right" class='awrct'>0.10</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>352.39</td><td align="right" class='awrct'>0.45</td><td align="right" class='awrct'>352.87</td><td align="right" class='awrct'>1.05</td><td align="right" class='awrct'>22.43</td><td align="right" class='awrct'>137.66</td><td align="right" class='awrclbt'>0.02</td><td align="right" class='awrcbbt'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>6.13</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.02</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>93.84</td><td align="right" class='awrc'>83.02</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>23.67</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.04</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>76.29</td><td align="right" class='awrnc'>75.48</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>2158</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>7119</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>103</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>24945</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>2.24</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>3308</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>0</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>21538</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>0.51</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1783</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>29039</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>64</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>43600</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>1.14</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>18060</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>15000</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>0.76</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>430</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>4885</td><td align="right" headers="QueueTime(us) Received" class='awrc'>64</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>25</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>38</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>14.39</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>85.08</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>0.54</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>404</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>10699</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>17</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>19</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>40</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>13.64</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>86.06</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>0.30</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>2,779</td><td align="right" headers="BlockRequests CU" class='awrc'>1,277</td><td align="right" headers="BlockRequests Data" class='awrc'>2,779</td><td align="right" headers="BlockRequests Undo" class='awrc'>0</td><td align="right" headers="BlockRequests TX" class='awrc'>1,158</td><td align="right" headers="Results Current" class='awrclb'>4,036</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>1</td><td align="right" headers="Results DskRd" class='awrc'>20</td><td align="right" headers="Results Fail" class='awrc'>0</td><td align="right" headers="Fairness DownConv" class='awrclb'>2,736</td><td align="right" headers="Light Works" class='awrclb'>1,939</td><td align="right" headers="Total Flushes" class='awrclb'>91</td><td align="right" headers="Total Builds" class='awrc'>2,780</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>2,166</td><td align="right" headers="BlockRequests CU" class='awrnc'>94</td><td align="right" headers="BlockRequests Data" class='awrnc'>2,166</td><td align="right" headers="BlockRequests Undo" class='awrnc'>0</td><td align="right" headers="BlockRequests TX" class='awrnc'>4</td><td align="right" headers="Results Current" class='awrnclb'>2,177</td><td align="right" headers="Results Private" class='awrnc'>0</td><td align="right" headers="Results Zero" class='awrnc'>11</td><td align="right" headers="Results DskRd" class='awrnc'>67</td><td align="right" headers="Results Fail" class='awrnc'>2</td><td align="right" headers="Fairness DownConv" class='awrnclb'>2,114</td><td align="right" headers="Light Works" class='awrnclb'>1,398</td><td align="right" headers="Total Flushes" class='awrnclb'>25</td><td align="right" headers="Total Builds" class='awrnc'>2,166</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>4,945</td><td align="right" class='awrct'>1,371</td><td align="right" class='awrct'>4,945</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>1,162</td><td align="right" class='awrclbt'>6,213</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>12</td><td align="right" class='awrct'>87</td><td align="right" class='awrct'>2</td><td align="right" class='awrclbt'>4,850</td><td align="right" class='awrclbt'>3,337</td><td align="right" class='awrclbt'>116</td><td align="right" class='awrct'>4,946</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>2,473</td><td align="right" class='awrnc'>686</td><td align="right" class='awrnc'>2,473</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>581</td><td align="right" class='awrnclb'>3,107</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnclb'>2,425</td><td align="right" class='awrnclb'>1,669</td><td align="right" class='awrnclb'>58</td><td align="right" class='awrnc'>2,473</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>433</td><td align="right" class='awrc'>837</td><td align="right" class='awrc'>433</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>816</td><td align="right" class='awrclb'>1,315</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>1</td><td align="right" class='awrclb'>440</td><td align="right" class='awrclb'>383</td><td align="right" class='awrclb'>47</td><td align="right" class='awrc'>434</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>26.92</td><td align="right" class='awrc'>73.08</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.56</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>61.11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>1,823</td><td align="right" headers="CRBlocks %Immed" class='awrc'>94.68</td><td align="right" headers="CRBlocks %Busy" class='awrc'>1.48</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>3.84</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>2,236</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>30.59</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>68.96</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.45</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>7284</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>6811</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>42865</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>5214</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>2053</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>2284</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1938</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>4080</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="CRBlocks Received" class='awrnclb'>30</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>99</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>75.76</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>24.24</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>1250</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>1250</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>31393</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>40949</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1531</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrclb'>4</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>19</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>5.26</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>94.74</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>3131</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>3131</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>7403</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>14564</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>7005</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclbt'>2</td><td align="right" headers="Instance# Src" class='awrnct'>1</td><td headers="Block Class" class='awrnclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrnclbt'>2,618</td><td align="right" headers="CRBlocks %Immed" class='awrnct'>94.54</td><td align="right" headers="CRBlocks %Busy" class='awrnct'>0.42</td><td align="right" headers="CRBlocks %Cngst" class='awrnct'>5.04</td><td align="right" headers="CurrentBlocks Received" class='awrnclbt'>4,827</td><td align="right" headers="CurrentBlocks %Immed" class='awrnct'>56.37</td><td align="right" headers="CurrentBlocks %Busy" class='awrnct'>40.87</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnct'>2.76</td><td align="right" headers="CRAvgTime(us) All" class='awrnclbt'>39571</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnct'>37395</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnct'>40380</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnct'>80310</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclbt'>18506</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnct'>27452</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnct'>4440</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrbt'>44142</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrclb'>1,154</td><td align="right" headers="CRBlocks %Immed" class='awrc'>91.33</td><td align="right" headers="CRBlocks %Busy" class='awrc'>6.76</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>1.91</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>14</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>7442</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>5193</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>38419</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>5357</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>7487</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>7487</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="CRBlocks Received" class='awrnclb'>91</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>121</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>28.10</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>69.42</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>2.48</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>1117</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>1117</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>2088</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>1988</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1916</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>8023</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>1,726</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>684</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>6811</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>6811</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>2284</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>2284</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>30</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>75</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>1250</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>1250</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>40949</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>40949</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>4</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>1</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>3131</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>3131</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>14564</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>14564</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>2,475</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>2,721</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>37395</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>37395</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>27452</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>27452</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>1,054</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>5193</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>5193</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>91</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>34</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>1117</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>1117</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>1988</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>1988</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.31.173</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>1036</td><td align="right" headers="500bytes Std|Dev" class='awrc'>1.04</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>63</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>993</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.98</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>53864</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>392.30</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>62</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>50704</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>379.62</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>57</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>1784</td><td align="right" headers="500bytes Std|Dev" class='awrct'>1.44</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>62</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>2490</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>2.53</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>57</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>426</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.31</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>62</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>428</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>2,680.53</td><td align="right" headers="Sent(MB) Cache" class='awrc'>44.18</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>2.68</td><td align="right" headers="Sent(MB) DLM" class='awrc'>2,601.54</td><td align="right" headers="Sent(MB) PNG" class='awrc'>1.06</td><td align="right" headers="Sent(MB) Misc" class='awrc'>31.08</td><td align="right" headers="Received(MB) Total" class='awrclb'>3,163.42</td><td align="right" headers="Received(MB) Cache" class='awrc'>24.89</td><td align="right" headers="Received(MB) IPQ" class='awrc'>2.13</td><td align="right" headers="Received(MB) DLM" class='awrc'>3,117.52</td><td align="right" headers="Received(MB) PNG" class='awrc'>1.06</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>17.82</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>3,108.66</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>26.80</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>2.13</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>3,060.95</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>1.04</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>17.74</td><td align="right" headers="Received(MB) Total" class='awrnclb'>2,631.51</td><td align="right" headers="Received(MB) Cache" class='awrnc'>42.82</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>2.68</td><td align="right" headers="Received(MB) DLM" class='awrnc'>2,554.22</td><td align="right" headers="Received(MB) PNG" class='awrnc'>1.04</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>30.75</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>5,789.20</td><td align="right" class='awrct'>70.98</td><td align="right" class='awrct'>4.81</td><td align="right" class='awrct'>5,662.49</td><td align="right" class='awrct'>2.10</td><td align="right" class='awrct'>48.81</td><td align="right" class='awrclbt'>5,794.94</td><td align="right" class='awrct'>67.72</td><td align="right" class='awrct'>4.81</td><td align="right" class='awrct'>5,671.74</td><td align="right" class='awrct'>2.10</td><td align="right" class='awrcrbt'>48.56</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>2,894.60</td><td align="right" class='awrnc'>35.49</td><td align="right" class='awrnc'>2.41</td><td align="right" class='awrnc'>2,831.25</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>24.41</td><td align="right" class='awrnclb'>2,897.47</td><td align="right" class='awrnc'>33.86</td><td align="right" class='awrnc'>2.41</td><td align="right" class='awrnc'>2,835.87</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrncrb'>24.28</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>302.73</td><td align="right" class='awrc'>12.29</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>324.85</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>9.43</td><td align="right" class='awrclb'>376.12</td><td align="right" class='awrc'>12.68</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>398.32</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrcrb'>9.14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>4.22</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.07</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>4.10</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.05</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>4.99</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.04</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>4.91</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.03</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>4.90</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.04</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>4.82</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.03</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>4.15</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.07</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>4.03</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.05</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>9.12</td><td align="right" class='awrct'>0.11</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>8.92</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.08</td><td align="right" class='awrclbt'>9.13</td><td align="right" class='awrct'>0.11</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>8.94</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.08</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>4.56</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnclb'>4.57</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.47</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.04</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.48</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrclb'>0.59</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.63</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>27,989.94</td><td align="right" headers="Sent Packets" class='awrc'>11,247,048</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>28,197.24</td><td align="right" headers="Received Packets" class='awrc'>11,298,955</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>3,487.29</td><td align="right" headers="Sent Packets" class='awrnc'>4,200,473</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>4,151.34</td><td align="right" headers="Received Packets" class='awrnc'>6,221,193</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.09</td><td align="right" headers="Sent Packets" class='awrnc'>463</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.06</td><td align="right" headers="Received Packets" class='awrnc'>401</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.11</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>2.04</td><td align="right" headers="Sent Packets" class='awrc'>3,099</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>1.17</td><td align="right" headers="Received Packets" class='awrc'>3,131</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>51.45</td><td align="right" headers="Sent Packets" class='awrnc'>973,351</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>51.45</td><td align="right" headers="Received Packets" class='awrnc'>973,351</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>28,381.44</td><td align="right" headers="Sent Packets" class='awrc'>11,975,056</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>27,823.01</td><td align="right" headers="Received Packets" class='awrc'>10,760,910</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>4,118.52</td><td align="right" headers="Sent Packets" class='awrnc'>4,504,010</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>3,513.47</td><td align="right" headers="Received Packets" class='awrnc'>5,573,303</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.06</td><td align="right" headers="Sent Packets" class='awrnc'>401</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.09</td><td align="right" headers="Received Packets" class='awrnc'>463</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.23</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>2.03</td><td align="right" headers="Sent Packets" class='awrnc'>3,029</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.17</td><td align="right" headers="Received Packets" class='awrnc'>3,083</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>86.18</td><td align="right" headers="Sent Packets" class='awrc'>1,257,075</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>86.18</td><td align="right" headers="Received Packets" class='awrc'>1,257,075</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>64,119.04</td><td align="right" class='awrnct'>34,164,005</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>63,825.17</td><td align="right" class='awrnct'>36,091,865</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>3,771.71</td><td align="right" class='awrc'>2,009,647</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>3,754.42</td><td align="right" class='awrc'>2,123,051</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9,274.42</td><td align="right" class='awrnc'>3,886,661</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>9,216.72</td><td align="right" class='awrnc'>3,865,968</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>44.11</td><td align="right" headers="Sent Packets" class='awrc'>17,726</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>44.44</td><td align="right" headers="Received Packets" class='awrc'>17,807</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>5.50</td><td align="right" headers="Sent Packets" class='awrnc'>6,620</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>6.54</td><td align="right" headers="Received Packets" class='awrnc'>9,805</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>1</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>1</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.11</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>5</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>5</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.08</td><td align="right" headers="Sent Packets" class='awrnc'>1,534</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.08</td><td align="right" headers="Received Packets" class='awrnc'>1,534</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>44.73</td><td align="right" headers="Sent Packets" class='awrc'>18,871</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>43.85</td><td align="right" headers="Received Packets" class='awrc'>16,958</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>6.49</td><td align="right" headers="Sent Packets" class='awrnc'>7,098</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>5.54</td><td align="right" headers="Received Packets" class='awrnc'>8,783</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>1</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>1</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.23</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>5</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>5</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.14</td><td align="right" headers="Sent Packets" class='awrc'>1,981</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.14</td><td align="right" headers="Received Packets" class='awrc'>1,981</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>101.05</td><td align="right" class='awrnct'>53,840</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>100.58</td><td align="right" class='awrnct'>56,879</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>5.94</td><td align="right" class='awrc'>3,167</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>5.92</td><td align="right" class='awrc'>3,346</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>14.62</td><td align="right" class='awrnc'>6,125</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>14.52</td><td align="right" class='awrnc'>6,093</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>41.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>34,875.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>2,619.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>1.52</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>0.07</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>0.09</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>0.54</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>0.10</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>0.68</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>87</td><td align="right" headers="AffinityObjects End" class='awrc'>114</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>7</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>4</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>7</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>41.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>2,619.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>34,875.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>1.41</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>0.08</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>0.10</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>0.33</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>0.03</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>0.84</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>71</td><td align="right" headers="AffinityObjects End" class='awrnc'>41</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>7</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>4</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>7</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>41.00</td><td align="right" class='awrct'>18,747.00</td><td align="right" class='awrct'>18,747.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>1.47</td><td align="right" class='awrct'>0.08</td><td align="right" class='awrct'>0.10</td><td align="right" class='awrct'>0.44</td><td align="right" class='awrct'>0.07</td><td align="right" class='awrct'>0.76</td><td align="right" class='awrclbt'>79</td><td align="right" class='awrct'>78</td><td align="right" class='awrclbt'>7</td><td align="right" class='awrct'>4</td><td align="right" class='awrcrbt'>7</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>34,875.00</td><td align="right" class='awrnc'>34,875.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>1.52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnclb'>87</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnclb'>7</td><td align="right" class='awrnc'>4</td><td align="right" class='awrncrb'>7</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   97.9% of Total DB Time (s):		72,333</li>
<li class="awr">Captured PL/SQL account for   75.8% of Total DB Time (s):	   72,333</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>44,832.82</td><td align="right" headers="Total CPU(s)" class='awrc'>1,919.88</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,234.54</td><td align="right" headers="Total Gets" class='awrc'>5,737,678</td><td align="right" headers="Total Reads" class='awrc'>4,927,288</td><td align="right" headers="Total Rows" class='awrc'>4,953,458</td><td align="right" headers="Total Cluster(s)" class='awrc'>11,404.93</td><td align="right" headers="Total Execs" class='awrc'>62,702</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.72</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.50</td><td align="right" headers="PerExecution Gets" class='awrc'>91.51</td><td align="right" headers="PerExecution Reads" class='awrc'>78.58</td><td align="right" headers="PerExecution Rows" class='awrc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>61.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.60</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>14.45</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>14.71</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>56.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>14.11</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>25,900.66</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,026.14</td><td align="right" headers="Total IOWait(s)" class='awrnc'>16,898.54</td><td align="right" headers="Total Gets" class='awrnc'>29,219,114</td><td align="right" headers="Total Reads" class='awrnc'>27,988,887</td><td align="right" headers="Total Rows" class='awrnc'>355,634</td><td align="right" headers="Total Cluster(s)" class='awrnc'>8,331.34</td><td align="right" headers="Total Execs" class='awrnc'>355,606</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrnc'>82.17</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.71</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>35.81</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>49.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.35</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>73.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>83.56</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>41.04</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>80.02</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9j9p88t9arm28">9j9p88t9arm28</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>564.18</td><td align="right" headers="Total CPU(s)" class='awrc'>37.94</td><td align="right" headers="Total IOWait(s)" class='awrc'>362.60</td><td align="right" headers="Total Gets" class='awrc'>200,854</td><td align="right" headers="Total Reads" class='awrc'>190,249</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>174.58</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>564.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>37.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>362.60</td><td align="right" headers="PerExecution Gets" class='awrc'>200,854.00</td><td align="right" headers="PerExecution Reads" class='awrc'>190,249.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>174.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.51</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5q9x3sz49jcja">5q9x3sz49jcja</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>563.30</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.78</td><td align="right" headers="Total IOWait(s)" class='awrnc'>518.55</td><td align="right" headers="Total Gets" class='awrnc'>337,554</td><td align="right" headers="Total Reads" class='awrnc'>316,896</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>563.30</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>37.78</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>518.55</td><td align="right" headers="PerExecution Gets" class='awrnc'>337,554.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>316,896.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9n7n07rfgj5y8">9n7n07rfgj5y8</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>563.29</td><td align="right" headers="Total CPU(s)" class='awrc'>34.34</td><td align="right" headers="Total IOWait(s)" class='awrc'>350.77</td><td align="right" headers="Total Gets" class='awrc'>194,687</td><td align="right" headers="Total Reads" class='awrc'>184,303</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>174.16</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>563.29</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.34</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>350.77</td><td align="right" headers="PerExecution Gets" class='awrc'>194,687.00</td><td align="right" headers="PerExecution Reads" class='awrc'>184,303.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>174.16</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.49</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cfqgzkaxqzg38">cfqgzkaxqzg38</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>563.25</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.16</td><td align="right" headers="Total IOWait(s)" class='awrnc'>498.69</td><td align="right" headers="Total Gets" class='awrnc'>318,770</td><td align="right" headers="Total Reads" class='awrnc'>298,900</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>18.62</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>563.25</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>37.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>498.69</td><td align="right" headers="PerExecution Gets" class='awrnc'>318,770.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>298,900.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>18.62</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.90</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.80</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#btxhvgkudmtmh">btxhvgkudmtmh</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>563.18</td><td align="right" headers="Total CPU(s)" class='awrc'>38.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>368.30</td><td align="right" headers="Total Gets" class='awrc'>210,983</td><td align="right" headers="Total Reads" class='awrc'>198,860</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>162.88</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>563.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>38.49</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>368.30</td><td align="right" headers="PerExecution Gets" class='awrc'>210,983.00</td><td align="right" headers="PerExecution Reads" class='awrc'>198,860.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>162.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.53</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.80</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>563.14</td><td align="right" headers="Total CPU(s)" class='awrnc'>39.11</td><td align="right" headers="Total IOWait(s)" class='awrnc'>523.66</td><td align="right" headers="Total Gets" class='awrnc'>344,087</td><td align="right" headers="Total Reads" class='awrnc'>320,281</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3.97</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>563.14</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>39.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>523.66</td><td align="right" headers="PerExecution Gets" class='awrnc'>344,087.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>320,281.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#944mdaa2ps4z4">944mdaa2ps4z4</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>563.10</td><td align="right" headers="Total CPU(s)" class='awrc'>38.39</td><td align="right" headers="Total IOWait(s)" class='awrc'>524.90</td><td align="right" headers="Total Gets" class='awrc'>334,778</td><td align="right" headers="Total Reads" class='awrc'>314,981</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>7.11</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>563.10</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>38.39</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>524.90</td><td align="right" headers="PerExecution Gets" class='awrc'>334,778.00</td><td align="right" headers="PerExecution Reads" class='awrc'>314,981.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>7.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.94</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.04</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cgymr2xd94y9m">cgymr2xd94y9m</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>563.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.92</td><td align="right" headers="Total IOWait(s)" class='awrnc'>521.87</td><td align="right" headers="Total Gets" class='awrnc'>327,287</td><td align="right" headers="Total Reads" class='awrnc'>309,547</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>11.93</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>563.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>37.92</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>521.87</td><td align="right" headers="PerExecution Gets" class='awrnc'>327,287.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>309,547.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>11.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.82</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.06</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   96.2% of Total CPU Time (s): 	  4,120</li>
<li class="awr">Captured PL/SQL account for   76.1% of Total CPU Time (s):	     4,120</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>2,026.14</td><td align="right" headers="Total Elapsed(s)" class='awrc'>25,900.66</td><td align="right" headers="Total IOWait(s)" class='awrc'>16,898.54</td><td align="right" headers="Total Gets" class='awrc'>29,219,114</td><td align="right" headers="Total Reads" class='awrc'>27,988,887</td><td align="right" headers="Total Rows" class='awrc'>355,634</td><td align="right" headers="Total Cluster(s)" class='awrc'>8,331.34</td><td align="right" headers="Total Execs" class='awrc'>355,606</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.07</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrc'>82.17</td><td align="right" headers="PerExecution Reads" class='awrc'>78.71</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>49.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>35.81</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>34.59</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>73.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.56</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.04</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>80.02</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,919.88</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>44,832.82</td><td align="right" headers="Total IOWait(s)" class='awrnc'>31,234.54</td><td align="right" headers="Total Gets" class='awrnc'>5,737,678</td><td align="right" headers="Total Reads" class='awrnc'>4,927,288</td><td align="right" headers="Total Rows" class='awrnc'>4,953,458</td><td align="right" headers="Total Cluster(s)" class='awrnc'>11,404.93</td><td align="right" headers="Total Execs" class='awrnc'>62,702</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>0.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.50</td><td align="right" headers="PerExecution Gets" class='awrnc'>91.51</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.58</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>46.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.98</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>63.93</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>14.45</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.71</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>56.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.11</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>39.32</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.11</td><td align="right" headers="Total IOWait(s)" class='awrc'>379.65</td><td align="right" headers="Total Gets" class='awrc'>216,547</td><td align="right" headers="Total Reads" class='awrc'>205,386</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>155.92</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>39.32</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>379.65</td><td align="right" headers="PerExecution Gets" class='awrc'>216,547.00</td><td align="right" headers="PerExecution Reads" class='awrc'>205,386.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>155.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.55</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>39.31</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.17</td><td align="right" headers="Total IOWait(s)" class='awrnc'>529.24</td><td align="right" headers="Total Gets" class='awrnc'>351,222</td><td align="right" headers="Total Reads" class='awrnc'>326,852</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>39.31</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.17</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>529.24</td><td align="right" headers="PerExecution Gets" class='awrnc'>351,222.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>326,852.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>39.11</td><td align="right" headers="Total Elapsed(s)" class='awrc'>563.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>523.66</td><td align="right" headers="Total Gets" class='awrc'>344,087</td><td align="right" headers="Total Reads" class='awrc'>320,281</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>3.97</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>39.11</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>563.14</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>523.66</td><td align="right" headers="PerExecution Gets" class='awrc'>344,087.00</td><td align="right" headers="PerExecution Reads" class='awrc'>320,281.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.97</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>39.01</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>561.78</td><td align="right" headers="Total IOWait(s)" class='awrnc'>370.00</td><td align="right" headers="Total Gets" class='awrnc'>214,296</td><td align="right" headers="Total Reads" class='awrnc'>202,676</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>165.96</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>39.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>561.78</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>370.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>214,296.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>202,676.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>165.96</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.82</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>38.95</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.12</td><td align="right" headers="Total IOWait(s)" class='awrc'>506.67</td><td align="right" headers="Total Gets" class='awrc'>326,305</td><td align="right" headers="Total Reads" class='awrc'>307,548</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>23.41</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>38.95</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.12</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>506.67</td><td align="right" headers="PerExecution Gets" class='awrc'>326,305.00</td><td align="right" headers="PerExecution Reads" class='awrc'>307,548.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>23.41</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.04</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.82</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>38.88</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.15</td><td align="right" headers="Total IOWait(s)" class='awrnc'>533.81</td><td align="right" headers="Total Gets" class='awrnc'>343,814</td><td align="right" headers="Total Reads" class='awrnc'>323,111</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>38.88</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>533.81</td><td align="right" headers="PerExecution Gets" class='awrnc'>343,814.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>323,111.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.09</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>38.84</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.26</td><td align="right" headers="Total IOWait(s)" class='awrc'>373.17</td><td align="right" headers="Total Gets" class='awrc'>210,907</td><td align="right" headers="Total Reads" class='awrc'>199,908</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>163.97</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>38.84</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.26</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>373.17</td><td align="right" headers="PerExecution Gets" class='awrc'>210,907.00</td><td align="right" headers="PerExecution Reads" class='awrc'>199,908.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>163.97</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.53</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.81</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>38.79</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.77</td><td align="right" headers="Total IOWait(s)" class='awrnc'>530.12</td><td align="right" headers="Total Gets" class='awrnc'>344,090</td><td align="right" headers="Total Reads" class='awrnc'>322,872</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>38.79</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>530.12</td><td align="right" headers="PerExecution Gets" class='awrnc'>344,090.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>322,872.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.09</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   98.5% of Total User I/O Wait Time (s):	   48,859</li>
<li class="awr">Captured PL/SQL account for   78.1% of Total User I/O Wait Time (s):	      48,859</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>31,234.54</td><td align="right" headers="Total Elapsed(s)" class='awrc'>44,832.82</td><td align="right" headers="Total CPU(s)" class='awrc'>1,919.88</td><td align="right" headers="Total Gets" class='awrc'>5,737,678</td><td align="right" headers="Total Reads" class='awrc'>4,927,288</td><td align="right" headers="Total Rows" class='awrc'>4,953,458</td><td align="right" headers="Total Cluster(s)" class='awrc'>11,404.93</td><td align="right" headers="Total Execs" class='awrc'>62,702</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.72</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution Gets" class='awrc'>91.51</td><td align="right" headers="PerExecution Reads" class='awrc'>78.58</td><td align="right" headers="PerExecution Rows" class='awrc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>63.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>61.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.60</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>14.45</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>14.71</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>56.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>14.11</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>16,898.54</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>25,900.66</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,026.14</td><td align="right" headers="Total Gets" class='awrnc'>29,219,114</td><td align="right" headers="Total Reads" class='awrnc'>27,988,887</td><td align="right" headers="Total Rows" class='awrnc'>355,634</td><td align="right" headers="Total Cluster(s)" class='awrnc'>8,331.34</td><td align="right" headers="Total Execs" class='awrnc'>355,606</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>82.17</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.71</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>34.59</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>35.81</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>49.18</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>73.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>83.56</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>41.04</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>80.02</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3scs6w7r6f9xa">3scs6w7r6f9xa</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>533.81</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.15</td><td align="right" headers="Total CPU(s)" class='awrc'>38.88</td><td align="right" headers="Total Gets" class='awrc'>343,814</td><td align="right" headers="Total Reads" class='awrc'>323,111</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>533.81</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.15</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>38.88</td><td align="right" headers="PerExecution Gets" class='awrc'>343,814.00</td><td align="right" headers="PerExecution Reads" class='awrc'>323,111.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>1.09</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.94</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#63fqcgaztwa1q">63fqcgaztwa1q</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>530.12</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.77</td><td align="right" headers="Total CPU(s)" class='awrnc'>38.79</td><td align="right" headers="Total Gets" class='awrnc'>344,090</td><td align="right" headers="Total Reads" class='awrnc'>322,872</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>530.12</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.77</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>38.79</td><td align="right" headers="PerExecution Gets" class='awrnc'>344,090.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>322,872.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>1.09</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5nz6b4v9qbsbr">5nz6b4v9qbsbr</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>529.24</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.17</td><td align="right" headers="Total CPU(s)" class='awrc'>39.31</td><td align="right" headers="Total Gets" class='awrc'>351,222</td><td align="right" headers="Total Reads" class='awrc'>326,852</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>529.24</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.17</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>39.31</td><td align="right" headers="PerExecution Gets" class='awrc'>351,222.00</td><td align="right" headers="PerExecution Reads" class='awrc'>326,852.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>1.08</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.98</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bbp00h54hyg9h">bbp00h54hyg9h</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>523.66</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>563.14</td><td align="right" headers="Total CPU(s)" class='awrnc'>39.11</td><td align="right" headers="Total Gets" class='awrnc'>344,087</td><td align="right" headers="Total Reads" class='awrnc'>320,281</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3.97</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>523.66</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>563.14</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>39.11</td><td align="right" headers="PerExecution Gets" class='awrnc'>344,087.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>320,281.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.97</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>1.07</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0fq8myny00n70">0fq8myny00n70</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>506.67</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.12</td><td align="right" headers="Total CPU(s)" class='awrc'>38.95</td><td align="right" headers="Total Gets" class='awrc'>326,305</td><td align="right" headers="Total Reads" class='awrc'>307,548</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>23.41</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>506.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.12</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>38.95</td><td align="right" headers="PerExecution Gets" class='awrc'>326,305.00</td><td align="right" headers="PerExecution Reads" class='awrc'>307,548.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>23.41</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>1.04</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.82</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cpwuynd81c18b">cpwuynd81c18b</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>379.65</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.11</td><td align="right" headers="Total CPU(s)" class='awrnc'>39.32</td><td align="right" headers="Total Gets" class='awrnc'>216,547</td><td align="right" headers="Total Reads" class='awrnc'>205,386</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>155.92</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>379.65</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.11</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>39.32</td><td align="right" headers="PerExecution Gets" class='awrnc'>216,547.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>205,386.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>155.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.55</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bu2cwsvp2u0hx">bu2cwsvp2u0hx</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>373.17</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.26</td><td align="right" headers="Total CPU(s)" class='awrc'>38.84</td><td align="right" headers="Total Gets" class='awrc'>210,907</td><td align="right" headers="Total Reads" class='awrc'>199,908</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>163.97</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>373.17</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.26</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>38.84</td><td align="right" headers="PerExecution Gets" class='awrc'>210,907.00</td><td align="right" headers="PerExecution Reads" class='awrc'>199,908.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>163.97</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.94</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.53</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.81</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1vbnx1nmxh6g5">1vbnx1nmxh6g5</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>370.00</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>561.78</td><td align="right" headers="Total CPU(s)" class='awrnc'>39.01</td><td align="right" headers="Total Gets" class='awrnc'>214,296</td><td align="right" headers="Total Reads" class='awrnc'>202,676</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>165.96</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>370.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>561.78</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>39.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>214,296.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>202,676.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>165.96</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.54</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.82</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	39,711,487</li>
<li class="awr">Captured SQL account for   98.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>29,219,114</td><td align="right" headers="Total Reads" class='awrc'>27,988,887</td><td align="right" headers="Total Elapsed(s)" class='awrc'>25,900.66</td><td align="right" headers="Total CPU(s)" class='awrc'>2,026.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>16,898.54</td><td align="right" headers="Total Rows" class='awrc'>355,634</td><td align="right" headers="Total Cluster(s)" class='awrc'>8,331.34</td><td align="right" headers="Total Execs" class='awrc'>355,606</td><td align="right" headers="PerExecution Gets" class='awrclb'>82.17</td><td align="right" headers="PerExecution Reads" class='awrc'>78.71</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.07</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>73.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.56</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>35.81</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>34.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.04</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>80.02</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrnclb'>5,737,678</td><td align="right" headers="Total Reads" class='awrnc'>4,927,288</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>44,832.82</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,919.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>31,234.54</td><td align="right" headers="Total Rows" class='awrnc'>4,953,458</td><td align="right" headers="Total Cluster(s)" class='awrnc'>11,404.93</td><td align="right" headers="Total Execs" class='awrnc'>62,702</td><td align="right" headers="PerExecution Gets" class='awrnclb'>91.51</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.58</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>14.45</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.71</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>46.60</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>63.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>56.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.11</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3kqrku32p6sfn">3kqrku32p6sfn</a></td><td align="right" headers="Total Gets" class='awrclb'>3,922,567</td><td align="right" headers="Total Reads" class='awrc'>14</td><td align="right" headers="Total Elapsed(s)" class='awrc'>9.54</td><td align="right" headers="Total CPU(s)" class='awrc'>7.68</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.14</td><td align="right" headers="Total Rows" class='awrc'>0</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.06</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>3,922,567.00</td><td align="right" headers="PerExecution Reads" class='awrc'>14.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>9.54</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>7.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.14</td><td align="right" headers="PerExecution Rows" class='awrc'>0.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.06</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>9.88</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>MERGE /*+ OPT_PARAM('_parallel...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9x4w27ag2x9tz">9x4w27ag2x9tz</a></td><td align="right" headers="Total Gets" class='awrnclb'>515,301</td><td align="right" headers="Total Reads" class='awrnc'>478,234</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>35.20</td><td align="right" headers="Total IOWait(s)" class='awrnc'>528.74</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>515,301.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>478,234.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>35.20</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>528.74</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td><td align="right" headers="Total Gets" class='awrclb'>515,101</td><td align="right" headers="Total Reads" class='awrc'>479,177</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.15</td><td align="right" headers="Total CPU(s)" class='awrc'>35.09</td><td align="right" headers="Total IOWait(s)" class='awrc'>526.30</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.90</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>515,101.00</td><td align="right" headers="PerExecution Reads" class='awrc'>479,177.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.15</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>35.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>526.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.90</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td><td align="right" headers="Total Gets" class='awrnclb'>511,133</td><td align="right" headers="Total Reads" class='awrnc'>478,584</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.11</td><td align="right" headers="Total CPU(s)" class='awrnc'>35.15</td><td align="right" headers="Total IOWait(s)" class='awrnc'>530.37</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>511,133.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>478,584.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.11</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>35.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>530.37</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.29</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td><td align="right" headers="Total Gets" class='awrclb'>510,483</td><td align="right" headers="Total Reads" class='awrc'>475,129</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.35</td><td align="right" headers="Total CPU(s)" class='awrc'>34.70</td><td align="right" headers="Total IOWait(s)" class='awrc'>528.99</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>510,483.00</td><td align="right" headers="PerExecution Reads" class='awrc'>475,129.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.70</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>528.99</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.29</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1u879ayvfcr0m">1u879ayvfcr0m</a></td><td align="right" headers="Total Gets" class='awrnclb'>509,285</td><td align="right" headers="Total Reads" class='awrnc'>474,997</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.18</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.61</td><td align="right" headers="Total IOWait(s)" class='awrnc'>523.77</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>509,285.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>474,997.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.18</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.61</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>523.77</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.28</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#080r2n9vygcm7">080r2n9vygcm7</a></td><td align="right" headers="Total Gets" class='awrclb'>506,991</td><td align="right" headers="Total Reads" class='awrc'>472,379</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.13</td><td align="right" headers="Total CPU(s)" class='awrc'>34.66</td><td align="right" headers="Total IOWait(s)" class='awrc'>523.32</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>506,991.00</td><td align="right" headers="PerExecution Reads" class='awrc'>472,379.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.66</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>523.32</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.41</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0v6ufj2r5qaah">0v6ufj2r5qaah</a></td><td align="right" headers="Total Gets" class='awrnclb'>506,131</td><td align="right" headers="Total Reads" class='awrnc'>472,384</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.65</td><td align="right" headers="Total IOWait(s)" class='awrnc'>524.61</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>506,131.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>472,384.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>524.61</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.27</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.41</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      33,493,864</li>
<li class="awr">Captured SQL account for   98.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>27,988,887</td><td align="right" headers="Total Gets" class='awrc'>29,219,114</td><td align="right" headers="Total Elapsed(s)" class='awrc'>25,900.66</td><td align="right" headers="Total CPU(s)" class='awrc'>2,026.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>16,898.54</td><td align="right" headers="Total Rows" class='awrc'>355,634</td><td align="right" headers="Total Cluster(s)" class='awrc'>8,331.34</td><td align="right" headers="Total Execs" class='awrc'>355,606</td><td align="right" headers="PerExecution Reads" class='awrclb'>78.71</td><td align="right" headers="PerExecution Gets" class='awrc'>82.17</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.07</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>83.56</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>73.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>35.81</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>34.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.04</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>80.02</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrnclb'>4,927,288</td><td align="right" headers="Total Gets" class='awrnc'>5,737,678</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>44,832.82</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,919.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>31,234.54</td><td align="right" headers="Total Rows" class='awrnc'>4,953,458</td><td align="right" headers="Total Cluster(s)" class='awrnc'>11,404.93</td><td align="right" headers="Total Execs" class='awrnc'>62,702</td><td align="right" headers="PerExecution Reads" class='awrnclb'>78.58</td><td align="right" headers="PerExecution Gets" class='awrnc'>91.51</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>14.71</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>14.45</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>46.60</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>63.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>56.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.11</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td><td align="right" headers="Total Reads" class='awrclb'>479,177</td><td align="right" headers="Total Gets" class='awrc'>515,101</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.15</td><td align="right" headers="Total CPU(s)" class='awrc'>35.09</td><td align="right" headers="Total IOWait(s)" class='awrc'>526.30</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.90</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>479,177.00</td><td align="right" headers="PerExecution Gets" class='awrc'>515,101.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.15</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>35.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>526.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.90</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.43</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td><td align="right" headers="Total Reads" class='awrnclb'>478,584</td><td align="right" headers="Total Gets" class='awrnc'>511,133</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.11</td><td align="right" headers="Total CPU(s)" class='awrnc'>35.15</td><td align="right" headers="Total IOWait(s)" class='awrnc'>530.37</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>478,584.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>511,133.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.11</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>35.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>530.37</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.43</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.29</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9x4w27ag2x9tz">9x4w27ag2x9tz</a></td><td align="right" headers="Total Reads" class='awrclb'>478,234</td><td align="right" headers="Total Gets" class='awrc'>515,301</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.06</td><td align="right" headers="Total CPU(s)" class='awrc'>35.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>528.74</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>478,234.00</td><td align="right" headers="PerExecution Gets" class='awrc'>515,301.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.06</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>35.20</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>528.74</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.43</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td><td align="right" headers="Total Reads" class='awrnclb'>475,129</td><td align="right" headers="Total Gets" class='awrnc'>510,483</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.35</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.70</td><td align="right" headers="Total IOWait(s)" class='awrnc'>528.99</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>475,129.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>510,483.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.70</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>528.99</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.42</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.29</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1u879ayvfcr0m">1u879ayvfcr0m</a></td><td align="right" headers="Total Reads" class='awrclb'>474,997</td><td align="right" headers="Total Gets" class='awrc'>509,285</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.18</td><td align="right" headers="Total CPU(s)" class='awrc'>34.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>523.77</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>474,997.00</td><td align="right" headers="PerExecution Gets" class='awrc'>509,285.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.61</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>523.77</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.42</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.28</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0v6ufj2r5qaah">0v6ufj2r5qaah</a></td><td align="right" headers="Total Reads" class='awrnclb'>472,384</td><td align="right" headers="Total Gets" class='awrnc'>506,131</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.65</td><td align="right" headers="Total IOWait(s)" class='awrnc'>524.61</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>472,384.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>506,131.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>524.61</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.41</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#080r2n9vygcm7">080r2n9vygcm7</a></td><td align="right" headers="Total Reads" class='awrclb'>472,379</td><td align="right" headers="Total Gets" class='awrc'>506,991</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.13</td><td align="right" headers="Total CPU(s)" class='awrc'>34.66</td><td align="right" headers="Total IOWait(s)" class='awrc'>523.32</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>472,379.00</td><td align="right" headers="PerExecution Gets" class='awrc'>506,991.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.66</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>523.32</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.41</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.28</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0wnmjrnvgrwyw">0wnmjrnvgrwyw</a></td><td align="right" headers="Total Reads" class='awrnclb'>470,571</td><td align="right" headers="Total Gets" class='awrnc'>504,953</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.04</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.65</td><td align="right" headers="Total IOWait(s)" class='awrnc'>523.60</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>470,571.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>504,953.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.04</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>523.60</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.40</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   33,491,965</li>
<li class="awr">Captured SQL account for    0.2% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      33,491,965</li>
<li class="awr">Captured SQL account for    0.2% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#4ws27v7ay8j6x">4ws27v7ay8j6x</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>479,177</td><td align="right" headers="Total Requests" class='awrc'>479,177</td><td align="right" headers="Total Reads" class='awrc'>479,177</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.15</td><td align="right" headers="Total CPU(s)" class='awrc'>35.09</td><td align="right" headers="Total IOWait(s)" class='awrc'>526.30</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.90</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>479,177.00</td><td align="right" headers="PerExecution Requests" class='awrc'>479,177.00</td><td align="right" headers="PerExecution Reads" class='awrc'>479,177.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.15</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>35.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>526.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.90</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.43</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.43</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fvgh1q9dsd479">fvgh1q9dsd479</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>478,584</td><td align="right" headers="Total Requests" class='awrnc'>478,584</td><td align="right" headers="Total Reads" class='awrnc'>478,584</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.11</td><td align="right" headers="Total CPU(s)" class='awrnc'>35.15</td><td align="right" headers="Total IOWait(s)" class='awrnc'>530.37</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>478,584.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>478,584.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>478,584.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.11</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>35.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>530.37</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.43</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.43</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9x4w27ag2x9tz">9x4w27ag2x9tz</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>478,234</td><td align="right" headers="Total Requests" class='awrc'>478,234</td><td align="right" headers="Total Reads" class='awrc'>478,234</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.06</td><td align="right" headers="Total CPU(s)" class='awrc'>35.20</td><td align="right" headers="Total IOWait(s)" class='awrc'>528.74</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>478,234.00</td><td align="right" headers="PerExecution Requests" class='awrc'>478,234.00</td><td align="right" headers="PerExecution Reads" class='awrc'>478,234.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.06</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>35.20</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>528.74</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.43</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.43</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.43</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bra280pu141z8">bra280pu141z8</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>475,129</td><td align="right" headers="Total Requests" class='awrnc'>475,129</td><td align="right" headers="Total Reads" class='awrnc'>475,129</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.35</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.70</td><td align="right" headers="Total IOWait(s)" class='awrnc'>528.99</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>475,129.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>475,129.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>475,129.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.35</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.70</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>528.99</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.42</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.42</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1u879ayvfcr0m">1u879ayvfcr0m</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>474,997</td><td align="right" headers="Total Requests" class='awrc'>474,997</td><td align="right" headers="Total Reads" class='awrc'>474,997</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.18</td><td align="right" headers="Total CPU(s)" class='awrc'>34.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>523.77</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>474,997.00</td><td align="right" headers="PerExecution Requests" class='awrc'>474,997.00</td><td align="right" headers="PerExecution Reads" class='awrc'>474,997.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.61</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>523.77</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.42</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.42</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0v6ufj2r5qaah">0v6ufj2r5qaah</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>472,384</td><td align="right" headers="Total Requests" class='awrnc'>472,384</td><td align="right" headers="Total Reads" class='awrnc'>472,384</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.65</td><td align="right" headers="Total IOWait(s)" class='awrnc'>524.61</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>472,384.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>472,384.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>472,384.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>524.61</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.41</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.41</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.41</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#080r2n9vygcm7">080r2n9vygcm7</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>472,379</td><td align="right" headers="Total Requests" class='awrc'>472,379</td><td align="right" headers="Total Reads" class='awrc'>472,379</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.13</td><td align="right" headers="Total CPU(s)" class='awrc'>34.66</td><td align="right" headers="Total IOWait(s)" class='awrc'>523.32</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>472,379.00</td><td align="right" headers="PerExecution Requests" class='awrc'>472,379.00</td><td align="right" headers="PerExecution Reads" class='awrc'>472,379.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.13</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.66</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>523.32</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.41</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.41</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.41</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0wnmjrnvgrwyw">0wnmjrnvgrwyw</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>470,571</td><td align="right" headers="Total Requests" class='awrnc'>470,571</td><td align="right" headers="Total Reads" class='awrnc'>470,571</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.04</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.65</td><td align="right" headers="Total IOWait(s)" class='awrnc'>523.60</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>470,571.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>470,571.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>470,571.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.04</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>523.60</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.41</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.41</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#chsnzuhv84uy5">chsnzuhv84uy5</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>469,962</td><td align="right" headers="Total Requests" class='awrc'>469,962</td><td align="right" headers="Total Reads" class='awrc'>469,962</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.34</td><td align="right" headers="Total CPU(s)" class='awrc'>34.73</td><td align="right" headers="Total IOWait(s)" class='awrc'>526.64</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.46</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>469,962.00</td><td align="right" headers="PerExecution Requests" class='awrc'>469,962.00</td><td align="right" headers="PerExecution Reads" class='awrc'>469,962.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.34</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>34.73</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>526.64</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.46</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.40</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.40</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7a314umnzbfsf">7a314umnzbfsf</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>468,665</td><td align="right" headers="Total Requests" class='awrnc'>468,665</td><td align="right" headers="Total Reads" class='awrnc'>468,665</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>545.16</td><td align="right" headers="Total CPU(s)" class='awrnc'>34.77</td><td align="right" headers="Total IOWait(s)" class='awrnc'>518.45</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>468,665.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>468,665.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>468,665.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>545.16</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>34.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>518.45</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.40</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.40</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.84</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.06</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:	  444,375</li>
<li class="awr">Captured SQL account for   96.2% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>355,606</td><td align="right" headers="Total Elapsed(s)" class='awrc'>25,900.66</td><td align="right" headers="Total CPU(s)" class='awrc'>2,026.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>16,898.54</td><td align="right" headers="Total Gets" class='awrc'>29,219,114</td><td align="right" headers="Total Reads" class='awrc'>27,988,887</td><td align="right" headers="Total Rows" class='awrc'>355,634</td><td align="right" headers="Total Cluster(s)" class='awrc'>8,331.34</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.07</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrc'>82.17</td><td align="right" headers="PerExecution Reads" class='awrc'>78.71</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>80.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>35.81</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>49.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>34.59</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>73.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.56</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>41.04</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrnclb'>62,702</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>44,832.82</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,919.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>31,234.54</td><td align="right" headers="Total Gets" class='awrnc'>5,737,678</td><td align="right" headers="Total Reads" class='awrnc'>4,927,288</td><td align="right" headers="Total Rows" class='awrnc'>4,953,458</td><td align="right" headers="Total Cluster(s)" class='awrnc'>11,404.93</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.50</td><td align="right" headers="PerExecution Gets" class='awrnc'>91.51</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.58</td><td align="right" headers="PerExecution Rows" class='awrnc'>79.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>14.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>61.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>46.60</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>63.93</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>14.45</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.71</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>56.18</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrclb'>2,096</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.23</td><td align="right" headers="Total CPU(s)" class='awrc'>0.22</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>6,303</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>2,036</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.01</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.97</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.47</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td><td align="right" headers="Total Execs" class='awrnclb'>1,550</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.77</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.26</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.18</td><td align="right" headers="Total Gets" class='awrnc'>5,438</td><td align="right" headers="Total Reads" class='awrnc'>37</td><td align="right" headers="Total Rows" class='awrnc'>1,549</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.33</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.51</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.02</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.35</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrclb'>921</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2.08</td><td align="right" headers="Total CPU(s)" class='awrc'>0.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>1,962</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>120</td><td align="right" headers="Total Cluster(s)" class='awrc'>3.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.13</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.13</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.01</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#86708bvah4akq">86708bvah4akq</a></td><td align="right" headers="Total Execs" class='awrnclb'>651</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.14</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.14</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>1,735</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>651</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.67</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.15</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select name from undo$ where f...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td><td align="right" headers="Total Execs" class='awrclb'>469</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.99</td><td align="right" headers="Total CPU(s)" class='awrc'>0.22</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.01</td><td align="right" headers="Total Gets" class='awrc'>2,975</td><td align="right" headers="Total Reads" class='awrc'>1</td><td align="right" headers="Total Rows" class='awrc'>469</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.74</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>6.34</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrnclb'>281</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.04</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.05</td><td align="right" headers="Total Gets" class='awrnc'>1,081</td><td align="right" headers="Total Reads" class='awrnc'>10</td><td align="right" headers="Total Rows" class='awrnc'>238</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.85</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.04</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.85</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.06</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td><td align="right" headers="Total Execs" class='awrclb'>219</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.07</td><td align="right" headers="Total CPU(s)" class='awrc'>0.03</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.04</td><td align="right" headers="Total Gets" class='awrc'>656</td><td align="right" headers="Total Reads" class='awrc'>3</td><td align="right" headers="Total Rows" class='awrc'>218</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.00</td><td align="right" headers="PerExecution Reads" class='awrc'>0.01</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.05</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select type#, blocks, extents,...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td><td align="right" headers="Total Execs" class='awrnclb'>201</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.37</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.07</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.03</td><td align="right" headers="Total Gets" class='awrnc'>1,214</td><td align="right" headers="Total Reads" class='awrnc'>7</td><td align="right" headers="Total Rows" class='awrnc'>201</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.27</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.04</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.03</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.05</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>merge into sys.wri$_index_usag...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	      20,301</li>
<li class="awr">Captured SQL account for   97.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>11,404.93</td><td align="right" headers="Total Elapsed(s)" class='awrc'>44,832.82</td><td align="right" headers="Total CPU(s)" class='awrc'>1,919.88</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,234.54</td><td align="right" headers="Total Gets" class='awrc'>5,737,678</td><td align="right" headers="Total Reads" class='awrc'>4,927,288</td><td align="right" headers="Total Rows" class='awrc'>4,953,458</td><td align="right" headers="Total Execs" class='awrc'>62,702</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>0.18</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.72</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.50</td><td align="right" headers="PerExecution Gets" class='awrc'>91.51</td><td align="right" headers="PerExecution Reads" class='awrc'>78.58</td><td align="right" headers="PerExecution Rows" class='awrc'>79.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>56.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>61.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.60</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>63.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>14.45</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>14.71</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>14.11</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>8,331.34</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>25,900.66</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,026.14</td><td align="right" headers="Total IOWait(s)" class='awrnc'>16,898.54</td><td align="right" headers="Total Gets" class='awrnc'>29,219,114</td><td align="right" headers="Total Reads" class='awrnc'>27,988,887</td><td align="right" headers="Total Rows" class='awrnc'>355,634</td><td align="right" headers="Total Execs" class='awrnc'>355,606</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>0.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.05</td><td align="right" headers="PerExecution Gets" class='awrnc'>82.17</td><td align="right" headers="PerExecution Reads" class='awrnc'>78.71</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>41.04</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>35.81</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>49.18</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>34.59</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>73.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>83.56</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>80.02</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1ma366vqkk88p">1ma366vqkk88p</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>400.18</td><td align="right" headers="Total Elapsed(s)" class='awrc'>546.06</td><td align="right" headers="Total CPU(s)" class='awrc'>18.13</td><td align="right" headers="Total IOWait(s)" class='awrc'>140.13</td><td align="right" headers="Total Gets" class='awrc'>115,637</td><td align="right" headers="Total Reads" class='awrc'>110,113</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>400.18</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>546.06</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>140.13</td><td align="right" headers="PerExecution Gets" class='awrc'>115,637.00</td><td align="right" headers="PerExecution Reads" class='awrc'>110,113.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.44</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.29</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.29</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.33</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dvky5v8qr4n6s">dvky5v8qr4n6s</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>394.78</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>547.23</td><td align="right" headers="Total CPU(s)" class='awrnc'>18.33</td><td align="right" headers="Total IOWait(s)" class='awrnc'>142.13</td><td align="right" headers="Total Gets" class='awrnc'>116,446</td><td align="right" headers="Total Reads" class='awrnc'>111,311</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>394.78</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>547.23</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>18.33</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>142.13</td><td align="right" headers="PerExecution Gets" class='awrnc'>116,446.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>111,311.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.44</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.29</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.29</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.33</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#15084tmvuq24t">15084tmvuq24t</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>392.68</td><td align="right" headers="Total Elapsed(s)" class='awrc'>545.71</td><td align="right" headers="Total CPU(s)" class='awrc'>18.82</td><td align="right" headers="Total IOWait(s)" class='awrc'>146.49</td><td align="right" headers="Total Gets" class='awrc'>117,920</td><td align="right" headers="Total Reads" class='awrc'>112,292</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>392.68</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>545.71</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.82</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>146.49</td><td align="right" headers="PerExecution Gets" class='awrc'>117,920.00</td><td align="right" headers="PerExecution Reads" class='awrc'>112,292.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.46</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0raxwcmc41phu">0raxwcmc41phu</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>392.54</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>546.25</td><td align="right" headers="Total CPU(s)" class='awrnc'>18.41</td><td align="right" headers="Total IOWait(s)" class='awrnc'>146.85</td><td align="right" headers="Total Gets" class='awrnc'>117,300</td><td align="right" headers="Total Reads" class='awrnc'>111,933</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>392.54</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>546.25</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>18.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>146.85</td><td align="right" headers="PerExecution Gets" class='awrnc'>117,300.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>111,933.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.45</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.33</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#amc2bf2c5axvj">amc2bf2c5axvj</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>389.77</td><td align="right" headers="Total Elapsed(s)" class='awrc'>546.19</td><td align="right" headers="Total CPU(s)" class='awrc'>19.15</td><td align="right" headers="Total IOWait(s)" class='awrc'>146.81</td><td align="right" headers="Total Gets" class='awrc'>118,556</td><td align="right" headers="Total Reads" class='awrc'>112,779</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>389.77</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>546.19</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>19.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>146.81</td><td align="right" headers="PerExecution Gets" class='awrc'>118,556.00</td><td align="right" headers="PerExecution Reads" class='awrc'>112,779.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.92</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.46</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3dara5jcrdzcm">3dara5jcrdzcm</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>389.25</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>547.31</td><td align="right" headers="Total CPU(s)" class='awrnc'>18.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>149.63</td><td align="right" headers="Total Gets" class='awrnc'>120,041</td><td align="right" headers="Total Reads" class='awrnc'>114,389</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>389.25</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>547.31</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>18.88</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>149.63</td><td align="right" headers="PerExecution Gets" class='awrnc'>120,041.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>114,389.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.92</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.46</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2s578t5qpv8b5">2s578t5qpv8b5</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>388.57</td><td align="right" headers="Total Elapsed(s)" class='awrc'>546.16</td><td align="right" headers="Total CPU(s)" class='awrc'>19.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>150.53</td><td align="right" headers="Total Gets" class='awrc'>119,814</td><td align="right" headers="Total Reads" class='awrc'>113,924</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>388.57</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>546.16</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>19.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>150.53</td><td align="right" headers="PerExecution Gets" class='awrc'>119,814.00</td><td align="right" headers="PerExecution Reads" class='awrc'>113,924.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.46</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#g5nsjqnj16rfq">g5nsjqnj16rfq</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>387.80</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>546.04</td><td align="right" headers="Total CPU(s)" class='awrnc'>19.13</td><td align="right" headers="Total IOWait(s)" class='awrnc'>152.06</td><td align="right" headers="Total Gets" class='awrnc'>122,004</td><td align="right" headers="Total Reads" class='awrnc'>116,217</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>387.80</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>546.04</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>19.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>152.06</td><td align="right" headers="PerExecution Gets" class='awrnc'>122,004.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>116,217.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.46</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.31</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.35</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>1,415</td><td align="right" class='awrnc'>2.23</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>1.02</td><td align="right" headers="perSecond Max" class='awrncrb'>1.21</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>322</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>1,162</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.80</td><td align="right" headers="perSecond Max" class='awrncrb'>1.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>304</td><td align="right" class='awrnc'>0.48</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.23</td><td align="right" headers="perSecond Max" class='awrncrb'>0.25</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>1,095</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.86</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>0.76</td><td align="right" headers="perSecond Max" class='awrcrb'>0.97</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>886</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.58</td><td align="right" headers="perSecond Max" class='awrncrb'>0.81</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>870</td><td align="right" class='awrnc'>1.37</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>0.59</td><td align="right" headers="perSecond Max" class='awrncrb'>0.78</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO block miss count</td><td align="right" class='awrnc'>27,456,215</td><td align="right" class='awrnc'>43,269.32</td><td align="right" class='awrnc'>427.59</td><td align="right" headers="perSecond Average" class='awrnclb'>21,634.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>650.61</td><td align="right" headers="perSecond Min" class='awrnc'>21,174.61</td><td align="right" headers="perSecond Max" class='awrncrb'>22,094.71</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>389,388</td><td align="right" class='awrc'>613.65</td><td align="right" class='awrc'>6.06</td><td align="right" headers="perSecond Average" class='awrclb'>306.83</td><td align="right" headers="perSecond StdDev" class='awrc'>17.38</td><td align="right" headers="perSecond Min" class='awrc'>294.54</td><td align="right" headers="perSecond Max" class='awrcrb'>319.11</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>27,457,876</td><td align="right" class='awrnc'>43,271.94</td><td align="right" class='awrnc'>427.61</td><td align="right" headers="perSecond Average" class='awrnclb'>21,635.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>650.19</td><td align="right" headers="perSecond Min" class='awrnc'>21,176.22</td><td align="right" headers="perSecond Max" class='awrncrb'>22,095.72</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>362,073</td><td align="right" class='awrc'>570.60</td><td align="right" class='awrc'>5.64</td><td align="right" headers="perSecond Average" class='awrclb'>285.30</td><td align="right" headers="perSecond StdDev" class='awrc'>7.59</td><td align="right" headers="perSecond Min" class='awrc'>279.94</td><td align="right" headers="perSecond Max" class='awrcrb'>290.67</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.11</td><td align="right" headers="perSecond Max" class='awrcrb'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>585,946</td><td align="right" class='awrnc'>923.42</td><td align="right" class='awrnc'>9.13</td><td align="right" headers="perSecond Average" class='awrnclb'>461.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>133.52</td><td align="right" headers="perSecond Min" class='awrnc'>367.30</td><td align="right" headers="perSecond Max" class='awrncrb'>556.13</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>440,792</td><td align="right" class='awrc'>694.67</td><td align="right" class='awrc'>6.86</td><td align="right" headers="perSecond Average" class='awrclb'>347.33</td><td align="right" headers="perSecond StdDev" class='awrc'>103.79</td><td align="right" headers="perSecond Min" class='awrc'>273.94</td><td align="right" headers="perSecond Max" class='awrcrb'>420.73</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>1,683</td><td align="right" class='awrnc'>2.65</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.21</td><td align="right" headers="perSecond Min" class='awrnc'>1.18</td><td align="right" headers="perSecond Max" class='awrncrb'>1.47</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>27,985,755</td><td align="right" class='awrc'>44,103.85</td><td align="right" class='awrc'>435.83</td><td align="right" headers="perSecond Average" class='awrclb'>22,051.93</td><td align="right" headers="perSecond StdDev" class='awrc'>824.39</td><td align="right" headers="perSecond Min" class='awrc'>21,468.99</td><td align="right" headers="perSecond Max" class='awrcrb'>22,634.86</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>903</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.69</td><td align="right" headers="perSecond Max" class='awrncrb'>0.73</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>903</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.71</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.69</td><td align="right" headers="perSecond Max" class='awrcrb'>0.73</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>4,416,660</td><td align="right" class='awrnc'>6,960.71</td><td align="right" class='awrnc'>68.78</td><td align="right" headers="perSecond Average" class='awrnclb'>3,480.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,718.38</td><td align="right" headers="perSecond Min" class='awrnc'>143.95</td><td align="right" headers="perSecond Max" class='awrncrb'>6,816.75</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>1,290</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.99</td><td align="right" headers="perSecond Max" class='awrcrb'>1.04</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>325</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.25</td><td align="right" headers="perSecond Max" class='awrncrb'>0.26</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>296,242</td><td align="right" class='awrc'>466.85</td><td align="right" class='awrc'>4.61</td><td align="right" headers="perSecond Average" class='awrclb'>233.43</td><td align="right" headers="perSecond StdDev" class='awrc'>65.54</td><td align="right" headers="perSecond Min" class='awrc'>187.08</td><td align="right" headers="perSecond Max" class='awrcrb'>279.77</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>291,945</td><td align="right" class='awrnc'>460.09</td><td align="right" class='awrnc'>4.55</td><td align="right" headers="perSecond Average" class='awrnclb'>230.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>28.84</td><td align="right" headers="perSecond Min" class='awrnc'>209.65</td><td align="right" headers="perSecond Max" class='awrncrb'>250.44</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>2,030,639</td><td align="right" class='awrc'>3,200.16</td><td align="right" class='awrc'>31.62</td><td align="right" headers="perSecond Average" class='awrclb'>1,600.08</td><td align="right" headers="perSecond StdDev" class='awrc'>65.65</td><td align="right" headers="perSecond Min" class='awrc'>1,553.66</td><td align="right" headers="perSecond Max" class='awrcrb'>1,646.50</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>787,888</td><td align="right" class='awrnc'>1,241.66</td><td align="right" class='awrnc'>12.27</td><td align="right" headers="perSecond Average" class='awrnclb'>620.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.57</td><td align="right" headers="perSecond Min" class='awrnc'>605.58</td><td align="right" headers="perSecond Max" class='awrncrb'>636.09</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>7,691,149</td><td align="right" class='awrnc'>12,120.79</td><td align="right" class='awrnc'>119.78</td><td align="right" headers="perSecond Average" class='awrnclb'>6,060.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>262.99</td><td align="right" headers="perSecond Min" class='awrnc'>5,874.43</td><td align="right" headers="perSecond Max" class='awrncrb'>6,246.35</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>62,270</td><td align="right" class='awrc'>98.13</td><td align="right" class='awrc'>0.97</td><td align="right" headers="perSecond Average" class='awrclb'>49.07</td><td align="right" headers="perSecond StdDev" class='awrc'>12.39</td><td align="right" headers="perSecond Min" class='awrc'>40.30</td><td align="right" headers="perSecond Max" class='awrcrb'>57.83</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>3,095</td><td align="right" class='awrnc'>4.88</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>2.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>2.40</td><td align="right" headers="perSecond Max" class='awrncrb'>2.47</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>202</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>462</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.36</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>225,211</td><td align="right" class='awrnc'>354.92</td><td align="right" class='awrnc'>3.51</td><td align="right" headers="perSecond Average" class='awrnclb'>177.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.63</td><td align="right" headers="perSecond Min" class='awrnc'>174.18</td><td align="right" headers="perSecond Max" class='awrncrb'>180.73</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>5,051,744</td><td align="right" class='awrnc'>7,961.24</td><td align="right" class='awrnc'>78.67</td><td align="right" headers="perSecond Average" class='awrnclb'>3,980.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>97.53</td><td align="right" headers="perSecond Min" class='awrnc'>3,911.65</td><td align="right" headers="perSecond Max" class='awrncrb'>4,049.58</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>344</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.26</td><td align="right" headers="perSecond Max" class='awrcrb'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc req</td><td align="right" class='awrc'>1,811</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.43</td><td align="right" headers="perSecond StdDev" class='awrc'>0.94</td><td align="right" headers="perSecond Min" class='awrc'>0.76</td><td align="right" headers="perSecond Max" class='awrcrb'>2.09</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc space (block)</td><td align="right" class='awrnc'>1,635,516,416</td><td align="right" class='awrnc'>2,577,535.18</td><td align="right" class='awrnc'>25,470.57</td><td align="right" headers="perSecond Average" class='awrnclb'>1,288,767.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>923,631.90</td><td align="right" headers="perSecond Min" class='awrnc'>635,661.22</td><td align="right" headers="perSecond Max" class='awrncrb'>1,941,873.97</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc time (ms)</td><td align="right" class='awrc'>510,522,753</td><td align="right" class='awrc'>804,576.30</td><td align="right" class='awrc'>7,950.58</td><td align="right" headers="perSecond Average" class='awrclb'>402,288.15</td><td align="right" headers="perSecond StdDev" class='awrc'>353,707.69</td><td align="right" headers="perSecond Min" class='awrc'>152,179.04</td><td align="right" headers="perSecond Max" class='awrcrb'>652,397.26</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply req</td><td align="right" class='awrnc'>3,327</td><td align="right" class='awrnc'>5.24</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>2.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.67</td><td align="right" headers="perSecond Min" class='awrnc'>1.44</td><td align="right" headers="perSecond Max" class='awrncrb'>3.80</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply time (ms)</td><td align="right" class='awrc'>304,022</td><td align="right" class='awrc'>479.13</td><td align="right" class='awrc'>4.73</td><td align="right" headers="perSecond Average" class='awrclb'>239.57</td><td align="right" headers="perSecond StdDev" class='awrc'>191.18</td><td align="right" headers="perSecond Min" class='awrc'>104.38</td><td align="right" headers="perSecond Max" class='awrcrb'>374.75</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free req</td><td align="right" class='awrnc'>1,524</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.72</td><td align="right" headers="perSecond Min" class='awrnc'>0.69</td><td align="right" headers="perSecond Max" class='awrncrb'>1.71</td></tr>
<tr><td scope="row" class='awrc'>KTFB free space (block)</td><td align="right" class='awrc'>172,096</td><td align="right" class='awrc'>271.22</td><td align="right" class='awrc'>2.68</td><td align="right" headers="perSecond Average" class='awrclb'>135.61</td><td align="right" headers="perSecond StdDev" class='awrc'>84.63</td><td align="right" headers="perSecond Min" class='awrc'>75.77</td><td align="right" headers="perSecond Max" class='awrcrb'>195.45</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free time (ms)</td><td align="right" class='awrnc'>123,191,053</td><td align="right" class='awrnc'>194,147.95</td><td align="right" class='awrnc'>1,918.51</td><td align="right" headers="perSecond Average" class='awrnclb'>97,073.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>95,137.94</td><td align="right" headers="perSecond Min" class='awrnc'>29,801.30</td><td align="right" headers="perSecond Max" class='awrncrb'>164,346.66</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>354</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrc'>0.21</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.43</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>354</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.21</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.43</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>351</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.25</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>351</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.25</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>523</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>0.32</td><td align="right" headers="perSecond Max" class='awrncrb'>0.50</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>395</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.31</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.22</td><td align="right" headers="perSecond Max" class='awrcrb'>0.40</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks created</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>461</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.36</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>application wait time</td><td align="right" class='awrnc'>463</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.23</td><td align="right" headers="perSecond Min" class='awrnc'>0.20</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>auto extends on undo tablespace</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background timeouts</td><td align="right" class='awrc'>12,798</td><td align="right" class='awrc'>20.17</td><td align="right" class='awrc'>0.20</td><td align="right" headers="perSecond Average" class='awrclb'>10.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>9.98</td><td align="right" headers="perSecond Max" class='awrcrb'>10.18</td></tr>
<tr><td scope="row" class='awrnc'>blocks cleaned out using minact</td><td align="right" class='awrnc'>1,337,323</td><td align="right" class='awrnc'>2,107.53</td><td align="right" class='awrnc'>20.83</td><td align="right" headers="perSecond Average" class='awrnclb'>1,053.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>62.29</td><td align="right" headers="perSecond Min" class='awrnc'>1,009.72</td><td align="right" headers="perSecond Max" class='awrncrb'>1,097.81</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>91,839,644</td><td align="right" class='awrc'>144,733.07</td><td align="right" class='awrc'>1,430.26</td><td align="right" headers="perSecond Average" class='awrclb'>72,366.54</td><td align="right" headers="perSecond StdDev" class='awrc'>6,527.38</td><td align="right" headers="perSecond Min" class='awrc'>67,750.98</td><td align="right" headers="perSecond Max" class='awrcrb'>76,982.09</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>33,419,725</td><td align="right" class='awrnc'>52,667.44</td><td align="right" class='awrnc'>520.46</td><td align="right" headers="perSecond Average" class='awrnclb'>26,333.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>630.42</td><td align="right" headers="perSecond Min" class='awrnc'>25,887.94</td><td align="right" headers="perSecond Max" class='awrncrb'>26,779.49</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>526,796</td><td align="right" class='awrc'>830.17</td><td align="right" class='awrc'>8.20</td><td align="right" headers="perSecond Average" class='awrclb'>415.08</td><td align="right" headers="perSecond StdDev" class='awrc'>435.58</td><td align="right" headers="perSecond Min" class='awrc'>107.08</td><td align="right" headers="perSecond Max" class='awrcrb'>723.09</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>93,973</td><td align="right" class='awrnc'>148.09</td><td align="right" class='awrnc'>1.46</td><td align="right" headers="perSecond Average" class='awrnclb'>74.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>19.03</td><td align="right" headers="perSecond Min" class='awrnc'>60.59</td><td align="right" headers="perSecond Max" class='awrncrb'>87.50</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>532,303</td><td align="right" class='awrc'>838.88</td><td align="right" class='awrc'>8.29</td><td align="right" headers="perSecond Average" class='awrclb'>419.44</td><td align="right" headers="perSecond StdDev" class='awrc'>3.01</td><td align="right" headers="perSecond Min" class='awrc'>417.31</td><td align="right" headers="perSecond Max" class='awrcrb'>421.57</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>123,394</td><td align="right" class='awrnc'>194.46</td><td align="right" class='awrnc'>1.92</td><td align="right" headers="perSecond Average" class='awrnclb'>97.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.37</td><td align="right" headers="perSecond Min" class='awrnc'>94.85</td><td align="right" headers="perSecond Max" class='awrncrb'>99.62</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>15,693</td><td align="right" class='awrc'>24.73</td><td align="right" class='awrc'>0.24</td><td align="right" headers="perSecond Average" class='awrclb'>12.37</td><td align="right" headers="perSecond StdDev" class='awrc'>3.10</td><td align="right" headers="perSecond Min" class='awrc'>10.17</td><td align="right" headers="perSecond Max" class='awrcrb'>14.56</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>373,248,698,368</td><td align="right" class='awrnc'>588,217,166.37</td><td align="right" class='awrnc'>5,812,756.16</td><td align="right" headers="perSecond Average" class='awrnclb'>294,108,583.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>8,828,092.59</td><td align="right" headers="perSecond Min" class='awrnc'>287,866,179.05</td><td align="right" headers="perSecond Max" class='awrncrb'>300,350,987.32</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>11,092</td><td align="right" class='awrc'>17.48</td><td align="right" class='awrc'>0.17</td><td align="right" headers="perSecond Average" class='awrclb'>8.74</td><td align="right" headers="perSecond StdDev" class='awrc'>2.56</td><td align="right" headers="perSecond Min" class='awrc'>6.93</td><td align="right" headers="perSecond Max" class='awrcrb'>10.55</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>3,904</td><td align="right" class='awrnc'>6.15</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>3.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.66</td><td align="right" headers="perSecond Min" class='awrnc'>2.61</td><td align="right" headers="perSecond Max" class='awrncrb'>3.54</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>2,997</td><td align="right" class='awrc'>4.72</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>2.36</td><td align="right" headers="perSecond StdDev" class='awrc'>2.95</td><td align="right" headers="perSecond Min" class='awrc'>0.27</td><td align="right" headers="perSecond Max" class='awrcrb'>4.45</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>2,043</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.91</td><td align="right" headers="perSecond Min" class='awrnc'>0.26</td><td align="right" headers="perSecond Max" class='awrncrb'>2.96</td></tr>
<tr><td scope="row" class='awrc'>cluster wait time</td><td align="right" class='awrc'>2,027,584</td><td align="right" class='awrc'>3,195.27</td><td align="right" class='awrc'>31.58</td><td align="right" headers="perSecond Average" class='awrclb'>1,597.64</td><td align="right" headers="perSecond StdDev" class='awrc'>1,042.13</td><td align="right" headers="perSecond Min" class='awrc'>860.74</td><td align="right" headers="perSecond Max" class='awrcrb'>2,334.53</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>5,053,949</td><td align="right" class='awrc'>7,964.71</td><td align="right" class='awrc'>78.71</td><td align="right" headers="perSecond Average" class='awrclb'>3,982.36</td><td align="right" headers="perSecond StdDev" class='awrc'>98.66</td><td align="right" headers="perSecond Min" class='awrc'>3,912.59</td><td align="right" headers="perSecond Max" class='awrcrb'>4,052.12</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>5,053,832</td><td align="right" class='awrnc'>7,964.53</td><td align="right" class='awrnc'>78.71</td><td align="right" headers="perSecond Average" class='awrnclb'>3,982.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>98.70</td><td align="right" headers="perSecond Min" class='awrnc'>3,912.48</td><td align="right" headers="perSecond Max" class='awrncrb'>4,052.05</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>313</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>concurrency wait time</td><td align="right" class='awrnc'>68,594</td><td align="right" class='awrnc'>108.10</td><td align="right" class='awrnc'>1.07</td><td align="right" headers="perSecond Average" class='awrnclb'>54.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>48.48</td><td align="right" headers="perSecond Min" class='awrnc'>19.77</td><td align="right" headers="perSecond Max" class='awrncrb'>88.34</td></tr>
<tr><td scope="row" class='awrc'>consistent changes</td><td align="right" class='awrc'>13,162</td><td align="right" class='awrc'>20.74</td><td align="right" class='awrc'>0.20</td><td align="right" headers="perSecond Average" class='awrclb'>10.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.71</td><td align="right" headers="perSecond Min" class='awrc'>9.87</td><td align="right" headers="perSecond Max" class='awrcrb'>10.87</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets</td><td align="right" class='awrnc'>33,946,344</td><td align="right" class='awrnc'>53,497.05</td><td align="right" class='awrnc'>528.66</td><td align="right" headers="perSecond Average" class='awrnclb'>26,748.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,814.53</td><td align="right" headers="perSecond Min" class='awrnc'>24,051.24</td><td align="right" headers="perSecond Max" class='awrncrb'>29,445.80</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>4,721,963</td><td align="right" class='awrc'>7,441.22</td><td align="right" class='awrc'>73.54</td><td align="right" headers="perSecond Average" class='awrclb'>3,720.61</td><td align="right" headers="perSecond StdDev" class='awrc'>4,272.44</td><td align="right" headers="perSecond Min" class='awrc'>699.54</td><td align="right" headers="perSecond Max" class='awrcrb'>6,741.68</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>4,721,337</td><td align="right" class='awrnc'>7,440.24</td><td align="right" class='awrnc'>73.53</td><td align="right" headers="perSecond Average" class='awrnclb'>3,720.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,272.40</td><td align="right" headers="perSecond Min" class='awrnc'>699.07</td><td align="right" headers="perSecond Max" class='awrncrb'>6,741.16</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>33,946,344</td><td align="right" class='awrc'>53,497.05</td><td align="right" class='awrc'>528.66</td><td align="right" headers="perSecond Average" class='awrclb'>26,748.52</td><td align="right" headers="perSecond StdDev" class='awrc'>3,814.53</td><td align="right" headers="perSecond Min" class='awrc'>24,051.24</td><td align="right" headers="perSecond Max" class='awrcrb'>29,445.80</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>29,224,381</td><td align="right" class='awrnc'>46,055.82</td><td align="right" class='awrnc'>455.12</td><td align="right" headers="perSecond Average" class='awrnclb'>23,027.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>457.91</td><td align="right" headers="perSecond Min" class='awrnc'>22,704.12</td><td align="right" headers="perSecond Max" class='awrncrb'>23,351.70</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>27,759,446</td><td align="right" class='awrc'>43,747.18</td><td align="right" class='awrc'>432.31</td><td align="right" headers="perSecond Average" class='awrclb'>21,873.59</td><td align="right" headers="perSecond StdDev" class='awrc'>413.19</td><td align="right" headers="perSecond Min" class='awrc'>21,581.42</td><td align="right" headers="perSecond Max" class='awrcrb'>22,165.76</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>244</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.14</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>cursor reload failures</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.16</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>10,507,947</td><td align="right" class='awrc'>16,559.88</td><td align="right" class='awrc'>163.64</td><td align="right" headers="perSecond Average" class='awrclb'>8,279.94</td><td align="right" headers="perSecond StdDev" class='awrc'>213.30</td><td align="right" headers="perSecond Min" class='awrc'>8,129.12</td><td align="right" headers="perSecond Max" class='awrcrb'>8,430.76</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>5,765,046</td><td align="right" class='awrnc'>9,085.36</td><td align="right" class='awrnc'>89.78</td><td align="right" headers="perSecond Average" class='awrnclb'>4,542.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>185.60</td><td align="right" headers="perSecond Min" class='awrnc'>4,411.44</td><td align="right" headers="perSecond Max" class='awrncrb'>4,673.92</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>645</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.50</td><td align="right" headers="perSecond Max" class='awrcrb'>0.52</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>5,764,400</td><td align="right" class='awrnc'>9,084.35</td><td align="right" class='awrnc'>89.77</td><td align="right" headers="perSecond Average" class='awrnclb'>4,542.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>185.62</td><td align="right" headers="perSecond Min" class='awrnc'>4,410.92</td><td align="right" headers="perSecond Max" class='awrncrb'>4,673.42</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>487,522</td><td align="right" class='awrc'>768.31</td><td align="right" class='awrc'>7.59</td><td align="right" headers="perSecond Average" class='awrclb'>384.15</td><td align="right" headers="perSecond StdDev" class='awrc'>75.88</td><td align="right" headers="perSecond Min" class='awrc'>330.50</td><td align="right" headers="perSecond Max" class='awrcrb'>437.81</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>1,358,387</td><td align="right" class='awrnc'>2,140.73</td><td align="right" class='awrnc'>21.15</td><td align="right" headers="perSecond Average" class='awrnclb'>1,070.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>64.78</td><td align="right" headers="perSecond Min" class='awrnc'>1,024.56</td><td align="right" headers="perSecond Max" class='awrncrb'>1,116.17</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>4,804,054</td><td align="right" class='awrc'>7,570.89</td><td align="right" class='awrc'>74.82</td><td align="right" headers="perSecond Average" class='awrclb'>3,785.45</td><td align="right" headers="perSecond StdDev" class='awrc'>96.47</td><td align="right" headers="perSecond Min" class='awrc'>3,717.24</td><td align="right" headers="perSecond Max" class='awrcrb'>3,853.66</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>38,161</td><td align="right" class='awrnc'>60.14</td><td align="right" class='awrnc'>0.59</td><td align="right" headers="perSecond Average" class='awrnclb'>30.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>30.59</td><td align="right" headers="perSecond Min" class='awrnc'>8.44</td><td align="right" headers="perSecond Max" class='awrncrb'>51.70</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>267,158</td><td align="right" class='awrc'>421.03</td><td align="right" class='awrc'>4.16</td><td align="right" headers="perSecond Average" class='awrclb'>210.52</td><td align="right" headers="perSecond StdDev" class='awrc'>91.73</td><td align="right" headers="perSecond Min" class='awrc'>145.65</td><td align="right" headers="perSecond Max" class='awrcrb'>275.38</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>266,958</td><td align="right" class='awrnc'>420.72</td><td align="right" class='awrnc'>4.16</td><td align="right" headers="perSecond Average" class='awrnclb'>210.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>91.66</td><td align="right" headers="perSecond Min" class='awrnc'>145.54</td><td align="right" headers="perSecond Max" class='awrncrb'>275.17</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>9,732</td><td align="right" class='awrnc'>15.34</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>7.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.08</td><td align="right" headers="perSecond Min" class='awrnc'>5.49</td><td align="right" headers="perSecond Max" class='awrncrb'>9.85</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>444,375</td><td align="right" class='awrnc'>700.31</td><td align="right" class='awrnc'>6.92</td><td align="right" headers="perSecond Average" class='awrnclb'>350.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.25</td><td align="right" headers="perSecond Min" class='awrnc'>349.27</td><td align="right" headers="perSecond Max" class='awrncrb'>351.04</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>2,537,771,952</td><td align="right" class='awrc'>3,999,381.73</td><td align="right" class='awrc'>39,521.77</td><td align="right" headers="perSecond Average" class='awrclb'>1,999,690.86</td><td align="right" headers="perSecond StdDev" class='awrc'>176,265.72</td><td align="right" headers="perSecond Min" class='awrc'>1,875,052.18</td><td align="right" headers="perSecond Max" class='awrcrb'>2,124,329.55</td></tr>
<tr><td scope="row" class='awrnc'>file io wait time</td><td align="right" class='awrnc'>983,477,585,860</td><td align="right" class='awrnc'>1,549,849,731.49</td><td align="right" class='awrnc'>15,316,102.69</td><td align="right" headers="perSecond Average" class='awrnclb'>774,924,865.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>713,669,053.27</td><td align="right" headers="perSecond Min" class='awrnc'>270,284,638.65</td><td align="right" headers="perSecond Max" class='awrncrb'>1,279,565,092.84</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>34,003,088</td><td align="right" class='awrc'>53,586.78</td><td align="right" class='awrc'>529.54</td><td align="right" headers="perSecond Average" class='awrclb'>26,793.39</td><td align="right" headers="perSecond StdDev" class='awrc'>668.69</td><td align="right" headers="perSecond Min" class='awrc'>26,320.56</td><td align="right" headers="perSecond Max" class='awrcrb'>27,266.23</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>33,732,424</td><td align="right" class='awrnc'>53,160.24</td><td align="right" class='awrnc'>525.33</td><td align="right" headers="perSecond Average" class='awrnclb'>26,580.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>799.84</td><td align="right" headers="perSecond Min" class='awrnc'>26,014.55</td><td align="right" headers="perSecond Max" class='awrncrb'>27,145.69</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>11,242</td><td align="right" class='awrc'>17.72</td><td align="right" class='awrc'>0.18</td><td align="right" headers="perSecond Average" class='awrclb'>8.86</td><td align="right" headers="perSecond StdDev" class='awrc'>3.58</td><td align="right" headers="perSecond Min" class='awrc'>6.33</td><td align="right" headers="perSecond Max" class='awrcrb'>11.39</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>1,461</td><td align="right" class='awrnc'>2.30</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.41</td><td align="right" headers="perSecond Max" class='awrncrb'>1.89</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>203,563</td><td align="right" class='awrc'>320.80</td><td align="right" class='awrc'>3.17</td><td align="right" headers="perSecond Average" class='awrclb'>160.40</td><td align="right" headers="perSecond StdDev" class='awrc'>1.99</td><td align="right" headers="perSecond Min" class='awrc'>158.99</td><td align="right" headers="perSecond Max" class='awrcrb'>161.81</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>184</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>336</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.17</td><td align="right" headers="perSecond Max" class='awrcrb'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>12,534</td><td align="right" class='awrnc'>19.75</td><td align="right" class='awrnc'>0.20</td><td align="right" headers="perSecond Average" class='awrnclb'>9.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>11.02</td><td align="right" headers="perSecond Min" class='awrnc'>2.08</td><td align="right" headers="perSecond Max" class='awrncrb'>17.67</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>4,990</td><td align="right" class='awrc'>7.86</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>3.93</td><td align="right" headers="perSecond StdDev" class='awrc'>0.70</td><td align="right" headers="perSecond Min" class='awrc'>3.43</td><td align="right" headers="perSecond Max" class='awrcrb'>4.43</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.14</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>5,718</td><td align="right" class='awrc'>9.01</td><td align="right" class='awrc'>0.09</td><td align="right" headers="perSecond Average" class='awrclb'>4.51</td><td align="right" headers="perSecond StdDev" class='awrc'>2.23</td><td align="right" headers="perSecond Min" class='awrc'>2.93</td><td align="right" headers="perSecond Max" class='awrcrb'>6.08</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>6,263</td><td align="right" class='awrnc'>9.87</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>4.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.08</td><td align="right" headers="perSecond Min" class='awrnc'>3.47</td><td align="right" headers="perSecond Max" class='awrncrb'>6.40</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grant time</td><td align="right" class='awrc'>13,901,212</td><td align="right" class='awrc'>21,906.80</td><td align="right" class='awrc'>216.49</td><td align="right" headers="perSecond Average" class='awrclb'>10,953.40</td><td align="right" headers="perSecond StdDev" class='awrc'>9,274.71</td><td align="right" headers="perSecond Min" class='awrc'>4,395.19</td><td align="right" headers="perSecond Max" class='awrcrb'>17,511.61</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grants received</td><td align="right" class='awrnc'>5,477,140</td><td align="right" class='awrnc'>8,631.55</td><td align="right" class='awrnc'>85.30</td><td align="right" headers="perSecond Average" class='awrnclb'>4,315.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,092.92</td><td align="right" headers="perSecond Min" class='awrnc'>3,542.97</td><td align="right" headers="perSecond Max" class='awrncrb'>5,088.59</td></tr>
<tr><td scope="row" class='awrc'>gc current block flush time</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>9,724</td><td align="right" class='awrnc'>15.32</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>7.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.12</td><td align="right" headers="perSecond Min" class='awrnc'>1.21</td><td align="right" headers="perSecond Max" class='awrncrb'>14.11</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>7,286</td><td align="right" class='awrc'>11.48</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>5.74</td><td align="right" headers="perSecond StdDev" class='awrc'>2.93</td><td align="right" headers="perSecond Min" class='awrc'>3.67</td><td align="right" headers="perSecond Max" class='awrcrb'>7.81</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>7,429</td><td align="right" class='awrnc'>11.71</td><td align="right" class='awrnc'>0.12</td><td align="right" headers="perSecond Average" class='awrnclb'>5.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.00</td><td align="right" headers="perSecond Min" class='awrnc'>3.73</td><td align="right" headers="perSecond Max" class='awrncrb'>7.98</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>181</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>47,630</td><td align="right" class='awrc'>75.06</td><td align="right" class='awrc'>0.74</td><td align="right" headers="perSecond Average" class='awrclb'>37.53</td><td align="right" headers="perSecond StdDev" class='awrc'>19.00</td><td align="right" headers="perSecond Min" class='awrc'>24.09</td><td align="right" headers="perSecond Max" class='awrcrb'>50.97</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>61,906</td><td align="right" class='awrnc'>97.56</td><td align="right" class='awrnc'>0.96</td><td align="right" headers="perSecond Average" class='awrnclb'>48.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.62</td><td align="right" headers="perSecond Min" class='awrnc'>33.49</td><td align="right" headers="perSecond Max" class='awrncrb'>64.07</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>26,793,143</td><td align="right" class='awrc'>42,224.46</td><td align="right" class='awrc'>417.26</td><td align="right" headers="perSecond Average" class='awrclb'>21,112.23</td><td align="right" headers="perSecond StdDev" class='awrc'>2,042.52</td><td align="right" headers="perSecond Min" class='awrc'>19,667.95</td><td align="right" headers="perSecond Max" class='awrcrb'>22,556.50</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>6,981,567</td><td align="right" class='awrc'>11,002.43</td><td align="right" class='awrc'>108.73</td><td align="right" headers="perSecond Average" class='awrclb'>5,501.21</td><td align="right" headers="perSecond StdDev" class='awrc'>1,253.86</td><td align="right" headers="perSecond Min" class='awrc'>4,614.60</td><td align="right" headers="perSecond Max" class='awrcrb'>6,387.82</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>85,471</td><td align="right" class='awrnc'>134.70</td><td align="right" class='awrnc'>1.33</td><td align="right" headers="perSecond Average" class='awrnclb'>67.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>20.61</td><td align="right" headers="perSecond Min" class='awrnc'>52.77</td><td align="right" headers="perSecond Max" class='awrncrb'>81.92</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>86,283</td><td align="right" class='awrc'>135.98</td><td align="right" class='awrc'>1.34</td><td align="right" headers="perSecond Average" class='awrclb'>67.99</td><td align="right" headers="perSecond StdDev" class='awrc'>21.29</td><td align="right" headers="perSecond Min" class='awrc'>52.93</td><td align="right" headers="perSecond Max" class='awrcrb'>83.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock failures</td><td align="right" class='awrnc'>6,462</td><td align="right" class='awrnc'>10.18</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>5.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.81</td><td align="right" headers="perSecond Min" class='awrnc'>0.98</td><td align="right" headers="perSecond Max" class='awrncrb'>9.20</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock grants</td><td align="right" class='awrc'>25,452,075</td><td align="right" class='awrc'>40,111.01</td><td align="right" class='awrc'>396.38</td><td align="right" headers="perSecond Average" class='awrclb'>20,055.50</td><td align="right" headers="perSecond StdDev" class='awrc'>1,907.92</td><td align="right" headers="perSecond Min" class='awrc'>18,706.40</td><td align="right" headers="perSecond Max" class='awrcrb'>21,404.61</td></tr>
<tr><td scope="row" class='awrnc'>gcs anti-locks created</td><td align="right" class='awrnc'>203,534</td><td align="right" class='awrnc'>320.76</td><td align="right" class='awrnc'>3.17</td><td align="right" headers="perSecond Average" class='awrnclb'>160.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.90</td><td align="right" headers="perSecond Min" class='awrnc'>159.03</td><td align="right" headers="perSecond Max" class='awrncrb'>161.72</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>33,519,341</td><td align="right" class='awrc'>52,824.44</td><td align="right" class='awrc'>522.01</td><td align="right" headers="perSecond Average" class='awrclb'>26,412.22</td><td align="right" headers="perSecond StdDev" class='awrc'>809.71</td><td align="right" headers="perSecond Min" class='awrc'>25,839.67</td><td align="right" headers="perSecond Max" class='awrcrb'>26,984.77</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>22,544,332</td><td align="right" class='awrnc'>35,528.37</td><td align="right" class='awrnc'>351.09</td><td align="right" headers="perSecond Average" class='awrnclb'>17,764.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,285.30</td><td align="right" headers="perSecond Min" class='awrnc'>16,855.34</td><td align="right" headers="perSecond Max" class='awrncrb'>18,673.03</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>202,367</td><td align="right" class='awrc'>318.92</td><td align="right" class='awrc'>3.15</td><td align="right" headers="perSecond Average" class='awrclb'>159.46</td><td align="right" headers="perSecond StdDev" class='awrc'>25.80</td><td align="right" headers="perSecond Min" class='awrc'>141.22</td><td align="right" headers="perSecond Max" class='awrcrb'>177.70</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>1,148,600</td><td align="right" class='awrnc'>1,810.13</td><td align="right" class='awrnc'>17.89</td><td align="right" headers="perSecond Average" class='awrnclb'>905.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>142.60</td><td align="right" headers="perSecond Min" class='awrnc'>804.23</td><td align="right" headers="perSecond Max" class='awrncrb'>1,005.90</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>66,553</td><td align="right" class='awrnc'>104.88</td><td align="right" class='awrnc'>1.04</td><td align="right" headers="perSecond Average" class='awrnclb'>52.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>39.42</td><td align="right" headers="perSecond Min" class='awrnc'>24.57</td><td align="right" headers="perSecond Max" class='awrncrb'>80.31</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>84,035</td><td align="right" class='awrc'>132.44</td><td align="right" class='awrc'>1.31</td><td align="right" headers="perSecond Average" class='awrclb'>66.22</td><td align="right" headers="perSecond StdDev" class='awrc'>52.28</td><td align="right" headers="perSecond Min" class='awrc'>29.25</td><td align="right" headers="perSecond Max" class='awrcrb'>103.19</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets sync</td><td align="right" class='awrnc'>407,471</td><td align="right" class='awrnc'>642.16</td><td align="right" class='awrnc'>6.35</td><td align="right" headers="perSecond Average" class='awrnclb'>321.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>222.12</td><td align="right" headers="perSecond Min" class='awrnc'>164.02</td><td align="right" headers="perSecond Max" class='awrncrb'>478.15</td></tr>
<tr><td scope="row" class='awrc'>global enqueue releases</td><td align="right" class='awrc'>371,978</td><td align="right" class='awrc'>586.23</td><td align="right" class='awrc'>5.79</td><td align="right" headers="perSecond Average" class='awrclb'>293.11</td><td align="right" headers="perSecond StdDev" class='awrc'>191.66</td><td align="right" headers="perSecond Min" class='awrc'>157.59</td><td align="right" headers="perSecond Max" class='awrcrb'>428.64</td></tr>
<tr><td scope="row" class='awrnc'>heap block compress</td><td align="right" class='awrnc'>21,163</td><td align="right" class='awrnc'>33.35</td><td align="right" class='awrnc'>0.33</td><td align="right" headers="perSecond Average" class='awrnclb'>16.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.81</td><td align="right" headers="perSecond Min" class='awrnc'>15.39</td><td align="right" headers="perSecond Max" class='awrncrb'>17.96</td></tr>
<tr><td scope="row" class='awrc'>hot buffers moved to head of LRU</td><td align="right" class='awrc'>357,440</td><td align="right" class='awrc'>563.30</td><td align="right" class='awrc'>5.57</td><td align="right" headers="perSecond Average" class='awrclb'>281.65</td><td align="right" headers="perSecond StdDev" class='awrc'>88.70</td><td align="right" headers="perSecond Min" class='awrc'>218.93</td><td align="right" headers="perSecond Max" class='awrcrb'>344.37</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CR) block cleanout applications</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrc'>635</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.50</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.39</td><td align="right" headers="perSecond Max" class='awrcrb'>0.61</td></tr>
<tr><td scope="row" class='awrnc'>in call idle wait time</td><td align="right" class='awrnc'>16,998,421</td><td align="right" class='awrnc'>26,788.44</td><td align="right" class='awrnc'>264.72</td><td align="right" headers="perSecond Average" class='awrnclb'>13,394.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>29.14</td><td align="right" headers="perSecond Min" class='awrnc'>13,373.62</td><td align="right" headers="perSecond Max" class='awrncrb'>13,414.83</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>3,778,973</td><td align="right" class='awrc'>5,955.13</td><td align="right" class='awrc'>58.85</td><td align="right" headers="perSecond Average" class='awrclb'>2,977.57</td><td align="right" headers="perSecond StdDev" class='awrc'>4,200.98</td><td align="right" headers="perSecond Min" class='awrc'>7.03</td><td align="right" headers="perSecond Max" class='awrcrb'>5,948.11</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>4,200,827</td><td align="right" class='awrnc'>6,619.95</td><td align="right" class='awrnc'>65.42</td><td align="right" headers="perSecond Average" class='awrnclb'>3,309.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,196.50</td><td align="right" headers="perSecond Min" class='awrnc'>342.60</td><td align="right" headers="perSecond Max" class='awrncrb'>6,277.35</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>206</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>0.17</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>1,086</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.86</td><td align="right" headers="perSecond StdDev" class='awrc'>0.47</td><td align="right" headers="perSecond Min" class='awrc'>0.52</td><td align="right" headers="perSecond Max" class='awrcrb'>1.19</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>7,228</td><td align="right" class='awrnc'>11.39</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>5.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.89</td><td align="right" headers="perSecond Min" class='awrnc'>5.07</td><td align="right" headers="perSecond Max" class='awrncrb'>6.32</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>7,228</td><td align="right" class='awrc'>11.39</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>5.70</td><td align="right" headers="perSecond StdDev" class='awrc'>0.89</td><td align="right" headers="perSecond Min" class='awrc'>5.07</td><td align="right" headers="perSecond Max" class='awrcrb'>6.32</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>325,310,414,848</td><td align="right" class='awrnc'>512,666,772.07</td><td align="right" class='awrnc'>5,066,193.47</td><td align="right" headers="perSecond Average" class='awrnclb'>256,333,386.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>29,728,078.20</td><td align="right" headers="perSecond Min" class='awrnc'>235,312,460.35</td><td align="right" headers="perSecond Max" class='awrncrb'>277,354,311.72</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>3,910</td><td align="right" class='awrnc'>6.16</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>3.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.63</td><td align="right" headers="perSecond Min" class='awrnc'>0.51</td><td align="right" headers="perSecond Max" class='awrncrb'>5.65</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>472,388</td><td align="right" class='awrc'>744.46</td><td align="right" class='awrc'>7.36</td><td align="right" headers="perSecond Average" class='awrclb'>372.23</td><td align="right" headers="perSecond StdDev" class='awrc'>38.80</td><td align="right" headers="perSecond Min" class='awrc'>344.79</td><td align="right" headers="perSecond Max" class='awrcrb'>399.67</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>472,388</td><td align="right" class='awrnc'>744.46</td><td align="right" class='awrnc'>7.36</td><td align="right" headers="perSecond Average" class='awrnclb'>372.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>38.80</td><td align="right" headers="perSecond Min" class='awrnc'>344.79</td><td align="right" headers="perSecond Max" class='awrncrb'>399.67</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>29,172,542</td><td align="right" class='awrc'>45,974.13</td><td align="right" class='awrc'>454.32</td><td align="right" headers="perSecond Average" class='awrclb'>22,987.07</td><td align="right" headers="perSecond StdDev" class='awrc'>477.49</td><td align="right" headers="perSecond Min" class='awrc'>22,649.43</td><td align="right" headers="perSecond Max" class='awrcrb'>23,324.70</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>10,961,884</td><td align="right" class='awrnc'>17,275.23</td><td align="right" class='awrnc'>170.71</td><td align="right" headers="perSecond Average" class='awrnclb'>8,637.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>123.10</td><td align="right" headers="perSecond Min" class='awrnc'>8,550.57</td><td align="right" headers="perSecond Max" class='awrncrb'>8,724.66</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait time</td><td align="right" class='awrc'>7,471,886</td><td align="right" class='awrc'>11,775.24</td><td align="right" class='awrc'>116.36</td><td align="right" headers="perSecond Average" class='awrclb'>5,887.62</td><td align="right" headers="perSecond StdDev" class='awrc'>239.39</td><td align="right" headers="perSecond Min" class='awrc'>5,718.34</td><td align="right" headers="perSecond Max" class='awrcrb'>6,056.90</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>508,464</td><td align="right" class='awrnc'>801.31</td><td align="right" class='awrnc'>7.92</td><td align="right" headers="perSecond Average" class='awrnclb'>400.65</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.78</td><td align="right" headers="perSecond Min" class='awrnc'>398.68</td><td align="right" headers="perSecond Max" class='awrncrb'>402.62</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>698</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.70</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>1.04</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>9,120</td><td align="right" class='awrc'>14.37</td><td align="right" class='awrc'>0.14</td><td align="right" headers="perSecond Average" class='awrclb'>7.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>7.09</td><td align="right" headers="perSecond Max" class='awrcrb'>7.28</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>222</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.17</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.29</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>1,603</td><td align="right" class='awrc'>2.53</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.26</td><td align="right" headers="perSecond StdDev" class='awrc'>1.62</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>2.41</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>33,491,965</td><td align="right" class='awrnc'>52,781.29</td><td align="right" class='awrnc'>521.58</td><td align="right" headers="perSecond Average" class='awrnclb'>26,390.65</td><td align="right" headers="perSecond StdDev" class='awrnc'>798.07</td><td align="right" headers="perSecond Min" class='awrnc'>25,826.33</td><td align="right" headers="perSecond Max" class='awrncrb'>26,954.97</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>274,381,725,696</td><td align="right" class='awrc'>432,408,855.26</td><td align="right" class='awrc'>4,273,059.95</td><td align="right" headers="perSecond Average" class='awrclb'>216,204,427.63</td><td align="right" headers="perSecond StdDev" class='awrc'>6,536,089.67</td><td align="right" headers="perSecond Min" class='awrc'>211,582,714.30</td><td align="right" headers="perSecond Max" class='awrcrb'>220,826,140.96</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>33,503,215</td><td align="right" class='awrnc'>52,799.02</td><td align="right" class='awrnc'>521.76</td><td align="right" headers="perSecond Average" class='awrnclb'>26,399.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>798.86</td><td align="right" headers="perSecond Min" class='awrnc'>25,834.63</td><td align="right" headers="perSecond Max" class='awrncrb'>26,964.39</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>277,610,123,264</td><td align="right" class='awrc'>437,496,607.46</td><td align="right" class='awrc'>4,323,337.12</td><td align="right" headers="perSecond Average" class='awrclb'>218,748,303.73</td><td align="right" headers="perSecond StdDev" class='awrc'>6,535,531.70</td><td align="right" headers="perSecond Min" class='awrc'>214,126,984.94</td><td align="right" headers="perSecond Max" class='awrcrb'>223,369,622.51</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>2,964</td><td align="right" class='awrnc'>4.67</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>2.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>2.32</td><td align="right" headers="perSecond Max" class='awrncrb'>2.35</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>33,493,864</td><td align="right" class='awrc'>52,784.29</td><td align="right" class='awrc'>521.61</td><td align="right" headers="perSecond Average" class='awrclb'>26,392.14</td><td align="right" headers="perSecond StdDev" class='awrc'>797.86</td><td align="right" headers="perSecond Min" class='awrc'>25,827.97</td><td align="right" headers="perSecond Max" class='awrcrb'>26,956.32</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>33,493,864</td><td align="right" class='awrnc'>52,784.29</td><td align="right" class='awrnc'>521.61</td><td align="right" headers="perSecond Average" class='awrnclb'>26,392.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>797.86</td><td align="right" headers="perSecond Min" class='awrnc'>25,827.97</td><td align="right" headers="perSecond Max" class='awrncrb'>26,956.32</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>27,065,599</td><td align="right" class='awrc'>42,653.73</td><td align="right" class='awrc'>421.50</td><td align="right" headers="perSecond Average" class='awrclb'>21,326.87</td><td align="right" headers="perSecond StdDev" class='awrc'>633.32</td><td align="right" headers="perSecond Min" class='awrc'>20,879.04</td><td align="right" headers="perSecond Max" class='awrcrb'>21,774.69</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>5,050,466</td><td align="right" class='awrnc'>7,959.22</td><td align="right" class='awrnc'>78.65</td><td align="right" headers="perSecond Average" class='awrnclb'>3,979.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>101.78</td><td align="right" headers="perSecond Min" class='awrnc'>3,907.64</td><td align="right" headers="perSecond Max" class='awrncrb'>4,051.58</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>43,234,582,528</td><td align="right" class='awrc'>68,135,049.46</td><td align="right" class='awrc'>673,310.01</td><td align="right" headers="perSecond Average" class='awrclb'>34,067,524.73</td><td align="right" headers="perSecond StdDev" class='awrc'>824,813.33</td><td align="right" headers="perSecond Min" class='awrc'>33,484,293.63</td><td align="right" headers="perSecond Max" class='awrcrb'>34,650,755.83</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>5,152,629</td><td align="right" class='awrnc'>8,120.23</td><td align="right" class='awrnc'>80.24</td><td align="right" headers="perSecond Average" class='awrnclb'>4,060.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>105.09</td><td align="right" headers="perSecond Min" class='awrnc'>3,985.81</td><td align="right" headers="perSecond Max" class='awrncrb'>4,134.42</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>47,808,261,120</td><td align="right" class='awrc'>75,342,902.46</td><td align="right" class='awrc'>744,537.80</td><td align="right" headers="perSecond Average" class='awrclb'>37,671,451.23</td><td align="right" headers="perSecond StdDev" class='awrc'>1,145,823.40</td><td align="right" headers="perSecond Min" class='awrc'>36,861,231.73</td><td align="right" headers="perSecond Max" class='awrcrb'>38,481,670.73</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>15,320</td><td align="right" class='awrnc'>24.14</td><td align="right" class='awrnc'>0.24</td><td align="right" headers="perSecond Average" class='awrnclb'>12.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>12.01</td><td align="right" headers="perSecond Max" class='awrncrb'>12.13</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>5,277,659</td><td align="right" class='awrc'>8,317.27</td><td align="right" class='awrc'>82.19</td><td align="right" headers="perSecond Average" class='awrclb'>4,158.63</td><td align="right" headers="perSecond StdDev" class='awrc'>100.69</td><td align="right" headers="perSecond Min" class='awrc'>4,087.44</td><td align="right" headers="perSecond Max" class='awrcrb'>4,229.83</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>917</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.72</td><td align="right" headers="perSecond Max" class='awrncrb'>0.73</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>273</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>220</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>5,276,742</td><td align="right" class='awrc'>8,315.82</td><td align="right" class='awrc'>82.18</td><td align="right" headers="perSecond Average" class='awrclb'>4,157.91</td><td align="right" headers="perSecond StdDev" class='awrc'>100.68</td><td align="right" headers="perSecond Min" class='awrc'>4,086.72</td><td align="right" headers="perSecond Max" class='awrcrb'>4,229.10</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>5,270,065</td><td align="right" class='awrnc'>8,305.30</td><td align="right" class='awrnc'>82.07</td><td align="right" headers="perSecond Average" class='awrnclb'>4,152.65</td><td align="right" headers="perSecond StdDev" class='awrnc'>100.05</td><td align="right" headers="perSecond Min" class='awrnc'>4,081.91</td><td align="right" headers="perSecond Max" class='awrncrb'>4,223.39</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>2,860</td><td align="right" class='awrc'>4.51</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>2.25</td><td align="right" headers="perSecond StdDev" class='awrc'>0.32</td><td align="right" headers="perSecond Min" class='awrc'>2.02</td><td align="right" headers="perSecond Max" class='awrcrb'>2.48</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>1,295</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.99</td><td align="right" headers="perSecond Max" class='awrncrb'>1.05</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>638,773</td><td align="right" class='awrc'>1,006.67</td><td align="right" class='awrc'>9.95</td><td align="right" headers="perSecond Average" class='awrclb'>503.33</td><td align="right" headers="perSecond StdDev" class='awrc'>14.43</td><td align="right" headers="perSecond Min" class='awrc'>493.13</td><td align="right" headers="perSecond Max" class='awrcrb'>513.54</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>570,096</td><td align="right" class='awrnc'>898.44</td><td align="right" class='awrnc'>8.88</td><td align="right" headers="perSecond Average" class='awrnclb'>449.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>131.96</td><td align="right" headers="perSecond Min" class='awrnc'>355.91</td><td align="right" headers="perSecond Max" class='awrncrb'>542.53</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>1,740,800</td><td align="right" class='awrc'>2,743.39</td><td align="right" class='awrc'>27.11</td><td align="right" headers="perSecond Average" class='awrclb'>1,371.70</td><td align="right" headers="perSecond StdDev" class='awrc'>13.79</td><td align="right" headers="perSecond Min" class='awrc'>1,361.95</td><td align="right" headers="perSecond Max" class='awrcrb'>1,381.45</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>3,113,656</td><td align="right" class='awrnc'>4,906.93</td><td align="right" class='awrnc'>48.49</td><td align="right" headers="perSecond Average" class='awrnclb'>2,453.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>37.98</td><td align="right" headers="perSecond Min" class='awrnc'>2,426.61</td><td align="right" headers="perSecond Max" class='awrncrb'>2,480.32</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>8,470,526</td><td align="right" class='awrc'>13,349.03</td><td align="right" class='awrc'>131.92</td><td align="right" headers="perSecond Average" class='awrclb'>6,674.51</td><td align="right" headers="perSecond StdDev" class='awrc'>160.46</td><td align="right" headers="perSecond Min" class='awrc'>6,561.06</td><td align="right" headers="perSecond Max" class='awrcrb'>6,787.97</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>5,756,253</td><td align="right" class='awrnc'>9,071.49</td><td align="right" class='awrnc'>89.64</td><td align="right" headers="perSecond Average" class='awrnclb'>4,535.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>24.90</td><td align="right" headers="perSecond Min" class='awrnc'>4,518.14</td><td align="right" headers="perSecond Max" class='awrncrb'>4,553.36</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>2,714,273</td><td align="right" class='awrc'>4,277.54</td><td align="right" class='awrc'>42.27</td><td align="right" headers="perSecond Average" class='awrclb'>2,138.77</td><td align="right" headers="perSecond StdDev" class='awrc'>185.36</td><td align="right" headers="perSecond Min" class='awrc'>2,007.70</td><td align="right" headers="perSecond Max" class='awrcrb'>2,269.84</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>5,549,214</td><td align="right" class='awrnc'>8,745.22</td><td align="right" class='awrnc'>86.42</td><td align="right" headers="perSecond Average" class='awrnclb'>4,372.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>137.73</td><td align="right" headers="perSecond Min" class='awrnc'>4,275.22</td><td align="right" headers="perSecond Max" class='awrncrb'>4,470.00</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>4,173,763,088</td><td align="right" class='awrc'>6,577,594.46</td><td align="right" class='awrc'>64,999.74</td><td align="right" headers="perSecond Average" class='awrclb'>3,288,797.23</td><td align="right" headers="perSecond StdDev" class='awrc'>78,254.13</td><td align="right" headers="perSecond Min" class='awrc'>3,233,463.20</td><td align="right" headers="perSecond Max" class='awrcrb'>3,344,131.26</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>1,680</td><td align="right" class='awrnc'>2.65</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>1.23</td><td align="right" headers="perSecond Max" class='awrncrb'>1.42</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>388</td><td align="right" class='awrc'>0.61</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.31</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.27</td><td align="right" headers="perSecond Max" class='awrcrb'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>217</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>2,143,331</td><td align="right" class='awrc'>3,377.77</td><td align="right" class='awrc'>33.38</td><td align="right" headers="perSecond Average" class='awrclb'>1,688.88</td><td align="right" headers="perSecond StdDev" class='awrc'>179.16</td><td align="right" headers="perSecond Min" class='awrc'>1,562.20</td><td align="right" headers="perSecond Max" class='awrcrb'>1,815.57</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>9,110</td><td align="right" class='awrnc'>14.36</td><td align="right" class='awrnc'>0.14</td><td align="right" headers="perSecond Average" class='awrnclb'>7.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.78</td><td align="right" headers="perSecond Min" class='awrnc'>4.50</td><td align="right" headers="perSecond Max" class='awrncrb'>9.85</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>90</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>24,351,588</td><td align="right" class='awrc'>38,376.62</td><td align="right" class='awrc'>379.24</td><td align="right" headers="perSecond Average" class='awrclb'>19,188.31</td><td align="right" headers="perSecond StdDev" class='awrc'>623.25</td><td align="right" headers="perSecond Min" class='awrc'>18,747.61</td><td align="right" headers="perSecond Max" class='awrcrb'>19,629.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>99,632</td><td align="right" class='awrnc'>157.01</td><td align="right" class='awrnc'>1.55</td><td align="right" headers="perSecond Average" class='awrnclb'>78.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.56</td><td align="right" headers="perSecond Min" class='awrnc'>76.69</td><td align="right" headers="perSecond Max" class='awrncrb'>80.32</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>68,262</td><td align="right" class='awrnc'>107.58</td><td align="right" class='awrnc'>1.06</td><td align="right" headers="perSecond Average" class='awrnclb'>53.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>60.38</td><td align="right" headers="perSecond Min" class='awrnc'>11.09</td><td align="right" headers="perSecond Max" class='awrncrb'>96.49</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>1,396,721,652</td><td align="right" class='awrc'>2,201,150.25</td><td align="right" class='awrc'>21,751.72</td><td align="right" headers="perSecond Average" class='awrclb'>1,100,575.13</td><td align="right" headers="perSecond StdDev" class='awrc'>64,586.71</td><td align="right" headers="perSecond Min" class='awrc'>1,054,905.42</td><td align="right" headers="perSecond Max" class='awrcrb'>1,146,244.83</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>96,566,075</td><td align="right" class='awrnc'>152,182.15</td><td align="right" class='awrnc'>1,503.86</td><td align="right" headers="perSecond Average" class='awrnclb'>76,091.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,022.56</td><td align="right" headers="perSecond Min" class='awrnc'>75,368.02</td><td align="right" headers="perSecond Max" class='awrncrb'>76,814.13</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>90</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>97,499,564</td><td align="right" class='awrnc'>153,653.29</td><td align="right" class='awrnc'>1,518.40</td><td align="right" headers="perSecond Average" class='awrnclb'>76,826.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,232.69</td><td align="right" headers="perSecond Min" class='awrnc'>75,955.00</td><td align="right" headers="perSecond Max" class='awrncrb'>77,698.29</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>1,563</td><td align="right" class='awrc'>2.46</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.23</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>1.13</td><td align="right" headers="perSecond Max" class='awrcrb'>1.34</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>1,903</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>1.49</td><td align="right" headers="perSecond Max" class='awrncrb'>1.51</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>4,463</td><td align="right" class='awrc'>7.03</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>3.52</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>3.44</td><td align="right" headers="perSecond Max" class='awrcrb'>3.60</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>8,773</td><td align="right" class='awrnc'>13.83</td><td align="right" class='awrnc'>0.14</td><td align="right" headers="perSecond Average" class='awrnclb'>6.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.28</td><td align="right" headers="perSecond Min" class='awrnc'>6.72</td><td align="right" headers="perSecond Max" class='awrncrb'>7.11</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>27,663</td><td align="right" class='awrc'>43.60</td><td align="right" class='awrc'>0.43</td><td align="right" headers="perSecond Average" class='awrclb'>21.80</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>21.72</td><td align="right" headers="perSecond Max" class='awrcrb'>21.87</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>6,988</td><td align="right" class='awrnc'>11.01</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>5.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.57</td><td align="right" headers="perSecond Min" class='awrnc'>5.10</td><td align="right" headers="perSecond Max" class='awrncrb'>5.91</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>886</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.70</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.69</td><td align="right" headers="perSecond Max" class='awrcrb'>0.70</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>424</td><td align="right" class='awrnc'>0.67</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.30</td><td align="right" headers="perSecond Max" class='awrncrb'>0.37</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>169</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>139,937</td><td align="right" class='awrnc'>220.53</td><td align="right" class='awrnc'>2.18</td><td align="right" headers="perSecond Average" class='awrnclb'>110.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.51</td><td align="right" headers="perSecond Min" class='awrnc'>105.67</td><td align="right" headers="perSecond Max" class='awrncrb'>114.87</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>1,399,359,840</td><td align="right" class='awrc'>2,205,307.90</td><td align="right" class='awrc'>21,792.81</td><td align="right" headers="perSecond Average" class='awrclb'>1,102,653.95</td><td align="right" headers="perSecond StdDev" class='awrc'>65,063.91</td><td align="right" headers="perSecond Min" class='awrc'>1,056,646.82</td><td align="right" headers="perSecond Max" class='awrcrb'>1,148,661.09</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>1,506,275,876</td><td align="right" class='awrnc'>2,373,800.95</td><td align="right" class='awrnc'>23,457.86</td><td align="right" headers="perSecond Average" class='awrnclb'>1,186,900.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>66,157.86</td><td align="right" headers="perSecond Min" class='awrnc'>1,140,119.80</td><td align="right" headers="perSecond Max" class='awrncrb'>1,233,681.15</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>91,077,389</td><td align="right" class='awrc'>143,532.25</td><td align="right" class='awrc'>1,418.39</td><td align="right" headers="perSecond Average" class='awrclb'>71,766.13</td><td align="right" headers="perSecond StdDev" class='awrc'>74.45</td><td align="right" headers="perSecond Min" class='awrc'>71,713.49</td><td align="right" headers="perSecond Max" class='awrcrb'>71,818.77</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>52,829</td><td align="right" class='awrnc'>83.26</td><td align="right" class='awrnc'>0.82</td><td align="right" headers="perSecond Average" class='awrnclb'>41.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.45</td><td align="right" headers="perSecond Min" class='awrnc'>41.31</td><td align="right" headers="perSecond Max" class='awrncrb'>41.95</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>52,829</td><td align="right" class='awrc'>83.26</td><td align="right" class='awrc'>0.82</td><td align="right" headers="perSecond Average" class='awrclb'>41.63</td><td align="right" headers="perSecond StdDev" class='awrc'>0.45</td><td align="right" headers="perSecond Min" class='awrc'>41.31</td><td align="right" headers="perSecond Max" class='awrcrb'>41.95</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>30,173</td><td align="right" class='awrnc'>47.55</td><td align="right" class='awrnc'>0.47</td><td align="right" headers="perSecond Average" class='awrnclb'>23.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.55</td><td align="right" headers="perSecond Min" class='awrnc'>23.38</td><td align="right" headers="perSecond Max" class='awrncrb'>24.17</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>22,656</td><td align="right" class='awrc'>35.70</td><td align="right" class='awrc'>0.35</td><td align="right" headers="perSecond Average" class='awrclb'>17.85</td><td align="right" headers="perSecond StdDev" class='awrc'>1.00</td><td align="right" headers="perSecond Min" class='awrc'>17.14</td><td align="right" headers="perSecond Max" class='awrcrb'>18.56</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>52,829</td><td align="right" class='awrnc'>83.26</td><td align="right" class='awrnc'>0.82</td><td align="right" headers="perSecond Average" class='awrnclb'>41.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.45</td><td align="right" headers="perSecond Min" class='awrnc'>41.31</td><td align="right" headers="perSecond Max" class='awrncrb'>41.95</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>52,829</td><td align="right" class='awrc'>83.26</td><td align="right" class='awrc'>0.82</td><td align="right" headers="perSecond Average" class='awrclb'>41.63</td><td align="right" headers="perSecond StdDev" class='awrc'>0.45</td><td align="right" headers="perSecond Min" class='awrc'>41.31</td><td align="right" headers="perSecond Max" class='awrcrb'>41.95</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>3,771,438</td><td align="right" class='awrnc'>5,943.26</td><td align="right" class='awrnc'>58.73</td><td align="right" headers="perSecond Average" class='awrnclb'>2,971.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,199.58</td><td align="right" headers="perSecond Min" class='awrnc'>2.08</td><td align="right" headers="perSecond Max" class='awrncrb'>5,941.18</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>2,228,224</td><td align="right" class='awrc'>3,511.55</td><td align="right" class='awrc'>34.70</td><td align="right" headers="perSecond Average" class='awrclb'>1,755.78</td><td align="right" headers="perSecond StdDev" class='awrc'>182.70</td><td align="right" headers="perSecond Min" class='awrc'>1,626.59</td><td align="right" headers="perSecond Max" class='awrcrb'>1,884.96</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>1,882,905</td><td align="right" class='awrc'>2,967.35</td><td align="right" class='awrc'>29.32</td><td align="right" headers="perSecond Average" class='awrclb'>1,483.68</td><td align="right" headers="perSecond StdDev" class='awrc'>147.98</td><td align="right" headers="perSecond Min" class='awrc'>1,379.04</td><td align="right" headers="perSecond Max" class='awrcrb'>1,588.32</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>2,228,224</td><td align="right" class='awrnc'>3,511.55</td><td align="right" class='awrnc'>34.70</td><td align="right" headers="perSecond Average" class='awrnclb'>1,755.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>182.70</td><td align="right" headers="perSecond Min" class='awrnc'>1,626.59</td><td align="right" headers="perSecond Max" class='awrncrb'>1,884.96</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ops</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc tasks</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>9,203</td><td align="right" class='awrc'>14.50</td><td align="right" class='awrc'>0.14</td><td align="right" headers="perSecond Average" class='awrclb'>7.25</td><td align="right" headers="perSecond StdDev" class='awrc'>7.30</td><td align="right" headers="perSecond Min" class='awrc'>2.09</td><td align="right" headers="perSecond Max" class='awrcrb'>12.41</td></tr>
<tr><td scope="row" class='awrnc'>session connect time</td><td align="right" class='awrnc'>673</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1.06</td><td align="right" headers="perSecond Max" class='awrncrb'>1.06</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache hits</td><td align="right" class='awrc'>505,265</td><td align="right" class='awrc'>796.27</td><td align="right" class='awrc'>7.87</td><td align="right" headers="perSecond Average" class='awrclb'>398.13</td><td align="right" headers="perSecond StdDev" class='awrc'>3.80</td><td align="right" headers="perSecond Min" class='awrc'>395.44</td><td align="right" headers="perSecond Max" class='awrcrb'>400.82</td></tr>
<tr><td scope="row" class='awrnc'>session logical reads</td><td align="right" class='awrnc'>39,711,487</td><td align="right" class='awrnc'>62,582.56</td><td align="right" class='awrnc'>618.44</td><td align="right" headers="perSecond Average" class='awrnclb'>31,291.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,628.84</td><td align="right" headers="perSecond Min" class='awrnc'>28,725.31</td><td align="right" headers="perSecond Max" class='awrncrb'>33,857.26</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - no wait</td><td align="right" class='awrc'>10,095,421</td><td align="right" class='awrc'>15,909.77</td><td align="right" class='awrc'>157.22</td><td align="right" headers="perSecond Average" class='awrclb'>7,954.89</td><td align="right" headers="perSecond StdDev" class='awrc'>281.15</td><td align="right" headers="perSecond Min" class='awrc'>7,756.09</td><td align="right" headers="perSecond Max" class='awrcrb'>8,153.69</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - wait</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>2,578</td><td align="right" class='awrnc'>4.06</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>2.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.96</td><td align="right" headers="perSecond Min" class='awrnc'>0.65</td><td align="right" headers="perSecond Max" class='awrncrb'>3.41</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>157,146</td><td align="right" class='awrc'>247.65</td><td align="right" class='awrc'>2.45</td><td align="right" headers="perSecond Average" class='awrclb'>123.83</td><td align="right" headers="perSecond StdDev" class='awrc'>18.50</td><td align="right" headers="perSecond Min" class='awrc'>110.75</td><td align="right" headers="perSecond Max" class='awrcrb'>136.90</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>224</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.20</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>34,791,814</td><td align="right" class='awrnc'>54,829.50</td><td align="right" class='awrnc'>541.83</td><td align="right" headers="perSecond Average" class='awrnclb'>27,414.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,232.60</td><td align="right" headers="perSecond Min" class='awrnc'>25,128.95</td><td align="right" headers="perSecond Max" class='awrncrb'>29,700.54</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>487</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>0.28</td><td align="right" headers="perSecond Max" class='awrcrb'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>497</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>0.50</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>59,815,135</td><td align="right" class='awrc'>94,264.70</td><td align="right" class='awrc'>931.53</td><td align="right" headers="perSecond Average" class='awrclb'>47,132.35</td><td align="right" headers="perSecond StdDev" class='awrc'>2,993.31</td><td align="right" headers="perSecond Min" class='awrc'>45,015.76</td><td align="right" headers="perSecond Max" class='awrcrb'>49,248.94</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>341</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.38</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.54</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>10,373</td><td align="right" class='awrc'>16.35</td><td align="right" class='awrc'>0.16</td><td align="right" headers="perSecond Average" class='awrclb'>8.17</td><td align="right" headers="perSecond StdDev" class='awrc'>2.61</td><td align="right" headers="perSecond Min" class='awrc'>6.33</td><td align="right" headers="perSecond Max" class='awrcrb'>10.02</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>651,207</td><td align="right" class='awrnc'>1,026.25</td><td align="right" class='awrnc'>10.14</td><td align="right" headers="perSecond Average" class='awrnclb'>513.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>146.97</td><td align="right" headers="perSecond Min" class='awrnc'>409.20</td><td align="right" headers="perSecond Max" class='awrncrb'>617.05</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>651,207</td><td align="right" class='awrc'>1,026.25</td><td align="right" class='awrc'>10.14</td><td align="right" headers="perSecond Average" class='awrclb'>513.13</td><td align="right" headers="perSecond StdDev" class='awrc'>146.97</td><td align="right" headers="perSecond Min" class='awrc'>409.20</td><td align="right" headers="perSecond Max" class='awrcrb'>617.05</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>2,161</td><td align="right" class='awrnc'>3.41</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>1.49</td><td align="right" headers="perSecond Max" class='awrncrb'>1.91</td></tr>
<tr><td scope="row" class='awrc'>temp space allocated (bytes)</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>1,652.57</td><td align="right" class='awrc'>16.33</td><td align="right" headers="perSecond Average" class='awrclb'>1,652.57</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1,652.57</td><td align="right" headers="perSecond Max" class='awrcrb'>1,652.57</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>27,524</td><td align="right" class='awrnc'>43.38</td><td align="right" class='awrnc'>0.43</td><td align="right" headers="perSecond Average" class='awrnclb'>21.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.57</td><td align="right" headers="perSecond Min" class='awrnc'>18.45</td><td align="right" headers="perSecond Max" class='awrncrb'>24.92</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>701</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>0.48</td><td align="right" headers="perSecond Max" class='awrcrb'>0.63</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>3,299</td><td align="right" class='awrnc'>5.20</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>2.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.48</td><td align="right" headers="perSecond Min" class='awrnc'>2.26</td><td align="right" headers="perSecond Max" class='awrncrb'>2.94</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>1,731,282,252</td><td align="right" class='awrc'>2,728,394.66</td><td align="right" class='awrc'>26,961.97</td><td align="right" headers="perSecond Average" class='awrclb'>1,364,197.33</td><td align="right" headers="perSecond StdDev" class='awrc'>33,791.90</td><td align="right" headers="perSecond Min" class='awrc'>1,340,302.85</td><td align="right" headers="perSecond Max" class='awrcrb'>1,388,091.81</td></tr>
<tr><td scope="row" class='awrnc'>user I/O wait time</td><td align="right" class='awrnc'>4,881,936</td><td align="right" class='awrnc'>7,693.71</td><td align="right" class='awrnc'>76.03</td><td align="right" headers="perSecond Average" class='awrnclb'>3,846.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,168.55</td><td align="right" headers="perSecond Min" class='awrnc'>3,020.56</td><td align="right" headers="perSecond Max" class='awrncrb'>4,673.14</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>1,212</td><td align="right" class='awrc'>1.91</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.96</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.87</td><td align="right" headers="perSecond Max" class='awrcrb'>1.04</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>64,212</td><td align="right" class='awrnc'>101.19</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>50.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.26</td><td align="right" headers="perSecond Min" class='awrnc'>49.70</td><td align="right" headers="perSecond Max" class='awrncrb'>51.49</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>129</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>2,201</td><td align="right" class='awrc'>3.47</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.73</td><td align="right" headers="perSecond StdDev" class='awrc'>1.14</td><td align="right" headers="perSecond Min" class='awrc'>0.93</td><td align="right" headers="perSecond Max" class='awrcrb'>2.54</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>811</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>0.56</td><td align="right" headers="perSecond Max" class='awrncrb'>0.72</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.14</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>205,232</td><td align="right" class='awrnc'>323.44</td><td align="right" class='awrnc'>3.20</td><td align="right" headers="perSecond Average" class='awrnclb'>161.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>101.50</td><td align="right" headers="perSecond Min" class='awrnc'>89.95</td><td align="right" headers="perSecond Max" class='awrncrb'>233.49</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>12,654</td><td align="right" class='awrnc'>19.94</td><td align="right" class='awrnc'>0.20</td><td align="right" headers="perSecond Average" class='awrnclb'>9.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.81</td><td align="right" headers="perSecond Min" class='awrnc'>8.69</td><td align="right" headers="perSecond Max" class='awrncrb'>11.25</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>32,476</td><td align="right" class='awrc'>51.18</td><td align="right" class='awrc'>0.51</td><td align="right" headers="perSecond Average" class='awrclb'>25.59</td><td align="right" headers="perSecond StdDev" class='awrc'>2.01</td><td align="right" headers="perSecond Min" class='awrc'>24.17</td><td align="right" headers="perSecond Max" class='awrcrb'>27.01</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>32,485</td><td align="right" class='awrnc'>51.19</td><td align="right" class='awrnc'>0.51</td><td align="right" headers="perSecond Average" class='awrnclb'>25.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.66</td><td align="right" headers="perSecond Min" class='awrnc'>24.43</td><td align="right" headers="perSecond Max" class='awrncrb'>26.77</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>52,765</td><td align="right" class='awrc'>83.15</td><td align="right" class='awrc'>0.82</td><td align="right" headers="perSecond Average" class='awrclb'>41.58</td><td align="right" headers="perSecond StdDev" class='awrc'>0.47</td><td align="right" headers="perSecond Min" class='awrc'>41.25</td><td align="right" headers="perSecond Max" class='awrcrb'>41.91</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>18,991</td><td align="right" class='awrnc'>29.93</td><td align="right" class='awrnc'>0.30</td><td align="right" headers="perSecond Average" class='awrnclb'>14.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.65</td><td align="right" headers="perSecond Min" class='awrnc'>14.51</td><td align="right" headers="perSecond Max" class='awrncrb'>15.42</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>5,142</td><td align="right" class='awrc'>8.10</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>4.05</td><td align="right" headers="perSecond StdDev" class='awrc'>3.39</td><td align="right" headers="perSecond Min" class='awrc'>1.65</td><td align="right" headers="perSecond Max" class='awrcrb'>6.45</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>86,199</td><td align="right" class='awrnc'>135.84</td><td align="right" class='awrnc'>1.34</td><td align="right" headers="perSecond Average" class='awrnclb'>67.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.34</td><td align="right" headers="perSecond Min" class='awrnc'>52.83</td><td align="right" headers="perSecond Max" class='awrncrb'>83.01</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>0.40</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>207,154</td><td align="right" class='awrnc'>326.46</td><td align="right" class='awrnc'>3.23</td><td align="right" headers="perSecond Average" class='awrnclb'>163.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.87</td><td align="right" headers="perSecond Min" class='awrnc'>158.38</td><td align="right" headers="perSecond Max" class='awrncrb'>168.09</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>5,904</td><td align="right" class='awrc'>9.30</td><td align="right" class='awrc'>0.09</td><td align="right" headers="perSecond Average" class='awrclb'>4.65</td><td align="right" headers="perSecond StdDev" class='awrc'>4.23</td><td align="right" headers="perSecond Min" class='awrc'>1.66</td><td align="right" headers="perSecond Max" class='awrcrb'>7.65</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>3,602</td><td align="right" class='awrnc'>5.68</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>2.84</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.34</td><td align="right" headers="perSecond Min" class='awrnc'>1.89</td><td align="right" headers="perSecond Max" class='awrncrb'>3.79</td></tr>
<tr><td scope="row" class='awrc'>gcs cr requests to slave</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>1,103,426</td><td align="right" class='awrnc'>1,738.92</td><td align="right" class='awrnc'>17.18</td><td align="right" headers="perSecond Average" class='awrnclb'>869.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>189.55</td><td align="right" headers="perSecond Min" class='awrnc'>735.43</td><td align="right" headers="perSecond Max" class='awrncrb'>1,003.49</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>86,451</td><td align="right" class='awrnc'>136.24</td><td align="right" class='awrnc'>1.35</td><td align="right" headers="perSecond Average" class='awrnclb'>68.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.49</td><td align="right" headers="perSecond Min" class='awrnc'>52.93</td><td align="right" headers="perSecond Max" class='awrncrb'>83.31</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (compatible) converts</td><td align="right" class='awrc'>8,197</td><td align="right" class='awrc'>12.92</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>6.46</td><td align="right" headers="perSecond StdDev" class='awrc'>0.65</td><td align="right" headers="perSecond Min" class='awrc'>6.00</td><td align="right" headers="perSecond Max" class='awrcrb'>6.92</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (null) converts</td><td align="right" class='awrnc'>991,898</td><td align="right" class='awrnc'>1,563.18</td><td align="right" class='awrnc'>15.45</td><td align="right" headers="perSecond Average" class='awrnclb'>781.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>212.74</td><td align="right" headers="perSecond Min" class='awrnc'>631.16</td><td align="right" headers="perSecond Max" class='awrncrb'>932.02</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrc'>30,330</td><td align="right" class='awrc'>47.80</td><td align="right" class='awrc'>0.47</td><td align="right" headers="perSecond Average" class='awrclb'>23.90</td><td align="right" headers="perSecond StdDev" class='awrc'>9.26</td><td align="right" headers="perSecond Min" class='awrc'>17.35</td><td align="right" headers="perSecond Max" class='awrcrb'>30.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (null) converts</td><td align="right" class='awrnc'>5,933,409</td><td align="right" class='awrnc'>9,350.76</td><td align="right" class='awrnc'>92.40</td><td align="right" headers="perSecond Average" class='awrnclb'>4,675.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,155.68</td><td align="right" headers="perSecond Min" class='awrnc'>3,858.19</td><td align="right" headers="perSecond Max" class='awrncrb'>5,492.57</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>498,904</td><td align="right" class='awrnc'>786.25</td><td align="right" class='awrnc'>7.77</td><td align="right" headers="perSecond Average" class='awrnclb'>393.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>107.63</td><td align="right" headers="perSecond Min" class='awrnc'>317.02</td><td align="right" headers="perSecond Max" class='awrncrb'>469.23</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>22,560,428</td><td align="right" class='awrc'>35,553.93</td><td align="right" class='awrc'>351.34</td><td align="right" headers="perSecond Average" class='awrclb'>17,776.96</td><td align="right" headers="perSecond StdDev" class='awrc'>1,582.14</td><td align="right" headers="perSecond Min" class='awrc'>16,658.22</td><td align="right" headers="perSecond Max" class='awrcrb'>18,895.71</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>351</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>838</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.66</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>0.56</td><td align="right" headers="perSecond Max" class='awrcrb'>0.76</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>2,447</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>1.93</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.80</td><td align="right" headers="perSecond Min" class='awrnc'>0.65</td><td align="right" headers="perSecond Max" class='awrncrb'>3.20</td></tr>
<tr><td scope="row" class='awrc'>gcs queued converts</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant immediate</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs actual</td><td align="right" class='awrc'>3,169</td><td align="right" class='awrc'>4.99</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>2.50</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>2.41</td><td align="right" headers="perSecond Max" class='awrcrb'>2.58</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs logical</td><td align="right" class='awrnc'>99,787</td><td align="right" class='awrnc'>157.26</td><td align="right" class='awrnc'>1.55</td><td align="right" headers="perSecond Average" class='awrnclb'>78.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>16.51</td><td align="right" headers="perSecond Min" class='awrnc'>66.96</td><td align="right" headers="perSecond Max" class='awrncrb'>90.30</td></tr>
<tr><td scope="row" class='awrc'>gcs stale cr</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>gcs undo cr</td><td align="right" class='awrnc'>383</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.42</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.60</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>1,137</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.80</td><td align="right" headers="perSecond Max" class='awrncrb'>0.99</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>29,062</td><td align="right" class='awrc'>45.80</td><td align="right" class='awrc'>0.45</td><td align="right" headers="perSecond Average" class='awrclb'>22.90</td><td align="right" headers="perSecond StdDev" class='awrc'>4.27</td><td align="right" headers="perSecond Min" class='awrc'>19.88</td><td align="right" headers="perSecond Max" class='awrcrb'>25.92</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>362</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.57</td><td align="right" headers="perSecond Max" class='awrncrb'>0.57</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages received</td><td align="right" class='awrc'>325,786</td><td align="right" class='awrc'>513.42</td><td align="right" class='awrc'>5.07</td><td align="right" headers="perSecond Average" class='awrclb'>256.71</td><td align="right" headers="perSecond StdDev" class='awrc'>16.99</td><td align="right" headers="perSecond Min" class='awrc'>244.70</td><td align="right" headers="perSecond Max" class='awrcrb'>268.72</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages sent</td><td align="right" class='awrnc'>324,460</td><td align="right" class='awrnc'>511.33</td><td align="right" class='awrnc'>5.05</td><td align="right" headers="perSecond Average" class='awrnclb'>255.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>14.00</td><td align="right" headers="perSecond Min" class='awrnc'>245.76</td><td align="right" headers="perSecond Max" class='awrncrb'>265.57</td></tr>
<tr><td scope="row" class='awrc'>messages flow controlled</td><td align="right" class='awrc'>41,438</td><td align="right" class='awrc'>65.30</td><td align="right" class='awrc'>0.65</td><td align="right" headers="perSecond Average" class='awrclb'>32.65</td><td align="right" headers="perSecond StdDev" class='awrc'>6.69</td><td align="right" headers="perSecond Min" class='awrc'>27.92</td><td align="right" headers="perSecond Max" class='awrcrb'>37.38</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent actual</td><td align="right" class='awrnc'>2,495,491</td><td align="right" class='awrnc'>3,932.74</td><td align="right" class='awrnc'>38.86</td><td align="right" headers="perSecond Average" class='awrnclb'>1,966.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>58.39</td><td align="right" headers="perSecond Min" class='awrnc'>1,925.08</td><td align="right" headers="perSecond Max" class='awrncrb'>2,007.66</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent logical</td><td align="right" class='awrc'>2,246,904</td><td align="right" class='awrc'>3,540.98</td><td align="right" class='awrc'>34.99</td><td align="right" headers="perSecond Average" class='awrclb'>1,770.49</td><td align="right" headers="perSecond StdDev" class='awrc'>15.52</td><td align="right" headers="perSecond Min" class='awrc'>1,759.52</td><td align="right" headers="perSecond Max" class='awrcrb'>1,781.46</td></tr>
<tr><td scope="row" class='awrnc'>messages received actual</td><td align="right" class='awrnc'>4,536,678</td><td align="right" class='awrnc'>7,149.54</td><td align="right" class='awrnc'>70.65</td><td align="right" headers="perSecond Average" class='awrnclb'>3,574.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>294.53</td><td align="right" headers="perSecond Min" class='awrnc'>3,366.51</td><td align="right" headers="perSecond Max" class='awrncrb'>3,783.03</td></tr>
<tr><td scope="row" class='awrc'>messages received logical</td><td align="right" class='awrc'>22,589,490</td><td align="right" class='awrc'>35,599.73</td><td align="right" class='awrc'>351.80</td><td align="right" headers="perSecond Average" class='awrclb'>17,799.87</td><td align="right" headers="perSecond StdDev" class='awrc'>1,586.41</td><td align="right" headers="perSecond Min" class='awrc'>16,678.10</td><td align="right" headers="perSecond Max" class='awrcrb'>18,921.63</td></tr>
<tr><td scope="row" class='awrnc'>messages sent directly</td><td align="right" class='awrnc'>1,436,965</td><td align="right" class='awrnc'>2,264.55</td><td align="right" class='awrnc'>22.38</td><td align="right" headers="perSecond Average" class='awrnclb'>1,132.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>181.88</td><td align="right" headers="perSecond Min" class='awrnc'>1,003.67</td><td align="right" headers="perSecond Max" class='awrncrb'>1,260.89</td></tr>
<tr><td scope="row" class='awrc'>messages sent indirectly</td><td align="right" class='awrc'>8,814,025</td><td align="right" class='awrc'>13,890.25</td><td align="right" class='awrc'>137.26</td><td align="right" headers="perSecond Average" class='awrclb'>6,945.13</td><td align="right" headers="perSecond StdDev" class='awrc'>1,429.41</td><td align="right" headers="perSecond Min" class='awrc'>5,934.38</td><td align="right" headers="perSecond Max" class='awrcrb'>7,955.87</td></tr>
<tr><td scope="row" class='awrnc'>messages sent not implicit batched</td><td align="right" class='awrnc'>226,170</td><td align="right" class='awrnc'>356.43</td><td align="right" class='awrnc'>3.52</td><td align="right" headers="perSecond Average" class='awrnclb'>178.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>27.80</td><td align="right" headers="perSecond Min" class='awrnc'>158.56</td><td align="right" headers="perSecond Max" class='awrncrb'>197.88</td></tr>
<tr><td scope="row" class='awrc'>messages sent pbatched</td><td align="right" class='awrc'>19,609,152</td><td align="right" class='awrc'>30,902.73</td><td align="right" class='awrc'>305.38</td><td align="right" headers="perSecond Average" class='awrclb'>15,451.36</td><td align="right" headers="perSecond StdDev" class='awrc'>951.72</td><td align="right" headers="perSecond Min" class='awrc'>14,778.40</td><td align="right" headers="perSecond Max" class='awrcrb'>16,124.33</td></tr>
<tr><td scope="row" class='awrnc'>msgs received kernel queue time (ns)</td><td align="right" class='awrnc'>2,416,078,012,096</td><td align="right" class='awrnc'>3,807,687,789.40</td><td align="right" class='awrnc'>37,626,580.89</td><td align="right" headers="perSecond Average" class='awrnclb'>1,903,843,894.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,451,185,087.87</td><td align="right" headers="perSecond Min" class='awrnc'>877,701,078.31</td><td align="right" headers="perSecond Max" class='awrncrb'>2,929,986,711.09</td></tr>
<tr><td scope="row" class='awrc'>msgs received queue time (ms)</td><td align="right" class='awrc'>955,632</td><td align="right" class='awrc'>1,506.06</td><td align="right" class='awrc'>14.88</td><td align="right" headers="perSecond Average" class='awrclb'>753.03</td><td align="right" headers="perSecond StdDev" class='awrc'>659.84</td><td align="right" headers="perSecond Min" class='awrc'>286.45</td><td align="right" headers="perSecond Max" class='awrcrb'>1,219.61</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queued</td><td align="right" class='awrnc'>22,589,490</td><td align="right" class='awrnc'>35,599.73</td><td align="right" class='awrnc'>351.80</td><td align="right" headers="perSecond Average" class='awrnclb'>17,799.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,586.41</td><td align="right" headers="perSecond Min" class='awrnc'>16,678.10</td><td align="right" headers="perSecond Max" class='awrncrb'>18,921.63</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time (ms)</td><td align="right" class='awrc'>1,423,975</td><td align="right" class='awrc'>2,244.10</td><td align="right" class='awrc'>22.18</td><td align="right" headers="perSecond Average" class='awrclb'>1,122.05</td><td align="right" headers="perSecond StdDev" class='awrc'>20.30</td><td align="right" headers="perSecond Min" class='awrc'>1,107.69</td><td align="right" headers="perSecond Max" class='awrcrb'>1,136.41</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrnc'>35,937,662</td><td align="right" class='awrnc'>56,634.36</td><td align="right" class='awrnc'>559.67</td><td align="right" headers="perSecond Average" class='awrnclb'>28,317.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>16,544.81</td><td align="right" headers="perSecond Min" class='awrnc'>16,618.24</td><td align="right" headers="perSecond Max" class='awrncrb'>40,016.12</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued</td><td align="right" class='awrc'>3,414,668</td><td align="right" class='awrc'>5,381.30</td><td align="right" class='awrc'>53.18</td><td align="right" headers="perSecond Average" class='awrclb'>2,690.65</td><td align="right" headers="perSecond StdDev" class='awrc'>71.51</td><td align="right" headers="perSecond Min" class='awrc'>2,640.08</td><td align="right" headers="perSecond Max" class='awrcrb'>2,741.22</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued on ksxp</td><td align="right" class='awrnc'>4,531,798</td><td align="right" class='awrnc'>7,141.81</td><td align="right" class='awrnc'>70.58</td><td align="right" headers="perSecond Average" class='awrnclb'>3,570.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>239.16</td><td align="right" headers="perSecond Min" class='awrnc'>3,401.79</td><td align="right" headers="perSecond Max" class='awrncrb'>3,740.02</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages received</td><td align="right" class='awrnc'>2,274,916</td><td align="right" class='awrnc'>3,585.13</td><td align="right" class='awrnc'>35.43</td><td align="right" headers="perSecond Average" class='awrnclb'>1,792.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>59.28</td><td align="right" headers="perSecond Min" class='awrnc'>1,750.65</td><td align="right" headers="perSecond Max" class='awrncrb'>1,834.48</td></tr>
<tr><td scope="row" class='awrc'>process batch messages sent</td><td align="right" class='awrc'>2,473,282</td><td align="right" class='awrc'>3,897.74</td><td align="right" class='awrc'>38.52</td><td align="right" headers="perSecond Average" class='awrclb'>1,948.87</td><td align="right" headers="perSecond StdDev" class='awrc'>6.05</td><td align="right" headers="perSecond Min" class='awrc'>1,944.59</td><td align="right" headers="perSecond Max" class='awrcrb'>1,953.14</td></tr>
<tr><td scope="row" class='awrnc'>receiver cycle time</td><td align="right" class='awrnc'>1,385,980</td><td align="right" class='awrnc'>2,184.23</td><td align="right" class='awrnc'>21.58</td><td align="right" headers="perSecond Average" class='awrnclb'>1,092.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>181.62</td><td align="right" headers="perSecond Min" class='awrnc'>963.69</td><td align="right" headers="perSecond Max" class='awrncrb'>1,220.54</td></tr>
<tr><td scope="row" class='awrc'>receiver loop count</td><td align="right" class='awrc'>4,338,214</td><td align="right" class='awrc'>6,836.74</td><td align="right" class='awrc'>67.56</td><td align="right" headers="perSecond Average" class='awrclb'>3,418.37</td><td align="right" headers="perSecond StdDev" class='awrc'>229.10</td><td align="right" headers="perSecond Min" class='awrc'>3,256.37</td><td align="right" headers="perSecond Max" class='awrcrb'>3,580.37</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>207</td><td align="right" headers="Sessions End" class='awrc'>143</td><td align="right" headers="OpenCursors Begin" class='awrclb'>363</td><td align="right" headers="OpenCursors End" class='awrc'>98</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>8,409</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>8,883</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>208</td><td align="right" headers="Sessions End" class='awrnc'>145</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>396</td><td align="right" headers="OpenCursors End" class='awrnc'>87</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>10,885</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>11,193</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>415</td><td align="right" class='awrct'>288</td><td align="right" class='awrclbt'>759</td><td align="right" class='awrct'>185</td><td align="right" class='awrclbt'>19,294</td><td align="right" class='awrcrbt'>20,076</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>208</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnclb'>380</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnclb'>9,647</td><td align="right" class='awrncrb'>10,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrclb'>23</td><td align="right" class='awrc'>8</td><td align="right" class='awrclb'>1,751</td><td align="right" class='awrcrb'>1,633</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>60,914.68</td><td align="right" class='awrc'>52,795.06</td><td align="right" class='awrc'>8,119.62</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>60,735.96</td><td align="right" class='awrnc'>52,777.33</td><td align="right" class='awrnc'>7,958.63</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>83.25</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>83.25</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>489.05</td><td align="right" class='awrc'>417.20</td><td align="right" class='awrc'>71.85</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>477.32</td><td align="right" class='awrnc'>412.35</td><td align="right" class='awrnc'>64.97</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>6.27</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6.27</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>61,096.96</td><td align="right" class='awrc'>52,780.32</td><td align="right" class='awrc'>8,316.64</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>61,095.52</td><td align="right" class='awrnc'>52,780.32</td><td align="right" class='awrnc'>8,315.20</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.45</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>38,173,020</td><td align="right" headers="Requests IOs/s" class='awrc'>60,153.83</td><td align="right" headers="Requests Reads/s" class='awrc'>52,097.98</td><td align="right" headers="Requests Writes/s" class='awrc'>8,055.85</td><td align="right" headers="MB Total" class='awrclb'>306,488</td><td align="right" headers="MB IOMB/s" class='awrc'>482.97</td><td align="right" headers="MB ReadMB/s" class='awrc'>411.70</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>71.27</td><td align="right" class='awrc'>6.4M</td><td align="right" class='awrc'>7.78ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>33,048,774</td><td align="right" headers="Requests IOs/s" class='awrnc'>52,078.94</td><td align="right" headers="Requests Reads/s" class='awrnc'>52,078.94</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>258,207</td><td align="right" headers="MB IOMB/s" class='awrnc'>406.89</td><td align="right" headers="MB ReadMB/s" class='awrnc'>406.89</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>6.3M</td><td align="right" class='awrnc'>7.64ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>5,011,589</td><td align="right" headers="Requests IOs/s" class='awrc'>7,897.37</td><td align="right" headers="Requests Reads/s" class='awrc'>0.76</td><td align="right" headers="Requests Writes/s" class='awrc'>7,896.61</td><td align="right" headers="MB Total" class='awrclb'>40,917</td><td align="right" headers="MB IOMB/s" class='awrc'>64.48</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>64.47</td><td align="right" class='awrc'>480</td><td align="right" class='awrc'>6.50ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>98,831</td><td align="right" headers="Requests IOs/s" class='awrnc'>155.74</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>155.74</td><td align="right" headers="MB Total" class='awrnclb'>4,085</td><td align="right" headers="MB IOMB/s" class='awrnc'>6.44</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>6.44</td><td align="right" class='awrnc'>52.2K</td><td align="right" class='awrnc'>24.63ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>13,741</td><td align="right" headers="Requests IOs/s" class='awrc'>21.65</td><td align="right" headers="Requests Reads/s" class='awrc'>18.29</td><td align="right" headers="Requests Writes/s" class='awrc'>3.36</td><td align="right" headers="MB Total" class='awrclb'>3,277</td><td align="right" headers="MB IOMB/s" class='awrc'>5.16</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.80</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.36</td><td align="right" class='awrc'>7874</td><td align="right" class='awrc'>8.39ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>85</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.13</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.13</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>19,633,160</td><td align="right" headers="Requests IOs/s" class='awrct'>30,938.34</td><td align="right" headers="Requests Reads/s" class='awrct'>26,810.43</td><td align="right" headers="Requests Writes/s" class='awrct'>4,127.91</td><td align="right" headers="MB Total" class='awrclbt'>157,661</td><td align="right" headers="MB IOMB/s" class='awrct'>248.45</td><td align="right" headers="MB ReadMB/s" class='awrct'>211.81</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>36.63</td><td align="right" class='awrct'>3.3M</td><td align="right" class='awrct'>9.20ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>17,007,186</td><td align="right" headers="Requests IOs/s" class='awrnc'>26,800.27</td><td align="right" headers="Requests Reads/s" class='awrnc'>26,800.27</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>132,872</td><td align="right" headers="MB IOMB/s" class='awrnc'>209.38</td><td align="right" headers="MB ReadMB/s" class='awrnc'>209.38</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>3.3M</td><td align="right" class='awrnc'>9.07ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>2,567,442</td><td align="right" headers="Requests IOs/s" class='awrc'>4,045.83</td><td align="right" headers="Requests Reads/s" class='awrc'>0.38</td><td align="right" headers="Requests Writes/s" class='awrc'>4,045.45</td><td align="right" headers="MB Total" class='awrclb'>20,941</td><td align="right" headers="MB IOMB/s" class='awrc'>33.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>32.99</td><td align="right" class='awrc'>240</td><td align="right" class='awrc'>7.60ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>50,859</td><td align="right" headers="Requests IOs/s" class='awrnc'>80.14</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>80.14</td><td align="right" headers="MB Total" class='awrnclb'>2,091</td><td align="right" headers="MB IOMB/s" class='awrnc'>3.30</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>3.30</td><td align="right" class='awrnc'>26.5K</td><td align="right" class='awrnc'>25.48ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>7,627</td><td align="right" headers="Requests IOs/s" class='awrc'>12.02</td><td align="right" headers="Requests Reads/s" class='awrc'>9.78</td><td align="right" headers="Requests Writes/s" class='awrc'>2.24</td><td align="right" headers="MB Total" class='awrclb'>1,756</td><td align="right" headers="MB IOMB/s" class='awrc'>2.77</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.43</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.34</td><td align="right" class='awrc'>4449</td><td align="right" class='awrc'>8.81ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>46</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.07</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.07</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>18,539,860</td><td align="right" headers="Requests IOs/s" class='awrct'>29,215.49</td><td align="right" headers="Requests Reads/s" class='awrct'>25,287.55</td><td align="right" headers="Requests Writes/s" class='awrct'>3,927.94</td><td align="right" headers="MB Total" class='awrclbt'>148,827</td><td align="right" headers="MB IOMB/s" class='awrct'>234.52</td><td align="right" headers="MB ReadMB/s" class='awrct'>199.89</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>34.64</td><td align="right" class='awrct'>3.1M</td><td align="right" class='awrct'>6.27ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>16,041,588</td><td align="right" headers="Requests IOs/s" class='awrnc'>25,278.66</td><td align="right" headers="Requests Reads/s" class='awrnc'>25,278.66</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>125,335</td><td align="right" headers="MB IOMB/s" class='awrnc'>197.51</td><td align="right" headers="MB ReadMB/s" class='awrnc'>197.51</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>3.1M</td><td align="right" class='awrnc'>6.12ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>2,444,147</td><td align="right" headers="Requests IOs/s" class='awrc'>3,851.54</td><td align="right" headers="Requests Reads/s" class='awrc'>0.38</td><td align="right" headers="Requests Writes/s" class='awrc'>3,851.16</td><td align="right" headers="MB Total" class='awrclb'>19,976</td><td align="right" headers="MB IOMB/s" class='awrc'>31.48</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>31.47</td><td align="right" class='awrc'>240</td><td align="right" class='awrc'>5.40ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>47,972</td><td align="right" headers="Requests IOs/s" class='awrnc'>75.60</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>75.60</td><td align="right" headers="MB Total" class='awrnclb'>1,994</td><td align="right" headers="MB IOMB/s" class='awrnc'>3.14</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>3.14</td><td align="right" class='awrnc'>25.7K</td><td align="right" class='awrnc'>23.75ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>6,114</td><td align="right" headers="Requests IOs/s" class='awrc'>9.63</td><td align="right" headers="Requests Reads/s" class='awrc'>8.51</td><td align="right" headers="Requests Writes/s" class='awrc'>1.13</td><td align="right" headers="MB Total" class='awrclb'>1,521</td><td align="right" headers="MB IOMB/s" class='awrc'>2.40</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.38</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>3425</td><td align="right" class='awrc'>7.85ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>39</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.06</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.06</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>38,163,505</td><td align="right" headers="Requests IOs/s" class='awrc'>60,138.84</td><td align="right" headers="Requests Reads/s" class='awrc'>52,085.04</td><td align="right" headers="Requests Writes/s" class='awrc'>8,053.80</td><td align="right" headers="MB Total" class='awrclb'>306,218</td><td align="right" headers="MB IOMB/s" class='awrc'>482.54</td><td align="right" headers="MB ReadMB/s" class='awrc'>411.61</td><td align="right" headers="MB WriteMB/s" class='awrc'>70.94</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>1.09ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1678.55ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>38,050,782</td><td align="right" headers="Requests IOs/s" class='awrnc'>59,961.21</td><td align="right" headers="Requests Reads/s" class='awrnc'>52,065.93</td><td align="right" headers="Requests Writes/s" class='awrnc'>7,895.28</td><td align="right" headers="MB Total" class='awrnclb'>299,053</td><td align="right" headers="MB IOMB/s" class='awrnc'>471.25</td><td align="right" headers="MB ReadMB/s" class='awrnc'>406.79</td><td align="right" headers="MB WriteMB/s" class='awrnc'>64.46</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>1.09ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>11.50ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>101,999</td><td align="right" headers="Requests IOs/s" class='awrc'>160.73</td><td align="right" headers="Requests Reads/s" class='awrc'>5.08</td><td align="right" headers="Requests Writes/s" class='awrc'>155.65</td><td align="right" headers="MB Total" class='awrclb'>6,999</td><td align="right" headers="MB IOMB/s" class='awrc'>11.03</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.60</td><td align="right" headers="MB WriteMB/s" class='awrc'>6.43</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>100.00us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1687.70ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>10,214</td><td align="right" headers="Requests IOs/s" class='awrnc'>16.10</td><td align="right" headers="Requests Reads/s" class='awrnc'>13.81</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.28</td><td align="right" headers="MB Total" class='awrnclb'>160</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.25</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.22</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.04</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>4.25ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>270</td><td align="right" headers="Requests IOs/s" class='awrc'>0.43</td><td align="right" headers="Requests Reads/s" class='awrc'>0.22</td><td align="right" headers="Requests Writes/s" class='awrc'>0.21</td><td align="right" headers="MB Total" class='awrclb'>4</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>4.75ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Other</td><td align="right" headers="Requests Total" class='awrnclb'>240</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.38</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.38</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>&#160;</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>19,631,249</td><td align="right" headers="Requests IOs/s" class='awrct'>30,935.33</td><td align="right" headers="Requests Reads/s" class='awrct'>26,807.96</td><td align="right" headers="Requests Writes/s" class='awrct'>4,127.37</td><td align="right" headers="MB Total" class='awrclbt'>157,455</td><td align="right" headers="MB IOMB/s" class='awrct'>248.12</td><td align="right" headers="MB ReadMB/s" class='awrct'>211.80</td><td align="right" headers="MB WriteMB/s" class='awrct'>36.32</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>1.31ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1684.03ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>19,572,903</td><td align="right" headers="Requests IOs/s" class='awrnc'>30,843.38</td><td align="right" headers="Requests Reads/s" class='awrnc'>26,797.87</td><td align="right" headers="Requests Writes/s" class='awrnc'>4,045.51</td><td align="right" headers="MB Total" class='awrnclb'>153,806</td><td align="right" headers="MB IOMB/s" class='awrnc'>242.37</td><td align="right" headers="MB ReadMB/s" class='awrnc'>209.37</td><td align="right" headers="MB WriteMB/s" class='awrnc'>33.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>1.31ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>12.50ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>52,464</td><td align="right" headers="Requests IOs/s" class='awrc'>82.67</td><td align="right" headers="Requests Reads/s" class='awrc'>2.55</td><td align="right" headers="Requests Writes/s" class='awrc'>80.12</td><td align="right" headers="MB Total" class='awrclb'>3,558</td><td align="right" headers="MB IOMB/s" class='awrc'>5.61</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.31</td><td align="right" headers="MB WriteMB/s" class='awrc'>3.29</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>169.93us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1690.86ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>5,541</td><td align="right" headers="Requests IOs/s" class='awrnc'>8.73</td><td align="right" headers="Requests Reads/s" class='awrnc'>7.46</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.27</td><td align="right" headers="MB Total" class='awrnclb'>87</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.14</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.12</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>5.10ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Other</td><td align="right" headers="Requests Total" class='awrclb'>240</td><td align="right" headers="Requests IOs/s" class='awrc'>0.38</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.38</td><td align="right" headers="MB Total" class='awrclb'>2</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>&#160;</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>101</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.16</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.08</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.08</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>3.58ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>18,532,256</td><td align="right" headers="Requests IOs/s" class='awrct'>29,203.51</td><td align="right" headers="Requests Reads/s" class='awrct'>25,277.08</td><td align="right" headers="Requests Writes/s" class='awrct'>3,926.43</td><td align="right" headers="MB Total" class='awrclbt'>148,763</td><td align="right" headers="MB IOMB/s" class='awrct'>234.42</td><td align="right" headers="MB ReadMB/s" class='awrct'>199.80</td><td align="right" headers="MB WriteMB/s" class='awrct'>34.62</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>856.37us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1673.01ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>18,477,879</td><td align="right" headers="Requests IOs/s" class='awrnc'>29,117.82</td><td align="right" headers="Requests Reads/s" class='awrnc'>25,268.06</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,849.76</td><td align="right" headers="MB Total" class='awrnclb'>145,247</td><td align="right" headers="MB IOMB/s" class='awrnc'>228.88</td><td align="right" headers="MB ReadMB/s" class='awrnc'>197.42</td><td align="right" headers="MB WriteMB/s" class='awrnc'>31.46</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>855.75us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>10.90ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>49,535</td><td align="right" headers="Requests IOs/s" class='awrc'>78.06</td><td align="right" headers="Requests Reads/s" class='awrc'>2.53</td><td align="right" headers="Requests Writes/s" class='awrc'>75.53</td><td align="right" headers="MB Total" class='awrclb'>3,441</td><td align="right" headers="MB IOMB/s" class='awrc'>5.42</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.28</td><td align="right" headers="MB WriteMB/s" class='awrc'>3.14</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>31.85us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1684.49ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,673</td><td align="right" headers="Requests IOs/s" class='awrnc'>7.36</td><td align="right" headers="Requests Reads/s" class='awrnc'>6.35</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.01</td><td align="right" headers="MB Total" class='awrnclb'>73</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.12</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.10</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>3.26ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>169</td><td align="right" headers="Requests IOs/s" class='awrc'>0.27</td><td align="right" headers="Requests Reads/s" class='awrc'>0.14</td><td align="right" headers="Requests Writes/s" class='awrc'>0.13</td><td align="right" headers="MB Total" class='awrclb'>2</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>5.41ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	86.7% of Total Logical Reads:	   39,711,487</li>
<li class="awr">Captured Segments account for	90.1% of Total Physical Reads:	    33,493,864</li>
<li class="awr">Captured Segments account for	90.1% of Total Physical Read Requests:	    33,491,965</li>
<li class="awr">Captured Segments account for	90.1% of Total UnOptimized Read Requests:      33,491,965</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		    1</li>
<li class="awr">Captured Segments account for	87.4% of Total Physical Writes:       5,277,659</li>
<li class="awr">Captured Segments account for	91.0% of Total Physical Write Requests:       5,050,466</li>
<li class="awr">Captured Segments account for	47.5% of Total Direct Physical Writes:		   917</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  5</li>
<li class="awr">Captured Segments account for	69.4% of Total CR Blocks Received:	     5,718</li>
<li class="awr">Captured Segments account for	60.3% of Total Current Blocks Received: 	  7,286</li>
<li class="awr">Captured Segments account for	63.3% of Total CR Blocks Served:	   6,263</li>
<li class="awr">Captured Segments account for	59.1% of Total Current Blocks Served:		7,429</li>
<li class="awr">Captured Segments account for	93.0% of Total Global Cache Remote Grants:	 6,981,567</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>73,760</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.16</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER3</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73263</td><td align="right" class='awrnc'>73267</td><td align="right" class='awrnc'>73,360</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.05</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER64</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>73,264</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.03</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER81</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73680</td><td align="right" class='awrnc'>73692</td><td align="right" class='awrnc'>73,024</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.96</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER43</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73490</td><td align="right" class='awrc'>73493</td><td align="right" class='awrc'>72,448</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.80</td></tr>
<tr><td class='awrnc'>gc cr blocks received</td><td class='awrnc'>USER109</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73835</td><td align="right" class='awrnc'>73838</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>3.83</td><td align="right" class='awrnc'>20.35</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER66</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73621</td><td align="right" class='awrc'>73626</td><td align="right" class='awrc'>202</td><td align="right" class='awrc'>3.53</td><td align="right" class='awrc'>18.77</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER79</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>73678</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>2.94</td><td align="right" class='awrnc'>15.61</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER110</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73842</td><td align="right" class='awrc'>73846</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>2.89</td><td align="right" class='awrc'>15.33</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER38</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73468</td><td align="right" class='awrnc'>73473</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>2.89</td><td align="right" class='awrnc'>15.33</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER73</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73652</td><td align="right" class='awrc'>73656</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>2.75</td><td align="right" class='awrc'>14.59</td></tr>
<tr><td class='awrnc'>gc cr blocks served</td><td class='awrnc'>USER109</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73835</td><td align="right" class='awrnc'>73838</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>3.50</td><td align="right" class='awrnc'>20.35</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER66</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73621</td><td align="right" class='awrc'>73626</td><td align="right" class='awrc'>202</td><td align="right" class='awrc'>3.23</td><td align="right" class='awrc'>18.77</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER79</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>73678</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>2.68</td><td align="right" class='awrnc'>15.61</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER110</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73842</td><td align="right" class='awrc'>73846</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>2.63</td><td align="right" class='awrc'>15.33</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER38</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73468</td><td align="right" class='awrnc'>73473</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>2.63</td><td align="right" class='awrnc'>15.33</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER73</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73652</td><td align="right" class='awrc'>73656</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>2.51</td><td align="right" class='awrc'>14.59</td></tr>
<tr><td class='awrnc'>gc cu blocks received</td><td class='awrnc'>USER120</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73893</td><td align="right" class='awrnc'>73897</td><td align="right" class='awrnc'>380</td><td align="right" class='awrnc'>5.22</td><td align="right" class='awrnc'>30.82</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER96</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73771</td><td align="right" class='awrc'>73775</td><td align="right" class='awrc'>274</td><td align="right" class='awrc'>3.76</td><td align="right" class='awrc'>22.22</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER125</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73915</td><td align="right" class='awrnc'>73918</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>3.27</td><td align="right" class='awrnc'>19.30</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER66</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73621</td><td align="right" class='awrc'>73626</td><td align="right" class='awrc'>216</td><td align="right" class='awrc'>2.96</td><td align="right" class='awrc'>17.52</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER109</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73835</td><td align="right" class='awrnc'>73838</td><td align="right" class='awrnc'>125</td><td align="right" class='awrnc'>1.72</td><td align="right" class='awrnc'>10.14</td></tr>
<tr><td class='awrc'>gc cu blocks served</td><td class='awrc'>USER120</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73893</td><td align="right" class='awrc'>73897</td><td align="right" class='awrc'>380</td><td align="right" class='awrc'>5.12</td><td align="right" class='awrc'>30.82</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER96</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73771</td><td align="right" class='awrnc'>73775</td><td align="right" class='awrnc'>274</td><td align="right" class='awrnc'>3.69</td><td align="right" class='awrnc'>22.22</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER125</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73915</td><td align="right" class='awrc'>73918</td><td align="right" class='awrc'>238</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>19.30</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER66</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73621</td><td align="right" class='awrnc'>73626</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>2.91</td><td align="right" class='awrnc'>17.52</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER109</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73835</td><td align="right" class='awrc'>73838</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>10.14</td></tr>
<tr><td class='awrnc'>gc remote grants</td><td class='awrnc'>USER66</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73621</td><td align="right" class='awrnc'>73626</td><td align="right" class='awrnc'>120,213</td><td align="right" class='awrnc'>1.72</td><td align="right" class='awrnc'>20.17</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER120</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73893</td><td align="right" class='awrc'>73897</td><td align="right" class='awrc'>119,998</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>20.14</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER32</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73437</td><td align="right" class='awrnc'>73433</td><td align="right" class='awrnc'>119,340</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>20.03</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER18</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73366</td><td align="right" class='awrc'>73370</td><td align="right" class='awrc'>118,412</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>19.87</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER87</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73721</td><td align="right" class='awrnc'>73723</td><td align="right" class='awrnc'>117,988</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>19.80</td></tr>
<tr><td class='awrc'>logical reads</td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>USER$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>3,766,864</td><td align="right" class='awrc'>9.49</td><td align="right" class='awrc'>65.82</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER3</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73263</td><td align="right" class='awrnc'>73267</td><td align="right" class='awrnc'>493,936</td><td align="right" class='awrnc'>1.24</td><td align="right" class='awrnc'>8.63</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>490,496</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>8.57</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>487,696</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>8.52</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER81</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73680</td><td align="right" class='awrc'>73692</td><td align="right" class='awrc'>483,600</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>8.45</td></tr>
<tr><td class='awrnc'>physical reads</td><td class='awrnc'>USER3</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73263</td><td align="right" class='awrnc'>73267</td><td align="right" class='awrnc'>481,823</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>20.25</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER64</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>477,935</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>20.08</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER12</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73335</td><td align="right" class='awrnc'>73342</td><td align="right" class='awrnc'>476,871</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>20.04</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER81</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73680</td><td align="right" class='awrc'>73692</td><td align="right" class='awrc'>472,193</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>19.84</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73490</td><td align="right" class='awrnc'>73493</td><td align="right" class='awrnc'>471,055</td><td align="right" class='awrnc'>1.41</td><td align="right" class='awrnc'>19.79</td></tr>
<tr><td class='awrc'>physical read requests</td><td class='awrc'>USER3</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>481,823</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>20.25</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>477,935</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>20.08</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>476,871</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>20.04</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER81</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73680</td><td align="right" class='awrnc'>73692</td><td align="right" class='awrnc'>472,193</td><td align="right" class='awrnc'>1.41</td><td align="right" class='awrnc'>19.84</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER43</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73490</td><td align="right" class='awrc'>73493</td><td align="right" class='awrc'>471,055</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>19.79</td></tr>
<tr><td class='awrnc'>physical writes</td><td class='awrnc'>USER3</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73263</td><td align="right" class='awrnc'>73267</td><td align="right" class='awrnc'>74,124</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.12</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER64</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73609</td><td align="right" class='awrc'>73613</td><td align="right" class='awrc'>73,979</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.08</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER12</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73335</td><td align="right" class='awrnc'>73342</td><td align="right" class='awrnc'>73,602</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.98</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER81</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73680</td><td align="right" class='awrc'>73692</td><td align="right" class='awrc'>73,494</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.95</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>73,133</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.86</td></tr>
<tr><td class='awrc'>physical writes direct</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_31</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>74075</td><td align="right" class='awrc'>425</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>97.48</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes direct</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P270</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>74210</td><td align="right" class='awrnc'>74210</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.52</td></tr>
<tr><td class='awrc'>physical write requests</td><td class='awrc'>USER3</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73263</td><td align="right" class='awrc'>73267</td><td align="right" class='awrc'>73,678</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>20.12</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73609</td><td align="right" class='awrnc'>73613</td><td align="right" class='awrnc'>73,555</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>20.09</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73335</td><td align="right" class='awrc'>73342</td><td align="right" class='awrc'>73,145</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>19.98</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER81</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73680</td><td align="right" class='awrnc'>73692</td><td align="right" class='awrnc'>73,035</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>19.95</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER35</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>72,708</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>19.86</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>316</td><td align="right" class='awrc'>0.63</td><td align="right" class='awrc'>980</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>923</td><td align="right" class='awrc'>923</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>11.50</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>RULESET</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>230</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>3,597</td><td align="right" class='awrc'>30.91</td><td align="right" class='awrc'>454,276</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>190</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>614</td><td align="right" class='awrnc'>80.62</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>537</td><td align="right" class='awrc'>94.79</td><td align="right" class='awrc'>537</td><td align="right" class='awrc'>94.97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>2,410</td><td align="right" class='awrnc'>10.66</td><td align="right" class='awrnc'>10,359</td><td align="right" class='awrnc'>10.43</td><td align="right" class='awrnc'>468</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,631</td><td align="right" class='awrnc'>7,161</td><td align="right" class='awrnc'>7,161</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>21.43</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>21.43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>1,357.79</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,616.53</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>2,100.14</td><td align="right" headers="PGAMemAlloc End" class='awrc'>1,647.28</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>321.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>1,320.43</td><td align="right" headers="AutoPGATarget End" class='awrnc'>1,581.25</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>2,100.07</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>1,730.83</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>321.49</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>213.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.50</td><td align="right" class='awrc'>7.09</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>61</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1073.65</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.92</td><td align="right" class='awrnc'>4.77</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>274</td><td align="right" class='awrnc'>274</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>35.29</td><td align="right" class='awrc'>34.39</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>208</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>9.77</td><td align="right" class='awrnc'>6.89</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>132</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1332.21</td><td align="right" class='awrc'>41.28</td><td align="right" class='awrc'>7.66</td><td align="right" class='awrc'>12.30</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>684</td><td align="right" class='awrc'>675</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>140.19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.79</td><td align="right" class='awrnc'>6.58</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>731.58</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.48</td><td align="right" class='awrc'>5.26</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>210</td><td align="right" class='awrc'>210</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>4.85</td><td align="right" class='awrnc'>4.38</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>143</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>28</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>879.35</td><td align="right" class='awrnc'>6.10</td><td align="right" class='awrnc'>7.34</td><td align="right" class='awrnc'>12.12</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>475</td><td align="right" class='awrnc'>418</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>218.63</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.12</td><td align="right" class='awrc'>5.98</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>103</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1048.83</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.81</td><td align="right" class='awrnc'>4.52</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>275</td><td align="right" class='awrnc'>275</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>34.89</td><td align="right" class='awrc'>33.88</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>211</td><td align="right" class='awrc'>209</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>29.80</td><td align="right" class='awrnc'>21.59</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnc'>122</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1332.15</td><td align="right" class='awrc'>55.47</td><td align="right" class='awrc'>6.31</td><td align="right" class='awrc'>11.15</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>729</td><td align="right" class='awrc'>709</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>156.31</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.72</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>42</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>795.92</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.75</td><td align="right" class='awrc'>6.01</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>212</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.65</td><td align="right" class='awrnc'>7.02</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>146</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.02</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>32</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>962.90</td><td align="right" class='awrnc'>8.43</td><td align="right" class='awrnc'>7.57</td><td align="right" class='awrnc'>13.62</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>481</td><td align="right" class='awrnc'>432</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P60S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p60sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>137438953472</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>3371171840</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>640</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>*</td><td class='awrc'>10133438464</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">thread</div></td><td class='awrc'>2</td><td class='awrc'>2</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>1</td><td class='awrnc'>UNDOTBS1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">undo_tablespace</div></td><td class='awrc'>2</td><td class='awrc'>UNDOTBS2</td><td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="080r2n9vygcm7"></a>080r2n9vygcm7</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0fq8myny00n70"></a>0fq8myny00n70</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '128';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0raxwcmc41phu"></a>0raxwcmc41phu</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '92';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0v6ufj2r5qaah"></a>0v6ufj2r5qaah</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '65';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0wnmjrnvgrwyw"></a>0wnmjrnvgrwyw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '104';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="15084tmvuq24t"></a>15084tmvuq24t</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '33';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1ma366vqkk88p"></a>1ma366vqkk88p</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '125';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1u879ayvfcr0m"></a>1u879ayvfcr0m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1vbnx1nmxh6g5"></a>1vbnx1nmxh6g5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2s578t5qpv8b5"></a>2s578t5qpv8b5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '102';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3dara5jcrdzcm"></a>3dara5jcrdzcm</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '113';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrnc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m 		  using dual								     on (m.obj# = :objn and							    (:pobjn = 0 or								m.obj# = :pobjn or							   m.obj# in (select obj#								 from tabpart$								    where bo# = :pobjn and obj# = :objn 				       union all								  select obj#								     from tabcompart$								where bo# = :pobjn and o
bj# = :objn					   union all								      select tsp.obj#								 from tabsubpart$ tsp,	tabcompart$ tcp 				     where tsp.pobj# = tcp.obj# 						  and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				     and tsp.obj# = :objn)))				      when matched then 							   update								      set inserts = decode(:reset,  1,	0,  inserts) + :ins,				 updates = decode(:reset,  1,  0,  updates) + :upd,				deletes = decode(:reset,  1,  0,  deletes) + :del,			       flags =	decode(:reset,	1,  0,	flags - bitand(flags,  :flag)) + :flag,        drop_segments = decode(:reset,  1,  0,  d
rop_segments) + :dropseg,	      timestamp = :time 						   when NOT matched then							insert (obj#,  inserts,  updates,  deletes,					       timestamp,  flags,  drop_segments)				    values (:objn,  :ins,  :upd,  :del,  :time,  :flag,  :dropseg)		     where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3kqrku32p6sfn"></a>3kqrku32p6sfn</td><td class='awrc'><pre_sqltext class="awr">MERGE /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ INTO OPTSTAT_USER_PREFS$ D USING ( SELECT * FROM (SELECT O.OBJ#,  SYSTIMESTAMP CHGTIME,  ROUND(MAX(S.DELTA_READ_IO_BYTES/S.DELTA_TIME),  3) SCANRATE FROM GV$ACTIVE_SESSION_HISTORY S,  GV$SQL_PLAN P,  OBJ$ O,  USER$ U WHERE S.INST_ID = P.INST_ID AND S.SQL_ID = P.SQL_ID AND S.SQL_PLAN_HASH_VALUE = P.PLAN_HASH_VALUE AND S.SQL_PLAN_LINE_ID = P.ID AND P.OBJECT_NAME = O.NAME AND (:B4 IS NULL OR O.OBJ# = :B4 ) AND O.OWNER# = U.USER# AND P.OBJECT_OWNER = U.NAME AND O.TYPE# = 2 AND S.CON_ID = SYS_CONTEXT('userenv',  'con_id') AND P.CON_ID = SYS_CONTEXT('userenv',  'con_id') AND S.SQL_PLAN_OPERATION = 'TABLE ACCESS' AND P.OPERATION = 'TABLE ACCESS' AND S.DELTA_TIME &gt; 0 AND S.DELTA_READ_IO_BYTES &gt; 0 AND FROM_TZ(S.SAMPLE_TIME,  :B3 ) &gt; :B2 AND (:B1 = 'ON' OR (:B1 = 'HADOOP_ONLY' AND EXISTS ( SELEC
T NULL FROM SYS.EXTERNAL_TAB$ ET WHERE ET.OBJ# = O.OBJ# AND TYPE$ IN ('ORACLE_HIVE',  'ORACLE_HDFS',  'ORACLE_BIGDATA')))) GROUP BY O.OBJ#) C WHERE NOT EXISTS (SELECT NULL FROM OPTSTAT_USER_PREFS$ PR WHERE PNAME = 'SCAN_RATE' AND C.OBJ# = PR.OBJ# AND (PR.SPARE1 IS NULL OR C.SCANRATE &lt;= TO_NUMBER(PR.VALCHAR))) ) SRC ON (D.OBJ#=SRC.OBJ# AND D.PNAME = 'SCAN_RATE') WHEN MATCHED THEN UPDATE SET D.VALCHAR= TO_CHAR(SRC.SCANRATE),  D.CHGTIME=SRC.CHGTIME,  D.SPARE1=1 WHEN NOT MATCHED THEN INSERT (OBJ#,  PNAME,  VALCHAR,  CHGTIME,  SPARE1) VALUES(SRC.OBJ#,  'SCAN_RATE',  TO_CHAR(SRC.SCANRATE),  SRC.CHGTIME,  1)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3scs6w7r6f9xa"></a>3scs6w7r6f9xa</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '34';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4ws27v7ay8j6x"></a>4ws27v7ay8j6x</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '3';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.buc
ket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned
				    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,
		  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5nz6b4v9qbsbr"></a>5nz6b4v9qbsbr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '68';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5q9x3sz49jcja"></a>5q9x3sz49jcja</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '41';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="63fqcgaztwa1q"></a>63fqcgaztwa1q</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7a314umnzbfsf"></a>7a314umnzbfsf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '58';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="86708bvah4akq"></a>86708bvah4akq</td><td class='awrc'><pre_sqltext class="awr">select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and       status$ != 1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrnc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="944mdaa2ps4z4"></a>944mdaa2ps4z4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '14';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9j9p88t9arm28"></a>9j9p88t9arm28</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '116';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9n7n07rfgj5y8"></a>9n7n07rfgj5y8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '22';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9tgj4g8y4rwy8"></a>9tgj4g8y4rwy8</td><td class='awrnc'><pre_sqltext class="awr">select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr,  NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9x4w27ag2x9tz"></a>9x4w27ag2x9tz</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '12';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="amc2bf2c5axvj"></a>amc2bf2c5axvj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '44';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bbp00h54hyg9h"></a>bbp00h54hyg9h</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '53';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bra280pu141z8"></a>bra280pu141z8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '27';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="btxhvgkudmtmh"></a>btxhvgkudmtmh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bu2cwsvp2u0hx"></a>bu2cwsvp2u0hx</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '77';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cfqgzkaxqzg38"></a>cfqgzkaxqzg38</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '123';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cgymr2xd94y9m"></a>cgymr2xd94y9m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '127';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="chsnzuhv84uy5"></a>chsnzuhv84uy5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '81';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cpwuynd81c18b"></a>cpwuynd81c18b</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '56';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dvky5v8qr4n6s"></a>dvky5v8qr4n6s</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '8';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fvgh1q9dsd479"></a>fvgh1q9dsd479</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '64';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="g5nsjqnj16rfq"></a>g5nsjqnj16rfq</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '109';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>4651</td><td align="right" class='awrc'>57.79</td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>40.44</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>39.83</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">4651</div></td><td align="right" class='awrnc'><div class="hidden">57.79043844438939806787218231359920733218</div></td>
<td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>12.10</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>12.10</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">4651</div></td><td align="right" class='awrc'><div class="hidden">57.79043844438939806787218231359920733218</div></td>
<td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>1.29</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>1.29</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>2745</td><td align="right" class='awrnc'>34.01</td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>12.51</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>12.51</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">2745</div></td><td align="right" class='awrc'><div class="hidden">34.01040376517215754272974981421847906862</div></td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>9.59</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>6.09</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2745</div></td><td align="right" class='awrnc'><div class="hidden">34.01040376517215754272974981421847906862</div></td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>6.99</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>6.99</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>4651</td><td align="right" class='awrc'>57.79</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>55.21</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>39.83</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">4651</div></td><td align="right" class='awrnc'><div class="hidden">57.79043844438939806787218231359920733218</div></td>
<td class='awrnc'>UPDATE STATEMENT</td><td align="right" class='awrnc'>1.70</td><td class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>0.72</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2745</td><td align="right" class='awrc'>34.01</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>28.65</td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>12.51</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2745</div></td><td align="right" class='awrnc'><div class="hidden">34.01040376517215754272974981421847906862</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>5.31</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>3.49</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>57.89</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>57.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>50.02</td><td align="right" class='awrc'>63.71</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>12.51</td><td align="right" class='awrnc'>15.93</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>12.11</td><td align="right" class='awrc'>15.43</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>8.90</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>3.91</td><td align="right" class='awrc'>4.98</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>50.04</td><td align="right" class='awrc'>&quot;2&quot;,&quot;1667&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>12.51</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;77&quot;,&quot;77&quot;</td><td align="right" class='awrnc'>12.15</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>6.99</td><td align="right" class='awrc'>&quot;9&quot;,&quot;124881322&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.02</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>2.48</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;0&quot;,&quot;2147483647&quot;</td><td align="right" class='awrnc'>0.87</td>
<td class='awrnc'>requests</td><td class='awrnc'>interrupt</td><td class='awrnc'>timeout</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>1.57</td><td align="right" class='awrc'>&quot;1&quot;,&quot;44&quot;,&quot;2&quot;</td><td align="right" class='awrc'>0.04</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>10:14:13   (47 secs)</td><td align="right" class='awrc'>779</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>381</td><td align="right" class='awrc'>4.72</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">10:14:13   (47 secs)</div></td><td align="right" class='awrnc'><div class="hidden">779</div></td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>1.11</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">10:14:13   (47 secs)</div></td><td align="right" class='awrc'><div class="hidden">779</div></td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0.88</td></tr>
<tr><td align="right" class='awrnc'>10:15:00   (5.0 min)</td><td align="right" class='awrnc'>4,097</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1,842</td><td align="right" class='awrnc'>22.81</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">10:15:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">4097</div></td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>637</td><td align="right" class='awrc'>7.89</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">10:15:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">4097</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>483</td><td align="right" class='awrnc'>5.98</td></tr>
<tr><td align="right" class='awrc'>10:20:00   (4.8 min)</td><td align="right" class='awrc'>3,198</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,817</td><td align="right" class='awrc'>22.50</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">10:20:00   (4.8 min)</div></td><td align="right" class='awrnc'><div class="hidden">3198</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>456</td><td align="right" class='awrnc'>5.65</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">10:20:00   (4.8 min)</div></td><td align="right" class='awrc'><div class="hidden">3198</div></td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>3.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:3889879926_52</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_52&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 51 to 52.
Time period starts at 12-FEB-20 10.14.13 AM
Time period ends at 12-FEB-20 10.24.48 AM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 72333 seconds.
The average number of active sessions was 113.91.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       113.91 | 100	   1
2  Top SQL Statements	      113.68 | 99.8	   2
3  &quot;User I/O&quot; wait Class	76.83 | 67.45	     0
4  Global Cache Messaging     31.16 | 27.35	   1
5  Buffer Busy - Hot Objects  20.25 | 17.77	   0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 114.09 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 74803 kilo bits per second of interconnect
bandwidth.
1% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 97% for database lock management.
The average latency for 8K interconnect messages was 11554 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.7	     ADDM:3889879926_1_52
    2	    p60sdb2  48.3	     ADDM:3889879926_2_52

   Recommendation 1: Host Configuration
   Estimated benefit is 113.91 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 31.16 active sessions, 27.35% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 31.92 active sessions, 28.02% of total activity.


Finding 2: Top SQL Statements
Impact is 113.86 active sessions, 99.8% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.54	     ADDM:3889879926_1_52
    2	    p60sdb2  48.46	     ADDM:3889879926_2_52

   Recommendation 1: SQL Tuning
   Estimated benefit is 69.32 active sessions, 60.86% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 96% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 62702 times and
      had an average elapsed time of 0.71 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 42.12 active sessions, 36.97% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 355606 times and
      had an average elapsed time of 0.072 seconds.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 76.95 active sessions, 67.45% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  60.72	     ADDM:3889879926_1_52
    2	    p60sdb2  39.28	     ADDM:3889879926_2_52

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 31.21 active sessions, 27.35% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  71.39	     ADDM:3889879926_2_52
    1	    p60sdb1  28.61	     ADDM:3889879926_1_52

   Recommendation 1: Application Analysis
   Estimated benefit is 31.16 active sessions, 27.35% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 58% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 31.92 active sessions, 28.02% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 20.28 active sessions, 17.77% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  100	     ADDM:3889879926_2_52

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 20.25 active sessions, 17.77% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 31.16 active sessions, 27.35% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 31.92 active sessions, 28.02% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  58.99	     51.7
    2	    p60sdb2  mcracpoc2.example.com  55.1	     48.3

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.12-10:25:37 : Compressing file: "awr.html".
NOTIFY  : 2020.02.12-10:25:37 : Compressing file: "awr_rac.html".
